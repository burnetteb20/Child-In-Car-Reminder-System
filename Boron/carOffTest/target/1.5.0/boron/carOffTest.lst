
c:/Users/BryceBurnette/Documents/ParticleProjects/carOffTest/target/1.5.0/boron/carOffTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002944  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d6960  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000098  2003e310  000d6964  0001e310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000448  2003e3a8  2003e3a8  0002e3a8  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d69fc  000d69fc  000269fc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6a24  000d6a24  00026a24  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000c42f0  00000000  00000000  00026a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000e70d  00000000  00000000  000ead18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001cbc8  00000000  00000000  000f9425  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000020f8  00000000  00000000  00115fed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004298  00000000  00000000  001180e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003091c  00000000  00000000  0011c37d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002254c  00000000  00000000  0014cc99  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00103aa2  00000000  00000000  0016f1e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c534  00000000  00000000  00272c88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fa0d 	bl	d644c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fa12 	bl	d6462 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e310 	.word	0x2003e310
   d4048:	000d6964 	.word	0x000d6964
   d404c:	2003e3a8 	.word	0x2003e3a8
   d4050:	2003e3a8 	.word	0x2003e3a8
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f000 fdbd 	bl	d4bd8 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d695c 	.word	0x000d695c
   d4080:	000d6924 	.word	0x000d6924

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b815 	b.w	d40b2 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f845 	bl	d4118 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f000 bd63 	b.w	d4b5c <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 ba9b 	b.w	d45d0 <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 baa1 	b.w	d45e0 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 ba9f 	b.w	d45e0 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <setup>:
float temp[tempReadings] = {75, 75, 75, 75, 75};
//worked

// setup() runs once, when the device is first turned on.
void setup() 
{
   d40b2:	b508      	push	{r3, lr}
  Serial.begin(9600);
   d40b4:	f001 f954 	bl	d5360 <_Z16_fetch_usbserialv>
   d40b8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
}
   d40bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
//worked

// setup() runs once, when the device is first turned on.
void setup() 
{
  Serial.begin(9600);
   d40c0:	f001 b942 	b.w	d5348 <_ZN9USBSerial5beginEl>

000d40c4 <_Z11sendMessageRK6String>:
  }
  delay(2000);
}

void sendMessage(const String& body)            //function that triggers twilio webhook
{
   d40c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d40c6:	4b11      	ldr	r3, [pc, #68]	; (d410c <_Z11sendMessageRK6String+0x48>)
   d40c8:	6802      	ldr	r2, [r0, #0]
   d40ca:	781b      	ldrb	r3, [r3, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40cc:	f88d 3000 	strb.w	r3, [sp]
   d40d0:	490f      	ldr	r1, [pc, #60]	; (d4110 <_Z11sendMessageRK6String+0x4c>)
   d40d2:	233c      	movs	r3, #60	; 0x3c
   d40d4:	a802      	add	r0, sp, #8
   d40d6:	f000 feed 	bl	d4eb4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d40da:	9c03      	ldr	r4, [sp, #12]
   d40dc:	b17c      	cbz	r4, d40fe <_Z11sendMessageRK6String+0x3a>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d40de:	6863      	ldr	r3, [r4, #4]
   d40e0:	3b01      	subs	r3, #1
   d40e2:	6063      	str	r3, [r4, #4]
   d40e4:	b95b      	cbnz	r3, d40fe <_Z11sendMessageRK6String+0x3a>
        {
          _M_dispose();
   d40e6:	6823      	ldr	r3, [r4, #0]
   d40e8:	4620      	mov	r0, r4
   d40ea:	689b      	ldr	r3, [r3, #8]
   d40ec:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d40ee:	68a3      	ldr	r3, [r4, #8]
   d40f0:	3b01      	subs	r3, #1
   d40f2:	60a3      	str	r3, [r4, #8]
   d40f4:	b91b      	cbnz	r3, d40fe <_Z11sendMessageRK6String+0x3a>
            _M_destroy();
   d40f6:	6823      	ldr	r3, [r4, #0]
   d40f8:	4620      	mov	r0, r4
   d40fa:	68db      	ldr	r3, [r3, #12]
   d40fc:	4798      	blx	r3
  Particle.publish("twilio_sms", body, PRIVATE);
  Serial.println("SendingMessage");
   d40fe:	f001 f92f 	bl	d5360 <_Z16_fetch_usbserialv>
   d4102:	4904      	ldr	r1, [pc, #16]	; (d4114 <_Z11sendMessageRK6String+0x50>)
   d4104:	f000 fbc7 	bl	d4896 <_ZN5Print7printlnEPKc>
   d4108:	b004      	add	sp, #16
   d410a:	bd10      	pop	{r4, pc}
   d410c:	2003e3c4 	.word	0x2003e3c4
   d4110:	000d6520 	.word	0x000d6520
   d4114:	000d652b 	.word	0x000d652b

000d4118 <loop>:
  Serial.begin(9600);
}

// loop() runs over and over again, as quickly as it can execute.
void loop() 
{
   d4118:	b510      	push	{r4, lr}
   d411a:	4b5b      	ldr	r3, [pc, #364]	; (d4288 <loop+0x170>)
   d411c:	eddf 7a5b 	vldr	s15, [pc, #364]	; d428c <loop+0x174>
   d4120:	ed2d 8b02 	vpush	{d8}
   d4124:	f103 0214 	add.w	r2, r3, #20
  childTotal = 0;
  for (int thisReading = 0; thisReading <= childReadings - 1; thisReading++) 
  {
    childTotal = childTotal + child[thisReading];
   d4128:	ecb3 7a01 	vldmia	r3!, {s14}

// loop() runs over and over again, as quickly as it can execute.
void loop() 
{
  childTotal = 0;
  for (int thisReading = 0; thisReading <= childReadings - 1; thisReading++) 
   d412c:	4293      	cmp	r3, r2
  {
    childTotal = childTotal + child[thisReading];
   d412e:	ee77 7a87 	vadd.f32	s15, s15, s14

// loop() runs over and over again, as quickly as it can execute.
void loop() 
{
  childTotal = 0;
  for (int thisReading = 0; thisReading <= childReadings - 1; thisReading++) 
   d4132:	d1f9      	bne.n	d4128 <loop+0x10>
  {
    childTotal = childTotal + child[thisReading];
  }
  childAverage = childTotal / childReadings;    //running average
   d4134:	eeb1 8a04 	vmov.f32	s16, #20	; 0x40a00000  5.0
   d4138:	ee87 7a88 	vdiv.f32	s14, s15, s16
   d413c:	4b54      	ldr	r3, [pc, #336]	; (d4290 <loop+0x178>)
   d413e:	4c55      	ldr	r4, [pc, #340]	; (d4294 <loop+0x17c>)
   d4140:	edc3 7a00 	vstr	s15, [r3]
   d4144:	ed84 7a00 	vstr	s14, [r4]

  Serial.print("The child is in the car if the average < 3: ");
   d4148:	f001 f90a 	bl	d5360 <_Z16_fetch_usbserialv>
   d414c:	4952      	ldr	r1, [pc, #328]	; (d4298 <loop+0x180>)
   d414e:	f000 fb8f 	bl	d4870 <_ZN5Print5printEPKc>
  Serial.println(childAverage);
   d4152:	f001 f905 	bl	d5360 <_Z16_fetch_usbserialv>
   d4156:	2102      	movs	r1, #2
   d4158:	ed94 0a00 	vldr	s0, [r4]
   d415c:	f000 fc8f 	bl	d4a7e <_ZN5Print7printlnEfi>

  if (childAverage < 3)                         //if the child is in the seat
   d4160:	ed94 7a00 	vldr	s14, [r4]
   d4164:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
   d4168:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d416c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4170:	f140 8082 	bpl.w	d4278 <loop+0x160>
  {
    Serial.println("child in car");
   d4174:	f001 f8f4 	bl	d5360 <_Z16_fetch_usbserialv>
   d4178:	4948      	ldr	r1, [pc, #288]	; (d429c <loop+0x184>)
   d417a:	f000 fb8c 	bl	d4896 <_ZN5Print7printlnEPKc>

    // Serial.print("the usb array is:  ");
    // Serial.print(usb[0]);
    // Serial.println(usb[1]);

    if (usb[0] == 1 && usb[1] == 0)   //check to see if the car went from on to off
   d417e:	4b48      	ldr	r3, [pc, #288]	; (d42a0 <loop+0x188>)
   d4180:	ed93 7a00 	vldr	s14, [r3]
   d4184:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   d4188:	eeb4 7a67 	vcmp.f32	s14, s15
   d418c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4190:	d10e      	bne.n	d41b0 <loop+0x98>
   d4192:	edd3 7a01 	vldr	s15, [r3, #4]
   d4196:	eef5 7a40 	vcmp.f32	s15, #0.0
   d419a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d419e:	d107      	bne.n	d41b0 <loop+0x98>
    {
      sendMessage(body);
   d41a0:	4840      	ldr	r0, [pc, #256]	; (d42a4 <loop+0x18c>)
   d41a2:	f7ff ff8f 	bl	d40c4 <_Z11sendMessageRK6String>
      Serial.println("Sending message because car turned off and child is in the car");
   d41a6:	f001 f8db 	bl	d5360 <_Z16_fetch_usbserialv>
   d41aa:	493f      	ldr	r1, [pc, #252]	; (d42a8 <loop+0x190>)
   d41ac:	f000 fb73 	bl	d4896 <_ZN5Print7printlnEPKc>
    }

    //check if the temperature is too hot or rising too fast

    if (temp[tempReadings - 1] - temp[0] >= 10)     //if temperature is rising too fast
   d41b0:	4b3e      	ldr	r3, [pc, #248]	; (d42ac <loop+0x194>)
   d41b2:	ed93 7a00 	vldr	s14, [r3]
   d41b6:	edd3 7a04 	vldr	s15, [r3, #16]
   d41ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
   d41be:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d41c2:	eef4 7ac7 	vcmpe.f32	s15, s14
   d41c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d41ca:	db07      	blt.n	d41dc <loop+0xc4>
    {
      sendMessage(body);
   d41cc:	4835      	ldr	r0, [pc, #212]	; (d42a4 <loop+0x18c>)
   d41ce:	f7ff ff79 	bl	d40c4 <_Z11sendMessageRK6String>
      Serial.println("The temperature is rising too fast");
   d41d2:	f001 f8c5 	bl	d5360 <_Z16_fetch_usbserialv>
   d41d6:	4936      	ldr	r1, [pc, #216]	; (d42b0 <loop+0x198>)
   d41d8:	f000 fb5d 	bl	d4896 <_ZN5Print7printlnEPKc>
   d41dc:	4b33      	ldr	r3, [pc, #204]	; (d42ac <loop+0x194>)
  Serial.begin(9600);
}

// loop() runs over and over again, as quickly as it can execute.
void loop() 
{
   d41de:	eddf 7a2b 	vldr	s15, [pc, #172]	; d428c <loop+0x174>
   d41e2:	f103 0214 	add.w	r2, r3, #20

    //average for tester examples
    tempTotal = 0;
    for (int thisReading = 0; thisReading <= tempReadings - 1; thisReading++) 
    {
      tempTotal = tempTotal + temp[thisReading];
   d41e6:	ecb3 7a01 	vldmia	r3!, {s14}
      Serial.println("The temperature is rising too fast");
    }

    //average for tester examples
    tempTotal = 0;
    for (int thisReading = 0; thisReading <= tempReadings - 1; thisReading++) 
   d41ea:	429a      	cmp	r2, r3
    {
      tempTotal = tempTotal + temp[thisReading];
   d41ec:	ee77 7a87 	vadd.f32	s15, s15, s14
      Serial.println("The temperature is rising too fast");
    }

    //average for tester examples
    tempTotal = 0;
    for (int thisReading = 0; thisReading <= tempReadings - 1; thisReading++) 
   d41f0:	d1f9      	bne.n	d41e6 <loop+0xce>
    {
      tempTotal = tempTotal + temp[thisReading];
    }
    tempAverage = tempTotal / tempReadings;       //calculate running average
   d41f2:	ee87 7a88 	vdiv.f32	s14, s15, s16
   d41f6:	4b2f      	ldr	r3, [pc, #188]	; (d42b4 <loop+0x19c>)
   d41f8:	4c2f      	ldr	r4, [pc, #188]	; (d42b8 <loop+0x1a0>)
   d41fa:	edc3 7a00 	vstr	s15, [r3]
    
    // Serial.print("The temp average is:  ");
    // Serial.println(tempAverage);

    if (tempAverage >= 80 && tempAverage < 90)  //if the temp is too hot
   d41fe:	eddf 7a2f 	vldr	s15, [pc, #188]	; d42bc <loop+0x1a4>
    tempTotal = 0;
    for (int thisReading = 0; thisReading <= tempReadings - 1; thisReading++) 
    {
      tempTotal = tempTotal + temp[thisReading];
    }
    tempAverage = tempTotal / tempReadings;       //calculate running average
   d4202:	ed84 7a00 	vstr	s14, [r4]
    
    // Serial.print("The temp average is:  ");
    // Serial.println(tempAverage);

    if (tempAverage >= 80 && tempAverage < 90)  //if the temp is too hot
   d4206:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d420a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d420e:	ed9f 8a2c 	vldr	s16, [pc, #176]	; d42c0 <loop+0x1a8>
   d4212:	db0c      	blt.n	d422e <loop+0x116>
   d4214:	eeb4 7ac8 	vcmpe.f32	s14, s16
   d4218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d421c:	d507      	bpl.n	d422e <loop+0x116>
    {
      sendMessage(body);
   d421e:	4821      	ldr	r0, [pc, #132]	; (d42a4 <loop+0x18c>)
   d4220:	f7ff ff50 	bl	d40c4 <_Z11sendMessageRK6String>
      Serial.println("Sending message because temperature is too hot");
   d4224:	f001 f89c 	bl	d5360 <_Z16_fetch_usbserialv>
   d4228:	4926      	ldr	r1, [pc, #152]	; (d42c4 <loop+0x1ac>)
   d422a:	f000 fb34 	bl	d4896 <_ZN5Print7printlnEPKc>
    }

    if (tempAverage >= 90 && tempAverage < 100) //if the temp is way too hot
   d422e:	edd4 7a00 	vldr	s15, [r4]
   d4232:	eef4 7ac8 	vcmpe.f32	s15, s16
   d4236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d423a:	ed9f 8a23 	vldr	s16, [pc, #140]	; d42c8 <loop+0x1b0>
   d423e:	db0c      	blt.n	d425a <loop+0x142>
   d4240:	eef4 7ac8 	vcmpe.f32	s15, s16
   d4244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4248:	d507      	bpl.n	d425a <loop+0x142>
    {
      sendMessage(body);
   d424a:	4816      	ldr	r0, [pc, #88]	; (d42a4 <loop+0x18c>)
   d424c:	f7ff ff3a 	bl	d40c4 <_Z11sendMessageRK6String>
      Serial.println("Sending message because temp is critical");
   d4250:	f001 f886 	bl	d5360 <_Z16_fetch_usbserialv>
   d4254:	491d      	ldr	r1, [pc, #116]	; (d42cc <loop+0x1b4>)
   d4256:	f000 fb1e 	bl	d4896 <_ZN5Print7printlnEPKc>
    }

    if (tempAverage >= 100)
   d425a:	edd4 7a00 	vldr	s15, [r4]
   d425e:	eef4 7ac8 	vcmpe.f32	s15, s16
   d4262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4266:	db07      	blt.n	d4278 <loop+0x160>
    {
      sendMessage(body);
   d4268:	480e      	ldr	r0, [pc, #56]	; (d42a4 <loop+0x18c>)
   d426a:	f7ff ff2b 	bl	d40c4 <_Z11sendMessageRK6String>
      Serial.println("Sending message because temp is critical");
   d426e:	f001 f877 	bl	d5360 <_Z16_fetch_usbserialv>
   d4272:	4916      	ldr	r1, [pc, #88]	; (d42cc <loop+0x1b4>)
   d4274:	f000 fb0f 	bl	d4896 <_ZN5Print7printlnEPKc>
    }
  }
  delay(2000);
}
   d4278:	ecbd 8b02 	vpop	{d8}
    {
      sendMessage(body);
      Serial.println("Sending message because temp is critical");
    }
  }
  delay(2000);
   d427c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
}
   d4280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      sendMessage(body);
      Serial.println("Sending message because temp is critical");
    }
  }
  delay(2000);
   d4284:	f000 bc1c 	b.w	d4ac0 <delay>
   d4288:	2003e318 	.word	0x2003e318
   d428c:	00000000 	.word	0x00000000
   d4290:	2003e3bc 	.word	0x2003e3bc
   d4294:	2003e3cc 	.word	0x2003e3cc
   d4298:	000d653a 	.word	0x000d653a
   d429c:	000d6567 	.word	0x000d6567
   d42a0:	2003e310 	.word	0x2003e310
   d42a4:	2003e3ac 	.word	0x2003e3ac
   d42a8:	000d6574 	.word	0x000d6574
   d42ac:	2003e32c 	.word	0x2003e32c
   d42b0:	000d65b3 	.word	0x000d65b3
   d42b4:	2003e3c0 	.word	0x2003e3c0
   d42b8:	2003e3c8 	.word	0x2003e3c8
   d42bc:	42a00000 	.word	0x42a00000
   d42c0:	42b40000 	.word	0x42b40000
   d42c4:	000d65d6 	.word	0x000d65d6
   d42c8:	42c80000 	.word	0x42c80000
   d42cc:	000d6605 	.word	0x000d6605

000d42d0 <_GLOBAL__sub_I_body>:

void sendMessage(const String& body)            //function that triggers twilio webhook
{
  Particle.publish("twilio_sms", body, PRIVATE);
  Serial.println("SendingMessage");
   d42d0:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d42d2:	4b08      	ldr	r3, [pc, #32]	; (d42f4 <_GLOBAL__sub_I_body+0x24>)
 * Description:
 * Author:
 * Date:
*/

String body = "Your child is in the car";  //body of SMS message to send
   d42d4:	4c08      	ldr	r4, [pc, #32]	; (d42f8 <_GLOBAL__sub_I_body+0x28>)
   d42d6:	2201      	movs	r2, #1
   d42d8:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d42da:	f000 f825 	bl	d4328 <HAL_Pin_Map>
   d42de:	4907      	ldr	r1, [pc, #28]	; (d42fc <_GLOBAL__sub_I_body+0x2c>)
   d42e0:	4620      	mov	r0, r4
   d42e2:	f000 fa4c 	bl	d477e <_ZN6StringC1EPK19__FlashStringHelper>
   d42e6:	4620      	mov	r0, r4
   d42e8:	4a05      	ldr	r2, [pc, #20]	; (d4300 <_GLOBAL__sub_I_body+0x30>)
   d42ea:	4906      	ldr	r1, [pc, #24]	; (d4304 <_GLOBAL__sub_I_body+0x34>)

void sendMessage(const String& body)            //function that triggers twilio webhook
{
  Particle.publish("twilio_sms", body, PRIVATE);
  Serial.println("SendingMessage");
   d42ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 * Description:
 * Author:
 * Date:
*/

String body = "Your child is in the car";  //body of SMS message to send
   d42f0:	f001 ba9c 	b.w	d582c <__aeabi_atexit>
   d42f4:	2003e3c4 	.word	0x2003e3c4
   d42f8:	2003e3ac 	.word	0x2003e3ac
   d42fc:	000d662e 	.word	0x000d662e
   d4300:	2003e3a8 	.word	0x2003e3a8
   d4304:	000d46f1 	.word	0x000d46f1

000d4308 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4308:	b508      	push	{r3, lr}
   d430a:	4b02      	ldr	r3, [pc, #8]	; (d4314 <netdb_freeaddrinfo+0xc>)
   d430c:	681b      	ldr	r3, [r3, #0]
   d430e:	689b      	ldr	r3, [r3, #8]
   d4310:	9301      	str	r3, [sp, #4]
   d4312:	bd08      	pop	{r3, pc}
   d4314:	00030268 	.word	0x00030268

000d4318 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4318:	b508      	push	{r3, lr}
   d431a:	4b02      	ldr	r3, [pc, #8]	; (d4324 <netdb_getaddrinfo+0xc>)
   d431c:	681b      	ldr	r3, [r3, #0]
   d431e:	68db      	ldr	r3, [r3, #12]
   d4320:	9301      	str	r3, [sp, #4]
   d4322:	bd08      	pop	{r3, pc}
   d4324:	00030268 	.word	0x00030268

000d4328 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4328:	b508      	push	{r3, lr}
   d432a:	4b02      	ldr	r3, [pc, #8]	; (d4334 <HAL_Pin_Map+0xc>)
   d432c:	681b      	ldr	r3, [r3, #0]
   d432e:	681b      	ldr	r3, [r3, #0]
   d4330:	9301      	str	r3, [sp, #4]
   d4332:	bd08      	pop	{r3, pc}
   d4334:	0003022c 	.word	0x0003022c

000d4338 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4338:	b508      	push	{r3, lr}
   d433a:	4b02      	ldr	r3, [pc, #8]	; (d4344 <HAL_RNG_GetRandomNumber+0xc>)
   d433c:	681b      	ldr	r3, [r3, #0]
   d433e:	685b      	ldr	r3, [r3, #4]
   d4340:	9301      	str	r3, [sp, #4]
   d4342:	bd08      	pop	{r3, pc}
   d4344:	00030218 	.word	0x00030218

000d4348 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4348:	b508      	push	{r3, lr}
   d434a:	4b02      	ldr	r3, [pc, #8]	; (d4354 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d434c:	681b      	ldr	r3, [r3, #0]
   d434e:	695b      	ldr	r3, [r3, #20]
   d4350:	9301      	str	r3, [sp, #4]
   d4352:	bd08      	pop	{r3, pc}
   d4354:	00030218 	.word	0x00030218

000d4358 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4358:	b508      	push	{r3, lr}
   d435a:	4b02      	ldr	r3, [pc, #8]	; (d4364 <os_thread_is_current+0xc>)
   d435c:	681b      	ldr	r3, [r3, #0]
   d435e:	689b      	ldr	r3, [r3, #8]
   d4360:	9301      	str	r3, [sp, #4]
   d4362:	bd08      	pop	{r3, pc}
   d4364:	00030248 	.word	0x00030248

000d4368 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4368:	b508      	push	{r3, lr}
   d436a:	4b02      	ldr	r3, [pc, #8]	; (d4374 <os_thread_join+0xc>)
   d436c:	681b      	ldr	r3, [r3, #0]
   d436e:	691b      	ldr	r3, [r3, #16]
   d4370:	9301      	str	r3, [sp, #4]
   d4372:	bd08      	pop	{r3, pc}
   d4374:	00030248 	.word	0x00030248

000d4378 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4378:	b508      	push	{r3, lr}
   d437a:	4b02      	ldr	r3, [pc, #8]	; (d4384 <os_thread_cleanup+0xc>)
   d437c:	681b      	ldr	r3, [r3, #0]
   d437e:	695b      	ldr	r3, [r3, #20]
   d4380:	9301      	str	r3, [sp, #4]
   d4382:	bd08      	pop	{r3, pc}
   d4384:	00030248 	.word	0x00030248

000d4388 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4388:	b508      	push	{r3, lr}
   d438a:	4b02      	ldr	r3, [pc, #8]	; (d4394 <os_mutex_recursive_create+0xc>)
   d438c:	681b      	ldr	r3, [r3, #0]
   d438e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4390:	9301      	str	r3, [sp, #4]
   d4392:	bd08      	pop	{r3, pc}
   d4394:	00030248 	.word	0x00030248

000d4398 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4398:	b508      	push	{r3, lr}
   d439a:	4b02      	ldr	r3, [pc, #8]	; (d43a4 <os_mutex_recursive_destroy+0xc>)
   d439c:	681b      	ldr	r3, [r3, #0]
   d439e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d43a0:	9301      	str	r3, [sp, #4]
   d43a2:	bd08      	pop	{r3, pc}
   d43a4:	00030248 	.word	0x00030248

000d43a8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d43a8:	b508      	push	{r3, lr}
   d43aa:	4b02      	ldr	r3, [pc, #8]	; (d43b4 <inet_inet_ntop+0xc>)
   d43ac:	681b      	ldr	r3, [r3, #0]
   d43ae:	695b      	ldr	r3, [r3, #20]
   d43b0:	9301      	str	r3, [sp, #4]
   d43b2:	bd08      	pop	{r3, pc}
   d43b4:	00030264 	.word	0x00030264

000d43b8 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d43b8:	b508      	push	{r3, lr}
   d43ba:	4b02      	ldr	r3, [pc, #8]	; (d43c4 <HAL_USART_Init+0xc>)
   d43bc:	681b      	ldr	r3, [r3, #0]
   d43be:	681b      	ldr	r3, [r3, #0]
   d43c0:	9301      	str	r3, [sp, #4]
   d43c2:	bd08      	pop	{r3, pc}
   d43c4:	0003023c 	.word	0x0003023c

000d43c8 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d43c8:	b508      	push	{r3, lr}
   d43ca:	4b02      	ldr	r3, [pc, #8]	; (d43d4 <HAL_USART_Write_Data+0xc>)
   d43cc:	681b      	ldr	r3, [r3, #0]
   d43ce:	68db      	ldr	r3, [r3, #12]
   d43d0:	9301      	str	r3, [sp, #4]
   d43d2:	bd08      	pop	{r3, pc}
   d43d4:	0003023c 	.word	0x0003023c

000d43d8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d43d8:	b508      	push	{r3, lr}
   d43da:	4b02      	ldr	r3, [pc, #8]	; (d43e4 <HAL_USART_Available_Data+0xc>)
   d43dc:	681b      	ldr	r3, [r3, #0]
   d43de:	691b      	ldr	r3, [r3, #16]
   d43e0:	9301      	str	r3, [sp, #4]
   d43e2:	bd08      	pop	{r3, pc}
   d43e4:	0003023c 	.word	0x0003023c

000d43e8 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d43e8:	b508      	push	{r3, lr}
   d43ea:	4b02      	ldr	r3, [pc, #8]	; (d43f4 <HAL_USART_Read_Data+0xc>)
   d43ec:	681b      	ldr	r3, [r3, #0]
   d43ee:	695b      	ldr	r3, [r3, #20]
   d43f0:	9301      	str	r3, [sp, #4]
   d43f2:	bd08      	pop	{r3, pc}
   d43f4:	0003023c 	.word	0x0003023c

000d43f8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d43f8:	b508      	push	{r3, lr}
   d43fa:	4b02      	ldr	r3, [pc, #8]	; (d4404 <HAL_USART_Peek_Data+0xc>)
   d43fc:	681b      	ldr	r3, [r3, #0]
   d43fe:	699b      	ldr	r3, [r3, #24]
   d4400:	9301      	str	r3, [sp, #4]
   d4402:	bd08      	pop	{r3, pc}
   d4404:	0003023c 	.word	0x0003023c

000d4408 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4408:	b508      	push	{r3, lr}
   d440a:	4b02      	ldr	r3, [pc, #8]	; (d4414 <HAL_USART_Flush_Data+0xc>)
   d440c:	681b      	ldr	r3, [r3, #0]
   d440e:	69db      	ldr	r3, [r3, #28]
   d4410:	9301      	str	r3, [sp, #4]
   d4412:	bd08      	pop	{r3, pc}
   d4414:	0003023c 	.word	0x0003023c

000d4418 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4418:	b508      	push	{r3, lr}
   d441a:	4b02      	ldr	r3, [pc, #8]	; (d4424 <HAL_USART_Available_Data_For_Write+0xc>)
   d441c:	681b      	ldr	r3, [r3, #0]
   d441e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4420:	9301      	str	r3, [sp, #4]
   d4422:	bd08      	pop	{r3, pc}
   d4424:	0003023c 	.word	0x0003023c

000d4428 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4428:	b508      	push	{r3, lr}
   d442a:	4b02      	ldr	r3, [pc, #8]	; (d4434 <HAL_USB_USART_Init+0xc>)
   d442c:	681b      	ldr	r3, [r3, #0]
   d442e:	681b      	ldr	r3, [r3, #0]
   d4430:	9301      	str	r3, [sp, #4]
   d4432:	bd08      	pop	{r3, pc}
   d4434:	0003024c 	.word	0x0003024c

000d4438 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4438:	b508      	push	{r3, lr}
   d443a:	4b02      	ldr	r3, [pc, #8]	; (d4444 <HAL_USB_USART_Begin+0xc>)
   d443c:	681b      	ldr	r3, [r3, #0]
   d443e:	685b      	ldr	r3, [r3, #4]
   d4440:	9301      	str	r3, [sp, #4]
   d4442:	bd08      	pop	{r3, pc}
   d4444:	0003024c 	.word	0x0003024c

000d4448 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4448:	b508      	push	{r3, lr}
   d444a:	4b02      	ldr	r3, [pc, #8]	; (d4454 <HAL_USB_USART_Available_Data+0xc>)
   d444c:	681b      	ldr	r3, [r3, #0]
   d444e:	691b      	ldr	r3, [r3, #16]
   d4450:	9301      	str	r3, [sp, #4]
   d4452:	bd08      	pop	{r3, pc}
   d4454:	0003024c 	.word	0x0003024c

000d4458 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4458:	b508      	push	{r3, lr}
   d445a:	4b02      	ldr	r3, [pc, #8]	; (d4464 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d445c:	681b      	ldr	r3, [r3, #0]
   d445e:	695b      	ldr	r3, [r3, #20]
   d4460:	9301      	str	r3, [sp, #4]
   d4462:	bd08      	pop	{r3, pc}
   d4464:	0003024c 	.word	0x0003024c

000d4468 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4468:	b508      	push	{r3, lr}
   d446a:	4b02      	ldr	r3, [pc, #8]	; (d4474 <HAL_USB_USART_Receive_Data+0xc>)
   d446c:	681b      	ldr	r3, [r3, #0]
   d446e:	699b      	ldr	r3, [r3, #24]
   d4470:	9301      	str	r3, [sp, #4]
   d4472:	bd08      	pop	{r3, pc}
   d4474:	0003024c 	.word	0x0003024c

000d4478 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4478:	b508      	push	{r3, lr}
   d447a:	4b02      	ldr	r3, [pc, #8]	; (d4484 <HAL_USB_USART_Send_Data+0xc>)
   d447c:	681b      	ldr	r3, [r3, #0]
   d447e:	69db      	ldr	r3, [r3, #28]
   d4480:	9301      	str	r3, [sp, #4]
   d4482:	bd08      	pop	{r3, pc}
   d4484:	0003024c 	.word	0x0003024c

000d4488 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4488:	b508      	push	{r3, lr}
   d448a:	4b02      	ldr	r3, [pc, #8]	; (d4494 <HAL_USB_USART_Flush_Data+0xc>)
   d448c:	681b      	ldr	r3, [r3, #0]
   d448e:	6a1b      	ldr	r3, [r3, #32]
   d4490:	9301      	str	r3, [sp, #4]
   d4492:	bd08      	pop	{r3, pc}
   d4494:	0003024c 	.word	0x0003024c

000d4498 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4498:	b508      	push	{r3, lr}
   d449a:	4b02      	ldr	r3, [pc, #8]	; (d44a4 <set_system_mode+0xc>)
   d449c:	681b      	ldr	r3, [r3, #0]
   d449e:	685b      	ldr	r3, [r3, #4]
   d44a0:	9301      	str	r3, [sp, #4]
   d44a2:	bd08      	pop	{r3, pc}
   d44a4:	00030220 	.word	0x00030220

000d44a8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d44a8:	b508      	push	{r3, lr}
   d44aa:	4b02      	ldr	r3, [pc, #8]	; (d44b4 <system_delay_ms+0xc>)
   d44ac:	681b      	ldr	r3, [r3, #0]
   d44ae:	695b      	ldr	r3, [r3, #20]
   d44b0:	9301      	str	r3, [sp, #4]
   d44b2:	bd08      	pop	{r3, pc}
   d44b4:	00030220 	.word	0x00030220

000d44b8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d44b8:	b508      	push	{r3, lr}
   d44ba:	4b02      	ldr	r3, [pc, #8]	; (d44c4 <application_thread_current+0xc>)
   d44bc:	681b      	ldr	r3, [r3, #0]
   d44be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d44c0:	9301      	str	r3, [sp, #4]
   d44c2:	bd08      	pop	{r3, pc}
   d44c4:	00030220 	.word	0x00030220

000d44c8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d44c8:	b508      	push	{r3, lr}
   d44ca:	4b02      	ldr	r3, [pc, #8]	; (d44d4 <application_thread_invoke+0xc>)
   d44cc:	681b      	ldr	r3, [r3, #0]
   d44ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d44d0:	9301      	str	r3, [sp, #4]
   d44d2:	bd08      	pop	{r3, pc}
   d44d4:	00030220 	.word	0x00030220

000d44d8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d44d8:	b508      	push	{r3, lr}
   d44da:	4b03      	ldr	r3, [pc, #12]	; (d44e8 <system_ctrl_set_app_request_handler+0x10>)
   d44dc:	681b      	ldr	r3, [r3, #0]
   d44de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d44e2:	9301      	str	r3, [sp, #4]
   d44e4:	bd08      	pop	{r3, pc}
   d44e6:	0000      	.short	0x0000
   d44e8:	00030220 	.word	0x00030220

000d44ec <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d44ec:	b508      	push	{r3, lr}
   d44ee:	4b03      	ldr	r3, [pc, #12]	; (d44fc <system_ctrl_set_result+0x10>)
   d44f0:	681b      	ldr	r3, [r3, #0]
   d44f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d44f6:	9301      	str	r3, [sp, #4]
   d44f8:	bd08      	pop	{r3, pc}
   d44fa:	0000      	.short	0x0000
   d44fc:	00030220 	.word	0x00030220

000d4500 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4500:	b508      	push	{r3, lr}
   d4502:	4b02      	ldr	r3, [pc, #8]	; (d450c <network_connect+0xc>)
   d4504:	681b      	ldr	r3, [r3, #0]
   d4506:	685b      	ldr	r3, [r3, #4]
   d4508:	9301      	str	r3, [sp, #4]
   d450a:	bd08      	pop	{r3, pc}
   d450c:	00030240 	.word	0x00030240

000d4510 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4510:	b508      	push	{r3, lr}
   d4512:	4b02      	ldr	r3, [pc, #8]	; (d451c <network_connecting+0xc>)
   d4514:	681b      	ldr	r3, [r3, #0]
   d4516:	689b      	ldr	r3, [r3, #8]
   d4518:	9301      	str	r3, [sp, #4]
   d451a:	bd08      	pop	{r3, pc}
   d451c:	00030240 	.word	0x00030240

000d4520 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4520:	b508      	push	{r3, lr}
   d4522:	4b02      	ldr	r3, [pc, #8]	; (d452c <network_disconnect+0xc>)
   d4524:	681b      	ldr	r3, [r3, #0]
   d4526:	68db      	ldr	r3, [r3, #12]
   d4528:	9301      	str	r3, [sp, #4]
   d452a:	bd08      	pop	{r3, pc}
   d452c:	00030240 	.word	0x00030240

000d4530 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4530:	b508      	push	{r3, lr}
   d4532:	4b02      	ldr	r3, [pc, #8]	; (d453c <network_ready+0xc>)
   d4534:	681b      	ldr	r3, [r3, #0]
   d4536:	691b      	ldr	r3, [r3, #16]
   d4538:	9301      	str	r3, [sp, #4]
   d453a:	bd08      	pop	{r3, pc}
   d453c:	00030240 	.word	0x00030240

000d4540 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4540:	b508      	push	{r3, lr}
   d4542:	4b02      	ldr	r3, [pc, #8]	; (d454c <network_on+0xc>)
   d4544:	681b      	ldr	r3, [r3, #0]
   d4546:	695b      	ldr	r3, [r3, #20]
   d4548:	9301      	str	r3, [sp, #4]
   d454a:	bd08      	pop	{r3, pc}
   d454c:	00030240 	.word	0x00030240

000d4550 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4550:	b508      	push	{r3, lr}
   d4552:	4b02      	ldr	r3, [pc, #8]	; (d455c <network_off+0xc>)
   d4554:	681b      	ldr	r3, [r3, #0]
   d4556:	699b      	ldr	r3, [r3, #24]
   d4558:	9301      	str	r3, [sp, #4]
   d455a:	bd08      	pop	{r3, pc}
   d455c:	00030240 	.word	0x00030240

000d4560 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4560:	b508      	push	{r3, lr}
   d4562:	4b02      	ldr	r3, [pc, #8]	; (d456c <network_listen+0xc>)
   d4564:	681b      	ldr	r3, [r3, #0]
   d4566:	69db      	ldr	r3, [r3, #28]
   d4568:	9301      	str	r3, [sp, #4]
   d456a:	bd08      	pop	{r3, pc}
   d456c:	00030240 	.word	0x00030240

000d4570 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4570:	b508      	push	{r3, lr}
   d4572:	4b02      	ldr	r3, [pc, #8]	; (d457c <network_listening+0xc>)
   d4574:	681b      	ldr	r3, [r3, #0]
   d4576:	6a1b      	ldr	r3, [r3, #32]
   d4578:	9301      	str	r3, [sp, #4]
   d457a:	bd08      	pop	{r3, pc}
   d457c:	00030240 	.word	0x00030240

000d4580 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4580:	b508      	push	{r3, lr}
   d4582:	4b02      	ldr	r3, [pc, #8]	; (d458c <network_set_listen_timeout+0xc>)
   d4584:	681b      	ldr	r3, [r3, #0]
   d4586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4588:	9301      	str	r3, [sp, #4]
   d458a:	bd08      	pop	{r3, pc}
   d458c:	00030240 	.word	0x00030240

000d4590 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4590:	b508      	push	{r3, lr}
   d4592:	4b02      	ldr	r3, [pc, #8]	; (d459c <network_get_listen_timeout+0xc>)
   d4594:	681b      	ldr	r3, [r3, #0]
   d4596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4598:	9301      	str	r3, [sp, #4]
   d459a:	bd08      	pop	{r3, pc}
   d459c:	00030240 	.word	0x00030240

000d45a0 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d45a0:	b508      	push	{r3, lr}
   d45a2:	4b02      	ldr	r3, [pc, #8]	; (d45ac <spark_cloud_flag_connected+0xc>)
   d45a4:	681b      	ldr	r3, [r3, #0]
   d45a6:	695b      	ldr	r3, [r3, #20]
   d45a8:	9301      	str	r3, [sp, #4]
   d45aa:	bd08      	pop	{r3, pc}
   d45ac:	00030244 	.word	0x00030244

000d45b0 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d45b0:	b508      	push	{r3, lr}
   d45b2:	4b02      	ldr	r3, [pc, #8]	; (d45bc <spark_send_event+0xc>)
   d45b4:	681b      	ldr	r3, [r3, #0]
   d45b6:	6a1b      	ldr	r3, [r3, #32]
   d45b8:	9301      	str	r3, [sp, #4]
   d45ba:	bd08      	pop	{r3, pc}
   d45bc:	00030244 	.word	0x00030244

000d45c0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d45c0:	b508      	push	{r3, lr}
   d45c2:	4b02      	ldr	r3, [pc, #8]	; (d45cc <spark_set_random_seed_from_cloud_handler+0xc>)
   d45c4:	681b      	ldr	r3, [r3, #0]
   d45c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d45c8:	9301      	str	r3, [sp, #4]
   d45ca:	bd08      	pop	{r3, pc}
   d45cc:	00030244 	.word	0x00030244

000d45d0 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d45d0:	b508      	push	{r3, lr}
   d45d2:	4b02      	ldr	r3, [pc, #8]	; (d45dc <malloc+0xc>)
   d45d4:	681b      	ldr	r3, [r3, #0]
   d45d6:	681b      	ldr	r3, [r3, #0]
   d45d8:	9301      	str	r3, [sp, #4]
   d45da:	bd08      	pop	{r3, pc}
   d45dc:	0003021c 	.word	0x0003021c

000d45e0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d45e0:	b508      	push	{r3, lr}
   d45e2:	4b02      	ldr	r3, [pc, #8]	; (d45ec <free+0xc>)
   d45e4:	681b      	ldr	r3, [r3, #0]
   d45e6:	685b      	ldr	r3, [r3, #4]
   d45e8:	9301      	str	r3, [sp, #4]
   d45ea:	bd08      	pop	{r3, pc}
   d45ec:	0003021c 	.word	0x0003021c

000d45f0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d45f0:	b508      	push	{r3, lr}
   d45f2:	4b02      	ldr	r3, [pc, #8]	; (d45fc <realloc+0xc>)
   d45f4:	681b      	ldr	r3, [r3, #0]
   d45f6:	689b      	ldr	r3, [r3, #8]
   d45f8:	9301      	str	r3, [sp, #4]
   d45fa:	bd08      	pop	{r3, pc}
   d45fc:	0003021c 	.word	0x0003021c

000d4600 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4600:	b508      	push	{r3, lr}
   d4602:	4b02      	ldr	r3, [pc, #8]	; (d460c <abort+0xc>)
   d4604:	681b      	ldr	r3, [r3, #0]
   d4606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4608:	9301      	str	r3, [sp, #4]
   d460a:	bd08      	pop	{r3, pc}
   d460c:	0003021c 	.word	0x0003021c

000d4610 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4610:	b508      	push	{r3, lr}
   d4612:	4b02      	ldr	r3, [pc, #8]	; (d461c <_malloc_r+0xc>)
   d4614:	681b      	ldr	r3, [r3, #0]
   d4616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4618:	9301      	str	r3, [sp, #4]
   d461a:	bd08      	pop	{r3, pc}
   d461c:	0003021c 	.word	0x0003021c

000d4620 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4620:	2200      	movs	r2, #0
   d4622:	4611      	mov	r1, r2
   d4624:	6840      	ldr	r0, [r0, #4]
   d4626:	f7ff bfa3 	b.w	d4570 <network_listening>

000d462a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d462a:	2200      	movs	r2, #0
   d462c:	4611      	mov	r1, r2
   d462e:	6840      	ldr	r0, [r0, #4]
   d4630:	f7ff bfae 	b.w	d4590 <network_get_listen_timeout>

000d4634 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4634:	2200      	movs	r2, #0
   d4636:	6840      	ldr	r0, [r0, #4]
   d4638:	f7ff bfa2 	b.w	d4580 <network_set_listen_timeout>

000d463c <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d463c:	2200      	movs	r2, #0
   d463e:	f081 0101 	eor.w	r1, r1, #1
   d4642:	6840      	ldr	r0, [r0, #4]
   d4644:	f7ff bf8c 	b.w	d4560 <network_listen>

000d4648 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4648:	2300      	movs	r3, #0
   d464a:	461a      	mov	r2, r3
   d464c:	4619      	mov	r1, r3
   d464e:	6840      	ldr	r0, [r0, #4]
   d4650:	f7ff bf7e 	b.w	d4550 <network_off>

000d4654 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4654:	2300      	movs	r3, #0
   d4656:	461a      	mov	r2, r3
   d4658:	4619      	mov	r1, r3
   d465a:	6840      	ldr	r0, [r0, #4]
   d465c:	f7ff bf70 	b.w	d4540 <network_on>

000d4660 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4660:	2200      	movs	r2, #0
   d4662:	4611      	mov	r1, r2
   d4664:	6840      	ldr	r0, [r0, #4]
   d4666:	f7ff bf63 	b.w	d4530 <network_ready>

000d466a <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d466a:	2200      	movs	r2, #0
   d466c:	4611      	mov	r1, r2
   d466e:	6840      	ldr	r0, [r0, #4]
   d4670:	f7ff bf4e 	b.w	d4510 <network_connecting>

000d4674 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4674:	2200      	movs	r2, #0
   d4676:	2102      	movs	r1, #2
   d4678:	6840      	ldr	r0, [r0, #4]
   d467a:	f7ff bf51 	b.w	d4520 <network_disconnect>

000d467e <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d467e:	2300      	movs	r3, #0
   d4680:	461a      	mov	r2, r3
   d4682:	6840      	ldr	r0, [r0, #4]
   d4684:	f7ff bf3c 	b.w	d4500 <network_connect>

000d4688 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4688:	4b02      	ldr	r3, [pc, #8]	; (d4694 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d468a:	2203      	movs	r2, #3
   d468c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d468e:	4a02      	ldr	r2, [pc, #8]	; (d4698 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4690:	601a      	str	r2, [r3, #0]
   d4692:	4770      	bx	lr
   d4694:	2003e3d0 	.word	0x2003e3d0
   d4698:	000d6650 	.word	0x000d6650

000d469c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d469c:	b510      	push	{r4, lr}
   d469e:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d46a0:	6800      	ldr	r0, [r0, #0]
   d46a2:	b118      	cbz	r0, d46ac <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d46a4:	f7ff ff9c 	bl	d45e0 <free>
            wakeupSource_ = nullptr;
   d46a8:	2300      	movs	r3, #0
   d46aa:	6023      	str	r3, [r4, #0]
   d46ac:	bd10      	pop	{r4, pc}

000d46ae <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d46ae:	b510      	push	{r4, lr}
   d46b0:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d46b2:	f7ff fff3 	bl	d469c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d46b6:	4620      	mov	r0, r4
   d46b8:	bd10      	pop	{r4, pc}
	...

000d46bc <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d46bc:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d46be:	4c09      	ldr	r4, [pc, #36]	; (d46e4 <_GLOBAL__sub_I_System+0x28>)
   d46c0:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d46c2:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d46c6:	6020      	str	r0, [r4, #0]
   d46c8:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d46ca:	71a0      	strb	r0, [r4, #6]
   d46cc:	8120      	strh	r0, [r4, #8]
   d46ce:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d46d0:	f7ff fee2 	bl	d4498 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d46d4:	4620      	mov	r0, r4
   d46d6:	4a04      	ldr	r2, [pc, #16]	; (d46e8 <_GLOBAL__sub_I_System+0x2c>)
   d46d8:	4904      	ldr	r1, [pc, #16]	; (d46ec <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d46da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d46de:	f001 b8a5 	b.w	d582c <__aeabi_atexit>
   d46e2:	bf00      	nop
   d46e4:	2003e3d8 	.word	0x2003e3d8
   d46e8:	2003e3a8 	.word	0x2003e3a8
   d46ec:	000d46af 	.word	0x000d46af

000d46f0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d46f0:	b510      	push	{r4, lr}
   d46f2:	4604      	mov	r4, r0
{
	free(buffer);
   d46f4:	6800      	ldr	r0, [r0, #0]
   d46f6:	f7ff ff73 	bl	d45e0 <free>
}
   d46fa:	4620      	mov	r0, r4
   d46fc:	bd10      	pop	{r4, pc}

000d46fe <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d46fe:	b510      	push	{r4, lr}
   d4700:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4702:	6800      	ldr	r0, [r0, #0]
   d4704:	b108      	cbz	r0, d470a <_ZN6String10invalidateEv+0xc>
   d4706:	f7ff ff6b 	bl	d45e0 <free>
	buffer = NULL;
   d470a:	2300      	movs	r3, #0
   d470c:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d470e:	60a3      	str	r3, [r4, #8]
   d4710:	6063      	str	r3, [r4, #4]
   d4712:	bd10      	pop	{r4, pc}

000d4714 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4714:	b538      	push	{r3, r4, r5, lr}
   d4716:	4604      	mov	r4, r0
   d4718:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d471a:	6800      	ldr	r0, [r0, #0]
   d471c:	3101      	adds	r1, #1
   d471e:	f7ff ff67 	bl	d45f0 <realloc>
	if (newbuffer) {
   d4722:	b110      	cbz	r0, d472a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4724:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d4728:	2001      	movs	r0, #1
	}
	return 0;
}
   d472a:	bd38      	pop	{r3, r4, r5, pc}

000d472c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d472c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d472e:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4730:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4732:	b113      	cbz	r3, d473a <_ZN6String7reserveEj+0xe>
   d4734:	6843      	ldr	r3, [r0, #4]
   d4736:	428b      	cmp	r3, r1
   d4738:	d207      	bcs.n	d474a <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d473a:	4620      	mov	r0, r4
   d473c:	f7ff ffea 	bl	d4714 <_ZN6String12changeBufferEj>
   d4740:	b120      	cbz	r0, d474c <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d4742:	68a3      	ldr	r3, [r4, #8]
   d4744:	b90b      	cbnz	r3, d474a <_ZN6String7reserveEj+0x1e>
   d4746:	6822      	ldr	r2, [r4, #0]
   d4748:	7013      	strb	r3, [r2, #0]
   d474a:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d474c:	bd10      	pop	{r4, pc}

000d474e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d474e:	b570      	push	{r4, r5, r6, lr}
   d4750:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d4752:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4754:	4604      	mov	r4, r0
   d4756:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d4758:	f7ff ffe8 	bl	d472c <_ZN6String7reserveEj>
   d475c:	b918      	cbnz	r0, d4766 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d475e:	4620      	mov	r0, r4
   d4760:	f7ff ffcd 	bl	d46fe <_ZN6String10invalidateEv>
		return *this;
   d4764:	e009      	b.n	d477a <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d4766:	462a      	mov	r2, r5
   d4768:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d476a:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d476c:	6820      	ldr	r0, [r4, #0]
   d476e:	f001 fe6d 	bl	d644c <memcpy>
	buffer[len] = 0;
   d4772:	6822      	ldr	r2, [r4, #0]
   d4774:	68a3      	ldr	r3, [r4, #8]
   d4776:	2100      	movs	r1, #0
   d4778:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d477a:	4620      	mov	r0, r4
   d477c:	bd70      	pop	{r4, r5, r6, pc}

000d477e <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d477e:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4780:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4782:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4784:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4786:	6043      	str	r3, [r0, #4]
	len = 0;
   d4788:	6083      	str	r3, [r0, #8]
	flags = 0;
   d478a:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d478c:	460d      	mov	r5, r1
   d478e:	b139      	cbz	r1, d47a0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d4790:	4608      	mov	r0, r1
   d4792:	f001 feb2 	bl	d64fa <strlen>
   d4796:	4629      	mov	r1, r5
   d4798:	4602      	mov	r2, r0
   d479a:	4620      	mov	r0, r4
   d479c:	f7ff ffd7 	bl	d474e <_ZN6String4copyEPKcj>
}
   d47a0:	4620      	mov	r0, r4
   d47a2:	bd38      	pop	{r3, r4, r5, pc}

000d47a4 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d47a4:	b510      	push	{r4, lr}
   d47a6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d47a8:	6800      	ldr	r0, [r0, #0]
   d47aa:	b108      	cbz	r0, d47b0 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d47ac:	f7ff fdf4 	bl	d4398 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d47b0:	4620      	mov	r0, r4
   d47b2:	bd10      	pop	{r4, pc}

000d47b4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d47b4:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d47b6:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d47b8:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d47ba:	689b      	ldr	r3, [r3, #8]
   d47bc:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d47be:	68a3      	ldr	r3, [r4, #8]
   d47c0:	3b01      	subs	r3, #1
   d47c2:	60a3      	str	r3, [r4, #8]
   d47c4:	b92b      	cbnz	r3, d47d2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d47c6:	6823      	ldr	r3, [r4, #0]
   d47c8:	4620      	mov	r0, r4
   d47ca:	68db      	ldr	r3, [r3, #12]
        }
    }
   d47cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d47d0:	4718      	bx	r3
   d47d2:	bd10      	pop	{r4, pc}

000d47d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d47d4:	680b      	ldr	r3, [r1, #0]
   d47d6:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d47d8:	b113      	cbz	r3, d47e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d47da:	685a      	ldr	r2, [r3, #4]
   d47dc:	3201      	adds	r2, #1
   d47de:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d47e0:	4770      	bx	lr

000d47e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d47e2:	b510      	push	{r4, lr}
   d47e4:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d47e6:	6800      	ldr	r0, [r0, #0]
   d47e8:	b128      	cbz	r0, d47f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d47ea:	6843      	ldr	r3, [r0, #4]
   d47ec:	3b01      	subs	r3, #1
   d47ee:	6043      	str	r3, [r0, #4]
   d47f0:	b90b      	cbnz	r3, d47f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d47f2:	f7ff ffdf 	bl	d47b4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d47f6:	4620      	mov	r0, r4
   d47f8:	bd10      	pop	{r4, pc}
	...

000d47fc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d47fc:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d47fe:	4c06      	ldr	r4, [pc, #24]	; (d4818 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4800:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d4802:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4804:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4806:	f7ff fdbf 	bl	d4388 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d480a:	4620      	mov	r0, r4
   d480c:	4a03      	ldr	r2, [pc, #12]	; (d481c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d480e:	4904      	ldr	r1, [pc, #16]	; (d4820 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4814:	f001 b80a 	b.w	d582c <__aeabi_atexit>
   d4818:	2003e3e4 	.word	0x2003e3e4
   d481c:	2003e3a8 	.word	0x2003e3a8
   d4820:	000d47a5 	.word	0x000d47a5

000d4824 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4826:	4606      	mov	r6, r0
   d4828:	460d      	mov	r5, r1
   d482a:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d482c:	2400      	movs	r4, #0
  while (size--) {
   d482e:	42bd      	cmp	r5, r7
   d4830:	d00c      	beq.n	d484c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4832:	6833      	ldr	r3, [r6, #0]
   d4834:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4838:	689b      	ldr	r3, [r3, #8]
   d483a:	4630      	mov	r0, r6
   d483c:	4798      	blx	r3
     if (chunk>=0)
   d483e:	2800      	cmp	r0, #0
   d4840:	db01      	blt.n	d4846 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4842:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4844:	e7f3      	b.n	d482e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4846:	2c00      	cmp	r4, #0
   d4848:	bf08      	it	eq
   d484a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d484c:	4620      	mov	r0, r4
   d484e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4850 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4850:	b570      	push	{r4, r5, r6, lr}
   d4852:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4854:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4856:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4858:	b149      	cbz	r1, d486e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d485a:	f001 fe4e 	bl	d64fa <strlen>
   d485e:	682b      	ldr	r3, [r5, #0]
   d4860:	4602      	mov	r2, r0
   d4862:	4621      	mov	r1, r4
   d4864:	4628      	mov	r0, r5
   d4866:	68db      	ldr	r3, [r3, #12]
    }
   d4868:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d486c:	4718      	bx	r3
    }
   d486e:	bd70      	pop	{r4, r5, r6, pc}

000d4870 <_ZN5Print5printEPKc>:
   d4870:	b508      	push	{r3, lr}
   d4872:	f7ff ffed 	bl	d4850 <_ZN5Print5writeEPKc>
   d4876:	bd08      	pop	{r3, pc}

000d4878 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4878:	6803      	ldr	r3, [r0, #0]
   d487a:	689b      	ldr	r3, [r3, #8]
   d487c:	4718      	bx	r3

000d487e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d487e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4880:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4882:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4884:	f7ff fff8 	bl	d4878 <_ZN5Print5printEc>
  n += print('\n');
   d4888:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d488a:	4604      	mov	r4, r0
  n += print('\n');
   d488c:	4628      	mov	r0, r5
   d488e:	f7ff fff3 	bl	d4878 <_ZN5Print5printEc>
  return n;
}
   d4892:	4420      	add	r0, r4
   d4894:	bd38      	pop	{r3, r4, r5, pc}

000d4896 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d4896:	b538      	push	{r3, r4, r5, lr}
   d4898:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d489a:	f7ff ffd9 	bl	d4850 <_ZN5Print5writeEPKc>
   d489e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d48a0:	4628      	mov	r0, r5
   d48a2:	f7ff ffec 	bl	d487e <_ZN5Print7printlnEv>
  return n;
}
   d48a6:	4420      	add	r0, r4
   d48a8:	bd38      	pop	{r3, r4, r5, pc}

000d48aa <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d48aa:	b530      	push	{r4, r5, lr}
   d48ac:	b08b      	sub	sp, #44	; 0x2c
   d48ae:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d48b0:	2100      	movs	r1, #0
   d48b2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d48b6:	2a01      	cmp	r2, #1
   d48b8:	bf98      	it	ls
   d48ba:	220a      	movls	r2, #10
   d48bc:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d48c0:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d48c4:	fb05 3312 	mls	r3, r5, r2, r3
   d48c8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d48cc:	2b09      	cmp	r3, #9
   d48ce:	bf94      	ite	ls
   d48d0:	3330      	addls	r3, #48	; 0x30
   d48d2:	3337      	addhi	r3, #55	; 0x37
   d48d4:	b2db      	uxtb	r3, r3
   d48d6:	4621      	mov	r1, r4
   d48d8:	f804 3901 	strb.w	r3, [r4], #-1
   d48dc:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d48de:	2d00      	cmp	r5, #0
   d48e0:	d1ee      	bne.n	d48c0 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d48e2:	f7ff ffb5 	bl	d4850 <_ZN5Print5writeEPKc>
}
   d48e6:	b00b      	add	sp, #44	; 0x2c
   d48e8:	bd30      	pop	{r4, r5, pc}
	...

000d48ec <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d48ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d48f0:	ec57 6b10 	vmov	r6, r7, d0
   d48f4:	4682      	mov	sl, r0
   d48f6:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d48f8:	ee10 2a10 	vmov	r2, s0
   d48fc:	463b      	mov	r3, r7
   d48fe:	ee10 0a10 	vmov	r0, s0
   d4902:	4639      	mov	r1, r7
   d4904:	f001 fd36 	bl	d6374 <__aeabi_dcmpun>
   d4908:	b108      	cbz	r0, d490e <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d490a:	494e      	ldr	r1, [pc, #312]	; (d4a44 <_ZN5Print10printFloatEdh+0x158>)
   d490c:	e012      	b.n	d4934 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d490e:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d4912:	f04f 32ff 	mov.w	r2, #4294967295
   d4916:	4b4c      	ldr	r3, [pc, #304]	; (d4a48 <_ZN5Print10printFloatEdh+0x15c>)
   d4918:	4630      	mov	r0, r6
   d491a:	4649      	mov	r1, r9
   d491c:	f001 fd2a 	bl	d6374 <__aeabi_dcmpun>
   d4920:	b968      	cbnz	r0, d493e <_ZN5Print10printFloatEdh+0x52>
   d4922:	f04f 32ff 	mov.w	r2, #4294967295
   d4926:	4b48      	ldr	r3, [pc, #288]	; (d4a48 <_ZN5Print10printFloatEdh+0x15c>)
   d4928:	4630      	mov	r0, r6
   d492a:	4649      	mov	r1, r9
   d492c:	f001 fd04 	bl	d6338 <__aeabi_dcmple>
   d4930:	b928      	cbnz	r0, d493e <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4932:	4946      	ldr	r1, [pc, #280]	; (d4a4c <_ZN5Print10printFloatEdh+0x160>)
   d4934:	4650      	mov	r0, sl
   d4936:	f7ff ff8b 	bl	d4850 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d493a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d493e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d4942:	4b43      	ldr	r3, [pc, #268]	; (d4a50 <_ZN5Print10printFloatEdh+0x164>)
   d4944:	4630      	mov	r0, r6
   d4946:	4639      	mov	r1, r7
   d4948:	f001 fd0a 	bl	d6360 <__aeabi_dcmpgt>
   d494c:	b108      	cbz	r0, d4952 <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d494e:	4941      	ldr	r1, [pc, #260]	; (d4a54 <_ZN5Print10printFloatEdh+0x168>)
   d4950:	e7f0      	b.n	d4934 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d4952:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d4956:	4b40      	ldr	r3, [pc, #256]	; (d4a58 <_ZN5Print10printFloatEdh+0x16c>)
   d4958:	4630      	mov	r0, r6
   d495a:	4639      	mov	r1, r7
   d495c:	f001 fce2 	bl	d6324 <__aeabi_dcmplt>
   d4960:	2800      	cmp	r0, #0
   d4962:	d1f4      	bne.n	d494e <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d4964:	2200      	movs	r2, #0
   d4966:	2300      	movs	r3, #0
   d4968:	4630      	mov	r0, r6
   d496a:	4639      	mov	r1, r7
   d496c:	f001 fcda 	bl	d6324 <__aeabi_dcmplt>
   d4970:	b140      	cbz	r0, d4984 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d4972:	212d      	movs	r1, #45	; 0x2d
   d4974:	4650      	mov	r0, sl
   d4976:	f7ff ff7f 	bl	d4878 <_ZN5Print5printEc>
     number = -number;
   d497a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d497e:	4604      	mov	r4, r0
     number = -number;
   d4980:	461f      	mov	r7, r3
   d4982:	e000      	b.n	d4986 <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d4984:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d4986:	4935      	ldr	r1, [pc, #212]	; (d4a5c <_ZN5Print10printFloatEdh+0x170>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d4988:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d498c:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d498e:	fa5f f388 	uxtb.w	r3, r8
   d4992:	429d      	cmp	r5, r3
   d4994:	d906      	bls.n	d49a4 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d4996:	2200      	movs	r2, #0
   d4998:	4b31      	ldr	r3, [pc, #196]	; (d4a60 <_ZN5Print10printFloatEdh+0x174>)
   d499a:	f001 fb7b 	bl	d6094 <__aeabi_ddiv>
   d499e:	f108 0801 	add.w	r8, r8, #1
   d49a2:	e7f4      	b.n	d498e <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d49a4:	4632      	mov	r2, r6
   d49a6:	463b      	mov	r3, r7
   d49a8:	f001 f898 	bl	d5adc <__adddf3>
   d49ac:	460f      	mov	r7, r1
   d49ae:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d49b0:	f001 fd1e 	bl	d63f0 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d49b4:	220a      	movs	r2, #10
   d49b6:	4601      	mov	r1, r0
   d49b8:	4680      	mov	r8, r0
   d49ba:	4650      	mov	r0, sl
   d49bc:	f7ff ff75 	bl	d48aa <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
   d49c0:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d49c2:	b3e5      	cbz	r5, d4a3e <_ZN5Print10printFloatEdh+0x152>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d49c4:	4640      	mov	r0, r8
   d49c6:	f001 f9c5 	bl	d5d54 <__aeabi_ui2d>
   d49ca:	4602      	mov	r2, r0
   d49cc:	460b      	mov	r3, r1
   d49ce:	4630      	mov	r0, r6
   d49d0:	4639      	mov	r1, r7
   d49d2:	f001 f881 	bl	d5ad8 <__aeabi_dsub>
   d49d6:	4606      	mov	r6, r0
   d49d8:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d49da:	4650      	mov	r0, sl
   d49dc:	4921      	ldr	r1, [pc, #132]	; (d4a64 <_ZN5Print10printFloatEdh+0x178>)
   d49de:	f7ff ff37 	bl	d4850 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d49e2:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d49e4:	2200      	movs	r2, #0
   d49e6:	4b1e      	ldr	r3, [pc, #120]	; (d4a60 <_ZN5Print10printFloatEdh+0x174>)
   d49e8:	4630      	mov	r0, r6
   d49ea:	4639      	mov	r1, r7
   d49ec:	f001 fa28 	bl	d5e40 <__aeabi_dmul>
   d49f0:	4606      	mov	r6, r0
   d49f2:	460f      	mov	r7, r1
    int toPrint = int(remainder);
   d49f4:	f001 fcd4 	bl	d63a0 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d49f8:	f1b0 0900 	subs.w	r9, r0, #0
   d49fc:	da07      	bge.n	d4a0e <_ZN5Print10printFloatEdh+0x122>
            t = print('-');
   d49fe:	212d      	movs	r1, #45	; 0x2d
   d4a00:	4650      	mov	r0, sl
   d4a02:	f7ff ff39 	bl	d4878 <_ZN5Print5printEc>
            val = -n;
   d4a06:	f1c9 0100 	rsb	r1, r9, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d4a0a:	4680      	mov	r8, r0
   d4a0c:	e002      	b.n	d4a14 <_ZN5Print10printFloatEdh+0x128>
            val = -n;
        } else {
            val = n;
   d4a0e:	4649      	mov	r1, r9
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d4a10:	f04f 0800 	mov.w	r8, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4a14:	220a      	movs	r2, #10
   d4a16:	4650      	mov	r0, sl
   d4a18:	f7ff ff47 	bl	d48aa <_ZN5Print11printNumberEmh>
    n += print(toPrint);
   d4a1c:	4440      	add	r0, r8
   d4a1e:	4404      	add	r4, r0
    remainder -= toPrint;
   d4a20:	4648      	mov	r0, r9
   d4a22:	f001 f9a7 	bl	d5d74 <__aeabi_i2d>
   d4a26:	4602      	mov	r2, r0
   d4a28:	460b      	mov	r3, r1
   d4a2a:	4630      	mov	r0, r6
   d4a2c:	4639      	mov	r1, r7
   d4a2e:	f001 f853 	bl	d5ad8 <__aeabi_dsub>
   d4a32:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d4a34:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d4a38:	4606      	mov	r6, r0
   d4a3a:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d4a3c:	d1d2      	bne.n	d49e4 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d4a3e:	4620      	mov	r0, r4
   d4a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4a44:	000d667c 	.word	0x000d667c
   d4a48:	7fefffff 	.word	0x7fefffff
   d4a4c:	000d6686 	.word	0x000d6686
   d4a50:	41efffff 	.word	0x41efffff
   d4a54:	000d6680 	.word	0x000d6680
   d4a58:	c1efffff 	.word	0xc1efffff
   d4a5c:	3fe00000 	.word	0x3fe00000
   d4a60:	40240000 	.word	0x40240000
   d4a64:	000d6684 	.word	0x000d6684

000d4a68 <_ZN5Print7printlnEdi>:
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d4a68:	b538      	push	{r3, r4, r5, lr}
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d4a6a:	b2c9      	uxtb	r1, r1
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d4a6c:	4605      	mov	r5, r0
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d4a6e:	f7ff ff3d 	bl	d48ec <_ZN5Print10printFloatEdh>
   d4a72:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d4a74:	4628      	mov	r0, r5
   d4a76:	f7ff ff02 	bl	d487e <_ZN5Print7printlnEv>
  return n;
}
   d4a7a:	4420      	add	r0, r4
   d4a7c:	bd38      	pop	{r3, r4, r5, pc}

000d4a7e <_ZN5Print7printlnEfi>:
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d4a7e:	b538      	push	{r3, r4, r5, lr}
   d4a80:	4604      	mov	r4, r0
    return println((double)num, digits);
   d4a82:	ee10 0a10 	vmov	r0, s0
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d4a86:	460d      	mov	r5, r1
    return println((double)num, digits);
   d4a88:	f001 f986 	bl	d5d98 <__aeabi_f2d>
   d4a8c:	ec41 0b10 	vmov	d0, r0, r1
   d4a90:	4629      	mov	r1, r5
   d4a92:	4620      	mov	r0, r4
}
   d4a94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return n;
}

size_t Print::println(float num, int digits)
{
    return println((double)num, digits);
   d4a98:	f7ff bfe6 	b.w	d4a68 <_ZN5Print7printlnEdi>

000d4a9c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4a9c:	4b01      	ldr	r3, [pc, #4]	; (d4aa4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4a9e:	4a02      	ldr	r2, [pc, #8]	; (d4aa8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4aa0:	601a      	str	r2, [r3, #0]
   d4aa2:	4770      	bx	lr
   d4aa4:	2003e3e8 	.word	0x2003e3e8
   d4aa8:	000d66fd 	.word	0x000d66fd

000d4aac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4aac:	4b02      	ldr	r3, [pc, #8]	; (d4ab8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4aae:	681a      	ldr	r2, [r3, #0]
   d4ab0:	4b02      	ldr	r3, [pc, #8]	; (d4abc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4ab2:	601a      	str	r2, [r3, #0]
   d4ab4:	4770      	bx	lr
   d4ab6:	bf00      	nop
   d4ab8:	2003e340 	.word	0x2003e340
   d4abc:	2003e3ec 	.word	0x2003e3ec

000d4ac0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4ac0:	2100      	movs	r1, #0
   d4ac2:	f7ff bcf1 	b.w	d44a8 <system_delay_ms>

000d4ac6 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4ac6:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4ac8:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4aca:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4acc:	b113      	cbz	r3, d4ad4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4ace:	2203      	movs	r2, #3
   d4ad0:	4601      	mov	r1, r0
   d4ad2:	4798      	blx	r3
    }
   d4ad4:	4620      	mov	r0, r4
   d4ad6:	bd10      	pop	{r4, pc}

000d4ad8 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4ad8:	b510      	push	{r4, lr}
   d4ada:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4adc:	f7ff fff3 	bl	d4ac6 <_ZNSt14_Function_baseD1Ev>
   d4ae0:	4620      	mov	r0, r4
   d4ae2:	bd10      	pop	{r4, pc}

000d4ae4 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d4ae4:	b513      	push	{r0, r1, r4, lr}
   d4ae6:	460b      	mov	r3, r1
   d4ae8:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4aea:	c803      	ldmia	r0, {r0, r1}
   d4aec:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4af0:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4af4:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4af8:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d4afc:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4b00:	b002      	add	sp, #8
   d4b02:	bd10      	pop	{r4, pc}

000d4b04 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4b04:	4803      	ldr	r0, [pc, #12]	; (d4b14 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4b06:	4a04      	ldr	r2, [pc, #16]	; (d4b18 <_GLOBAL__sub_I_RGB+0x14>)
   d4b08:	4904      	ldr	r1, [pc, #16]	; (d4b1c <_GLOBAL__sub_I_RGB+0x18>)
   d4b0a:	2300      	movs	r3, #0
   d4b0c:	6083      	str	r3, [r0, #8]
   d4b0e:	f000 be8d 	b.w	d582c <__aeabi_atexit>
   d4b12:	bf00      	nop
   d4b14:	2003e3f0 	.word	0x2003e3f0
   d4b18:	2003e3a8 	.word	0x2003e3a8
   d4b1c:	000d4ad9 	.word	0x000d4ad9

000d4b20 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d4b20:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4b22:	4b0c      	ldr	r3, [pc, #48]	; (d4b54 <serialEventRun+0x34>)
   d4b24:	b133      	cbz	r3, d4b34 <serialEventRun+0x14>
   d4b26:	f000 fc1b 	bl	d5360 <_Z16_fetch_usbserialv>
   d4b2a:	6803      	ldr	r3, [r0, #0]
   d4b2c:	691b      	ldr	r3, [r3, #16]
   d4b2e:	4798      	blx	r3
   d4b30:	2800      	cmp	r0, #0
   d4b32:	dc09      	bgt.n	d4b48 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d4b34:	4b08      	ldr	r3, [pc, #32]	; (d4b58 <serialEventRun+0x38>)
   d4b36:	b163      	cbz	r3, d4b52 <serialEventRun+0x32>
   d4b38:	f000 fcdc 	bl	d54f4 <_Z22__fetch_global_Serial1v>
   d4b3c:	6803      	ldr	r3, [r0, #0]
   d4b3e:	691b      	ldr	r3, [r3, #16]
   d4b40:	4798      	blx	r3
   d4b42:	2800      	cmp	r0, #0
   d4b44:	dc03      	bgt.n	d4b4e <serialEventRun+0x2e>
   d4b46:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d4b48:	f3af 8000 	nop.w
   d4b4c:	e7f2      	b.n	d4b34 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d4b4e:	f3af 8000 	nop.w
   d4b52:	bd08      	pop	{r3, pc}
	...

000d4b5c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d4b5c:	b508      	push	{r3, lr}
	serialEventRun();
   d4b5e:	f7ff ffdf 	bl	d4b20 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4b62:	f7ff fbf1 	bl	d4348 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4b66:	4b01      	ldr	r3, [pc, #4]	; (d4b6c <_post_loop+0x10>)
   d4b68:	6018      	str	r0, [r3, #0]
   d4b6a:	bd08      	pop	{r3, pc}
   d4b6c:	2003e74c 	.word	0x2003e74c

000d4b70 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4b70:	4802      	ldr	r0, [pc, #8]	; (d4b7c <_Z33system_initialize_user_backup_ramv+0xc>)
   d4b72:	4a03      	ldr	r2, [pc, #12]	; (d4b80 <_Z33system_initialize_user_backup_ramv+0x10>)
   d4b74:	4903      	ldr	r1, [pc, #12]	; (d4b84 <_Z33system_initialize_user_backup_ramv+0x14>)
   d4b76:	1a12      	subs	r2, r2, r0
   d4b78:	f001 bc68 	b.w	d644c <memcpy>
   d4b7c:	2003f400 	.word	0x2003f400
   d4b80:	2003f404 	.word	0x2003f404
   d4b84:	000d6960 	.word	0x000d6960

000d4b88 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4b88:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4b8a:	2300      	movs	r3, #0
   d4b8c:	9300      	str	r3, [sp, #0]
   d4b8e:	461a      	mov	r2, r3
   d4b90:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4b94:	f7ff fcaa 	bl	d44ec <system_ctrl_set_result>
}
   d4b98:	b003      	add	sp, #12
   d4b9a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4ba0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d4ba0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4ba2:	8843      	ldrh	r3, [r0, #2]
   d4ba4:	2b0a      	cmp	r3, #10
   d4ba6:	d008      	beq.n	d4bba <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4ba8:	2b50      	cmp	r3, #80	; 0x50
   d4baa:	d109      	bne.n	d4bc0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d4bac:	4b09      	ldr	r3, [pc, #36]	; (d4bd4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4bae:	681b      	ldr	r3, [r3, #0]
   d4bb0:	b13b      	cbz	r3, d4bc2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d4bb2:	b003      	add	sp, #12
   d4bb4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d4bb8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d4bba:	f7ff ffe5 	bl	d4b88 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d4bbe:	e006      	b.n	d4bce <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4bc0:	2300      	movs	r3, #0
   d4bc2:	9300      	str	r3, [sp, #0]
   d4bc4:	461a      	mov	r2, r3
   d4bc6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4bca:	f7ff fc8f 	bl	d44ec <system_ctrl_set_result>
        break;
    }
}
   d4bce:	b003      	add	sp, #12
   d4bd0:	f85d fb04 	ldr.w	pc, [sp], #4
   d4bd4:	2003e400 	.word	0x2003e400

000d4bd8 <module_user_init_hook>:

void module_user_init_hook()
{
   d4bd8:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4bda:	4c10      	ldr	r4, [pc, #64]	; (d4c1c <module_user_init_hook+0x44>)
   d4bdc:	4d10      	ldr	r5, [pc, #64]	; (d4c20 <module_user_init_hook+0x48>)
   d4bde:	6823      	ldr	r3, [r4, #0]
   d4be0:	42ab      	cmp	r3, r5
   d4be2:	4b10      	ldr	r3, [pc, #64]	; (d4c24 <module_user_init_hook+0x4c>)
   d4be4:	bf0c      	ite	eq
   d4be6:	2201      	moveq	r2, #1
   d4be8:	2200      	movne	r2, #0
   d4bea:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d4bec:	d002      	beq.n	d4bf4 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d4bee:	f7ff ffbf 	bl	d4b70 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d4bf2:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4bf4:	f7ff fba0 	bl	d4338 <HAL_RNG_GetRandomNumber>
   d4bf8:	4604      	mov	r4, r0
    srand(seed);
   d4bfa:	f001 fc3b 	bl	d6474 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4bfe:	4b0a      	ldr	r3, [pc, #40]	; (d4c28 <module_user_init_hook+0x50>)
   d4c00:	b113      	cbz	r3, d4c08 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d4c02:	4620      	mov	r0, r4
   d4c04:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4c08:	2100      	movs	r1, #0
   d4c0a:	4807      	ldr	r0, [pc, #28]	; (d4c28 <module_user_init_hook+0x50>)
   d4c0c:	f7ff fcd8 	bl	d45c0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4c10:	2100      	movs	r1, #0
   d4c12:	4806      	ldr	r0, [pc, #24]	; (d4c2c <module_user_init_hook+0x54>)
}
   d4c14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4c18:	f7ff bc5e 	b.w	d44d8 <system_ctrl_set_app_request_handler>
   d4c1c:	2003f400 	.word	0x2003f400
   d4c20:	9a271c1e 	.word	0x9a271c1e
   d4c24:	2003e404 	.word	0x2003e404
   d4c28:	00000000 	.word	0x00000000
   d4c2c:	000d4ba1 	.word	0x000d4ba1

000d4c30 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4c30:	4770      	bx	lr

000d4c32 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d4c32:	2000      	movs	r0, #0
   d4c34:	4770      	bx	lr

000d4c36 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4c36:	b510      	push	{r4, lr}
   d4c38:	2110      	movs	r1, #16
   d4c3a:	4604      	mov	r4, r0
   d4c3c:	f000 fdfb 	bl	d5836 <_ZdlPvj>
   d4c40:	4620      	mov	r0, r4
   d4c42:	bd10      	pop	{r4, pc}

000d4c44 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d4c44:	b508      	push	{r3, lr}
      { delete this; }
   d4c46:	b108      	cbz	r0, d4c4c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d4c48:	f7ff fff5 	bl	d4c36 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4c4c:	bd08      	pop	{r3, pc}

000d4c4e <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4c4e:	2200      	movs	r2, #0
   d4c50:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d4c52:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4c54:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d4c58:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4c5a:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d4c5e:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d4c60:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4c62:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4c64:	680c      	ldr	r4, [r1, #0]
   d4c66:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d4c68:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d4c6a:	bd10      	pop	{r4, pc}

000d4c6c <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d4c6c:	b510      	push	{r4, lr}
   d4c6e:	4604      	mov	r4, r0
    free((void*)msg_);
   d4c70:	6800      	ldr	r0, [r0, #0]
   d4c72:	f7ff fcb5 	bl	d45e0 <free>
}
   d4c76:	4620      	mov	r0, r4
   d4c78:	bd10      	pop	{r4, pc}

000d4c7a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d4c7a:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4c7c:	68c4      	ldr	r4, [r0, #12]
   d4c7e:	b1f4      	cbz	r4, d4cbe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d4c80:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4c82:	2b02      	cmp	r3, #2
   d4c84:	d103      	bne.n	d4c8e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d4c86:	f104 000c 	add.w	r0, r4, #12
   d4c8a:	f7ff ffef 	bl	d4c6c <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d4c8e:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d4c90:	b135      	cbz	r5, d4ca0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4c92:	4628      	mov	r0, r5
   d4c94:	f7ff ff17 	bl	d4ac6 <_ZNSt14_Function_baseD1Ev>
   d4c98:	2110      	movs	r1, #16
   d4c9a:	4628      	mov	r0, r5
   d4c9c:	f000 fdcb 	bl	d5836 <_ZdlPvj>
   d4ca0:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d4ca2:	b135      	cbz	r5, d4cb2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d4ca4:	4628      	mov	r0, r5
   d4ca6:	f7ff ff0e 	bl	d4ac6 <_ZNSt14_Function_baseD1Ev>
   d4caa:	2110      	movs	r1, #16
   d4cac:	4628      	mov	r0, r5
   d4cae:	f000 fdc2 	bl	d5836 <_ZdlPvj>
   d4cb2:	4620      	mov	r0, r4
   d4cb4:	2114      	movs	r1, #20
   d4cb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4cba:	f000 bdbc 	b.w	d5836 <_ZdlPvj>
   d4cbe:	bd38      	pop	{r3, r4, r5, pc}

000d4cc0 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d4cc0:	b513      	push	{r0, r1, r4, lr}
   d4cc2:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4cc4:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d4cc8:	2300      	movs	r3, #0
   d4cca:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4ccc:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4cce:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d4cd0:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4cd2:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d4cd4:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4cd6:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4cd8:	f7ff fd83 	bl	d47e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4cdc:	4620      	mov	r0, r4
   d4cde:	b002      	add	sp, #8
   d4ce0:	bd10      	pop	{r4, pc}

000d4ce2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d4ce2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4ce4:	460c      	mov	r4, r1
   d4ce6:	ad02      	add	r5, sp, #8
   d4ce8:	f854 3b04 	ldr.w	r3, [r4], #4
   d4cec:	f845 3d08 	str.w	r3, [r5, #-8]!
   d4cf0:	4606      	mov	r6, r0
   d4cf2:	460f      	mov	r7, r1
   d4cf4:	a801      	add	r0, sp, #4
   d4cf6:	4621      	mov	r1, r4
   d4cf8:	f7ff fd6c 	bl	d47d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d4cfc:	4629      	mov	r1, r5
   d4cfe:	4630      	mov	r0, r6
   d4d00:	f7ff ffde 	bl	d4cc0 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4d04:	a801      	add	r0, sp, #4
   d4d06:	f7ff fd6c 	bl	d47e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4d0a:	4620      	mov	r0, r4
   d4d0c:	f7ff fd69 	bl	d47e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d4d10:	4638      	mov	r0, r7
   d4d12:	2108      	movs	r1, #8
   d4d14:	f000 fd8f 	bl	d5836 <_ZdlPvj>
        return p;
    }
   d4d18:	4630      	mov	r0, r6
   d4d1a:	b003      	add	sp, #12
   d4d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d4d20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4d20:	b538      	push	{r3, r4, r5, lr}
   d4d22:	2300      	movs	r3, #0
   d4d24:	4604      	mov	r4, r0
   d4d26:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4d28:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4d2a:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4d2c:	f7ff f9b3 	bl	d4096 <_Znwj>
   d4d30:	b128      	cbz	r0, d4d3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d4d32:	2301      	movs	r3, #1
   d4d34:	6043      	str	r3, [r0, #4]
   d4d36:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d4d38:	4b02      	ldr	r3, [pc, #8]	; (d4d44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d4d3a:	6003      	str	r3, [r0, #0]
   d4d3c:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4d3e:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d4d40:	4620      	mov	r0, r4
   d4d42:	bd38      	pop	{r3, r4, r5, pc}
   d4d44:	000d679c 	.word	0x000d679c

000d4d48 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4d48:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4d4a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4d4c:	b90a      	cbnz	r2, d4d52 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d4d4e:	f000 fd74 	bl	d583a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4d52:	68c3      	ldr	r3, [r0, #12]
    }
   d4d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4d58:	4718      	bx	r3

000d4d5a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4d5a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4d5c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4d5e:	f100 0110 	add.w	r1, r0, #16
   d4d62:	f7ff fff1 	bl	d4d48 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4d66:	bd08      	pop	{r3, pc}

000d4d68 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4d68:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4d6a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4d6c:	b90a      	cbnz	r2, d4d72 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d4d6e:	f000 fd64 	bl	d583a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4d72:	68c3      	ldr	r3, [r0, #12]
    }
   d4d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4d78:	4718      	bx	r3

000d4d7a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4d7a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4d7c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4d7e:	f100 0110 	add.w	r1, r0, #16
   d4d82:	f7ff fff1 	bl	d4d68 <_ZNKSt8functionIFvRKbEEclES1_>
   d4d86:	bd08      	pop	{r3, pc}

000d4d88 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4d88:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4d8a:	2300      	movs	r3, #0
   d4d8c:	6083      	str	r3, [r0, #8]
   d4d8e:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4d90:	4604      	mov	r4, r0
   d4d92:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4d94:	b12b      	cbz	r3, d4da2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4d96:	2202      	movs	r2, #2
   d4d98:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4d9a:	68eb      	ldr	r3, [r5, #12]
   d4d9c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4d9e:	68ab      	ldr	r3, [r5, #8]
   d4da0:	60a3      	str	r3, [r4, #8]
	}
    }
   d4da2:	4620      	mov	r0, r4
   d4da4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4da8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d4da8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4daa:	b089      	sub	sp, #36	; 0x24
   d4dac:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d4dae:	4668      	mov	r0, sp
   d4db0:	f7ff ff4d 	bl	d4c4e <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d4db4:	2300      	movs	r3, #0
   d4db6:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d4dba:	f04f 0202 	mov.w	r2, #2
   d4dbe:	e8d4 3f4f 	ldrexb	r3, [r4]
   d4dc2:	2b00      	cmp	r3, #0
   d4dc4:	d103      	bne.n	d4dce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d4dc6:	e8c4 2f41 	strexb	r1, r2, [r4]
   d4dca:	2900      	cmp	r1, #0
   d4dcc:	d1f7      	bne.n	d4dbe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d4dce:	d002      	beq.n	d4dd6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d4dd0:	f88d 3008 	strb.w	r3, [sp, #8]
   d4dd4:	e063      	b.n	d4e9e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d4dd6:	f114 050c 	adds.w	r5, r4, #12
   d4dda:	d003      	beq.n	d4de4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d4ddc:	4669      	mov	r1, sp
   d4dde:	4628      	mov	r0, r5
   d4de0:	f7ff ff35 	bl	d4c4e <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4de4:	f3bf 8f5f 	dmb	sy
   d4de8:	2301      	movs	r3, #1
   d4dea:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4dec:	2000      	movs	r0, #0
   d4dee:	f104 0308 	add.w	r3, r4, #8
   d4df2:	f3bf 8f5f 	dmb	sy
   d4df6:	e853 6f00 	ldrex	r6, [r3]
   d4dfa:	e843 0200 	strex	r2, r0, [r3]
   d4dfe:	2a00      	cmp	r2, #0
   d4e00:	d1f9      	bne.n	d4df6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d4e02:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d4e06:	2e00      	cmp	r6, #0
   d4e08:	d049      	beq.n	d4e9e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4e0a:	f7ff fb55 	bl	d44b8 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d4e0e:	b120      	cbz	r0, d4e1a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4e10:	4629      	mov	r1, r5
   d4e12:	4630      	mov	r0, r6
   d4e14:	f7ff ff98 	bl	d4d48 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4e18:	e03a      	b.n	d4e90 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4e1a:	4631      	mov	r1, r6
   d4e1c:	a802      	add	r0, sp, #8
   d4e1e:	f7ff ffb3 	bl	d4d88 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4e22:	68e0      	ldr	r0, [r4, #12]
   d4e24:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4e28:	b108      	cbz	r0, d4e2e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d4e2a:	f001 fb4b 	bl	d64c4 <strdup>
   d4e2e:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4e30:	2010      	movs	r0, #16
   d4e32:	f8ad 501c 	strh.w	r5, [sp, #28]
   d4e36:	f7ff f92e 	bl	d4096 <_Znwj>
   d4e3a:	4605      	mov	r5, r0
   d4e3c:	b1e8      	cbz	r0, d4e7a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4e3e:	2700      	movs	r7, #0
   d4e40:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4e42:	2018      	movs	r0, #24
   d4e44:	f7ff f927 	bl	d4096 <_Znwj>
   d4e48:	4604      	mov	r4, r0
   d4e4a:	b188      	cbz	r0, d4e70 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4e4c:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4e4e:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4e50:	a802      	add	r0, sp, #8
   d4e52:	f7ff fe47 	bl	d4ae4 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4e56:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d4e58:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4e5a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4e5c:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d4e5e:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4e60:	a906      	add	r1, sp, #24
   d4e62:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4e64:	60e3      	str	r3, [r4, #12]
   d4e66:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4e6a:	9205      	str	r2, [sp, #20]
   d4e6c:	f7ff feef 	bl	d4c4e <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4e70:	4b0d      	ldr	r3, [pc, #52]	; (d4ea8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d4e72:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4e74:	4b0d      	ldr	r3, [pc, #52]	; (d4eac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4e76:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4e78:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d4e7a:	a806      	add	r0, sp, #24
   d4e7c:	f7ff fef6 	bl	d4c6c <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4e80:	a802      	add	r0, sp, #8
   d4e82:	f7ff fe20 	bl	d4ac6 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4e86:	2200      	movs	r2, #0
   d4e88:	4629      	mov	r1, r5
   d4e8a:	4809      	ldr	r0, [pc, #36]	; (d4eb0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d4e8c:	f7ff fb1c 	bl	d44c8 <application_thread_invoke>
   d4e90:	4630      	mov	r0, r6
   d4e92:	f7ff fe18 	bl	d4ac6 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d4e96:	2110      	movs	r1, #16
   d4e98:	4630      	mov	r0, r6
   d4e9a:	f000 fccc 	bl	d5836 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d4e9e:	4668      	mov	r0, sp
   d4ea0:	f7ff fee4 	bl	d4c6c <_ZN8particle5ErrorD1Ev>
    }
   d4ea4:	b009      	add	sp, #36	; 0x24
   d4ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4ea8:	000d4d5b 	.word	0x000d4d5b
   d4eac:	000d4fd1 	.word	0x000d4fd1
   d4eb0:	000d5541 	.word	0x000d5541

000d4eb4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4eb8:	b08b      	sub	sp, #44	; 0x2c
   d4eba:	4606      	mov	r6, r0
   d4ebc:	460f      	mov	r7, r1
   d4ebe:	4690      	mov	r8, r2
   d4ec0:	4699      	mov	r9, r3
   d4ec2:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4ec6:	f7ff fb6b 	bl	d45a0 <spark_cloud_flag_connected>
   d4eca:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d4ecc:	4683      	mov	fp, r0
   d4ece:	bb30      	cbnz	r0, d4f1e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4ed0:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d4ed4:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4ed6:	a905      	add	r1, sp, #20
   d4ed8:	4628      	mov	r0, r5
   d4eda:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4ede:	f7ff feb6 	bl	d4c4e <_ZN8particle5ErrorC1EOS0_>
   d4ee2:	2014      	movs	r0, #20
   d4ee4:	f7ff f8d7 	bl	d4096 <_Znwj>
   d4ee8:	4604      	mov	r4, r0
   d4eea:	b158      	cbz	r0, d4f04 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d4eec:	2302      	movs	r3, #2
   d4eee:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4ef0:	2301      	movs	r3, #1
   d4ef2:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4ef4:	f8c0 b004 	str.w	fp, [r0, #4]
   d4ef8:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d4efc:	4629      	mov	r1, r5
   d4efe:	300c      	adds	r0, #12
   d4f00:	f7ff fea5 	bl	d4c4e <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d4f04:	4630      	mov	r0, r6
   d4f06:	4621      	mov	r1, r4
   d4f08:	f840 4b04 	str.w	r4, [r0], #4
   d4f0c:	f7ff ff08 	bl	d4d20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4f10:	4628      	mov	r0, r5
   d4f12:	f7ff feab 	bl	d4c6c <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d4f16:	a805      	add	r0, sp, #20
   d4f18:	f7ff fea8 	bl	d4c6c <_ZN8particle5ErrorD1Ev>
   d4f1c:	e052      	b.n	d4fc4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4f1e:	2400      	movs	r4, #0
   d4f20:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d4f22:	2014      	movs	r0, #20
   d4f24:	606c      	str	r4, [r5, #4]
   d4f26:	60ac      	str	r4, [r5, #8]
   d4f28:	9307      	str	r3, [sp, #28]
   d4f2a:	f7ff f8b4 	bl	d4096 <_Znwj>
   d4f2e:	4601      	mov	r1, r0
   d4f30:	b118      	cbz	r0, d4f3a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d4f32:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4f34:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4f36:	6044      	str	r4, [r0, #4]
   d4f38:	6084      	str	r4, [r0, #8]
   d4f3a:	a804      	add	r0, sp, #16
   d4f3c:	9103      	str	r1, [sp, #12]
   d4f3e:	f7ff feef 	bl	d4d20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d4f42:	4b22      	ldr	r3, [pc, #136]	; (d4fcc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d4f44:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d4f46:	2008      	movs	r0, #8
   d4f48:	f7ff f8a5 	bl	d4096 <_Znwj>
   d4f4c:	4604      	mov	r4, r0
   d4f4e:	b128      	cbz	r0, d4f5c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4f50:	9b03      	ldr	r3, [sp, #12]
   d4f52:	f840 3b04 	str.w	r3, [r0], #4
   d4f56:	a904      	add	r1, sp, #16
   d4f58:	f7ff fc3c 	bl	d47d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4f5c:	9500      	str	r5, [sp, #0]
   d4f5e:	fa5f f38a 	uxtb.w	r3, sl
   d4f62:	464a      	mov	r2, r9
   d4f64:	4641      	mov	r1, r8
   d4f66:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d4f68:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4f6a:	f7ff fb21 	bl	d45b0 <spark_send_event>
   d4f6e:	b920      	cbnz	r0, d4f7a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d4f70:	9b03      	ldr	r3, [sp, #12]
   d4f72:	785b      	ldrb	r3, [r3, #1]
   d4f74:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d4f78:	b183      	cbz	r3, d4f9c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d4f7a:	9b03      	ldr	r3, [sp, #12]
   d4f7c:	9305      	str	r3, [sp, #20]
   d4f7e:	a904      	add	r1, sp, #16
   d4f80:	a806      	add	r0, sp, #24
   d4f82:	f7ff fc27 	bl	d47d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d4f86:	a905      	add	r1, sp, #20
   d4f88:	4630      	mov	r0, r6
   d4f8a:	f7ff fe99 	bl	d4cc0 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4f8e:	a806      	add	r0, sp, #24
   d4f90:	f7ff fc27 	bl	d47e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4f94:	a804      	add	r0, sp, #16
   d4f96:	f7ff fc24 	bl	d47e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4f9a:	e013      	b.n	d4fc4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d4f9c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d4fa0:	a905      	add	r1, sp, #20
   d4fa2:	a803      	add	r0, sp, #12
   d4fa4:	9205      	str	r2, [sp, #20]
   d4fa6:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4faa:	f7ff fefd 	bl	d4da8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d4fae:	a805      	add	r0, sp, #20
   d4fb0:	f7ff fe5c 	bl	d4c6c <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d4fb4:	a805      	add	r0, sp, #20
   d4fb6:	9909      	ldr	r1, [sp, #36]	; 0x24
   d4fb8:	f7ff fe93 	bl	d4ce2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d4fbc:	a806      	add	r0, sp, #24
   d4fbe:	f7ff fc10 	bl	d47e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4fc2:	e7da      	b.n	d4f7a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d4fc4:	4630      	mov	r0, r6
   d4fc6:	b00b      	add	sp, #44	; 0x2c
   d4fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4fcc:	000d5141 	.word	0x000d5141

000d4fd0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4fd0:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4fd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4fd4:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4fd6:	d006      	beq.n	d4fe6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d4fd8:	2a03      	cmp	r2, #3
   d4fda:	d017      	beq.n	d500c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d4fdc:	2a01      	cmp	r2, #1
   d4fde:	d122      	bne.n	d5026 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4fe0:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4fe2:	6003      	str	r3, [r0, #0]
	      break;
   d4fe4:	e01f      	b.n	d5026 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4fe6:	2018      	movs	r0, #24
   d4fe8:	680e      	ldr	r6, [r1, #0]
   d4fea:	f7ff f854 	bl	d4096 <_Znwj>
   d4fee:	4605      	mov	r5, r0
   d4ff0:	b150      	cbz	r0, d5008 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d4ff2:	4631      	mov	r1, r6
   d4ff4:	f7ff fec8 	bl	d4d88 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4ff8:	6930      	ldr	r0, [r6, #16]
   d4ffa:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4ffe:	b108      	cbz	r0, d5004 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d5000:	f001 fa60 	bl	d64c4 <strdup>
   d5004:	6128      	str	r0, [r5, #16]
   d5006:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5008:	6025      	str	r5, [r4, #0]
   d500a:	e00c      	b.n	d5026 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d500c:	6804      	ldr	r4, [r0, #0]
   d500e:	b154      	cbz	r4, d5026 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d5010:	f104 0010 	add.w	r0, r4, #16
   d5014:	f7ff fe2a 	bl	d4c6c <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5018:	4620      	mov	r0, r4
   d501a:	f7ff fd54 	bl	d4ac6 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d501e:	2118      	movs	r1, #24
   d5020:	4620      	mov	r0, r4
   d5022:	f000 fc08 	bl	d5836 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5026:	2000      	movs	r0, #0
   d5028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d502a <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d502a:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d502c:	2300      	movs	r3, #0
   d502e:	6083      	str	r3, [r0, #8]
   d5030:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5032:	4604      	mov	r4, r0
   d5034:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5036:	b12b      	cbz	r3, d5044 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5038:	2202      	movs	r2, #2
   d503a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d503c:	68eb      	ldr	r3, [r5, #12]
   d503e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5040:	68ab      	ldr	r3, [r5, #8]
   d5042:	60a3      	str	r3, [r4, #8]
	}
    }
   d5044:	4620      	mov	r0, r4
   d5046:	bd38      	pop	{r3, r4, r5, pc}

000d5048 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5048:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d504a:	b570      	push	{r4, r5, r6, lr}
   d504c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d504e:	d006      	beq.n	d505e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d5050:	2a03      	cmp	r2, #3
   d5052:	d011      	beq.n	d5078 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d5054:	2a01      	cmp	r2, #1
   d5056:	d118      	bne.n	d508a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5058:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d505a:	6003      	str	r3, [r0, #0]
	      break;
   d505c:	e015      	b.n	d508a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d505e:	2014      	movs	r0, #20
   d5060:	680e      	ldr	r6, [r1, #0]
   d5062:	f7ff f818 	bl	d4096 <_Znwj>
   d5066:	4605      	mov	r5, r0
   d5068:	b120      	cbz	r0, d5074 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d506a:	4631      	mov	r1, r6
   d506c:	f7ff ffdd 	bl	d502a <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d5070:	7c33      	ldrb	r3, [r6, #16]
   d5072:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5074:	6025      	str	r5, [r4, #0]
   d5076:	e008      	b.n	d508a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5078:	6804      	ldr	r4, [r0, #0]
   d507a:	b134      	cbz	r4, d508a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d507c:	4620      	mov	r0, r4
   d507e:	f7ff fd22 	bl	d4ac6 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5082:	2114      	movs	r1, #20
   d5084:	4620      	mov	r0, r4
   d5086:	f000 fbd6 	bl	d5836 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d508a:	2000      	movs	r0, #0
   d508c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5090 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d5090:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5092:	2300      	movs	r3, #0
   d5094:	b087      	sub	sp, #28
   d5096:	460c      	mov	r4, r1
   d5098:	f3bf 8f5f 	dmb	sy
   d509c:	e850 6f00 	ldrex	r6, [r0]
   d50a0:	e840 3200 	strex	r2, r3, [r0]
   d50a4:	2a00      	cmp	r2, #0
   d50a6:	d1f9      	bne.n	d509c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d50a8:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d50ac:	2e00      	cmp	r6, #0
   d50ae:	d03f      	beq.n	d5130 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d50b0:	4618      	mov	r0, r3
   d50b2:	f7ff fa01 	bl	d44b8 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d50b6:	4607      	mov	r7, r0
   d50b8:	b120      	cbz	r0, d50c4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d50ba:	4621      	mov	r1, r4
   d50bc:	4630      	mov	r0, r6
   d50be:	f7ff fe53 	bl	d4d68 <_ZNKSt8functionIFvRKbEEclES1_>
   d50c2:	e02e      	b.n	d5122 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d50c4:	4631      	mov	r1, r6
   d50c6:	a801      	add	r0, sp, #4
   d50c8:	f7ff ffaf 	bl	d502a <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d50cc:	7823      	ldrb	r3, [r4, #0]
   d50ce:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d50d2:	2010      	movs	r0, #16
   d50d4:	f7fe ffdf 	bl	d4096 <_Znwj>
   d50d8:	4605      	mov	r5, r0
   d50da:	b1d0      	cbz	r0, d5112 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d50dc:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d50de:	2014      	movs	r0, #20
   d50e0:	f7fe ffd9 	bl	d4096 <_Znwj>
   d50e4:	4604      	mov	r4, r0
   d50e6:	b178      	cbz	r0, d5108 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d50e8:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d50ea:	4601      	mov	r1, r0
   d50ec:	a801      	add	r0, sp, #4
   d50ee:	f7ff fcf9 	bl	d4ae4 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d50f2:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d50f4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d50f6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d50f8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d50fa:	9203      	str	r2, [sp, #12]
   d50fc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d50fe:	60e3      	str	r3, [r4, #12]
   d5100:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5104:	9204      	str	r2, [sp, #16]
   d5106:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5108:	4b0a      	ldr	r3, [pc, #40]	; (d5134 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d510a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d510c:	4b0a      	ldr	r3, [pc, #40]	; (d5138 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d510e:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5110:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5112:	a801      	add	r0, sp, #4
   d5114:	f7ff fcd7 	bl	d4ac6 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5118:	2200      	movs	r2, #0
   d511a:	4629      	mov	r1, r5
   d511c:	4807      	ldr	r0, [pc, #28]	; (d513c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d511e:	f7ff f9d3 	bl	d44c8 <application_thread_invoke>
   d5122:	4630      	mov	r0, r6
   d5124:	f7ff fccf 	bl	d4ac6 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5128:	2110      	movs	r1, #16
   d512a:	4630      	mov	r0, r6
   d512c:	f000 fb83 	bl	d5836 <_ZdlPvj>
        }
    }
   d5130:	b007      	add	sp, #28
   d5132:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5134:	000d4d7b 	.word	0x000d4d7b
   d5138:	000d5049 	.word	0x000d5049
   d513c:	000d5541 	.word	0x000d5541

000d5140 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5140:	b530      	push	{r4, r5, lr}
   d5142:	b085      	sub	sp, #20
   d5144:	4604      	mov	r4, r0
   d5146:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5148:	4668      	mov	r0, sp
   d514a:	4611      	mov	r1, r2
   d514c:	f7ff fdc9 	bl	d4ce2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5150:	b17c      	cbz	r4, d5172 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d5152:	b224      	sxth	r4, r4
   d5154:	4628      	mov	r0, r5
   d5156:	b10d      	cbz	r5, d515c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d5158:	f001 f9b4 	bl	d64c4 <strdup>
   d515c:	9002      	str	r0, [sp, #8]
   d515e:	a902      	add	r1, sp, #8
   d5160:	4668      	mov	r0, sp
   d5162:	f8ad 400c 	strh.w	r4, [sp, #12]
   d5166:	f7ff fe1f 	bl	d4da8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d516a:	a802      	add	r0, sp, #8
   d516c:	f7ff fd7e 	bl	d4c6c <_ZN8particle5ErrorD1Ev>
   d5170:	e01d      	b.n	d51ae <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d5172:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5174:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5178:	f04f 0201 	mov.w	r2, #1
   d517c:	e8d0 3f4f 	ldrexb	r3, [r0]
   d5180:	42a3      	cmp	r3, r4
   d5182:	d103      	bne.n	d518c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d5184:	e8c0 2f41 	strexb	r1, r2, [r0]
   d5188:	2900      	cmp	r1, #0
   d518a:	d1f7      	bne.n	d517c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d518c:	d002      	beq.n	d5194 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d518e:	f88d 3008 	strb.w	r3, [sp, #8]
   d5192:	e00c      	b.n	d51ae <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d5194:	f110 010c 	adds.w	r1, r0, #12
   d5198:	f04f 0301 	mov.w	r3, #1
   d519c:	bf18      	it	ne
   d519e:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d51a0:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d51a4:	3004      	adds	r0, #4
   d51a6:	f800 3c03 	strb.w	r3, [r0, #-3]
   d51aa:	f7ff ff71 	bl	d5090 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d51ae:	a801      	add	r0, sp, #4
   d51b0:	f7ff fb17 	bl	d47e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d51b4:	b005      	add	sp, #20
   d51b6:	bd30      	pop	{r4, r5, pc}

000d51b8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d51b8:	4770      	bx	lr

000d51ba <_ZN9IPAddressD0Ev>:
   d51ba:	b510      	push	{r4, lr}
   d51bc:	2118      	movs	r1, #24
   d51be:	4604      	mov	r4, r0
   d51c0:	f000 fb39 	bl	d5836 <_ZdlPvj>
   d51c4:	4620      	mov	r0, r4
   d51c6:	bd10      	pop	{r4, pc}

000d51c8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d51c8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d51ca:	7d03      	ldrb	r3, [r0, #20]
   d51cc:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d51ce:	b08d      	sub	sp, #52	; 0x34
   d51d0:	460e      	mov	r6, r1
   d51d2:	f100 0704 	add.w	r7, r0, #4
   d51d6:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d51da:	d002      	beq.n	d51e2 <_ZNK9IPAddress7printToER5Print+0x1a>
   d51dc:	f100 0508 	add.w	r5, r0, #8
   d51e0:	e018      	b.n	d5214 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d51e2:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d51e4:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d51e6:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d51ea:	232f      	movs	r3, #47	; 0x2f
   d51ec:	462a      	mov	r2, r5
   d51ee:	200a      	movs	r0, #10
   d51f0:	f7ff f8da 	bl	d43a8 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d51f4:	4628      	mov	r0, r5
   d51f6:	f001 f980 	bl	d64fa <strlen>
   d51fa:	6833      	ldr	r3, [r6, #0]
   d51fc:	4602      	mov	r2, r0
   d51fe:	68db      	ldr	r3, [r3, #12]
   d5200:	4629      	mov	r1, r5
   d5202:	4630      	mov	r0, r6
   d5204:	4798      	blx	r3
   d5206:	e00f      	b.n	d5228 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5208:	b124      	cbz	r4, d5214 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d520a:	212e      	movs	r1, #46	; 0x2e
   d520c:	4630      	mov	r0, r6
   d520e:	f7ff fb33 	bl	d4878 <_ZN5Print5printEc>
   d5212:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5214:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5218:	220a      	movs	r2, #10
   d521a:	4630      	mov	r0, r6
   d521c:	f7ff fb45 	bl	d48aa <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5220:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5222:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5224:	d1f0      	bne.n	d5208 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5226:	4620      	mov	r0, r4
    }
    return n;
}
   d5228:	b00d      	add	sp, #52	; 0x34
   d522a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d522c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d522c:	b510      	push	{r4, lr}
   d522e:	4b05      	ldr	r3, [pc, #20]	; (d5244 <_ZN9IPAddressC1Ev+0x18>)
   d5230:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5232:	2211      	movs	r2, #17
   d5234:	f840 3b04 	str.w	r3, [r0], #4
   d5238:	2100      	movs	r1, #0
   d523a:	f001 f912 	bl	d6462 <memset>
{
    clear();
}
   d523e:	4620      	mov	r0, r4
   d5240:	bd10      	pop	{r4, pc}
   d5242:	bf00      	nop
   d5244:	000d67b8 	.word	0x000d67b8

000d5248 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5248:	4603      	mov	r3, r0
   d524a:	4a07      	ldr	r2, [pc, #28]	; (d5268 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d524c:	b510      	push	{r4, lr}
   d524e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5252:	f101 0210 	add.w	r2, r1, #16
   d5256:	f851 4b04 	ldr.w	r4, [r1], #4
   d525a:	f843 4b04 	str.w	r4, [r3], #4
   d525e:	4291      	cmp	r1, r2
   d5260:	d1f9      	bne.n	d5256 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5262:	780a      	ldrb	r2, [r1, #0]
   d5264:	701a      	strb	r2, [r3, #0]
}
   d5266:	bd10      	pop	{r4, pc}
   d5268:	000d67b8 	.word	0x000d67b8

000d526c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d526c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d526e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5272:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5276:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d527a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d527e:	2304      	movs	r3, #4
   d5280:	6041      	str	r1, [r0, #4]
   d5282:	7503      	strb	r3, [r0, #20]
   d5284:	bd10      	pop	{r4, pc}

000d5286 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5286:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5288:	780d      	ldrb	r5, [r1, #0]
   d528a:	788b      	ldrb	r3, [r1, #2]
   d528c:	784a      	ldrb	r2, [r1, #1]
   d528e:	78c9      	ldrb	r1, [r1, #3]
   d5290:	9100      	str	r1, [sp, #0]
   d5292:	4629      	mov	r1, r5
   d5294:	f7ff ffea 	bl	d526c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5298:	b003      	add	sp, #12
   d529a:	bd30      	pop	{r4, r5, pc}

000d529c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d529c:	7441      	strb	r1, [r0, #17]
   d529e:	4770      	bx	lr

000d52a0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d52a0:	4770      	bx	lr

000d52a2 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d52a2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d52a4:	2100      	movs	r1, #0
   d52a6:	7c00      	ldrb	r0, [r0, #16]
   d52a8:	f7ff f8de 	bl	d4468 <HAL_USB_USART_Receive_Data>
}
   d52ac:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d52b0:	bf28      	it	cs
   d52b2:	f04f 30ff 	movcs.w	r0, #4294967295
   d52b6:	bd08      	pop	{r3, pc}

000d52b8 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d52b8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d52ba:	2101      	movs	r1, #1
   d52bc:	7c00      	ldrb	r0, [r0, #16]
   d52be:	f7ff f8d3 	bl	d4468 <HAL_USB_USART_Receive_Data>
}
   d52c2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d52c6:	bf28      	it	cs
   d52c8:	f04f 30ff 	movcs.w	r0, #4294967295
   d52cc:	bd08      	pop	{r3, pc}

000d52ce <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d52ce:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d52d0:	7c00      	ldrb	r0, [r0, #16]
   d52d2:	f7ff f8c1 	bl	d4458 <HAL_USB_USART_Available_Data_For_Write>
}
   d52d6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d52da:	bd08      	pop	{r3, pc}

000d52dc <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d52dc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d52de:	7c00      	ldrb	r0, [r0, #16]
   d52e0:	f7ff f8b2 	bl	d4448 <HAL_USB_USART_Available_Data>
}
   d52e4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d52e8:	bd08      	pop	{r3, pc}

000d52ea <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d52ea:	7c00      	ldrb	r0, [r0, #16]
   d52ec:	f7ff b8cc 	b.w	d4488 <HAL_USB_USART_Flush_Data>

000d52f0 <_ZN9USBSerialD0Ev>:
   d52f0:	b510      	push	{r4, lr}
   d52f2:	2114      	movs	r1, #20
   d52f4:	4604      	mov	r4, r0
   d52f6:	f000 fa9e 	bl	d5836 <_ZdlPvj>
   d52fa:	4620      	mov	r0, r4
   d52fc:	bd10      	pop	{r4, pc}

000d52fe <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d52fe:	b538      	push	{r3, r4, r5, lr}
   d5300:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5302:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5304:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5306:	f7ff f8a7 	bl	d4458 <HAL_USB_USART_Available_Data_For_Write>
   d530a:	2800      	cmp	r0, #0
   d530c:	dc01      	bgt.n	d5312 <_ZN9USBSerial5writeEh+0x14>
   d530e:	7c60      	ldrb	r0, [r4, #17]
   d5310:	b128      	cbz	r0, d531e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5312:	4629      	mov	r1, r5
   d5314:	7c20      	ldrb	r0, [r4, #16]
   d5316:	f7ff f8af 	bl	d4478 <HAL_USB_USART_Send_Data>
   d531a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d531e:	bd38      	pop	{r3, r4, r5, pc}

000d5320 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5320:	b510      	push	{r4, lr}
   d5322:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5324:	2300      	movs	r3, #0
   d5326:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5328:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d532c:	60a3      	str	r3, [r4, #8]
   d532e:	4b05      	ldr	r3, [pc, #20]	; (d5344 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5330:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5332:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5334:	4608      	mov	r0, r1
{
  _serial = serial;
   d5336:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5338:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d533a:	4611      	mov	r1, r2
   d533c:	f7ff f874 	bl	d4428 <HAL_USB_USART_Init>
}
   d5340:	4620      	mov	r0, r4
   d5342:	bd10      	pop	{r4, pc}
   d5344:	000d67cc 	.word	0x000d67cc

000d5348 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5348:	2200      	movs	r2, #0
   d534a:	7c00      	ldrb	r0, [r0, #16]
   d534c:	f7ff b874 	b.w	d4438 <HAL_USB_USART_Begin>

000d5350 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5350:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5352:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5354:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5356:	2100      	movs	r1, #0
   d5358:	f001 f883 	bl	d6462 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d535c:	4620      	mov	r0, r4
   d535e:	bd10      	pop	{r4, pc}

000d5360 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5360:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5362:	4d0e      	ldr	r5, [pc, #56]	; (d539c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5364:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5366:	a801      	add	r0, sp, #4
   d5368:	f7ff fff2 	bl	d5350 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d536c:	6829      	ldr	r1, [r5, #0]
   d536e:	f011 0401 	ands.w	r4, r1, #1
   d5372:	d110      	bne.n	d5396 <_Z16_fetch_usbserialv+0x36>
   d5374:	4628      	mov	r0, r5
   d5376:	f7fe fe94 	bl	d40a2 <__cxa_guard_acquire>
   d537a:	b160      	cbz	r0, d5396 <_Z16_fetch_usbserialv+0x36>
   d537c:	aa01      	add	r2, sp, #4
   d537e:	4621      	mov	r1, r4
   d5380:	4807      	ldr	r0, [pc, #28]	; (d53a0 <_Z16_fetch_usbserialv+0x40>)
   d5382:	f7ff ffcd 	bl	d5320 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5386:	4628      	mov	r0, r5
   d5388:	f7fe fe90 	bl	d40ac <__cxa_guard_release>
   d538c:	4a05      	ldr	r2, [pc, #20]	; (d53a4 <_Z16_fetch_usbserialv+0x44>)
   d538e:	4906      	ldr	r1, [pc, #24]	; (d53a8 <_Z16_fetch_usbserialv+0x48>)
   d5390:	4803      	ldr	r0, [pc, #12]	; (d53a0 <_Z16_fetch_usbserialv+0x40>)
   d5392:	f000 fa4b 	bl	d582c <__aeabi_atexit>
	return _usbserial;
}
   d5396:	4802      	ldr	r0, [pc, #8]	; (d53a0 <_Z16_fetch_usbserialv+0x40>)
   d5398:	b007      	add	sp, #28
   d539a:	bd30      	pop	{r4, r5, pc}
   d539c:	2003e408 	.word	0x2003e408
   d53a0:	2003e40c 	.word	0x2003e40c
   d53a4:	2003e3a8 	.word	0x2003e3a8
   d53a8:	000d52a1 	.word	0x000d52a1

000d53ac <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d53ac:	2200      	movs	r2, #0
   d53ae:	4611      	mov	r1, r2
   d53b0:	6840      	ldr	r0, [r0, #4]
   d53b2:	f7ff b8bd 	b.w	d4530 <network_ready>

000d53b6 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d53b6:	2200      	movs	r2, #0
   d53b8:	4611      	mov	r1, r2
   d53ba:	6840      	ldr	r0, [r0, #4]
   d53bc:	f7ff b8d8 	b.w	d4570 <network_listening>

000d53c0 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d53c0:	2200      	movs	r2, #0
   d53c2:	4611      	mov	r1, r2
   d53c4:	6840      	ldr	r0, [r0, #4]
   d53c6:	f7ff b8e3 	b.w	d4590 <network_get_listen_timeout>

000d53ca <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d53ca:	2200      	movs	r2, #0
   d53cc:	6840      	ldr	r0, [r0, #4]
   d53ce:	f7ff b8d7 	b.w	d4580 <network_set_listen_timeout>

000d53d2 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d53d2:	2200      	movs	r2, #0
   d53d4:	f081 0101 	eor.w	r1, r1, #1
   d53d8:	6840      	ldr	r0, [r0, #4]
   d53da:	f7ff b8c1 	b.w	d4560 <network_listen>

000d53de <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d53de:	2300      	movs	r3, #0
   d53e0:	461a      	mov	r2, r3
   d53e2:	4619      	mov	r1, r3
   d53e4:	6840      	ldr	r0, [r0, #4]
   d53e6:	f7ff b8b3 	b.w	d4550 <network_off>

000d53ea <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d53ea:	2300      	movs	r3, #0
   d53ec:	461a      	mov	r2, r3
   d53ee:	4619      	mov	r1, r3
   d53f0:	6840      	ldr	r0, [r0, #4]
   d53f2:	f7ff b8a5 	b.w	d4540 <network_on>

000d53f6 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d53f6:	2200      	movs	r2, #0
   d53f8:	4611      	mov	r1, r2
   d53fa:	6840      	ldr	r0, [r0, #4]
   d53fc:	f7ff b888 	b.w	d4510 <network_connecting>

000d5400 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5400:	2200      	movs	r2, #0
   d5402:	2102      	movs	r1, #2
   d5404:	6840      	ldr	r0, [r0, #4]
   d5406:	f7ff b88b 	b.w	d4520 <network_disconnect>

000d540a <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d540a:	2300      	movs	r3, #0
   d540c:	461a      	mov	r2, r3
   d540e:	6840      	ldr	r0, [r0, #4]
   d5410:	f7ff b876 	b.w	d4500 <network_connect>

000d5414 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d5414:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d5416:	4c08      	ldr	r4, [pc, #32]	; (d5438 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d5418:	2528      	movs	r5, #40	; 0x28
   d541a:	462a      	mov	r2, r5
   d541c:	2100      	movs	r1, #0
   d541e:	4620      	mov	r0, r4
   d5420:	f001 f81f 	bl	d6462 <memset>
        cid = -1;
   d5424:	f04f 33ff 	mov.w	r3, #4294967295
   d5428:	6063      	str	r3, [r4, #4]
   d542a:	4b04      	ldr	r3, [pc, #16]	; (d543c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d542c:	8025      	strh	r5, [r4, #0]
   d542e:	2204      	movs	r2, #4
   d5430:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d5432:	4a03      	ldr	r2, [pc, #12]	; (d5440 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d5434:	601a      	str	r2, [r3, #0]
   d5436:	bd38      	pop	{r3, r4, r5, pc}
   d5438:	2003e428 	.word	0x2003e428
   d543c:	2003e420 	.word	0x2003e420
   d5440:	000d67fc 	.word	0x000d67fc

000d5444 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5444:	4770      	bx	lr

000d5446 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5446:	7441      	strb	r1, [r0, #17]
   d5448:	4770      	bx	lr

000d544a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d544a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d544c:	7c00      	ldrb	r0, [r0, #16]
   d544e:	f7fe ffe3 	bl	d4418 <HAL_USART_Available_Data_For_Write>
}
   d5452:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5456:	bd08      	pop	{r3, pc}

000d5458 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5458:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d545a:	7c00      	ldrb	r0, [r0, #16]
   d545c:	f7fe ffbc 	bl	d43d8 <HAL_USART_Available_Data>
}
   d5460:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5464:	bd08      	pop	{r3, pc}

000d5466 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5466:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5468:	7c00      	ldrb	r0, [r0, #16]
   d546a:	f7fe ffc5 	bl	d43f8 <HAL_USART_Peek_Data>
}
   d546e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5472:	bf28      	it	cs
   d5474:	f04f 30ff 	movcs.w	r0, #4294967295
   d5478:	bd08      	pop	{r3, pc}

000d547a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d547a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d547c:	7c00      	ldrb	r0, [r0, #16]
   d547e:	f7fe ffb3 	bl	d43e8 <HAL_USART_Read_Data>
}
   d5482:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5486:	bf28      	it	cs
   d5488:	f04f 30ff 	movcs.w	r0, #4294967295
   d548c:	bd08      	pop	{r3, pc}

000d548e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d548e:	7c00      	ldrb	r0, [r0, #16]
   d5490:	f7fe bfba 	b.w	d4408 <HAL_USART_Flush_Data>

000d5494 <_ZN11USARTSerialD0Ev>:
   d5494:	b510      	push	{r4, lr}
   d5496:	2114      	movs	r1, #20
   d5498:	4604      	mov	r4, r0
   d549a:	f000 f9cc 	bl	d5836 <_ZdlPvj>
   d549e:	4620      	mov	r0, r4
   d54a0:	bd10      	pop	{r4, pc}

000d54a2 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d54a2:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d54a4:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d54a6:	4604      	mov	r4, r0
   d54a8:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d54aa:	b925      	cbnz	r5, d54b6 <_ZN11USARTSerial5writeEh+0x14>
   d54ac:	7c00      	ldrb	r0, [r0, #16]
   d54ae:	f7fe ffb3 	bl	d4418 <HAL_USART_Available_Data_For_Write>
   d54b2:	2800      	cmp	r0, #0
   d54b4:	dd05      	ble.n	d54c2 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d54b6:	4631      	mov	r1, r6
   d54b8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d54ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d54be:	f7fe bf83 	b.w	d43c8 <HAL_USART_Write_Data>
  }
  return 0;
}
   d54c2:	4628      	mov	r0, r5
   d54c4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d54c8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d54c8:	b510      	push	{r4, lr}
   d54ca:	4604      	mov	r4, r0
   d54cc:	4608      	mov	r0, r1
   d54ce:	4611      	mov	r1, r2
   d54d0:	2200      	movs	r2, #0
   d54d2:	6062      	str	r2, [r4, #4]
   d54d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d54d8:	60a2      	str	r2, [r4, #8]
   d54da:	4a05      	ldr	r2, [pc, #20]	; (d54f0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d54dc:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d54de:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d54e0:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d54e2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d54e4:	461a      	mov	r2, r3
   d54e6:	f7fe ff67 	bl	d43b8 <HAL_USART_Init>
}
   d54ea:	4620      	mov	r0, r4
   d54ec:	bd10      	pop	{r4, pc}
   d54ee:	bf00      	nop
   d54f0:	000d6830 	.word	0x000d6830

000d54f4 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d54f4:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d54f6:	4d0c      	ldr	r5, [pc, #48]	; (d5528 <_Z22__fetch_global_Serial1v+0x34>)
   d54f8:	6829      	ldr	r1, [r5, #0]
   d54fa:	f011 0401 	ands.w	r4, r1, #1
   d54fe:	d111      	bne.n	d5524 <_Z22__fetch_global_Serial1v+0x30>
   d5500:	4628      	mov	r0, r5
   d5502:	f7fe fdce 	bl	d40a2 <__cxa_guard_acquire>
   d5506:	b168      	cbz	r0, d5524 <_Z22__fetch_global_Serial1v+0x30>
   d5508:	4a08      	ldr	r2, [pc, #32]	; (d552c <_Z22__fetch_global_Serial1v+0x38>)
   d550a:	4b09      	ldr	r3, [pc, #36]	; (d5530 <_Z22__fetch_global_Serial1v+0x3c>)
   d550c:	4809      	ldr	r0, [pc, #36]	; (d5534 <_Z22__fetch_global_Serial1v+0x40>)
   d550e:	4621      	mov	r1, r4
   d5510:	f7ff ffda 	bl	d54c8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5514:	4628      	mov	r0, r5
   d5516:	f7fe fdc9 	bl	d40ac <__cxa_guard_release>
   d551a:	4a07      	ldr	r2, [pc, #28]	; (d5538 <_Z22__fetch_global_Serial1v+0x44>)
   d551c:	4907      	ldr	r1, [pc, #28]	; (d553c <_Z22__fetch_global_Serial1v+0x48>)
   d551e:	4805      	ldr	r0, [pc, #20]	; (d5534 <_Z22__fetch_global_Serial1v+0x40>)
   d5520:	f000 f984 	bl	d582c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5524:	4803      	ldr	r0, [pc, #12]	; (d5534 <_Z22__fetch_global_Serial1v+0x40>)
   d5526:	bd38      	pop	{r3, r4, r5, pc}
   d5528:	2003e4e8 	.word	0x2003e4e8
   d552c:	2003e4ec 	.word	0x2003e4ec
   d5530:	2003e464 	.word	0x2003e464
   d5534:	2003e450 	.word	0x2003e450
   d5538:	2003e3a8 	.word	0x2003e3a8
   d553c:	000d5445 	.word	0x000d5445

000d5540 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5540:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5542:	6883      	ldr	r3, [r0, #8]
   d5544:	4604      	mov	r4, r0
   d5546:	b90b      	cbnz	r3, d554c <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5548:	f000 f977 	bl	d583a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d554c:	68c3      	ldr	r3, [r0, #12]
   d554e:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5550:	68a3      	ldr	r3, [r4, #8]
   d5552:	b11b      	cbz	r3, d555c <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5554:	2203      	movs	r2, #3
   d5556:	4621      	mov	r1, r4
   d5558:	4620      	mov	r0, r4
   d555a:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d555c:	4620      	mov	r0, r4
   d555e:	2110      	movs	r1, #16
}
   d5560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5564:	f000 b967 	b.w	d5836 <_ZdlPvj>

000d5568 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5568:	2200      	movs	r2, #0
   d556a:	4611      	mov	r1, r2
   d556c:	6840      	ldr	r0, [r0, #4]
   d556e:	f7fe bfff 	b.w	d4570 <network_listening>

000d5572 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5572:	2200      	movs	r2, #0
   d5574:	4611      	mov	r1, r2
   d5576:	6840      	ldr	r0, [r0, #4]
   d5578:	f7ff b80a 	b.w	d4590 <network_get_listen_timeout>

000d557c <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d557c:	2200      	movs	r2, #0
   d557e:	6840      	ldr	r0, [r0, #4]
   d5580:	f7fe bffe 	b.w	d4580 <network_set_listen_timeout>

000d5584 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5584:	2200      	movs	r2, #0
   d5586:	f081 0101 	eor.w	r1, r1, #1
   d558a:	6840      	ldr	r0, [r0, #4]
   d558c:	f7fe bfe8 	b.w	d4560 <network_listen>

000d5590 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5590:	2300      	movs	r3, #0
   d5592:	461a      	mov	r2, r3
   d5594:	2101      	movs	r1, #1
   d5596:	6840      	ldr	r0, [r0, #4]
   d5598:	f7fe bfda 	b.w	d4550 <network_off>

000d559c <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d559c:	2300      	movs	r3, #0
   d559e:	461a      	mov	r2, r3
   d55a0:	4619      	mov	r1, r3
   d55a2:	6840      	ldr	r0, [r0, #4]
   d55a4:	f7fe bfcc 	b.w	d4540 <network_on>

000d55a8 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d55a8:	2200      	movs	r2, #0
   d55aa:	4611      	mov	r1, r2
   d55ac:	6840      	ldr	r0, [r0, #4]
   d55ae:	f7fe bfbf 	b.w	d4530 <network_ready>

000d55b2 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d55b2:	2200      	movs	r2, #0
   d55b4:	4611      	mov	r1, r2
   d55b6:	6840      	ldr	r0, [r0, #4]
   d55b8:	f7fe bfaa 	b.w	d4510 <network_connecting>

000d55bc <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d55bc:	2200      	movs	r2, #0
   d55be:	2102      	movs	r1, #2
   d55c0:	6840      	ldr	r0, [r0, #4]
   d55c2:	f7fe bfad 	b.w	d4520 <network_disconnect>

000d55c6 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d55c6:	2300      	movs	r3, #0
   d55c8:	461a      	mov	r2, r3
   d55ca:	6840      	ldr	r0, [r0, #4]
   d55cc:	f7fe bf98 	b.w	d4500 <network_connect>

000d55d0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d55d0:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d55d2:	4605      	mov	r5, r0
   d55d4:	b188      	cbz	r0, d55fa <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d55d6:	6804      	ldr	r4, [r0, #0]
   d55d8:	b14c      	cbz	r4, d55ee <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d55da:	68a3      	ldr	r3, [r4, #8]
   d55dc:	b11b      	cbz	r3, d55e6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d55de:	2203      	movs	r2, #3
   d55e0:	4621      	mov	r1, r4
   d55e2:	4620      	mov	r0, r4
   d55e4:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d55e6:	2110      	movs	r1, #16
   d55e8:	4620      	mov	r0, r4
   d55ea:	f000 f924 	bl	d5836 <_ZdlPvj>
   d55ee:	4628      	mov	r0, r5
   d55f0:	2114      	movs	r1, #20
      }
   d55f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d55f6:	f000 b91e 	b.w	d5836 <_ZdlPvj>
   d55fa:	bd38      	pop	{r3, r4, r5, pc}

000d55fc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d55fc:	b110      	cbz	r0, d5604 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d55fe:	6803      	ldr	r3, [r0, #0]
   d5600:	685b      	ldr	r3, [r3, #4]
   d5602:	4718      	bx	r3
   d5604:	4770      	bx	lr

000d5606 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5606:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5608:	6803      	ldr	r3, [r0, #0]
   d560a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d560c:	b1bb      	cbz	r3, d563e <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d560e:	6858      	ldr	r0, [r3, #4]
   d5610:	f7fe fea2 	bl	d4358 <os_thread_is_current>
   d5614:	b978      	cbnz	r0, d5636 <_ZN6ThreadD1Ev+0x30>
   d5616:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5618:	7c5a      	ldrb	r2, [r3, #17]
   d561a:	b912      	cbnz	r2, d5622 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d561c:	6858      	ldr	r0, [r3, #4]
   d561e:	f7fe fea3 	bl	d4368 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5622:	6823      	ldr	r3, [r4, #0]
   d5624:	6858      	ldr	r0, [r3, #4]
   d5626:	f7fe fea7 	bl	d4378 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d562a:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d562c:	2300      	movs	r3, #0
   d562e:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5630:	b128      	cbz	r0, d563e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5632:	f7ff ffcd 	bl	d55d0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5636:	6820      	ldr	r0, [r4, #0]
   d5638:	b108      	cbz	r0, d563e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d563a:	f7ff ffc9 	bl	d55d0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d563e:	4620      	mov	r0, r4
   d5640:	bd10      	pop	{r4, pc}

000d5642 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d5642:	b538      	push	{r3, r4, r5, lr}
   d5644:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5646:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d564a:	b108      	cbz	r0, d5650 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d564c:	f7fe fd27 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5650:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d5654:	b108      	cbz	r0, d565a <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d5656:	f7fe fe9f 	bl	d4398 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d565a:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d565e:	b135      	cbz	r5, d566e <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5660:	4628      	mov	r0, r5
   d5662:	f7ff ffd0 	bl	d5606 <_ZN6ThreadD1Ev>
   d5666:	2104      	movs	r1, #4
   d5668:	4628      	mov	r0, r5
   d566a:	f000 f8e4 	bl	d5836 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d566e:	6820      	ldr	r0, [r4, #0]
   d5670:	b108      	cbz	r0, d5676 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d5672:	f7ff ffc3 	bl	d55fc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d5676:	4620      	mov	r0, r4
   d5678:	bd38      	pop	{r3, r4, r5, pc}
	...

000d567c <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d567c:	b510      	push	{r4, lr}
   d567e:	4b04      	ldr	r3, [pc, #16]	; (d5690 <_ZN5spark9MeshClassD1Ev+0x14>)
   d5680:	4604      	mov	r4, r0
   d5682:	f840 3b08 	str.w	r3, [r0], #8
   d5686:	f7ff ffdc 	bl	d5642 <_ZN5spark11MeshPublishD1Ev>
   d568a:	4620      	mov	r0, r4
   d568c:	bd10      	pop	{r4, pc}
   d568e:	bf00      	nop
   d5690:	000d6860 	.word	0x000d6860

000d5694 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5694:	b538      	push	{r3, r4, r5, lr}
   d5696:	4c0e      	ldr	r4, [pc, #56]	; (d56d0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5698:	4b0e      	ldr	r3, [pc, #56]	; (d56d4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d569a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d569c:	2500      	movs	r5, #0
   d569e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d56a0:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d56a4:	6063      	str	r3, [r4, #4]
   d56a6:	60a5      	str	r5, [r4, #8]
   d56a8:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d56ac:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d56b0:	f7fe fe6a 	bl	d4388 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d56b4:	4b08      	ldr	r3, [pc, #32]	; (d56d8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d56b6:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d56ba:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d56be:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d56c0:	4620      	mov	r0, r4
   d56c2:	4a06      	ldr	r2, [pc, #24]	; (d56dc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d56c4:	4906      	ldr	r1, [pc, #24]	; (d56e0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d56c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d56ca:	f000 b8af 	b.w	d582c <__aeabi_atexit>
   d56ce:	bf00      	nop
   d56d0:	2003e570 	.word	0x2003e570
   d56d4:	000d6894 	.word	0x000d6894
   d56d8:	000d6860 	.word	0x000d6860
   d56dc:	2003e3a8 	.word	0x2003e3a8
   d56e0:	000d567d 	.word	0x000d567d

000d56e4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d56e4:	2300      	movs	r3, #0
   d56e6:	461a      	mov	r2, r3
   d56e8:	6840      	ldr	r0, [r0, #4]
   d56ea:	f7fe bf09 	b.w	d4500 <network_connect>

000d56ee <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d56ee:	2200      	movs	r2, #0
   d56f0:	2102      	movs	r1, #2
   d56f2:	6840      	ldr	r0, [r0, #4]
   d56f4:	f7fe bf14 	b.w	d4520 <network_disconnect>

000d56f8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d56f8:	2200      	movs	r2, #0
   d56fa:	4611      	mov	r1, r2
   d56fc:	6840      	ldr	r0, [r0, #4]
   d56fe:	f7fe bf07 	b.w	d4510 <network_connecting>

000d5702 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5702:	2200      	movs	r2, #0
   d5704:	4611      	mov	r1, r2
   d5706:	6840      	ldr	r0, [r0, #4]
   d5708:	f7fe bf12 	b.w	d4530 <network_ready>

000d570c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d570c:	2300      	movs	r3, #0
   d570e:	461a      	mov	r2, r3
   d5710:	4619      	mov	r1, r3
   d5712:	6840      	ldr	r0, [r0, #4]
   d5714:	f7fe bf14 	b.w	d4540 <network_on>

000d5718 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5718:	2300      	movs	r3, #0
   d571a:	461a      	mov	r2, r3
   d571c:	4619      	mov	r1, r3
   d571e:	6840      	ldr	r0, [r0, #4]
   d5720:	f7fe bf16 	b.w	d4550 <network_off>

000d5724 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5724:	2200      	movs	r2, #0
   d5726:	f081 0101 	eor.w	r1, r1, #1
   d572a:	6840      	ldr	r0, [r0, #4]
   d572c:	f7fe bf18 	b.w	d4560 <network_listen>

000d5730 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5730:	2200      	movs	r2, #0
   d5732:	6840      	ldr	r0, [r0, #4]
   d5734:	f7fe bf24 	b.w	d4580 <network_set_listen_timeout>

000d5738 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5738:	2200      	movs	r2, #0
   d573a:	4611      	mov	r1, r2
   d573c:	6840      	ldr	r0, [r0, #4]
   d573e:	f7fe bf27 	b.w	d4590 <network_get_listen_timeout>

000d5742 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5742:	2200      	movs	r2, #0
   d5744:	4611      	mov	r1, r2
   d5746:	6840      	ldr	r0, [r0, #4]
   d5748:	f7fe bf12 	b.w	d4570 <network_listening>

000d574c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d574c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5750:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5752:	b095      	sub	sp, #84	; 0x54
   d5754:	4616      	mov	r6, r2
   d5756:	460d      	mov	r5, r1
   d5758:	4607      	mov	r7, r0
    IPAddress addr;
   d575a:	f7ff fd67 	bl	d522c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d575e:	4621      	mov	r1, r4
   d5760:	2220      	movs	r2, #32
   d5762:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5764:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5766:	f000 fe7c 	bl	d6462 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d576a:	2340      	movs	r3, #64	; 0x40
   d576c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d576e:	4621      	mov	r1, r4
   d5770:	466b      	mov	r3, sp
   d5772:	aa0c      	add	r2, sp, #48	; 0x30
   d5774:	4630      	mov	r0, r6
   d5776:	f7fe fdcf 	bl	d4318 <netdb_getaddrinfo>
    if (!r) {
   d577a:	4604      	mov	r4, r0
   d577c:	2800      	cmp	r0, #0
   d577e:	d144      	bne.n	d580a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5780:	4602      	mov	r2, r0
   d5782:	2101      	movs	r1, #1
   d5784:	6868      	ldr	r0, [r5, #4]
   d5786:	f7fe fed3 	bl	d4530 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d578a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d578c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d578e:	4622      	mov	r2, r4
   d5790:	6868      	ldr	r0, [r5, #4]
   d5792:	f7fe fecd 	bl	d4530 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5796:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5798:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d579a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d579c:	2e00      	cmp	r6, #0
   d579e:	d034      	beq.n	d580a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d57a0:	2900      	cmp	r1, #0
   d57a2:	d132      	bne.n	d580a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d57a4:	6873      	ldr	r3, [r6, #4]
   d57a6:	2b02      	cmp	r3, #2
   d57a8:	d002      	beq.n	d57b0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d57aa:	2b0a      	cmp	r3, #10
   d57ac:	d009      	beq.n	d57c2 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d57ae:	e02a      	b.n	d5806 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d57b0:	f1b8 0f00 	cmp.w	r8, #0
   d57b4:	d027      	beq.n	d5806 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d57b6:	6971      	ldr	r1, [r6, #20]
   d57b8:	4638      	mov	r0, r7
   d57ba:	3104      	adds	r1, #4
   d57bc:	f7ff fd63 	bl	d5286 <_ZN9IPAddressaSEPKh>
   d57c0:	e020      	b.n	d5804 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d57c2:	f1b9 0f00 	cmp.w	r9, #0
   d57c6:	d01e      	beq.n	d5806 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d57c8:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d57ca:	2211      	movs	r2, #17
   d57cc:	a801      	add	r0, sp, #4
   d57ce:	f000 fe48 	bl	d6462 <memset>
                    a.v = 6;
   d57d2:	2306      	movs	r3, #6
   d57d4:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d57d8:	ad01      	add	r5, sp, #4
   d57da:	f104 0308 	add.w	r3, r4, #8
   d57de:	3418      	adds	r4, #24
   d57e0:	6818      	ldr	r0, [r3, #0]
   d57e2:	6859      	ldr	r1, [r3, #4]
   d57e4:	462a      	mov	r2, r5
   d57e6:	c203      	stmia	r2!, {r0, r1}
   d57e8:	3308      	adds	r3, #8
   d57ea:	42a3      	cmp	r3, r4
   d57ec:	4615      	mov	r5, r2
   d57ee:	d1f7      	bne.n	d57e0 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d57f0:	a901      	add	r1, sp, #4
   d57f2:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d57f4:	ad07      	add	r5, sp, #28
   d57f6:	f7ff fd27 	bl	d5248 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d57fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d57fc:	1d3c      	adds	r4, r7, #4
   d57fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5800:	682b      	ldr	r3, [r5, #0]
   d5802:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5804:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5806:	69f6      	ldr	r6, [r6, #28]
   d5808:	e7c8      	b.n	d579c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d580a:	9800      	ldr	r0, [sp, #0]
   d580c:	f7fe fd7c 	bl	d4308 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5810:	4638      	mov	r0, r7
   d5812:	b015      	add	sp, #84	; 0x54
   d5814:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5818 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5818:	4b02      	ldr	r3, [pc, #8]	; (d5824 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d581a:	4a03      	ldr	r2, [pc, #12]	; (d5828 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d581c:	601a      	str	r2, [r3, #0]
   d581e:	2200      	movs	r2, #0
   d5820:	605a      	str	r2, [r3, #4]
   d5822:	4770      	bx	lr
   d5824:	2003e744 	.word	0x2003e744
   d5828:	000d6894 	.word	0x000d6894

000d582c <__aeabi_atexit>:
   d582c:	460b      	mov	r3, r1
   d582e:	4601      	mov	r1, r0
   d5830:	4618      	mov	r0, r3
   d5832:	f000 bdfd 	b.w	d6430 <__cxa_atexit>

000d5836 <_ZdlPvj>:
   d5836:	f7fe bc30 	b.w	d409a <_ZdlPv>

000d583a <_ZSt25__throw_bad_function_callv>:
   d583a:	b508      	push	{r3, lr}
   d583c:	f7fe fee0 	bl	d4600 <abort>

000d5840 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5840:	4b18      	ldr	r3, [pc, #96]	; (d58a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5842:	681a      	ldr	r2, [r3, #0]
   d5844:	07d1      	lsls	r1, r2, #31
   d5846:	bf5c      	itt	pl
   d5848:	2201      	movpl	r2, #1
   d584a:	601a      	strpl	r2, [r3, #0]
   d584c:	4b16      	ldr	r3, [pc, #88]	; (d58a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d584e:	681a      	ldr	r2, [r3, #0]
   d5850:	07d2      	lsls	r2, r2, #31
   d5852:	bf5c      	itt	pl
   d5854:	2201      	movpl	r2, #1
   d5856:	601a      	strpl	r2, [r3, #0]
   d5858:	4b14      	ldr	r3, [pc, #80]	; (d58ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d585a:	681a      	ldr	r2, [r3, #0]
   d585c:	07d0      	lsls	r0, r2, #31
   d585e:	bf5c      	itt	pl
   d5860:	2201      	movpl	r2, #1
   d5862:	601a      	strpl	r2, [r3, #0]
   d5864:	4b12      	ldr	r3, [pc, #72]	; (d58b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5866:	681a      	ldr	r2, [r3, #0]
   d5868:	07d1      	lsls	r1, r2, #31
   d586a:	bf5c      	itt	pl
   d586c:	2201      	movpl	r2, #1
   d586e:	601a      	strpl	r2, [r3, #0]
   d5870:	4b10      	ldr	r3, [pc, #64]	; (d58b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5872:	681a      	ldr	r2, [r3, #0]
   d5874:	07d2      	lsls	r2, r2, #31
   d5876:	bf5c      	itt	pl
   d5878:	2201      	movpl	r2, #1
   d587a:	601a      	strpl	r2, [r3, #0]
   d587c:	4b0e      	ldr	r3, [pc, #56]	; (d58b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d587e:	681a      	ldr	r2, [r3, #0]
   d5880:	07d0      	lsls	r0, r2, #31
   d5882:	bf5c      	itt	pl
   d5884:	2201      	movpl	r2, #1
   d5886:	601a      	strpl	r2, [r3, #0]
   d5888:	4b0c      	ldr	r3, [pc, #48]	; (d58bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d588a:	681a      	ldr	r2, [r3, #0]
   d588c:	07d1      	lsls	r1, r2, #31
   d588e:	bf5c      	itt	pl
   d5890:	2201      	movpl	r2, #1
   d5892:	601a      	strpl	r2, [r3, #0]
   d5894:	4b0a      	ldr	r3, [pc, #40]	; (d58c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5896:	681a      	ldr	r2, [r3, #0]
   d5898:	07d2      	lsls	r2, r2, #31
   d589a:	bf5c      	itt	pl
   d589c:	2201      	movpl	r2, #1
   d589e:	601a      	strpl	r2, [r3, #0]
   d58a0:	4770      	bx	lr
   d58a2:	bf00      	nop
   d58a4:	2003e76c 	.word	0x2003e76c
   d58a8:	2003e768 	.word	0x2003e768
   d58ac:	2003e764 	.word	0x2003e764
   d58b0:	2003e760 	.word	0x2003e760
   d58b4:	2003e75c 	.word	0x2003e75c
   d58b8:	2003e758 	.word	0x2003e758
   d58bc:	2003e754 	.word	0x2003e754
   d58c0:	2003e750 	.word	0x2003e750

000d58c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d58c4:	4b24      	ldr	r3, [pc, #144]	; (d5958 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d58c6:	681a      	ldr	r2, [r3, #0]
   d58c8:	07d0      	lsls	r0, r2, #31
   d58ca:	bf5c      	itt	pl
   d58cc:	2201      	movpl	r2, #1
   d58ce:	601a      	strpl	r2, [r3, #0]
   d58d0:	4b22      	ldr	r3, [pc, #136]	; (d595c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d58d2:	681a      	ldr	r2, [r3, #0]
   d58d4:	07d1      	lsls	r1, r2, #31
   d58d6:	bf5c      	itt	pl
   d58d8:	2201      	movpl	r2, #1
   d58da:	601a      	strpl	r2, [r3, #0]
   d58dc:	4b20      	ldr	r3, [pc, #128]	; (d5960 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d58de:	681a      	ldr	r2, [r3, #0]
   d58e0:	07d2      	lsls	r2, r2, #31
   d58e2:	bf5c      	itt	pl
   d58e4:	2201      	movpl	r2, #1
   d58e6:	601a      	strpl	r2, [r3, #0]
   d58e8:	4b1e      	ldr	r3, [pc, #120]	; (d5964 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d58ea:	681a      	ldr	r2, [r3, #0]
   d58ec:	07d0      	lsls	r0, r2, #31
   d58ee:	bf5c      	itt	pl
   d58f0:	2201      	movpl	r2, #1
   d58f2:	601a      	strpl	r2, [r3, #0]
   d58f4:	4b1c      	ldr	r3, [pc, #112]	; (d5968 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d58f6:	681a      	ldr	r2, [r3, #0]
   d58f8:	07d1      	lsls	r1, r2, #31
   d58fa:	bf5c      	itt	pl
   d58fc:	2201      	movpl	r2, #1
   d58fe:	601a      	strpl	r2, [r3, #0]
   d5900:	4b1a      	ldr	r3, [pc, #104]	; (d596c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5902:	681a      	ldr	r2, [r3, #0]
   d5904:	07d2      	lsls	r2, r2, #31
   d5906:	bf5c      	itt	pl
   d5908:	2201      	movpl	r2, #1
   d590a:	601a      	strpl	r2, [r3, #0]
   d590c:	4b18      	ldr	r3, [pc, #96]	; (d5970 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d590e:	681a      	ldr	r2, [r3, #0]
   d5910:	07d0      	lsls	r0, r2, #31
   d5912:	bf5c      	itt	pl
   d5914:	2201      	movpl	r2, #1
   d5916:	601a      	strpl	r2, [r3, #0]
   d5918:	4b16      	ldr	r3, [pc, #88]	; (d5974 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d591a:	681a      	ldr	r2, [r3, #0]
   d591c:	07d1      	lsls	r1, r2, #31
   d591e:	bf5c      	itt	pl
   d5920:	2201      	movpl	r2, #1
   d5922:	601a      	strpl	r2, [r3, #0]
   d5924:	4b14      	ldr	r3, [pc, #80]	; (d5978 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5926:	681a      	ldr	r2, [r3, #0]
   d5928:	07d2      	lsls	r2, r2, #31
   d592a:	bf5c      	itt	pl
   d592c:	2201      	movpl	r2, #1
   d592e:	601a      	strpl	r2, [r3, #0]
   d5930:	4b12      	ldr	r3, [pc, #72]	; (d597c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5932:	681a      	ldr	r2, [r3, #0]
   d5934:	07d0      	lsls	r0, r2, #31
   d5936:	bf5c      	itt	pl
   d5938:	2201      	movpl	r2, #1
   d593a:	601a      	strpl	r2, [r3, #0]
   d593c:	4b10      	ldr	r3, [pc, #64]	; (d5980 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d593e:	681a      	ldr	r2, [r3, #0]
   d5940:	07d1      	lsls	r1, r2, #31
   d5942:	bf5c      	itt	pl
   d5944:	2201      	movpl	r2, #1
   d5946:	601a      	strpl	r2, [r3, #0]
   d5948:	4b0e      	ldr	r3, [pc, #56]	; (d5984 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d594a:	681a      	ldr	r2, [r3, #0]
   d594c:	07d2      	lsls	r2, r2, #31
   d594e:	bf5c      	itt	pl
   d5950:	2201      	movpl	r2, #1
   d5952:	601a      	strpl	r2, [r3, #0]
   d5954:	4770      	bx	lr
   d5956:	bf00      	nop
   d5958:	2003e79c 	.word	0x2003e79c
   d595c:	2003e798 	.word	0x2003e798
   d5960:	2003e794 	.word	0x2003e794
   d5964:	2003e790 	.word	0x2003e790
   d5968:	2003e78c 	.word	0x2003e78c
   d596c:	2003e788 	.word	0x2003e788
   d5970:	2003e784 	.word	0x2003e784
   d5974:	2003e780 	.word	0x2003e780
   d5978:	2003e77c 	.word	0x2003e77c
   d597c:	2003e778 	.word	0x2003e778
   d5980:	2003e774 	.word	0x2003e774
   d5984:	2003e770 	.word	0x2003e770

000d5988 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5988:	4b24      	ldr	r3, [pc, #144]	; (d5a1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d598a:	681a      	ldr	r2, [r3, #0]
   d598c:	07d0      	lsls	r0, r2, #31
   d598e:	bf5c      	itt	pl
   d5990:	2201      	movpl	r2, #1
   d5992:	601a      	strpl	r2, [r3, #0]
   d5994:	4b22      	ldr	r3, [pc, #136]	; (d5a20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5996:	681a      	ldr	r2, [r3, #0]
   d5998:	07d1      	lsls	r1, r2, #31
   d599a:	bf5c      	itt	pl
   d599c:	2201      	movpl	r2, #1
   d599e:	601a      	strpl	r2, [r3, #0]
   d59a0:	4b20      	ldr	r3, [pc, #128]	; (d5a24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d59a2:	681a      	ldr	r2, [r3, #0]
   d59a4:	07d2      	lsls	r2, r2, #31
   d59a6:	bf5c      	itt	pl
   d59a8:	2201      	movpl	r2, #1
   d59aa:	601a      	strpl	r2, [r3, #0]
   d59ac:	4b1e      	ldr	r3, [pc, #120]	; (d5a28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d59ae:	681a      	ldr	r2, [r3, #0]
   d59b0:	07d0      	lsls	r0, r2, #31
   d59b2:	bf5c      	itt	pl
   d59b4:	2201      	movpl	r2, #1
   d59b6:	601a      	strpl	r2, [r3, #0]
   d59b8:	4b1c      	ldr	r3, [pc, #112]	; (d5a2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d59ba:	681a      	ldr	r2, [r3, #0]
   d59bc:	07d1      	lsls	r1, r2, #31
   d59be:	bf5c      	itt	pl
   d59c0:	2201      	movpl	r2, #1
   d59c2:	601a      	strpl	r2, [r3, #0]
   d59c4:	4b1a      	ldr	r3, [pc, #104]	; (d5a30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d59c6:	681a      	ldr	r2, [r3, #0]
   d59c8:	07d2      	lsls	r2, r2, #31
   d59ca:	bf5c      	itt	pl
   d59cc:	2201      	movpl	r2, #1
   d59ce:	601a      	strpl	r2, [r3, #0]
   d59d0:	4b18      	ldr	r3, [pc, #96]	; (d5a34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d59d2:	681a      	ldr	r2, [r3, #0]
   d59d4:	07d0      	lsls	r0, r2, #31
   d59d6:	bf5c      	itt	pl
   d59d8:	2201      	movpl	r2, #1
   d59da:	601a      	strpl	r2, [r3, #0]
   d59dc:	4b16      	ldr	r3, [pc, #88]	; (d5a38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d59de:	681a      	ldr	r2, [r3, #0]
   d59e0:	07d1      	lsls	r1, r2, #31
   d59e2:	bf5c      	itt	pl
   d59e4:	2201      	movpl	r2, #1
   d59e6:	601a      	strpl	r2, [r3, #0]
   d59e8:	4b14      	ldr	r3, [pc, #80]	; (d5a3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d59ea:	681a      	ldr	r2, [r3, #0]
   d59ec:	07d2      	lsls	r2, r2, #31
   d59ee:	bf5c      	itt	pl
   d59f0:	2201      	movpl	r2, #1
   d59f2:	601a      	strpl	r2, [r3, #0]
   d59f4:	4b12      	ldr	r3, [pc, #72]	; (d5a40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d59f6:	681a      	ldr	r2, [r3, #0]
   d59f8:	07d0      	lsls	r0, r2, #31
   d59fa:	bf5c      	itt	pl
   d59fc:	2201      	movpl	r2, #1
   d59fe:	601a      	strpl	r2, [r3, #0]
   d5a00:	4b10      	ldr	r3, [pc, #64]	; (d5a44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5a02:	681a      	ldr	r2, [r3, #0]
   d5a04:	07d1      	lsls	r1, r2, #31
   d5a06:	bf5c      	itt	pl
   d5a08:	2201      	movpl	r2, #1
   d5a0a:	601a      	strpl	r2, [r3, #0]
   d5a0c:	4b0e      	ldr	r3, [pc, #56]	; (d5a48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5a0e:	681a      	ldr	r2, [r3, #0]
   d5a10:	07d2      	lsls	r2, r2, #31
   d5a12:	bf5c      	itt	pl
   d5a14:	2201      	movpl	r2, #1
   d5a16:	601a      	strpl	r2, [r3, #0]
   d5a18:	4770      	bx	lr
   d5a1a:	bf00      	nop
   d5a1c:	2003e7cc 	.word	0x2003e7cc
   d5a20:	2003e7c8 	.word	0x2003e7c8
   d5a24:	2003e7c4 	.word	0x2003e7c4
   d5a28:	2003e7c0 	.word	0x2003e7c0
   d5a2c:	2003e7bc 	.word	0x2003e7bc
   d5a30:	2003e7b8 	.word	0x2003e7b8
   d5a34:	2003e7b4 	.word	0x2003e7b4
   d5a38:	2003e7b0 	.word	0x2003e7b0
   d5a3c:	2003e7ac 	.word	0x2003e7ac
   d5a40:	2003e7a8 	.word	0x2003e7a8
   d5a44:	2003e7a4 	.word	0x2003e7a4
   d5a48:	2003e7a0 	.word	0x2003e7a0

000d5a4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5a4c:	4b18      	ldr	r3, [pc, #96]	; (d5ab0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5a4e:	681a      	ldr	r2, [r3, #0]
   d5a50:	07d1      	lsls	r1, r2, #31
   d5a52:	bf5c      	itt	pl
   d5a54:	2201      	movpl	r2, #1
   d5a56:	601a      	strpl	r2, [r3, #0]
   d5a58:	4b16      	ldr	r3, [pc, #88]	; (d5ab4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5a5a:	681a      	ldr	r2, [r3, #0]
   d5a5c:	07d2      	lsls	r2, r2, #31
   d5a5e:	bf5c      	itt	pl
   d5a60:	2201      	movpl	r2, #1
   d5a62:	601a      	strpl	r2, [r3, #0]
   d5a64:	4b14      	ldr	r3, [pc, #80]	; (d5ab8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5a66:	681a      	ldr	r2, [r3, #0]
   d5a68:	07d0      	lsls	r0, r2, #31
   d5a6a:	bf5c      	itt	pl
   d5a6c:	2201      	movpl	r2, #1
   d5a6e:	601a      	strpl	r2, [r3, #0]
   d5a70:	4b12      	ldr	r3, [pc, #72]	; (d5abc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5a72:	681a      	ldr	r2, [r3, #0]
   d5a74:	07d1      	lsls	r1, r2, #31
   d5a76:	bf5c      	itt	pl
   d5a78:	2201      	movpl	r2, #1
   d5a7a:	601a      	strpl	r2, [r3, #0]
   d5a7c:	4b10      	ldr	r3, [pc, #64]	; (d5ac0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5a7e:	681a      	ldr	r2, [r3, #0]
   d5a80:	07d2      	lsls	r2, r2, #31
   d5a82:	bf5c      	itt	pl
   d5a84:	2201      	movpl	r2, #1
   d5a86:	601a      	strpl	r2, [r3, #0]
   d5a88:	4b0e      	ldr	r3, [pc, #56]	; (d5ac4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5a8a:	681a      	ldr	r2, [r3, #0]
   d5a8c:	07d0      	lsls	r0, r2, #31
   d5a8e:	bf5c      	itt	pl
   d5a90:	2201      	movpl	r2, #1
   d5a92:	601a      	strpl	r2, [r3, #0]
   d5a94:	4b0c      	ldr	r3, [pc, #48]	; (d5ac8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5a96:	681a      	ldr	r2, [r3, #0]
   d5a98:	07d1      	lsls	r1, r2, #31
   d5a9a:	bf5c      	itt	pl
   d5a9c:	2201      	movpl	r2, #1
   d5a9e:	601a      	strpl	r2, [r3, #0]
   d5aa0:	4b0a      	ldr	r3, [pc, #40]	; (d5acc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5aa2:	681a      	ldr	r2, [r3, #0]
   d5aa4:	07d2      	lsls	r2, r2, #31
   d5aa6:	bf5c      	itt	pl
   d5aa8:	2201      	movpl	r2, #1
   d5aaa:	601a      	strpl	r2, [r3, #0]
   d5aac:	4770      	bx	lr
   d5aae:	bf00      	nop
   d5ab0:	2003e7ec 	.word	0x2003e7ec
   d5ab4:	2003e7e8 	.word	0x2003e7e8
   d5ab8:	2003e7e4 	.word	0x2003e7e4
   d5abc:	2003e7e0 	.word	0x2003e7e0
   d5ac0:	2003e7dc 	.word	0x2003e7dc
   d5ac4:	2003e7d8 	.word	0x2003e7d8
   d5ac8:	2003e7d4 	.word	0x2003e7d4
   d5acc:	2003e7d0 	.word	0x2003e7d0

000d5ad0 <__aeabi_drsub>:
   d5ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d5ad4:	e002      	b.n	d5adc <__adddf3>
   d5ad6:	bf00      	nop

000d5ad8 <__aeabi_dsub>:
   d5ad8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5adc <__adddf3>:
   d5adc:	b530      	push	{r4, r5, lr}
   d5ade:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d5ae2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d5ae6:	ea94 0f05 	teq	r4, r5
   d5aea:	bf08      	it	eq
   d5aec:	ea90 0f02 	teqeq	r0, r2
   d5af0:	bf1f      	itttt	ne
   d5af2:	ea54 0c00 	orrsne.w	ip, r4, r0
   d5af6:	ea55 0c02 	orrsne.w	ip, r5, r2
   d5afa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5afe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5b02:	f000 80e2 	beq.w	d5cca <__adddf3+0x1ee>
   d5b06:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5b0a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5b0e:	bfb8      	it	lt
   d5b10:	426d      	neglt	r5, r5
   d5b12:	dd0c      	ble.n	d5b2e <__adddf3+0x52>
   d5b14:	442c      	add	r4, r5
   d5b16:	ea80 0202 	eor.w	r2, r0, r2
   d5b1a:	ea81 0303 	eor.w	r3, r1, r3
   d5b1e:	ea82 0000 	eor.w	r0, r2, r0
   d5b22:	ea83 0101 	eor.w	r1, r3, r1
   d5b26:	ea80 0202 	eor.w	r2, r0, r2
   d5b2a:	ea81 0303 	eor.w	r3, r1, r3
   d5b2e:	2d36      	cmp	r5, #54	; 0x36
   d5b30:	bf88      	it	hi
   d5b32:	bd30      	pophi	{r4, r5, pc}
   d5b34:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5b38:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5b3c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d5b40:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d5b44:	d002      	beq.n	d5b4c <__adddf3+0x70>
   d5b46:	4240      	negs	r0, r0
   d5b48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5b4c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d5b50:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5b54:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d5b58:	d002      	beq.n	d5b60 <__adddf3+0x84>
   d5b5a:	4252      	negs	r2, r2
   d5b5c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d5b60:	ea94 0f05 	teq	r4, r5
   d5b64:	f000 80a7 	beq.w	d5cb6 <__adddf3+0x1da>
   d5b68:	f1a4 0401 	sub.w	r4, r4, #1
   d5b6c:	f1d5 0e20 	rsbs	lr, r5, #32
   d5b70:	db0d      	blt.n	d5b8e <__adddf3+0xb2>
   d5b72:	fa02 fc0e 	lsl.w	ip, r2, lr
   d5b76:	fa22 f205 	lsr.w	r2, r2, r5
   d5b7a:	1880      	adds	r0, r0, r2
   d5b7c:	f141 0100 	adc.w	r1, r1, #0
   d5b80:	fa03 f20e 	lsl.w	r2, r3, lr
   d5b84:	1880      	adds	r0, r0, r2
   d5b86:	fa43 f305 	asr.w	r3, r3, r5
   d5b8a:	4159      	adcs	r1, r3
   d5b8c:	e00e      	b.n	d5bac <__adddf3+0xd0>
   d5b8e:	f1a5 0520 	sub.w	r5, r5, #32
   d5b92:	f10e 0e20 	add.w	lr, lr, #32
   d5b96:	2a01      	cmp	r2, #1
   d5b98:	fa03 fc0e 	lsl.w	ip, r3, lr
   d5b9c:	bf28      	it	cs
   d5b9e:	f04c 0c02 	orrcs.w	ip, ip, #2
   d5ba2:	fa43 f305 	asr.w	r3, r3, r5
   d5ba6:	18c0      	adds	r0, r0, r3
   d5ba8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d5bac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5bb0:	d507      	bpl.n	d5bc2 <__adddf3+0xe6>
   d5bb2:	f04f 0e00 	mov.w	lr, #0
   d5bb6:	f1dc 0c00 	rsbs	ip, ip, #0
   d5bba:	eb7e 0000 	sbcs.w	r0, lr, r0
   d5bbe:	eb6e 0101 	sbc.w	r1, lr, r1
   d5bc2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d5bc6:	d31b      	bcc.n	d5c00 <__adddf3+0x124>
   d5bc8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d5bcc:	d30c      	bcc.n	d5be8 <__adddf3+0x10c>
   d5bce:	0849      	lsrs	r1, r1, #1
   d5bd0:	ea5f 0030 	movs.w	r0, r0, rrx
   d5bd4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d5bd8:	f104 0401 	add.w	r4, r4, #1
   d5bdc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d5be0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d5be4:	f080 809a 	bcs.w	d5d1c <__adddf3+0x240>
   d5be8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d5bec:	bf08      	it	eq
   d5bee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5bf2:	f150 0000 	adcs.w	r0, r0, #0
   d5bf6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5bfa:	ea41 0105 	orr.w	r1, r1, r5
   d5bfe:	bd30      	pop	{r4, r5, pc}
   d5c00:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d5c04:	4140      	adcs	r0, r0
   d5c06:	eb41 0101 	adc.w	r1, r1, r1
   d5c0a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5c0e:	f1a4 0401 	sub.w	r4, r4, #1
   d5c12:	d1e9      	bne.n	d5be8 <__adddf3+0x10c>
   d5c14:	f091 0f00 	teq	r1, #0
   d5c18:	bf04      	itt	eq
   d5c1a:	4601      	moveq	r1, r0
   d5c1c:	2000      	moveq	r0, #0
   d5c1e:	fab1 f381 	clz	r3, r1
   d5c22:	bf08      	it	eq
   d5c24:	3320      	addeq	r3, #32
   d5c26:	f1a3 030b 	sub.w	r3, r3, #11
   d5c2a:	f1b3 0220 	subs.w	r2, r3, #32
   d5c2e:	da0c      	bge.n	d5c4a <__adddf3+0x16e>
   d5c30:	320c      	adds	r2, #12
   d5c32:	dd08      	ble.n	d5c46 <__adddf3+0x16a>
   d5c34:	f102 0c14 	add.w	ip, r2, #20
   d5c38:	f1c2 020c 	rsb	r2, r2, #12
   d5c3c:	fa01 f00c 	lsl.w	r0, r1, ip
   d5c40:	fa21 f102 	lsr.w	r1, r1, r2
   d5c44:	e00c      	b.n	d5c60 <__adddf3+0x184>
   d5c46:	f102 0214 	add.w	r2, r2, #20
   d5c4a:	bfd8      	it	le
   d5c4c:	f1c2 0c20 	rsble	ip, r2, #32
   d5c50:	fa01 f102 	lsl.w	r1, r1, r2
   d5c54:	fa20 fc0c 	lsr.w	ip, r0, ip
   d5c58:	bfdc      	itt	le
   d5c5a:	ea41 010c 	orrle.w	r1, r1, ip
   d5c5e:	4090      	lslle	r0, r2
   d5c60:	1ae4      	subs	r4, r4, r3
   d5c62:	bfa2      	ittt	ge
   d5c64:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d5c68:	4329      	orrge	r1, r5
   d5c6a:	bd30      	popge	{r4, r5, pc}
   d5c6c:	ea6f 0404 	mvn.w	r4, r4
   d5c70:	3c1f      	subs	r4, #31
   d5c72:	da1c      	bge.n	d5cae <__adddf3+0x1d2>
   d5c74:	340c      	adds	r4, #12
   d5c76:	dc0e      	bgt.n	d5c96 <__adddf3+0x1ba>
   d5c78:	f104 0414 	add.w	r4, r4, #20
   d5c7c:	f1c4 0220 	rsb	r2, r4, #32
   d5c80:	fa20 f004 	lsr.w	r0, r0, r4
   d5c84:	fa01 f302 	lsl.w	r3, r1, r2
   d5c88:	ea40 0003 	orr.w	r0, r0, r3
   d5c8c:	fa21 f304 	lsr.w	r3, r1, r4
   d5c90:	ea45 0103 	orr.w	r1, r5, r3
   d5c94:	bd30      	pop	{r4, r5, pc}
   d5c96:	f1c4 040c 	rsb	r4, r4, #12
   d5c9a:	f1c4 0220 	rsb	r2, r4, #32
   d5c9e:	fa20 f002 	lsr.w	r0, r0, r2
   d5ca2:	fa01 f304 	lsl.w	r3, r1, r4
   d5ca6:	ea40 0003 	orr.w	r0, r0, r3
   d5caa:	4629      	mov	r1, r5
   d5cac:	bd30      	pop	{r4, r5, pc}
   d5cae:	fa21 f004 	lsr.w	r0, r1, r4
   d5cb2:	4629      	mov	r1, r5
   d5cb4:	bd30      	pop	{r4, r5, pc}
   d5cb6:	f094 0f00 	teq	r4, #0
   d5cba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d5cbe:	bf06      	itte	eq
   d5cc0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d5cc4:	3401      	addeq	r4, #1
   d5cc6:	3d01      	subne	r5, #1
   d5cc8:	e74e      	b.n	d5b68 <__adddf3+0x8c>
   d5cca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5cce:	bf18      	it	ne
   d5cd0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5cd4:	d029      	beq.n	d5d2a <__adddf3+0x24e>
   d5cd6:	ea94 0f05 	teq	r4, r5
   d5cda:	bf08      	it	eq
   d5cdc:	ea90 0f02 	teqeq	r0, r2
   d5ce0:	d005      	beq.n	d5cee <__adddf3+0x212>
   d5ce2:	ea54 0c00 	orrs.w	ip, r4, r0
   d5ce6:	bf04      	itt	eq
   d5ce8:	4619      	moveq	r1, r3
   d5cea:	4610      	moveq	r0, r2
   d5cec:	bd30      	pop	{r4, r5, pc}
   d5cee:	ea91 0f03 	teq	r1, r3
   d5cf2:	bf1e      	ittt	ne
   d5cf4:	2100      	movne	r1, #0
   d5cf6:	2000      	movne	r0, #0
   d5cf8:	bd30      	popne	{r4, r5, pc}
   d5cfa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d5cfe:	d105      	bne.n	d5d0c <__adddf3+0x230>
   d5d00:	0040      	lsls	r0, r0, #1
   d5d02:	4149      	adcs	r1, r1
   d5d04:	bf28      	it	cs
   d5d06:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d5d0a:	bd30      	pop	{r4, r5, pc}
   d5d0c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d5d10:	bf3c      	itt	cc
   d5d12:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d5d16:	bd30      	popcc	{r4, r5, pc}
   d5d18:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5d1c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d5d20:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5d24:	f04f 0000 	mov.w	r0, #0
   d5d28:	bd30      	pop	{r4, r5, pc}
   d5d2a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5d2e:	bf1a      	itte	ne
   d5d30:	4619      	movne	r1, r3
   d5d32:	4610      	movne	r0, r2
   d5d34:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d5d38:	bf1c      	itt	ne
   d5d3a:	460b      	movne	r3, r1
   d5d3c:	4602      	movne	r2, r0
   d5d3e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5d42:	bf06      	itte	eq
   d5d44:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d5d48:	ea91 0f03 	teqeq	r1, r3
   d5d4c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d5d50:	bd30      	pop	{r4, r5, pc}
   d5d52:	bf00      	nop

000d5d54 <__aeabi_ui2d>:
   d5d54:	f090 0f00 	teq	r0, #0
   d5d58:	bf04      	itt	eq
   d5d5a:	2100      	moveq	r1, #0
   d5d5c:	4770      	bxeq	lr
   d5d5e:	b530      	push	{r4, r5, lr}
   d5d60:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5d64:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5d68:	f04f 0500 	mov.w	r5, #0
   d5d6c:	f04f 0100 	mov.w	r1, #0
   d5d70:	e750      	b.n	d5c14 <__adddf3+0x138>
   d5d72:	bf00      	nop

000d5d74 <__aeabi_i2d>:
   d5d74:	f090 0f00 	teq	r0, #0
   d5d78:	bf04      	itt	eq
   d5d7a:	2100      	moveq	r1, #0
   d5d7c:	4770      	bxeq	lr
   d5d7e:	b530      	push	{r4, r5, lr}
   d5d80:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5d84:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5d88:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d5d8c:	bf48      	it	mi
   d5d8e:	4240      	negmi	r0, r0
   d5d90:	f04f 0100 	mov.w	r1, #0
   d5d94:	e73e      	b.n	d5c14 <__adddf3+0x138>
   d5d96:	bf00      	nop

000d5d98 <__aeabi_f2d>:
   d5d98:	0042      	lsls	r2, r0, #1
   d5d9a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d5d9e:	ea4f 0131 	mov.w	r1, r1, rrx
   d5da2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d5da6:	bf1f      	itttt	ne
   d5da8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d5dac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5db0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d5db4:	4770      	bxne	lr
   d5db6:	f092 0f00 	teq	r2, #0
   d5dba:	bf14      	ite	ne
   d5dbc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5dc0:	4770      	bxeq	lr
   d5dc2:	b530      	push	{r4, r5, lr}
   d5dc4:	f44f 7460 	mov.w	r4, #896	; 0x380
   d5dc8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5dcc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5dd0:	e720      	b.n	d5c14 <__adddf3+0x138>
   d5dd2:	bf00      	nop

000d5dd4 <__aeabi_ul2d>:
   d5dd4:	ea50 0201 	orrs.w	r2, r0, r1
   d5dd8:	bf08      	it	eq
   d5dda:	4770      	bxeq	lr
   d5ddc:	b530      	push	{r4, r5, lr}
   d5dde:	f04f 0500 	mov.w	r5, #0
   d5de2:	e00a      	b.n	d5dfa <__aeabi_l2d+0x16>

000d5de4 <__aeabi_l2d>:
   d5de4:	ea50 0201 	orrs.w	r2, r0, r1
   d5de8:	bf08      	it	eq
   d5dea:	4770      	bxeq	lr
   d5dec:	b530      	push	{r4, r5, lr}
   d5dee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d5df2:	d502      	bpl.n	d5dfa <__aeabi_l2d+0x16>
   d5df4:	4240      	negs	r0, r0
   d5df6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5dfa:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5dfe:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5e02:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d5e06:	f43f aedc 	beq.w	d5bc2 <__adddf3+0xe6>
   d5e0a:	f04f 0203 	mov.w	r2, #3
   d5e0e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5e12:	bf18      	it	ne
   d5e14:	3203      	addne	r2, #3
   d5e16:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5e1a:	bf18      	it	ne
   d5e1c:	3203      	addne	r2, #3
   d5e1e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d5e22:	f1c2 0320 	rsb	r3, r2, #32
   d5e26:	fa00 fc03 	lsl.w	ip, r0, r3
   d5e2a:	fa20 f002 	lsr.w	r0, r0, r2
   d5e2e:	fa01 fe03 	lsl.w	lr, r1, r3
   d5e32:	ea40 000e 	orr.w	r0, r0, lr
   d5e36:	fa21 f102 	lsr.w	r1, r1, r2
   d5e3a:	4414      	add	r4, r2
   d5e3c:	e6c1      	b.n	d5bc2 <__adddf3+0xe6>
   d5e3e:	bf00      	nop

000d5e40 <__aeabi_dmul>:
   d5e40:	b570      	push	{r4, r5, r6, lr}
   d5e42:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5e46:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5e4a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5e4e:	bf1d      	ittte	ne
   d5e50:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5e54:	ea94 0f0c 	teqne	r4, ip
   d5e58:	ea95 0f0c 	teqne	r5, ip
   d5e5c:	f000 f8de 	bleq	d601c <__aeabi_dmul+0x1dc>
   d5e60:	442c      	add	r4, r5
   d5e62:	ea81 0603 	eor.w	r6, r1, r3
   d5e66:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d5e6a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d5e6e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d5e72:	bf18      	it	ne
   d5e74:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d5e78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5e7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d5e80:	d038      	beq.n	d5ef4 <__aeabi_dmul+0xb4>
   d5e82:	fba0 ce02 	umull	ip, lr, r0, r2
   d5e86:	f04f 0500 	mov.w	r5, #0
   d5e8a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d5e8e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d5e92:	fbe0 e503 	umlal	lr, r5, r0, r3
   d5e96:	f04f 0600 	mov.w	r6, #0
   d5e9a:	fbe1 5603 	umlal	r5, r6, r1, r3
   d5e9e:	f09c 0f00 	teq	ip, #0
   d5ea2:	bf18      	it	ne
   d5ea4:	f04e 0e01 	orrne.w	lr, lr, #1
   d5ea8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d5eac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5eb0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d5eb4:	d204      	bcs.n	d5ec0 <__aeabi_dmul+0x80>
   d5eb6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d5eba:	416d      	adcs	r5, r5
   d5ebc:	eb46 0606 	adc.w	r6, r6, r6
   d5ec0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d5ec4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d5ec8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d5ecc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d5ed0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d5ed4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5ed8:	bf88      	it	hi
   d5eda:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5ede:	d81e      	bhi.n	d5f1e <__aeabi_dmul+0xde>
   d5ee0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d5ee4:	bf08      	it	eq
   d5ee6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d5eea:	f150 0000 	adcs.w	r0, r0, #0
   d5eee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5ef2:	bd70      	pop	{r4, r5, r6, pc}
   d5ef4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d5ef8:	ea46 0101 	orr.w	r1, r6, r1
   d5efc:	ea40 0002 	orr.w	r0, r0, r2
   d5f00:	ea81 0103 	eor.w	r1, r1, r3
   d5f04:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d5f08:	bfc2      	ittt	gt
   d5f0a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5f0e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5f12:	bd70      	popgt	{r4, r5, r6, pc}
   d5f14:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5f18:	f04f 0e00 	mov.w	lr, #0
   d5f1c:	3c01      	subs	r4, #1
   d5f1e:	f300 80ab 	bgt.w	d6078 <__aeabi_dmul+0x238>
   d5f22:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d5f26:	bfde      	ittt	le
   d5f28:	2000      	movle	r0, #0
   d5f2a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d5f2e:	bd70      	pople	{r4, r5, r6, pc}
   d5f30:	f1c4 0400 	rsb	r4, r4, #0
   d5f34:	3c20      	subs	r4, #32
   d5f36:	da35      	bge.n	d5fa4 <__aeabi_dmul+0x164>
   d5f38:	340c      	adds	r4, #12
   d5f3a:	dc1b      	bgt.n	d5f74 <__aeabi_dmul+0x134>
   d5f3c:	f104 0414 	add.w	r4, r4, #20
   d5f40:	f1c4 0520 	rsb	r5, r4, #32
   d5f44:	fa00 f305 	lsl.w	r3, r0, r5
   d5f48:	fa20 f004 	lsr.w	r0, r0, r4
   d5f4c:	fa01 f205 	lsl.w	r2, r1, r5
   d5f50:	ea40 0002 	orr.w	r0, r0, r2
   d5f54:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d5f58:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5f5c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5f60:	fa21 f604 	lsr.w	r6, r1, r4
   d5f64:	eb42 0106 	adc.w	r1, r2, r6
   d5f68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5f6c:	bf08      	it	eq
   d5f6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5f72:	bd70      	pop	{r4, r5, r6, pc}
   d5f74:	f1c4 040c 	rsb	r4, r4, #12
   d5f78:	f1c4 0520 	rsb	r5, r4, #32
   d5f7c:	fa00 f304 	lsl.w	r3, r0, r4
   d5f80:	fa20 f005 	lsr.w	r0, r0, r5
   d5f84:	fa01 f204 	lsl.w	r2, r1, r4
   d5f88:	ea40 0002 	orr.w	r0, r0, r2
   d5f8c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5f90:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5f94:	f141 0100 	adc.w	r1, r1, #0
   d5f98:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5f9c:	bf08      	it	eq
   d5f9e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5fa2:	bd70      	pop	{r4, r5, r6, pc}
   d5fa4:	f1c4 0520 	rsb	r5, r4, #32
   d5fa8:	fa00 f205 	lsl.w	r2, r0, r5
   d5fac:	ea4e 0e02 	orr.w	lr, lr, r2
   d5fb0:	fa20 f304 	lsr.w	r3, r0, r4
   d5fb4:	fa01 f205 	lsl.w	r2, r1, r5
   d5fb8:	ea43 0302 	orr.w	r3, r3, r2
   d5fbc:	fa21 f004 	lsr.w	r0, r1, r4
   d5fc0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5fc4:	fa21 f204 	lsr.w	r2, r1, r4
   d5fc8:	ea20 0002 	bic.w	r0, r0, r2
   d5fcc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d5fd0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5fd4:	bf08      	it	eq
   d5fd6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5fda:	bd70      	pop	{r4, r5, r6, pc}
   d5fdc:	f094 0f00 	teq	r4, #0
   d5fe0:	d10f      	bne.n	d6002 <__aeabi_dmul+0x1c2>
   d5fe2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d5fe6:	0040      	lsls	r0, r0, #1
   d5fe8:	eb41 0101 	adc.w	r1, r1, r1
   d5fec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5ff0:	bf08      	it	eq
   d5ff2:	3c01      	subeq	r4, #1
   d5ff4:	d0f7      	beq.n	d5fe6 <__aeabi_dmul+0x1a6>
   d5ff6:	ea41 0106 	orr.w	r1, r1, r6
   d5ffa:	f095 0f00 	teq	r5, #0
   d5ffe:	bf18      	it	ne
   d6000:	4770      	bxne	lr
   d6002:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d6006:	0052      	lsls	r2, r2, #1
   d6008:	eb43 0303 	adc.w	r3, r3, r3
   d600c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6010:	bf08      	it	eq
   d6012:	3d01      	subeq	r5, #1
   d6014:	d0f7      	beq.n	d6006 <__aeabi_dmul+0x1c6>
   d6016:	ea43 0306 	orr.w	r3, r3, r6
   d601a:	4770      	bx	lr
   d601c:	ea94 0f0c 	teq	r4, ip
   d6020:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6024:	bf18      	it	ne
   d6026:	ea95 0f0c 	teqne	r5, ip
   d602a:	d00c      	beq.n	d6046 <__aeabi_dmul+0x206>
   d602c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6030:	bf18      	it	ne
   d6032:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6036:	d1d1      	bne.n	d5fdc <__aeabi_dmul+0x19c>
   d6038:	ea81 0103 	eor.w	r1, r1, r3
   d603c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6040:	f04f 0000 	mov.w	r0, #0
   d6044:	bd70      	pop	{r4, r5, r6, pc}
   d6046:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d604a:	bf06      	itte	eq
   d604c:	4610      	moveq	r0, r2
   d604e:	4619      	moveq	r1, r3
   d6050:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6054:	d019      	beq.n	d608a <__aeabi_dmul+0x24a>
   d6056:	ea94 0f0c 	teq	r4, ip
   d605a:	d102      	bne.n	d6062 <__aeabi_dmul+0x222>
   d605c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6060:	d113      	bne.n	d608a <__aeabi_dmul+0x24a>
   d6062:	ea95 0f0c 	teq	r5, ip
   d6066:	d105      	bne.n	d6074 <__aeabi_dmul+0x234>
   d6068:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d606c:	bf1c      	itt	ne
   d606e:	4610      	movne	r0, r2
   d6070:	4619      	movne	r1, r3
   d6072:	d10a      	bne.n	d608a <__aeabi_dmul+0x24a>
   d6074:	ea81 0103 	eor.w	r1, r1, r3
   d6078:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d607c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6080:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6084:	f04f 0000 	mov.w	r0, #0
   d6088:	bd70      	pop	{r4, r5, r6, pc}
   d608a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d608e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d6092:	bd70      	pop	{r4, r5, r6, pc}

000d6094 <__aeabi_ddiv>:
   d6094:	b570      	push	{r4, r5, r6, lr}
   d6096:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d609a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d609e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d60a2:	bf1d      	ittte	ne
   d60a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d60a8:	ea94 0f0c 	teqne	r4, ip
   d60ac:	ea95 0f0c 	teqne	r5, ip
   d60b0:	f000 f8a7 	bleq	d6202 <__aeabi_ddiv+0x16e>
   d60b4:	eba4 0405 	sub.w	r4, r4, r5
   d60b8:	ea81 0e03 	eor.w	lr, r1, r3
   d60bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d60c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d60c4:	f000 8088 	beq.w	d61d8 <__aeabi_ddiv+0x144>
   d60c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d60cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d60d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d60d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d60d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d60dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d60e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d60e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d60e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d60ec:	429d      	cmp	r5, r3
   d60ee:	bf08      	it	eq
   d60f0:	4296      	cmpeq	r6, r2
   d60f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d60f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d60fa:	d202      	bcs.n	d6102 <__aeabi_ddiv+0x6e>
   d60fc:	085b      	lsrs	r3, r3, #1
   d60fe:	ea4f 0232 	mov.w	r2, r2, rrx
   d6102:	1ab6      	subs	r6, r6, r2
   d6104:	eb65 0503 	sbc.w	r5, r5, r3
   d6108:	085b      	lsrs	r3, r3, #1
   d610a:	ea4f 0232 	mov.w	r2, r2, rrx
   d610e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d6112:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d6116:	ebb6 0e02 	subs.w	lr, r6, r2
   d611a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d611e:	bf22      	ittt	cs
   d6120:	1ab6      	subcs	r6, r6, r2
   d6122:	4675      	movcs	r5, lr
   d6124:	ea40 000c 	orrcs.w	r0, r0, ip
   d6128:	085b      	lsrs	r3, r3, #1
   d612a:	ea4f 0232 	mov.w	r2, r2, rrx
   d612e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6132:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6136:	bf22      	ittt	cs
   d6138:	1ab6      	subcs	r6, r6, r2
   d613a:	4675      	movcs	r5, lr
   d613c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6140:	085b      	lsrs	r3, r3, #1
   d6142:	ea4f 0232 	mov.w	r2, r2, rrx
   d6146:	ebb6 0e02 	subs.w	lr, r6, r2
   d614a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d614e:	bf22      	ittt	cs
   d6150:	1ab6      	subcs	r6, r6, r2
   d6152:	4675      	movcs	r5, lr
   d6154:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6158:	085b      	lsrs	r3, r3, #1
   d615a:	ea4f 0232 	mov.w	r2, r2, rrx
   d615e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6162:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6166:	bf22      	ittt	cs
   d6168:	1ab6      	subcs	r6, r6, r2
   d616a:	4675      	movcs	r5, lr
   d616c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6170:	ea55 0e06 	orrs.w	lr, r5, r6
   d6174:	d018      	beq.n	d61a8 <__aeabi_ddiv+0x114>
   d6176:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d617a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d617e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6182:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d6186:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d618a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d618e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d6192:	d1c0      	bne.n	d6116 <__aeabi_ddiv+0x82>
   d6194:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6198:	d10b      	bne.n	d61b2 <__aeabi_ddiv+0x11e>
   d619a:	ea41 0100 	orr.w	r1, r1, r0
   d619e:	f04f 0000 	mov.w	r0, #0
   d61a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d61a6:	e7b6      	b.n	d6116 <__aeabi_ddiv+0x82>
   d61a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d61ac:	bf04      	itt	eq
   d61ae:	4301      	orreq	r1, r0
   d61b0:	2000      	moveq	r0, #0
   d61b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d61b6:	bf88      	it	hi
   d61b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d61bc:	f63f aeaf 	bhi.w	d5f1e <__aeabi_dmul+0xde>
   d61c0:	ebb5 0c03 	subs.w	ip, r5, r3
   d61c4:	bf04      	itt	eq
   d61c6:	ebb6 0c02 	subseq.w	ip, r6, r2
   d61ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d61ce:	f150 0000 	adcs.w	r0, r0, #0
   d61d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d61d6:	bd70      	pop	{r4, r5, r6, pc}
   d61d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d61dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d61e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d61e4:	bfc2      	ittt	gt
   d61e6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d61ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d61ee:	bd70      	popgt	{r4, r5, r6, pc}
   d61f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d61f4:	f04f 0e00 	mov.w	lr, #0
   d61f8:	3c01      	subs	r4, #1
   d61fa:	e690      	b.n	d5f1e <__aeabi_dmul+0xde>
   d61fc:	ea45 0e06 	orr.w	lr, r5, r6
   d6200:	e68d      	b.n	d5f1e <__aeabi_dmul+0xde>
   d6202:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6206:	ea94 0f0c 	teq	r4, ip
   d620a:	bf08      	it	eq
   d620c:	ea95 0f0c 	teqeq	r5, ip
   d6210:	f43f af3b 	beq.w	d608a <__aeabi_dmul+0x24a>
   d6214:	ea94 0f0c 	teq	r4, ip
   d6218:	d10a      	bne.n	d6230 <__aeabi_ddiv+0x19c>
   d621a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d621e:	f47f af34 	bne.w	d608a <__aeabi_dmul+0x24a>
   d6222:	ea95 0f0c 	teq	r5, ip
   d6226:	f47f af25 	bne.w	d6074 <__aeabi_dmul+0x234>
   d622a:	4610      	mov	r0, r2
   d622c:	4619      	mov	r1, r3
   d622e:	e72c      	b.n	d608a <__aeabi_dmul+0x24a>
   d6230:	ea95 0f0c 	teq	r5, ip
   d6234:	d106      	bne.n	d6244 <__aeabi_ddiv+0x1b0>
   d6236:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d623a:	f43f aefd 	beq.w	d6038 <__aeabi_dmul+0x1f8>
   d623e:	4610      	mov	r0, r2
   d6240:	4619      	mov	r1, r3
   d6242:	e722      	b.n	d608a <__aeabi_dmul+0x24a>
   d6244:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6248:	bf18      	it	ne
   d624a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d624e:	f47f aec5 	bne.w	d5fdc <__aeabi_dmul+0x19c>
   d6252:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d6256:	f47f af0d 	bne.w	d6074 <__aeabi_dmul+0x234>
   d625a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d625e:	f47f aeeb 	bne.w	d6038 <__aeabi_dmul+0x1f8>
   d6262:	e712      	b.n	d608a <__aeabi_dmul+0x24a>

000d6264 <__gedf2>:
   d6264:	f04f 3cff 	mov.w	ip, #4294967295
   d6268:	e006      	b.n	d6278 <__cmpdf2+0x4>
   d626a:	bf00      	nop

000d626c <__ledf2>:
   d626c:	f04f 0c01 	mov.w	ip, #1
   d6270:	e002      	b.n	d6278 <__cmpdf2+0x4>
   d6272:	bf00      	nop

000d6274 <__cmpdf2>:
   d6274:	f04f 0c01 	mov.w	ip, #1
   d6278:	f84d cd04 	str.w	ip, [sp, #-4]!
   d627c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6280:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6284:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6288:	bf18      	it	ne
   d628a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d628e:	d01b      	beq.n	d62c8 <__cmpdf2+0x54>
   d6290:	b001      	add	sp, #4
   d6292:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d6296:	bf0c      	ite	eq
   d6298:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d629c:	ea91 0f03 	teqne	r1, r3
   d62a0:	bf02      	ittt	eq
   d62a2:	ea90 0f02 	teqeq	r0, r2
   d62a6:	2000      	moveq	r0, #0
   d62a8:	4770      	bxeq	lr
   d62aa:	f110 0f00 	cmn.w	r0, #0
   d62ae:	ea91 0f03 	teq	r1, r3
   d62b2:	bf58      	it	pl
   d62b4:	4299      	cmppl	r1, r3
   d62b6:	bf08      	it	eq
   d62b8:	4290      	cmpeq	r0, r2
   d62ba:	bf2c      	ite	cs
   d62bc:	17d8      	asrcs	r0, r3, #31
   d62be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d62c2:	f040 0001 	orr.w	r0, r0, #1
   d62c6:	4770      	bx	lr
   d62c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d62cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d62d0:	d102      	bne.n	d62d8 <__cmpdf2+0x64>
   d62d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d62d6:	d107      	bne.n	d62e8 <__cmpdf2+0x74>
   d62d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d62dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d62e0:	d1d6      	bne.n	d6290 <__cmpdf2+0x1c>
   d62e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d62e6:	d0d3      	beq.n	d6290 <__cmpdf2+0x1c>
   d62e8:	f85d 0b04 	ldr.w	r0, [sp], #4
   d62ec:	4770      	bx	lr
   d62ee:	bf00      	nop

000d62f0 <__aeabi_cdrcmple>:
   d62f0:	4684      	mov	ip, r0
   d62f2:	4610      	mov	r0, r2
   d62f4:	4662      	mov	r2, ip
   d62f6:	468c      	mov	ip, r1
   d62f8:	4619      	mov	r1, r3
   d62fa:	4663      	mov	r3, ip
   d62fc:	e000      	b.n	d6300 <__aeabi_cdcmpeq>
   d62fe:	bf00      	nop

000d6300 <__aeabi_cdcmpeq>:
   d6300:	b501      	push	{r0, lr}
   d6302:	f7ff ffb7 	bl	d6274 <__cmpdf2>
   d6306:	2800      	cmp	r0, #0
   d6308:	bf48      	it	mi
   d630a:	f110 0f00 	cmnmi.w	r0, #0
   d630e:	bd01      	pop	{r0, pc}

000d6310 <__aeabi_dcmpeq>:
   d6310:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6314:	f7ff fff4 	bl	d6300 <__aeabi_cdcmpeq>
   d6318:	bf0c      	ite	eq
   d631a:	2001      	moveq	r0, #1
   d631c:	2000      	movne	r0, #0
   d631e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6322:	bf00      	nop

000d6324 <__aeabi_dcmplt>:
   d6324:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6328:	f7ff ffea 	bl	d6300 <__aeabi_cdcmpeq>
   d632c:	bf34      	ite	cc
   d632e:	2001      	movcc	r0, #1
   d6330:	2000      	movcs	r0, #0
   d6332:	f85d fb08 	ldr.w	pc, [sp], #8
   d6336:	bf00      	nop

000d6338 <__aeabi_dcmple>:
   d6338:	f84d ed08 	str.w	lr, [sp, #-8]!
   d633c:	f7ff ffe0 	bl	d6300 <__aeabi_cdcmpeq>
   d6340:	bf94      	ite	ls
   d6342:	2001      	movls	r0, #1
   d6344:	2000      	movhi	r0, #0
   d6346:	f85d fb08 	ldr.w	pc, [sp], #8
   d634a:	bf00      	nop

000d634c <__aeabi_dcmpge>:
   d634c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6350:	f7ff ffce 	bl	d62f0 <__aeabi_cdrcmple>
   d6354:	bf94      	ite	ls
   d6356:	2001      	movls	r0, #1
   d6358:	2000      	movhi	r0, #0
   d635a:	f85d fb08 	ldr.w	pc, [sp], #8
   d635e:	bf00      	nop

000d6360 <__aeabi_dcmpgt>:
   d6360:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6364:	f7ff ffc4 	bl	d62f0 <__aeabi_cdrcmple>
   d6368:	bf34      	ite	cc
   d636a:	2001      	movcc	r0, #1
   d636c:	2000      	movcs	r0, #0
   d636e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6372:	bf00      	nop

000d6374 <__aeabi_dcmpun>:
   d6374:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6378:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d637c:	d102      	bne.n	d6384 <__aeabi_dcmpun+0x10>
   d637e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6382:	d10a      	bne.n	d639a <__aeabi_dcmpun+0x26>
   d6384:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6388:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d638c:	d102      	bne.n	d6394 <__aeabi_dcmpun+0x20>
   d638e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6392:	d102      	bne.n	d639a <__aeabi_dcmpun+0x26>
   d6394:	f04f 0000 	mov.w	r0, #0
   d6398:	4770      	bx	lr
   d639a:	f04f 0001 	mov.w	r0, #1
   d639e:	4770      	bx	lr

000d63a0 <__aeabi_d2iz>:
   d63a0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d63a4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d63a8:	d215      	bcs.n	d63d6 <__aeabi_d2iz+0x36>
   d63aa:	d511      	bpl.n	d63d0 <__aeabi_d2iz+0x30>
   d63ac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d63b0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d63b4:	d912      	bls.n	d63dc <__aeabi_d2iz+0x3c>
   d63b6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d63ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d63be:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d63c2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d63c6:	fa23 f002 	lsr.w	r0, r3, r2
   d63ca:	bf18      	it	ne
   d63cc:	4240      	negne	r0, r0
   d63ce:	4770      	bx	lr
   d63d0:	f04f 0000 	mov.w	r0, #0
   d63d4:	4770      	bx	lr
   d63d6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d63da:	d105      	bne.n	d63e8 <__aeabi_d2iz+0x48>
   d63dc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d63e0:	bf08      	it	eq
   d63e2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d63e6:	4770      	bx	lr
   d63e8:	f04f 0000 	mov.w	r0, #0
   d63ec:	4770      	bx	lr
   d63ee:	bf00      	nop

000d63f0 <__aeabi_d2uiz>:
   d63f0:	004a      	lsls	r2, r1, #1
   d63f2:	d211      	bcs.n	d6418 <__aeabi_d2uiz+0x28>
   d63f4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d63f8:	d211      	bcs.n	d641e <__aeabi_d2uiz+0x2e>
   d63fa:	d50d      	bpl.n	d6418 <__aeabi_d2uiz+0x28>
   d63fc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6400:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6404:	d40e      	bmi.n	d6424 <__aeabi_d2uiz+0x34>
   d6406:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d640a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d640e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6412:	fa23 f002 	lsr.w	r0, r3, r2
   d6416:	4770      	bx	lr
   d6418:	f04f 0000 	mov.w	r0, #0
   d641c:	4770      	bx	lr
   d641e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6422:	d102      	bne.n	d642a <__aeabi_d2uiz+0x3a>
   d6424:	f04f 30ff 	mov.w	r0, #4294967295
   d6428:	4770      	bx	lr
   d642a:	f04f 0000 	mov.w	r0, #0
   d642e:	4770      	bx	lr

000d6430 <__cxa_atexit>:
   d6430:	b510      	push	{r4, lr}
   d6432:	4c05      	ldr	r4, [pc, #20]	; (d6448 <__cxa_atexit+0x18>)
   d6434:	4613      	mov	r3, r2
   d6436:	b12c      	cbz	r4, d6444 <__cxa_atexit+0x14>
   d6438:	460a      	mov	r2, r1
   d643a:	4601      	mov	r1, r0
   d643c:	2002      	movs	r0, #2
   d643e:	f3af 8000 	nop.w
   d6442:	bd10      	pop	{r4, pc}
   d6444:	4620      	mov	r0, r4
   d6446:	bd10      	pop	{r4, pc}
   d6448:	00000000 	.word	0x00000000

000d644c <memcpy>:
   d644c:	b510      	push	{r4, lr}
   d644e:	1e43      	subs	r3, r0, #1
   d6450:	440a      	add	r2, r1
   d6452:	4291      	cmp	r1, r2
   d6454:	d004      	beq.n	d6460 <memcpy+0x14>
   d6456:	f811 4b01 	ldrb.w	r4, [r1], #1
   d645a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d645e:	e7f8      	b.n	d6452 <memcpy+0x6>
   d6460:	bd10      	pop	{r4, pc}

000d6462 <memset>:
   d6462:	4402      	add	r2, r0
   d6464:	4603      	mov	r3, r0
   d6466:	4293      	cmp	r3, r2
   d6468:	d002      	beq.n	d6470 <memset+0xe>
   d646a:	f803 1b01 	strb.w	r1, [r3], #1
   d646e:	e7fa      	b.n	d6466 <memset+0x4>
   d6470:	4770      	bx	lr
	...

000d6474 <srand>:
   d6474:	b538      	push	{r3, r4, r5, lr}
   d6476:	4b12      	ldr	r3, [pc, #72]	; (d64c0 <srand+0x4c>)
   d6478:	681c      	ldr	r4, [r3, #0]
   d647a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d647c:	4605      	mov	r5, r0
   d647e:	b9d3      	cbnz	r3, d64b6 <srand+0x42>
   d6480:	2018      	movs	r0, #24
   d6482:	f7fe f8a5 	bl	d45d0 <malloc>
   d6486:	f243 330e 	movw	r3, #13070	; 0x330e
   d648a:	63a0      	str	r0, [r4, #56]	; 0x38
   d648c:	8003      	strh	r3, [r0, #0]
   d648e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6492:	8043      	strh	r3, [r0, #2]
   d6494:	f241 2334 	movw	r3, #4660	; 0x1234
   d6498:	8083      	strh	r3, [r0, #4]
   d649a:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d649e:	80c3      	strh	r3, [r0, #6]
   d64a0:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d64a4:	8103      	strh	r3, [r0, #8]
   d64a6:	2305      	movs	r3, #5
   d64a8:	8143      	strh	r3, [r0, #10]
   d64aa:	230b      	movs	r3, #11
   d64ac:	8183      	strh	r3, [r0, #12]
   d64ae:	2201      	movs	r2, #1
   d64b0:	2300      	movs	r3, #0
   d64b2:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d64b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d64b8:	2200      	movs	r2, #0
   d64ba:	611d      	str	r5, [r3, #16]
   d64bc:	615a      	str	r2, [r3, #20]
   d64be:	bd38      	pop	{r3, r4, r5, pc}
   d64c0:	2003e3a4 	.word	0x2003e3a4

000d64c4 <strdup>:
   d64c4:	4b02      	ldr	r3, [pc, #8]	; (d64d0 <strdup+0xc>)
   d64c6:	4601      	mov	r1, r0
   d64c8:	6818      	ldr	r0, [r3, #0]
   d64ca:	f000 b803 	b.w	d64d4 <_strdup_r>
   d64ce:	bf00      	nop
   d64d0:	2003e3a4 	.word	0x2003e3a4

000d64d4 <_strdup_r>:
   d64d4:	b570      	push	{r4, r5, r6, lr}
   d64d6:	4606      	mov	r6, r0
   d64d8:	4608      	mov	r0, r1
   d64da:	460c      	mov	r4, r1
   d64dc:	f000 f80d 	bl	d64fa <strlen>
   d64e0:	1c45      	adds	r5, r0, #1
   d64e2:	4629      	mov	r1, r5
   d64e4:	4630      	mov	r0, r6
   d64e6:	f7fe f893 	bl	d4610 <_malloc_r>
   d64ea:	4606      	mov	r6, r0
   d64ec:	b118      	cbz	r0, d64f6 <_strdup_r+0x22>
   d64ee:	462a      	mov	r2, r5
   d64f0:	4621      	mov	r1, r4
   d64f2:	f7ff ffab 	bl	d644c <memcpy>
   d64f6:	4630      	mov	r0, r6
   d64f8:	bd70      	pop	{r4, r5, r6, pc}

000d64fa <strlen>:
   d64fa:	4603      	mov	r3, r0
   d64fc:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6500:	2a00      	cmp	r2, #0
   d6502:	d1fb      	bne.n	d64fc <strlen+0x2>
   d6504:	1a18      	subs	r0, r3, r0
   d6506:	3801      	subs	r0, #1
   d6508:	4770      	bx	lr

000d650a <link_code_end>:
	...

000d650c <dynalib_user>:
   d650c:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d651c:	0000 0000 7774 6c69 6f69 735f 736d 5300     ....twilio_sms.S
   d652c:	6e65 6964 676e 654d 7373 6761 0065 6854     endingMessage.Th
   d653c:	2065 6863 6c69 2064 7369 6920 206e 6874     e child is in th
   d654c:	2065 6163 2072 6669 7420 6568 6120 6576     e car if the ave
   d655c:	6172 6567 3c20 3320 203a 6300 6968 646c     rage < 3: .child
   d656c:	6920 206e 6163 0072 6553 646e 6e69 2067      in car.Sending 
   d657c:	656d 7373 6761 2065 6562 6163 7375 2065     message because 
   d658c:	6163 2072 7574 6e72 6465 6f20 6666 6120     car turned off a
   d659c:	646e 6320 6968 646c 6920 2073 6e69 7420     nd child is in t
   d65ac:	6568 6320 7261 5400 6568 7420 6d65 6570     he car.The tempe
   d65bc:	6172 7574 6572 6920 2073 6972 6973 676e     rature is rising
   d65cc:	7420 6f6f 6620 7361 0074 6553 646e 6e69      too fast.Sendin
   d65dc:	2067 656d 7373 6761 2065 6562 6163 7375     g message becaus
   d65ec:	2065 6574 706d 7265 7461 7275 2065 7369     e temperature is
   d65fc:	7420 6f6f 6820 746f 5300 6e65 6964 676e      too hot.Sending
   d660c:	6d20 7365 6173 6567 6220 6365 7561 6573      message because
   d661c:	7420 6d65 2070 7369 6320 6972 6974 6163      temp is critica
   d662c:	006c 6f59 7275 6320 6968 646c 6920 2073     l.Your child is 
   d663c:	6e69 7420 6568 6320 7261 0000               in the car..

000d6648 <_ZTVN5spark13EthernetClassE>:
	...
   d6650:	467f 000d 4675 000d 466b 000d 4661 000d     .F..uF..kF..aF..
   d6660:	4655 000d 4649 000d 463d 000d 4635 000d     UF..IF..=F..5F..
   d6670:	462b 000d 4621 000d 574d 000d 616e 006e     +F..!F..MW..nan.
   d6680:	766f 0066 002e 6e69 0066 6162 6475 5300     ovf...inf.baud.S
   d6690:	7265 6169 006c 6553 6972 6c61 0031 7974     erial.Serial1.ty
   d66a0:	6570 7000 7261 6d61 6300 646d 6900 0064     pe.param.cmd.id.
   d66b0:	6e68 0064 7473 6d72 6600 6c69 0074 766c     hnd.strm.filt.lv
   d66c0:	006c 6461 4864 6e61 6c64 7265 7200 6d65     l.addHandler.rem
   d66d0:	766f 4865 6e61 6c64 7265 6500 756e 486d     oveHandler.enumH
   d66e0:	6e61 6c64 7265 0073 534a 4e4f 7453 6572     andlers.JSONStre
   d66f0:	6d61 6f4c 4867 6e61 6c64 7265 6100 7070     amLogHandler.app
   d6700:	2500 3130 7530 0020 205d 2500 0064 202c     .%010u .] .%d., 
   d6710:	2800 3a29 0020 5b20 6300 646f 2065 203d     .(): . [.code = 
   d6720:	2500 0069 6564 6174 6c69 2073 203d 0d00     .%i.details = ..
   d6730:	000a 6e6c 6600 006e 6f63 6564 6400 7465     ..ln.fn.code.det
   d6740:	6961 006c 6f6e 656e 7400 6172 6563 6900     ail.none.trace.i
   d6750:	666e 006f 6177 6e72 6500 7272 726f 7000     nfo.warn.error.p
   d6760:	6e61 6369 6100 6c6c 5a00 2500 302b 6433     anic.all.Z.%+03d
   d6770:	253a 3230 0075 5925 252d 2d6d 6425 2554     :%02u.%Y-%m-%dT%
   d6780:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   d6790:	0065 0000                                   e...

000d6794 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d679c:	4c31 000d 4c37 000d 4c7b 000d 4c45 000d     1L..7L..{L..EL..
   d67ac:	4c33 000d                                   3L..

000d67b0 <_ZTV9IPAddress>:
	...
   d67b8:	51c9 000d 51b9 000d 51bb 000d               .Q...Q...Q..

000d67c4 <_ZTV9USBSerial>:
	...
   d67cc:	52a1 000d 52f1 000d 52ff 000d 4825 000d     .R...R...R..%H..
   d67dc:	52dd 000d 52a3 000d 52b9 000d 52eb 000d     .R...R...R...R..
   d67ec:	52cf 000d 529d 000d                         .R...R..

000d67f4 <_ZTVN5spark13CellularClassE>:
	...
   d67fc:	540b 000d 5401 000d 53f7 000d 53ad 000d     .T...T...S...S..
   d680c:	53eb 000d 53df 000d 53d3 000d 53cb 000d     .S...S...S...S..
   d681c:	53c1 000d 53b7 000d 574d 000d               .S...S..MW..

000d6828 <_ZTV11USARTSerial>:
	...
   d6830:	5445 000d 5495 000d 54a3 000d 4825 000d     ET...T...T..%H..
   d6840:	5459 000d 547b 000d 5467 000d 548f 000d     YT..{T..gT...T..
   d6850:	5447 000d 544b 000d                         GT..KT..

000d6858 <_ZTVN5spark9MeshClassE>:
	...
   d6860:	55c7 000d 55bd 000d 55b3 000d 55a9 000d     .U...U...U...U..
   d6870:	559d 000d 5591 000d 5585 000d 557d 000d     .U...U...U..}U..
   d6880:	5573 000d 5569 000d 574d 000d               sU..iU..MW..

000d688c <_ZTVN5spark12NetworkClassE>:
	...
   d6894:	56e5 000d 56ef 000d 56f9 000d 5703 000d     .V...V...V...W..
   d68a4:	570d 000d 5719 000d 5725 000d 5731 000d     .W...W..%W..1W..
   d68b4:	5739 000d 5743 000d 574d 000d               9W..CW..MW..

000d68c0 <__sf_fake_stdin>:
	...

000d68e0 <__sf_fake_stdout>:
	...

000d6900 <__sf_fake_stderr>:
	...
   d6920:	0043                                        C.

000d6922 <link_const_variable_data_end>:
	...

000d6924 <link_constructors_location>:
   d6924:	000d42d1 	.word	0x000d42d1
   d6928:	000d4689 	.word	0x000d4689
   d692c:	000d46bd 	.word	0x000d46bd
   d6930:	000d47fd 	.word	0x000d47fd
   d6934:	000d4a9d 	.word	0x000d4a9d
   d6938:	000d4aad 	.word	0x000d4aad
   d693c:	000d4b05 	.word	0x000d4b05
   d6940:	000d5415 	.word	0x000d5415
   d6944:	000d5695 	.word	0x000d5695
   d6948:	000d5819 	.word	0x000d5819
   d694c:	000d5841 	.word	0x000d5841
   d6950:	000d58c5 	.word	0x000d58c5
   d6954:	000d5989 	.word	0x000d5989
   d6958:	000d5a4d 	.word	0x000d5a4d

000d695c <link_constructors_end>:
   d695c:	00000000 	.word	0x00000000
