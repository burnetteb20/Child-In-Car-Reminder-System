
c:/Users/BryceBurnette/Documents/ParticleProjects/babysaverAlgorithm/target/1.5.0/boron/babysaverAlgorithm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003130  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d7150  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e2cc  000d7154  0001e2cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000004bc  2003e334  2003e334  0002e334  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d71bc  000d71bc  000271bc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d71e4  000d71e4  000271e4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000e452b  00000000  00000000  000271e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00012425  00000000  00000000  0010b713  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001f1f9  00000000  00000000  0011db38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000025f0  00000000  00000000  0013cd31  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004880  00000000  00000000  0013f321  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00036a8f  00000000  00000000  00143ba1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002c9e9  00000000  00000000  0017a630  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001058c7  00000000  00000000  001a7019  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000d254  00000000  00000000  002ac8e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f002 fde7 	bl	d6c04 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f002 fdec 	bl	d6c1a <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e2cc 	.word	0x2003e2cc
   d404c:	000d7154 	.word	0x000d7154
   d4050:	2003e334 	.word	0x2003e334
   d4054:	2003e334 	.word	0x2003e334
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f000 fff3 	bl	d5048 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d7148 	.word	0x000d7148
   d4084:	000d710c 	.word	0x000d710c

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b816 	b.w	d40b8 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f8f9 	bl	d4284 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f000 bf99 	b.w	d4fcc <_post_loop>

000d409a <_Znwj>:
   d409a:	f000 bcb9 	b.w	d4a10 <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 bcbf 	b.w	d4a20 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 bcbd 	b.w	d4a20 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <setup>:

Adafruit_SHT31 sht31 = Adafruit_SHT31();    //initialize the temperature sensor

// setup() runs once, when the device is first turned on.
void setup() 
{
   d40b8:	b538      	push	{r3, r4, r5, lr}
  Serial.begin(9600);     //Initialize serial monitor
   d40ba:	f001 fb89 	bl	d57d0 <_Z16_fetch_usbserialv>
   d40be:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40c2:	f001 fb79 	bl	d57b8 <_ZN9USBSerial5beginEl>
  sht31.begin(0x44);      //Turn on the temperature sensor
   d40c6:	2144      	movs	r1, #68	; 0x44
   d40c8:	481b      	ldr	r0, [pc, #108]	; (d4138 <setup+0x80>)

  //fill the storage arrays with the current reading from all of the hardware
  for (int thisReading = 0; thisReading < usbReadings; thisReading++) 
  {
    usb[thisReading] = analogRead(USBPIN);
   d40ca:	4c1c      	ldr	r4, [pc, #112]	; (d413c <setup+0x84>)

// setup() runs once, when the device is first turned on.
void setup() 
{
  Serial.begin(9600);     //Initialize serial monitor
  sht31.begin(0x44);      //Turn on the temperature sensor
   d40cc:	f000 fa07 	bl	d44de <_ZN14Adafruit_SHT315beginEh>

  //fill the storage arrays with the current reading from all of the hardware
  for (int thisReading = 0; thisReading < usbReadings; thisReading++) 
  {
    usb[thisReading] = analogRead(USBPIN);
   d40d0:	2012      	movs	r0, #18
   d40d2:	f001 fea6 	bl	d5e22 <analogRead>
   d40d6:	ee07 0a90 	vmov	s15, r0
   d40da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d40de:	2012      	movs	r0, #18
   d40e0:	edc4 7a00 	vstr	s15, [r4]
   d40e4:	f001 fe9d 	bl	d5e22 <analogRead>
   d40e8:	ee07 0a90 	vmov	s15, r0
   d40ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  }
  digitalWrite(VELOSTATPOWER, HIGH);
   d40f0:	2101      	movs	r1, #1
   d40f2:	2006      	movs	r0, #6
  sht31.begin(0x44);      //Turn on the temperature sensor

  //fill the storage arrays with the current reading from all of the hardware
  for (int thisReading = 0; thisReading < usbReadings; thisReading++) 
  {
    usb[thisReading] = analogRead(USBPIN);
   d40f4:	edc4 7a01 	vstr	s15, [r4, #4]
   d40f8:	4c11      	ldr	r4, [pc, #68]	; (d4140 <setup+0x88>)
  }
  digitalWrite(VELOSTATPOWER, HIGH);
   d40fa:	f001 fe79 	bl	d5df0 <digitalWrite>
   d40fe:	f104 0514 	add.w	r5, r4, #20
  for (int thisReading = 0; thisReading < childReadings; thisReading++) 
  {
    child[thisReading] = analogRead(VELOSTATPIN);
   d4102:	2010      	movs	r0, #16
   d4104:	f001 fe8d 	bl	d5e22 <analogRead>
   d4108:	ee07 0a90 	vmov	s15, r0
   d410c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4110:	ece4 7a01 	vstmia	r4!, {s15}
  for (int thisReading = 0; thisReading < usbReadings; thisReading++) 
  {
    usb[thisReading] = analogRead(USBPIN);
  }
  digitalWrite(VELOSTATPOWER, HIGH);
  for (int thisReading = 0; thisReading < childReadings; thisReading++) 
   d4114:	42ac      	cmp	r4, r5
   d4116:	d1f4      	bne.n	d4102 <setup+0x4a>
  {
    child[thisReading] = analogRead(VELOSTATPIN);
  }
  digitalWrite(VELOSTATPOWER, LOW);
   d4118:	2100      	movs	r1, #0
   d411a:	2006      	movs	r0, #6
   d411c:	4c09      	ldr	r4, [pc, #36]	; (d4144 <setup+0x8c>)
   d411e:	f001 fe67 	bl	d5df0 <digitalWrite>
   d4122:	f104 0514 	add.w	r5, r4, #20
  for (int thisReading = 0; thisReading < tempReadings; thisReading++) 
  {
    temp[thisReading] = sht31.readTemperature();
   d4126:	4804      	ldr	r0, [pc, #16]	; (d4138 <setup+0x80>)
   d4128:	f000 fa6e 	bl	d4608 <_ZN14Adafruit_SHT3115readTemperatureEv>
   d412c:	eca4 0a01 	vstmia	r4!, {s0}
  for (int thisReading = 0; thisReading < childReadings; thisReading++) 
  {
    child[thisReading] = analogRead(VELOSTATPIN);
  }
  digitalWrite(VELOSTATPOWER, LOW);
  for (int thisReading = 0; thisReading < tempReadings; thisReading++) 
   d4130:	42a5      	cmp	r5, r4
   d4132:	d1f8      	bne.n	d4126 <setup+0x6e>
  {
    temp[thisReading] = sht31.readTemperature();
  }
}
   d4134:	bd38      	pop	{r3, r4, r5, pc}
   d4136:	bf00      	nop
   d4138:	2003e338 	.word	0x2003e338
   d413c:	2003e378 	.word	0x2003e378
   d4140:	2003e360 	.word	0x2003e360
   d4144:	2003e380 	.word	0x2003e380

000d4148 <_Z7collectv>:
Function that collects all of data from the temperature sensor
pressure mat, and usb, and attaches the value to the end of the 
storage array, dropping the first value
*/
void collect()
{  
   d4148:	b508      	push	{r3, lr}
  int carOn = analogRead(USBPIN);       //generate random value for if the car is on
   d414a:	2012      	movs	r0, #18
Function that collects all of data from the temperature sensor
pressure mat, and usb, and attaches the value to the end of the 
storage array, dropping the first value
*/
void collect()
{  
   d414c:	ed2d 8b02 	vpush	{d8}
  int carOn = analogRead(USBPIN);       //generate random value for if the car is on
   d4150:	f001 fe67 	bl	d5e22 <analogRead>
  // Serial.print("car val: ");
  // Serial.println(carOn);
  digitalWrite(VELOSTATPOWER, HIGH);     //power the velostat
   d4154:	2101      	movs	r1, #1
pressure mat, and usb, and attaches the value to the end of the 
storage array, dropping the first value
*/
void collect()
{  
  int carOn = analogRead(USBPIN);       //generate random value for if the car is on
   d4156:	ee08 0a90 	vmov	s17, r0
  // Serial.print("car val: ");
  // Serial.println(carOn);
  digitalWrite(VELOSTATPOWER, HIGH);     //power the velostat
   d415a:	2006      	movs	r0, #6
   d415c:	f001 fe48 	bl	d5df0 <digitalWrite>
  int childVal = analogRead(VELOSTATPIN);    //generate random value for if the child is in the car
   d4160:	2010      	movs	r0, #16
   d4162:	f001 fe5e 	bl	d5e22 <analogRead>
  digitalWrite(VELOSTATPOWER, LOW);      //turn power off to the velostat
   d4166:	2100      	movs	r1, #0
{  
  int carOn = analogRead(USBPIN);       //generate random value for if the car is on
  // Serial.print("car val: ");
  // Serial.println(carOn);
  digitalWrite(VELOSTATPOWER, HIGH);     //power the velostat
  int childVal = analogRead(VELOSTATPIN);    //generate random value for if the child is in the car
   d4168:	ee08 0a10 	vmov	s16, r0
  digitalWrite(VELOSTATPOWER, LOW);      //turn power off to the velostat
   d416c:	2006      	movs	r0, #6
   d416e:	f001 fe3f 	bl	d5df0 <digitalWrite>
  // Serial.print("child val: ");
  // Serial.println(childVal);
  int tempVal = sht31.readTemperature();  //generate random value for the temperature reading
   d4172:	4826      	ldr	r0, [pc, #152]	; (d420c <_Z7collectv+0xc4>)
   d4174:	f000 fa48 	bl	d4608 <_ZN14Adafruit_SHT3115readTemperatureEv>
  // Serial.print("temperature: ");
  // Serial.println(tempVal);

  childTotal = childTotal - child[childIndex];  //drop the last value
   d4178:	4925      	ldr	r1, [pc, #148]	; (d4210 <_Z7collectv+0xc8>)
   d417a:	4a26      	ldr	r2, [pc, #152]	; (d4214 <_Z7collectv+0xcc>)
   d417c:	680b      	ldr	r3, [r1, #0]
   d417e:	4826      	ldr	r0, [pc, #152]	; (d4218 <_Z7collectv+0xd0>)
   d4180:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   d4184:	edd2 7a00 	vldr	s15, [r2]
   d4188:	ed90 7a00 	vldr	s14, [r0]
   d418c:	ee37 7a67 	vsub.f32	s14, s14, s15
  child[childIndex] = childVal;                 //get the current value
   d4190:	eef8 7ac8 	vcvt.f32.s32	s15, s16
  childTotal = childTotal + child[childIndex];  //add to total
  childIndex++;                                 //increment the index
   d4194:	3301      	adds	r3, #1
  int tempVal = sht31.readTemperature();  //generate random value for the temperature reading
  // Serial.print("temperature: ");
  // Serial.println(tempVal);

  childTotal = childTotal - child[childIndex];  //drop the last value
  child[childIndex] = childVal;                 //get the current value
   d4196:	edc2 7a00 	vstr	s15, [r2]
  childTotal = childTotal + child[childIndex];  //add to total
  childIndex++;                                 //increment the index
  
  if (childIndex >= childReadings)  // ...wrap around to the beginning:
   d419a:	2b04      	cmp	r3, #4
    childIndex = 0;  
  }
  
  //car on/off check
  
  usb[usbIndex] = carOn;  //read the value
   d419c:	4a1f      	ldr	r2, [pc, #124]	; (d421c <_Z7collectv+0xd4>)
  childTotal = childTotal + child[childIndex];  //add to total
  childIndex++;                                 //increment the index
  
  if (childIndex >= childReadings)  // ...wrap around to the beginning:
  {
    childIndex = 0;  
   d419e:	bfc8      	it	gt
   d41a0:	2300      	movgt	r3, #0
   d41a2:	600b      	str	r3, [r1, #0]
  }
  
  //car on/off check
  
  usb[usbIndex] = carOn;  //read the value
   d41a4:	6813      	ldr	r3, [r2, #0]
   d41a6:	491e      	ldr	r1, [pc, #120]	; (d4220 <_Z7collectv+0xd8>)
   d41a8:	eef8 8ae8 	vcvt.f32.s32	s17, s17
   d41ac:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  usbIndex++;   //increase the index
   d41b0:	3301      	adds	r3, #1
    childIndex = 0;  
  }
  
  //car on/off check
  
  usb[usbIndex] = carOn;  //read the value
   d41b2:	edc1 8a00 	vstr	s17, [r1]
  usbIndex++;   //increase the index
  

  if (usbIndex >= usbReadings)  // ...wrap around to the beginning:
   d41b6:	2b01      	cmp	r3, #1
  {
    usbIndex = 0;  
  }

  //Tempearature readings 
  tempTotal = tempTotal - temp[tempIndex];    //drop the last value
   d41b8:	491a      	ldr	r1, [pc, #104]	; (d4224 <_Z7collectv+0xdc>)
  // Serial.print("temperature: ");
  // Serial.println(tempVal);

  childTotal = childTotal - child[childIndex];  //drop the last value
  child[childIndex] = childVal;                 //get the current value
  childTotal = childTotal + child[childIndex];  //add to total
   d41ba:	ee77 7a27 	vadd.f32	s15, s14, s15
  usbIndex++;   //increase the index
  

  if (usbIndex >= usbReadings)  // ...wrap around to the beginning:
  {
    usbIndex = 0;  
   d41be:	bfc8      	it	gt
   d41c0:	2300      	movgt	r3, #0
   d41c2:	6013      	str	r3, [r2, #0]
  }

  //Tempearature readings 
  tempTotal = tempTotal - temp[tempIndex];    //drop the last value
   d41c4:	680b      	ldr	r3, [r1, #0]
   d41c6:	4a18      	ldr	r2, [pc, #96]	; (d4228 <_Z7collectv+0xe0>)
  // Serial.print("temperature: ");
  // Serial.println(tempVal);

  childTotal = childTotal - child[childIndex];  //drop the last value
  child[childIndex] = childVal;                 //get the current value
  childTotal = childTotal + child[childIndex];  //add to total
   d41c8:	edc0 7a00 	vstr	s15, [r0]
  {
    usbIndex = 0;  
  }

  //Tempearature readings 
  tempTotal = tempTotal - temp[tempIndex];    //drop the last value
   d41cc:	4817      	ldr	r0, [pc, #92]	; (d422c <_Z7collectv+0xe4>)
   d41ce:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   d41d2:	edd0 7a00 	vldr	s15, [r0]
   d41d6:	ed92 7a00 	vldr	s14, [r2]
  digitalWrite(VELOSTATPOWER, HIGH);     //power the velostat
  int childVal = analogRead(VELOSTATPIN);    //generate random value for if the child is in the car
  digitalWrite(VELOSTATPOWER, LOW);      //turn power off to the velostat
  // Serial.print("child val: ");
  // Serial.println(childVal);
  int tempVal = sht31.readTemperature();  //generate random value for the temperature reading
   d41da:	eebd 0ac0 	vcvt.s32.f32	s0, s0
  {
    usbIndex = 0;  
  }

  //Tempearature readings 
  tempTotal = tempTotal - temp[tempIndex];    //drop the last value
   d41de:	ee77 7ac7 	vsub.f32	s15, s15, s14
  temp[tempIndex] = tempVal;                  //get the current value
   d41e2:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
  tempTotal = tempTotal + temp[tempIndex];    //add to total
  tempIndex++;                                //increment the index
   d41e6:	3301      	adds	r3, #1
    usbIndex = 0;  
  }

  //Tempearature readings 
  tempTotal = tempTotal - temp[tempIndex];    //drop the last value
  temp[tempIndex] = tempVal;                  //get the current value
   d41e8:	ed82 0a00 	vstr	s0, [r2]
  tempTotal = tempTotal + temp[tempIndex];    //add to total
  tempIndex++;                                //increment the index
  
  if (tempIndex >= tempReadings)  // ...wrap around to the beginning:
   d41ec:	2b04      	cmp	r3, #4
  }

  //Tempearature readings 
  tempTotal = tempTotal - temp[tempIndex];    //drop the last value
  temp[tempIndex] = tempVal;                  //get the current value
  tempTotal = tempTotal + temp[tempIndex];    //add to total
   d41ee:	ee37 0a80 	vadd.f32	s0, s15, s0
  tempIndex++;                                //increment the index
  
  if (tempIndex >= tempReadings)  // ...wrap around to the beginning:
  {
    tempIndex = 0;  
   d41f2:	bfc8      	it	gt
   d41f4:	2300      	movgt	r3, #0
  }

  //Tempearature readings 
  tempTotal = tempTotal - temp[tempIndex];    //drop the last value
  temp[tempIndex] = tempVal;                  //get the current value
  tempTotal = tempTotal + temp[tempIndex];    //add to total
   d41f6:	ed80 0a00 	vstr	s0, [r0]
  tempIndex++;                                //increment the index
  
  if (tempIndex >= tempReadings)  // ...wrap around to the beginning:
  {
    tempIndex = 0;  
   d41fa:	600b      	str	r3, [r1, #0]
  }
  delay(DELAYVAL);
}
   d41fc:	ecbd 8b02 	vpop	{d8}
  
  if (tempIndex >= tempReadings)  // ...wrap around to the beginning:
  {
    tempIndex = 0;  
  }
  delay(DELAYVAL);
   d4200:	2064      	movs	r0, #100	; 0x64
}
   d4202:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  
  if (tempIndex >= tempReadings)  // ...wrap around to the beginning:
  {
    tempIndex = 0;  
  }
  delay(DELAYVAL);
   d4206:	f000 be93 	b.w	d4f30 <delay>
   d420a:	bf00      	nop
   d420c:	2003e338 	.word	0x2003e338
   d4210:	2003e358 	.word	0x2003e358
   d4214:	2003e360 	.word	0x2003e360
   d4218:	2003e344 	.word	0x2003e344
   d421c:	2003e34c 	.word	0x2003e34c
   d4220:	2003e378 	.word	0x2003e378
   d4224:	2003e374 	.word	0x2003e374
   d4228:	2003e380 	.word	0x2003e380
   d422c:	2003e348 	.word	0x2003e348

000d4230 <_Z11sendMessageRK6String>:
Particle Cloud with the desired message

Input: String with the desired text message body
*/
void sendMessage(const String& body)            //function that triggers twilio webhook
{
   d4230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4232:	4b11      	ldr	r3, [pc, #68]	; (d4278 <_Z11sendMessageRK6String+0x48>)
   d4234:	6802      	ldr	r2, [r0, #0]
   d4236:	781b      	ldrb	r3, [r3, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4238:	f88d 3000 	strb.w	r3, [sp]
   d423c:	490f      	ldr	r1, [pc, #60]	; (d427c <_Z11sendMessageRK6String+0x4c>)
   d423e:	233c      	movs	r3, #60	; 0x3c
   d4240:	a802      	add	r0, sp, #8
   d4242:	f001 f86f 	bl	d5324 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4246:	9c03      	ldr	r4, [sp, #12]
   d4248:	b17c      	cbz	r4, d426a <_Z11sendMessageRK6String+0x3a>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d424a:	6863      	ldr	r3, [r4, #4]
   d424c:	3b01      	subs	r3, #1
   d424e:	6063      	str	r3, [r4, #4]
   d4250:	b95b      	cbnz	r3, d426a <_Z11sendMessageRK6String+0x3a>
        {
          _M_dispose();
   d4252:	6823      	ldr	r3, [r4, #0]
   d4254:	4620      	mov	r0, r4
   d4256:	689b      	ldr	r3, [r3, #8]
   d4258:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d425a:	68a3      	ldr	r3, [r4, #8]
   d425c:	3b01      	subs	r3, #1
   d425e:	60a3      	str	r3, [r4, #8]
   d4260:	b91b      	cbnz	r3, d426a <_Z11sendMessageRK6String+0x3a>
            _M_destroy();
   d4262:	6823      	ldr	r3, [r4, #0]
   d4264:	4620      	mov	r0, r4
   d4266:	68db      	ldr	r3, [r3, #12]
   d4268:	4798      	blx	r3
  Particle.publish("twilio_sms", body, PRIVATE);
  Serial.println("SendingMessage");
   d426a:	f001 fab1 	bl	d57d0 <_Z16_fetch_usbserialv>
   d426e:	4904      	ldr	r1, [pc, #16]	; (d4280 <_Z11sendMessageRK6String+0x50>)
   d4270:	f000 fd49 	bl	d4d06 <_ZN5Print7printlnEPKc>
   d4274:	b004      	add	sp, #16
   d4276:	bd10      	pop	{r4, pc}
   d4278:	2003e35c 	.word	0x2003e35c
   d427c:	000d6cd8 	.word	0x000d6cd8
   d4280:	000d6ce3 	.word	0x000d6ce3

000d4284 <loop>:
  }
}

// loop() runs over and over again, as quickly as it can execute.
void loop() 
{
   d4284:	b510      	push	{r4, lr}
  digitalWrite(DONEPIN, HIGH);          //toggle the done pin
   d4286:	2101      	movs	r1, #1
  }
}

// loop() runs over and over again, as quickly as it can execute.
void loop() 
{
   d4288:	ed2d 8b02 	vpush	{d8}
  digitalWrite(DONEPIN, HIGH);          //toggle the done pin
   d428c:	2008      	movs	r0, #8
   d428e:	f001 fdaf 	bl	d5df0 <digitalWrite>
  collect();                    //collect all of the necessary data
   d4292:	f7ff ff59 	bl	d4148 <_Z7collectv>
   d4296:	4b5c      	ldr	r3, [pc, #368]	; (d4408 <loop+0x184>)
   d4298:	eddf 7a5c 	vldr	s15, [pc, #368]	; d440c <loop+0x188>
   d429c:	f103 0214 	add.w	r2, r3, #20

  //iterate through the storage array of pressure mat values
  childTotal = 0;
  for (int thisReading = 0; thisReading <= childReadings - 1; thisReading++) 
  {
    childTotal = childTotal + child[thisReading];
   d42a0:	ecb3 7a01 	vldmia	r3!, {s14}

  //check if the child is in the seat

  //iterate through the storage array of pressure mat values
  childTotal = 0;
  for (int thisReading = 0; thisReading <= childReadings - 1; thisReading++) 
   d42a4:	429a      	cmp	r2, r3
  {
    childTotal = childTotal + child[thisReading];
   d42a6:	ee77 7a87 	vadd.f32	s15, s15, s14

  //check if the child is in the seat

  //iterate through the storage array of pressure mat values
  childTotal = 0;
  for (int thisReading = 0; thisReading <= childReadings - 1; thisReading++) 
   d42aa:	d1f9      	bne.n	d42a0 <loop+0x1c>
  {
    childTotal = childTotal + child[thisReading];
  }
  childAverage = childTotal / childReadings;    //running average
   d42ac:	eeb1 8a04 	vmov.f32	s16, #20	; 0x40a00000  5.0
   d42b0:	ee87 7a88 	vdiv.f32	s14, s15, s16
   d42b4:	4b56      	ldr	r3, [pc, #344]	; (d4410 <loop+0x18c>)
   d42b6:	4c57      	ldr	r4, [pc, #348]	; (d4414 <loop+0x190>)
   d42b8:	edc3 7a00 	vstr	s15, [r3]
   d42bc:	ed84 7a00 	vstr	s14, [r4]

  Serial.print("The child average is:  ");
   d42c0:	f001 fa86 	bl	d57d0 <_Z16_fetch_usbserialv>
   d42c4:	4954      	ldr	r1, [pc, #336]	; (d4418 <loop+0x194>)
   d42c6:	f000 fd0b 	bl	d4ce0 <_ZN5Print5printEPKc>
  Serial.println(childAverage);
   d42ca:	f001 fa81 	bl	d57d0 <_Z16_fetch_usbserialv>
   d42ce:	2102      	movs	r1, #2
   d42d0:	ed94 0a00 	vldr	s0, [r4]
   d42d4:	f000 fe0b 	bl	d4eee <_ZN5Print7printlnEfi>

  if (childAverage < CHILD)                         //if the child is in the seat
   d42d8:	ed94 7a00 	vldr	s14, [r4]
   d42dc:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
   d42e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d42e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d42e8:	f140 8083 	bpl.w	d43f2 <loop+0x16e>
    // Serial.print("the usb array is:  ");
    // Serial.print(usb[0]);
    // Serial.print(" ");
    // Serial.println(usb[1]);

    if (usb[0] == 1 && usb[1] == 0)   //check to see if the car went from on to off
   d42ec:	4b4b      	ldr	r3, [pc, #300]	; (d441c <loop+0x198>)
   d42ee:	ed93 7a00 	vldr	s14, [r3]
   d42f2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   d42f6:	eeb4 7a67 	vcmp.f32	s14, s15
   d42fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d42fe:	d10e      	bne.n	d431e <loop+0x9a>
   d4300:	edd3 7a01 	vldr	s15, [r3, #4]
   d4304:	eef5 7a40 	vcmp.f32	s15, #0.0
   d4308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d430c:	d107      	bne.n	d431e <loop+0x9a>
    {
      sendMessage(body);
   d430e:	4844      	ldr	r0, [pc, #272]	; (d4420 <loop+0x19c>)
   d4310:	f7ff ff8e 	bl	d4230 <_Z11sendMessageRK6String>
      Serial.println("Sending message because car turned off and child is in the car");
   d4314:	f001 fa5c 	bl	d57d0 <_Z16_fetch_usbserialv>
   d4318:	4942      	ldr	r1, [pc, #264]	; (d4424 <loop+0x1a0>)
   d431a:	f000 fcf4 	bl	d4d06 <_ZN5Print7printlnEPKc>
    }

    //check if the temperature is too hot or rising too fast

    if (temp[tempReadings - 1] - temp[0] >= TEMPRISING)     //if temperature is rising too fast
   d431e:	4b42      	ldr	r3, [pc, #264]	; (d4428 <loop+0x1a4>)
   d4320:	ed93 7a00 	vldr	s14, [r3]
   d4324:	edd3 7a04 	vldr	s15, [r3, #16]
   d4328:	ee77 7ac7 	vsub.f32	s15, s15, s14
   d432c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d4330:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4338:	db07      	blt.n	d434a <loop+0xc6>
    {
      sendMessage(body);
   d433a:	4839      	ldr	r0, [pc, #228]	; (d4420 <loop+0x19c>)
   d433c:	f7ff ff78 	bl	d4230 <_Z11sendMessageRK6String>
      Serial.println("The temperature is rising too fast");
   d4340:	f001 fa46 	bl	d57d0 <_Z16_fetch_usbserialv>
   d4344:	4939      	ldr	r1, [pc, #228]	; (d442c <loop+0x1a8>)
   d4346:	f000 fcde 	bl	d4d06 <_ZN5Print7printlnEPKc>
   d434a:	4b37      	ldr	r3, [pc, #220]	; (d4428 <loop+0x1a4>)

// loop() runs over and over again, as quickly as it can execute.
void loop() 
{
  digitalWrite(DONEPIN, HIGH);          //toggle the done pin
  collect();                    //collect all of the necessary data
   d434c:	eddf 7a2f 	vldr	s15, [pc, #188]	; d440c <loop+0x188>
   d4350:	f103 0214 	add.w	r2, r3, #20

    //iterate through temperature storage array
    tempTotal = 0;
    for (int thisReading = 0; thisReading <= tempReadings - 1; thisReading++) 
    {
      tempTotal = tempTotal + temp[thisReading];
   d4354:	ecb3 7a01 	vldmia	r3!, {s14}
      Serial.println("The temperature is rising too fast");
    }

    //iterate through temperature storage array
    tempTotal = 0;
    for (int thisReading = 0; thisReading <= tempReadings - 1; thisReading++) 
   d4358:	429a      	cmp	r2, r3
    {
      tempTotal = tempTotal + temp[thisReading];
   d435a:	ee77 7a87 	vadd.f32	s15, s15, s14
      Serial.println("The temperature is rising too fast");
    }

    //iterate through temperature storage array
    tempTotal = 0;
    for (int thisReading = 0; thisReading <= tempReadings - 1; thisReading++) 
   d435e:	d1f9      	bne.n	d4354 <loop+0xd0>
    {
      tempTotal = tempTotal + temp[thisReading];
    }
    tempAverage = tempTotal / tempReadings;       //calculate running average
   d4360:	ee87 7a88 	vdiv.f32	s14, s15, s16
   d4364:	4b32      	ldr	r3, [pc, #200]	; (d4430 <loop+0x1ac>)
   d4366:	4c33      	ldr	r4, [pc, #204]	; (d4434 <loop+0x1b0>)
   d4368:	edc3 7a00 	vstr	s15, [r3]
   d436c:	ed84 7a00 	vstr	s14, [r4]
    
    Serial.print("The temp average is:  ");
   d4370:	f001 fa2e 	bl	d57d0 <_Z16_fetch_usbserialv>
   d4374:	4930      	ldr	r1, [pc, #192]	; (d4438 <loop+0x1b4>)
   d4376:	ed9f 8a31 	vldr	s16, [pc, #196]	; d443c <loop+0x1b8>
   d437a:	f000 fcb1 	bl	d4ce0 <_ZN5Print5printEPKc>
    Serial.println(tempAverage);
   d437e:	f001 fa27 	bl	d57d0 <_Z16_fetch_usbserialv>
   d4382:	2102      	movs	r1, #2
   d4384:	ed94 0a00 	vldr	s0, [r4]
   d4388:	f000 fdb1 	bl	d4eee <_ZN5Print7printlnEfi>

    if (tempAverage >= TEMP1 && tempAverage < TEMP2)  //if the temp is too hot
   d438c:	edd4 7a00 	vldr	s15, [r4]
   d4390:	ed9f 7a2b 	vldr	s14, [pc, #172]	; d4440 <loop+0x1bc>
   d4394:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d439c:	db0c      	blt.n	d43b8 <loop+0x134>
   d439e:	eef4 7ac8 	vcmpe.f32	s15, s16
   d43a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d43a6:	d507      	bpl.n	d43b8 <loop+0x134>
    {
      sendMessage(body);
   d43a8:	481d      	ldr	r0, [pc, #116]	; (d4420 <loop+0x19c>)
   d43aa:	f7ff ff41 	bl	d4230 <_Z11sendMessageRK6String>
      Serial.println("Sending message because temperature is too hot");
   d43ae:	f001 fa0f 	bl	d57d0 <_Z16_fetch_usbserialv>
   d43b2:	4924      	ldr	r1, [pc, #144]	; (d4444 <loop+0x1c0>)
   d43b4:	f000 fca7 	bl	d4d06 <_ZN5Print7printlnEPKc>
    }

    while (tempAverage >= 90) //if the temp is way too hot
   d43b8:	edd4 7a00 	vldr	s15, [r4]
   d43bc:	eef4 7ac8 	vcmpe.f32	s15, s16
   d43c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d43c4:	db15      	blt.n	d43f2 <loop+0x16e>
    {
      sendMessage(body);
   d43c6:	4816      	ldr	r0, [pc, #88]	; (d4420 <loop+0x19c>)
   d43c8:	f7ff ff32 	bl	d4230 <_Z11sendMessageRK6String>
      Serial.println("Sending message because temp is critical");
   d43cc:	f001 fa00 	bl	d57d0 <_Z16_fetch_usbserialv>
   d43d0:	491d      	ldr	r1, [pc, #116]	; (d4448 <loop+0x1c4>)
   d43d2:	f000 fc98 	bl	d4d06 <_ZN5Print7printlnEPKc>
      collect();
   d43d6:	f7ff feb7 	bl	d4148 <_Z7collectv>
      digitalWrite(DONEPIN, LOW);
   d43da:	2100      	movs	r1, #0
   d43dc:	2008      	movs	r0, #8
   d43de:	f001 fd07 	bl	d5df0 <digitalWrite>
      digitalWrite(DONEPIN, HIGH);
   d43e2:	2101      	movs	r1, #1
   d43e4:	2008      	movs	r0, #8
   d43e6:	f001 fd03 	bl	d5df0 <digitalWrite>
      delay(DELAYVAL);
   d43ea:	2064      	movs	r0, #100	; 0x64
   d43ec:	f000 fda0 	bl	d4f30 <delay>
    {
      sendMessage(body);
      Serial.println("Sending message because temperature is too hot");
    }

    while (tempAverage >= 90) //if the temp is way too hot
   d43f0:	e7e2      	b.n	d43b8 <loop+0x134>
      digitalWrite(DONEPIN, LOW);
      digitalWrite(DONEPIN, HIGH);
      delay(DELAYVAL);
    }
  }
  digitalWrite(DONEPIN, LOW);              //toggle the done pin to let TPL5111 know to sleep
   d43f2:	2008      	movs	r0, #8
   d43f4:	2100      	movs	r1, #0
   d43f6:	f001 fcfb 	bl	d5df0 <digitalWrite>
  delay(DELAYVAL);
}
   d43fa:	ecbd 8b02 	vpop	{d8}
      digitalWrite(DONEPIN, HIGH);
      delay(DELAYVAL);
    }
  }
  digitalWrite(DONEPIN, LOW);              //toggle the done pin to let TPL5111 know to sleep
  delay(DELAYVAL);
   d43fe:	2064      	movs	r0, #100	; 0x64
}
   d4400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      digitalWrite(DONEPIN, HIGH);
      delay(DELAYVAL);
    }
  }
  digitalWrite(DONEPIN, LOW);              //toggle the done pin to let TPL5111 know to sleep
  delay(DELAYVAL);
   d4404:	f000 bd94 	b.w	d4f30 <delay>
   d4408:	2003e360 	.word	0x2003e360
   d440c:	00000000 	.word	0x00000000
   d4410:	2003e344 	.word	0x2003e344
   d4414:	2003e354 	.word	0x2003e354
   d4418:	000d6cf2 	.word	0x000d6cf2
   d441c:	2003e378 	.word	0x2003e378
   d4420:	2003e394 	.word	0x2003e394
   d4424:	000d6d0a 	.word	0x000d6d0a
   d4428:	2003e380 	.word	0x2003e380
   d442c:	000d6d49 	.word	0x000d6d49
   d4430:	2003e348 	.word	0x2003e348
   d4434:	2003e350 	.word	0x2003e350
   d4438:	000d6d6c 	.word	0x000d6d6c
   d443c:	42b40000 	.word	0x42b40000
   d4440:	42a00000 	.word	0x42a00000
   d4444:	000d6d83 	.word	0x000d6d83
   d4448:	000d6db2 	.word	0x000d6db2

000d444c <_GLOBAL__sub_I_body>:
*/
void sendMessage(const String& body)            //function that triggers twilio webhook
{
  Particle.publish("twilio_sms", body, PRIVATE);
  Serial.println("SendingMessage");
   d444c:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d444e:	4b0a      	ldr	r3, [pc, #40]	; (d4478 <_GLOBAL__sub_I_body+0x2c>)
#define CHILD 3             //voltage threshold to check for child
#define TEMP1 80            //first temperature threshold
#define TEMP2 90            //CRITICAL temperature threshold
#define TEMPRISING  10      //difference threshold for temperature increase rate

String body = "Your child is in the car";  //body of SMS message to send
   d4450:	4c0a      	ldr	r4, [pc, #40]	; (d447c <_GLOBAL__sub_I_body+0x30>)
   d4452:	2201      	movs	r2, #1
   d4454:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4456:	f000 f8f7 	bl	d4648 <HAL_Pin_Map>
   d445a:	4909      	ldr	r1, [pc, #36]	; (d4480 <_GLOBAL__sub_I_body+0x34>)
   d445c:	4620      	mov	r0, r4
   d445e:	f000 fbc6 	bl	d4bee <_ZN6StringC1EPK19__FlashStringHelper>
   d4462:	4620      	mov	r0, r4
   d4464:	4a07      	ldr	r2, [pc, #28]	; (d4484 <_GLOBAL__sub_I_body+0x38>)
   d4466:	4908      	ldr	r1, [pc, #32]	; (d4488 <_GLOBAL__sub_I_body+0x3c>)
   d4468:	f001 fd52 	bl	d5f10 <__aeabi_atexit>
float temp[tempReadings];             //the readings from the temperature sensor
int tempIndex = 0;                    //the index of the current reading
float tempTotal = 0;                  //the running total
float tempAverage = 0;                //the averagea

Adafruit_SHT31 sht31 = Adafruit_SHT31();    //initialize the temperature sensor
   d446c:	4807      	ldr	r0, [pc, #28]	; (d448c <_GLOBAL__sub_I_body+0x40>)
*/
void sendMessage(const String& body)            //function that triggers twilio webhook
{
  Particle.publish("twilio_sms", body, PRIVATE);
  Serial.println("SendingMessage");
   d446e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
float temp[tempReadings];             //the readings from the temperature sensor
int tempIndex = 0;                    //the index of the current reading
float tempTotal = 0;                  //the running total
float tempAverage = 0;                //the averagea

Adafruit_SHT31 sht31 = Adafruit_SHT31();    //initialize the temperature sensor
   d4472:	f000 b811 	b.w	d4498 <_ZN14Adafruit_SHT31C1Ev>
   d4476:	bf00      	nop
   d4478:	2003e35c 	.word	0x2003e35c
   d447c:	2003e394 	.word	0x2003e394
   d4480:	000d6ddb 	.word	0x000d6ddb
   d4484:	2003e334 	.word	0x2003e334
   d4488:	000d4b61 	.word	0x000d4b61
   d448c:	2003e338 	.word	0x2003e338

000d4490 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4490:	6803      	ldr	r3, [r0, #0]
   d4492:	b2c9      	uxtb	r1, r1
   d4494:	689b      	ldr	r3, [r3, #8]
   d4496:	4718      	bx	r3

000d4498 <_ZN14Adafruit_SHT31C1Ev>:
#include "application.h"
#include "math.h"
#include "adafruit-sht31.h"

Adafruit_SHT31::Adafruit_SHT31() {
}
   d4498:	4770      	bx	lr

000d449a <_ZN14Adafruit_SHT3112writeCommandEt>:
  humidity = shum;
  
  return true;
}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
   d449a:	b538      	push	{r3, r4, r5, lr}
   d449c:	4605      	mov	r5, r0
   d449e:	460c      	mov	r4, r1
  Wire.beginTransmission(_i2caddr);
   d44a0:	f001 fd10 	bl	d5ec4 <_Z19__fetch_global_Wirev>
   d44a4:	7829      	ldrb	r1, [r5, #0]
   d44a6:	f001 fb10 	bl	d5aca <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(cmd >> 8);
   d44aa:	f001 fd0b 	bl	d5ec4 <_Z19__fetch_global_Wirev>
   d44ae:	0a21      	lsrs	r1, r4, #8
   d44b0:	f7ff ffee 	bl	d4490 <_ZN7TwoWire5writeEi>
  Wire.write(cmd & 0xFF);
   d44b4:	f001 fd06 	bl	d5ec4 <_Z19__fetch_global_Wirev>
   d44b8:	b2e1      	uxtb	r1, r4
   d44ba:	f7ff ffe9 	bl	d4490 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();  
   d44be:	f001 fd01 	bl	d5ec4 <_Z19__fetch_global_Wirev>
}
   d44c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
  Wire.beginTransmission(_i2caddr);
  Wire.write(cmd >> 8);
  Wire.write(cmd & 0xFF);
  Wire.endTransmission();  
   d44c6:	f001 bb08 	b.w	d5ada <_ZN7TwoWire15endTransmissionEv>

000d44ca <_ZN14Adafruit_SHT315resetEv>:
  stat |= Wire.read();
  //Serial.println(stat, HEX);
  return stat;
}

void Adafruit_SHT31::reset(void) {
   d44ca:	b508      	push	{r3, lr}
  writeCommand(SHT31_SOFTRESET);
   d44cc:	f243 01a2 	movw	r1, #12450	; 0x30a2
   d44d0:	f7ff ffe3 	bl	d449a <_ZN14Adafruit_SHT3112writeCommandEt>
  delay(10);
   d44d4:	200a      	movs	r0, #10
}
   d44d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return stat;
}

void Adafruit_SHT31::reset(void) {
  writeCommand(SHT31_SOFTRESET);
  delay(10);
   d44da:	f000 bd29 	b.w	d4f30 <delay>

000d44de <_ZN14Adafruit_SHT315beginEh>:

Adafruit_SHT31::Adafruit_SHT31() {
}


boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
   d44de:	b538      	push	{r3, r4, r5, lr}
   d44e0:	4604      	mov	r4, r0
   d44e2:	460d      	mov	r5, r1
  Wire.begin();
   d44e4:	f001 fcee 	bl	d5ec4 <_Z19__fetch_global_Wirev>
   d44e8:	f001 fab8 	bl	d5a5c <_ZN7TwoWire5beginEv>
  _i2caddr = i2caddr;
  reset();
   d44ec:	4620      	mov	r0, r4
}


boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
  Wire.begin();
  _i2caddr = i2caddr;
   d44ee:	7025      	strb	r5, [r4, #0]
  reset();
   d44f0:	f7ff ffeb 	bl	d44ca <_ZN14Adafruit_SHT315resetEv>
  //return (readStatus() == 0x40);
  return true;
}
   d44f4:	2001      	movs	r0, #1
   d44f6:	bd38      	pop	{r3, r4, r5, pc}

000d44f8 <_ZN14Adafruit_SHT314crc8EPKhi>:
  Wire.write(cmd & 0xFF);
  Wire.endTransmission();  
}

uint8_t Adafruit_SHT31::crc8(const uint8_t *data, int len)
{
   d44f8:	440a      	add	r2, r1
 * Polynomial 0x31 (x8 + x5 +x4 +1)
 * Final XOR 0x00
 */

  const uint8_t POLYNOMIAL(0x31);
  uint8_t crc(0xFF);
   d44fa:	20ff      	movs	r0, #255	; 0xff
  
  for ( int j = len; j; --j ) {
   d44fc:	4291      	cmp	r1, r2
   d44fe:	d00e      	beq.n	d451e <_ZN14Adafruit_SHT314crc8EPKhi+0x26>
      crc ^= *data++;
   d4500:	f811 3b01 	ldrb.w	r3, [r1], #1
   d4504:	4058      	eors	r0, r3
   d4506:	2308      	movs	r3, #8

      for ( int i = 8; i; --i ) {
	crc = ( crc & 0x80 )
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
   d4508:	f010 0f80 	tst.w	r0, #128	; 0x80
   d450c:	ea4f 0040 	mov.w	r0, r0, lsl #1
   d4510:	bf18      	it	ne
   d4512:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
      crc ^= *data++;

      for ( int i = 8; i; --i ) {
   d4516:	3b01      	subs	r3, #1
	crc = ( crc & 0x80 )
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
   d4518:	b2c0      	uxtb	r0, r0
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
      crc ^= *data++;

      for ( int i = 8; i; --i ) {
   d451a:	d1f5      	bne.n	d4508 <_ZN14Adafruit_SHT314crc8EPKhi+0x10>
   d451c:	e7ee      	b.n	d44fc <_ZN14Adafruit_SHT314crc8EPKhi+0x4>
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
      }
  }
  return crc;
}
   d451e:	4770      	bx	lr

000d4520 <_ZN14Adafruit_SHT3111readTempHumEv>:

  return humidity;
}


boolean Adafruit_SHT31::readTempHum(void) {
   d4520:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t readbuffer[6];

  writeCommand(SHT31_MEAS_HIGHREP);
   d4522:	f44f 5110 	mov.w	r1, #9216	; 0x2400

  return humidity;
}


boolean Adafruit_SHT31::readTempHum(void) {
   d4526:	4604      	mov	r4, r0
  uint8_t readbuffer[6];

  writeCommand(SHT31_MEAS_HIGHREP);
   d4528:	f7ff ffb7 	bl	d449a <_ZN14Adafruit_SHT3112writeCommandEt>
  
  delay(500);
   d452c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4530:	f000 fcfe 	bl	d4f30 <delay>
  Wire.requestFrom(_i2caddr, (uint8_t)6);
   d4534:	f001 fcc6 	bl	d5ec4 <_Z19__fetch_global_Wirev>
   d4538:	2206      	movs	r2, #6
   d453a:	7821      	ldrb	r1, [r4, #0]
   d453c:	f001 fac2 	bl	d5ac4 <_ZN7TwoWire11requestFromEhj>
  if (Wire.available() != 6) 
   d4540:	f001 fcc0 	bl	d5ec4 <_Z19__fetch_global_Wirev>
   d4544:	6803      	ldr	r3, [r0, #0]
   d4546:	691b      	ldr	r3, [r3, #16]
   d4548:	4798      	blx	r3
   d454a:	2806      	cmp	r0, #6
   d454c:	d14a      	bne.n	d45e4 <_ZN14Adafruit_SHT3111readTempHumEv+0xc4>
   d454e:	2500      	movs	r5, #0
    return false;
  for (uint8_t i=0; i<6; i++) {
    readbuffer[i] = Wire.read();
   d4550:	f001 fcb8 	bl	d5ec4 <_Z19__fetch_global_Wirev>
   d4554:	6803      	ldr	r3, [r0, #0]
   d4556:	695b      	ldr	r3, [r3, #20]
   d4558:	4798      	blx	r3
   d455a:	f80d 0005 	strb.w	r0, [sp, r5]
   d455e:	3501      	adds	r5, #1
  
  delay(500);
  Wire.requestFrom(_i2caddr, (uint8_t)6);
  if (Wire.available() != 6) 
    return false;
  for (uint8_t i=0; i<6; i++) {
   d4560:	2d06      	cmp	r5, #6
   d4562:	d1f5      	bne.n	d4550 <_ZN14Adafruit_SHT3111readTempHumEv+0x30>
  uint16_t ST, SRH;
  ST = readbuffer[0];
  ST <<= 8;
  ST |= readbuffer[1];

  if (readbuffer[2] != crc8(readbuffer, 2)) return false;
   d4564:	2202      	movs	r2, #2
   d4566:	4669      	mov	r1, sp
   d4568:	4620      	mov	r0, r4
   d456a:	f7ff ffc5 	bl	d44f8 <_ZN14Adafruit_SHT314crc8EPKhi>
   d456e:	f89d 5002 	ldrb.w	r5, [sp, #2]
   d4572:	4285      	cmp	r5, r0
   d4574:	d136      	bne.n	d45e4 <_ZN14Adafruit_SHT3111readTempHumEv+0xc4>

  SRH = readbuffer[3];
  SRH <<= 8;
  SRH |= readbuffer[4];

  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;
   d4576:	2202      	movs	r2, #2
   d4578:	f10d 0103 	add.w	r1, sp, #3
   d457c:	4620      	mov	r0, r4
   d457e:	f7ff ffbb 	bl	d44f8 <_ZN14Adafruit_SHT314crc8EPKhi>
   d4582:	f89d 5005 	ldrb.w	r5, [sp, #5]
   d4586:	4285      	cmp	r5, r0
   d4588:	d12c      	bne.n	d45e4 <_ZN14Adafruit_SHT3111readTempHumEv+0xc4>

 // Serial.print("ST = "); Serial.println(ST);
  double stemp = ST;
   d458a:	f8bd 0000 	ldrh.w	r0, [sp]
  ST <<= 8;
  ST |= readbuffer[1];

  if (readbuffer[2] != crc8(readbuffer, 2)) return false;

  SRH = readbuffer[3];
   d458e:	f89d 6003 	ldrb.w	r6, [sp, #3]
  SRH <<= 8;
  SRH |= readbuffer[4];
   d4592:	f89d 5004 	ldrb.w	r5, [sp, #4]

  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;

 // Serial.print("ST = "); Serial.println(ST);
  double stemp = ST;
   d4596:	ba40      	rev16	r0, r0
   d4598:	b280      	uxth	r0, r0
   d459a:	f001 ff67 	bl	d646c <__aeabi_ui2d>
  stemp *= 175;
   d459e:	a318      	add	r3, pc, #96	; (adr r3, d4600 <_ZN14Adafruit_SHT3111readTempHumEv+0xe0>)
   d45a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d45a4:	f001 ffd8 	bl	d6558 <__aeabi_dmul>
  stemp /= 0xffff;
   d45a8:	a311      	add	r3, pc, #68	; (adr r3, d45f0 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d45aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d45ae:	f002 f8fd 	bl	d67ac <__aeabi_ddiv>
  stemp = -45 + stemp;
  temp = stemp;
   d45b2:	2200      	movs	r2, #0
   d45b4:	4b10      	ldr	r3, [pc, #64]	; (d45f8 <_ZN14Adafruit_SHT3111readTempHumEv+0xd8>)
   d45b6:	f001 fe1b 	bl	d61f0 <__aeabi_dsub>
   d45ba:	f002 fac5 	bl	d6b48 <__aeabi_d2f>
   d45be:	60a0      	str	r0, [r4, #8]
  
//  Serial.print("SRH = "); Serial.println(SRH);
  double shum = SRH;
   d45c0:	ea45 2006 	orr.w	r0, r5, r6, lsl #8
   d45c4:	f001 ff52 	bl	d646c <__aeabi_ui2d>
  shum *= 100;
   d45c8:	2200      	movs	r2, #0
   d45ca:	4b0c      	ldr	r3, [pc, #48]	; (d45fc <_ZN14Adafruit_SHT3111readTempHumEv+0xdc>)
   d45cc:	f001 ffc4 	bl	d6558 <__aeabi_dmul>
  shum /= 0xFFFF;
  
  humidity = shum;
   d45d0:	a307      	add	r3, pc, #28	; (adr r3, d45f0 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d45d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d45d6:	f002 f8e9 	bl	d67ac <__aeabi_ddiv>
   d45da:	f002 fab5 	bl	d6b48 <__aeabi_d2f>
   d45de:	6060      	str	r0, [r4, #4]
  
  return true;
   d45e0:	2001      	movs	r0, #1
   d45e2:	e000      	b.n	d45e6 <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
  writeCommand(SHT31_MEAS_HIGHREP);
  
  delay(500);
  Wire.requestFrom(_i2caddr, (uint8_t)6);
  if (Wire.available() != 6) 
    return false;
   d45e4:	2000      	movs	r0, #0
  shum /= 0xFFFF;
  
  humidity = shum;
  
  return true;
}
   d45e6:	b002      	add	sp, #8
   d45e8:	bd70      	pop	{r4, r5, r6, pc}
   d45ea:	bf00      	nop
   d45ec:	f3af 8000 	nop.w
   d45f0:	00000000 	.word	0x00000000
   d45f4:	40efffe0 	.word	0x40efffe0
   d45f8:	40468000 	.word	0x40468000
   d45fc:	40590000 	.word	0x40590000
   d4600:	00000000 	.word	0x00000000
   d4604:	4065e000 	.word	0x4065e000

000d4608 <_ZN14Adafruit_SHT3115readTemperatureEv>:
  else
    writeCommand(SHT31_HEATERDIS);
}


float Adafruit_SHT31::readTemperature(void) {
   d4608:	b510      	push	{r4, lr}
   d460a:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   d460c:	f7ff ff88 	bl	d4520 <_ZN14Adafruit_SHT3111readTempHumEv>
   d4610:	b110      	cbz	r0, d4618 <_ZN14Adafruit_SHT3115readTemperatureEv+0x10>

  return temp;
   d4612:	ed94 0a02 	vldr	s0, [r4, #8]
   d4616:	bd10      	pop	{r4, pc}
    writeCommand(SHT31_HEATERDIS);
}


float Adafruit_SHT31::readTemperature(void) {
  if (! readTempHum()) return NAN;
   d4618:	ed9f 0a01 	vldr	s0, [pc, #4]	; d4620 <_ZN14Adafruit_SHT3115readTemperatureEv+0x18>

  return temp;
}
   d461c:	bd10      	pop	{r4, pc}
   d461e:	bf00      	nop
   d4620:	7fc00000 	.word	0x7fc00000

000d4624 <_GLOBAL__sub_I__ZN14Adafruit_SHT31C2Ev>:
   d4624:	f000 b810 	b.w	d4648 <HAL_Pin_Map>

000d4628 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4628:	b508      	push	{r3, lr}
   d462a:	4b02      	ldr	r3, [pc, #8]	; (d4634 <netdb_freeaddrinfo+0xc>)
   d462c:	681b      	ldr	r3, [r3, #0]
   d462e:	689b      	ldr	r3, [r3, #8]
   d4630:	9301      	str	r3, [sp, #4]
   d4632:	bd08      	pop	{r3, pc}
   d4634:	00030268 	.word	0x00030268

000d4638 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4638:	b508      	push	{r3, lr}
   d463a:	4b02      	ldr	r3, [pc, #8]	; (d4644 <netdb_getaddrinfo+0xc>)
   d463c:	681b      	ldr	r3, [r3, #0]
   d463e:	68db      	ldr	r3, [r3, #12]
   d4640:	9301      	str	r3, [sp, #4]
   d4642:	bd08      	pop	{r3, pc}
   d4644:	00030268 	.word	0x00030268

000d4648 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4648:	b508      	push	{r3, lr}
   d464a:	4b02      	ldr	r3, [pc, #8]	; (d4654 <HAL_Pin_Map+0xc>)
   d464c:	681b      	ldr	r3, [r3, #0]
   d464e:	681b      	ldr	r3, [r3, #0]
   d4650:	9301      	str	r3, [sp, #4]
   d4652:	bd08      	pop	{r3, pc}
   d4654:	0003022c 	.word	0x0003022c

000d4658 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4658:	b508      	push	{r3, lr}
   d465a:	4b02      	ldr	r3, [pc, #8]	; (d4664 <HAL_Validate_Pin_Function+0xc>)
   d465c:	681b      	ldr	r3, [r3, #0]
   d465e:	685b      	ldr	r3, [r3, #4]
   d4660:	9301      	str	r3, [sp, #4]
   d4662:	bd08      	pop	{r3, pc}
   d4664:	0003022c 	.word	0x0003022c

000d4668 <HAL_Get_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4668:	b508      	push	{r3, lr}
   d466a:	4b02      	ldr	r3, [pc, #8]	; (d4674 <HAL_Get_Pin_Mode+0xc>)
   d466c:	681b      	ldr	r3, [r3, #0]
   d466e:	68db      	ldr	r3, [r3, #12]
   d4670:	9301      	str	r3, [sp, #4]
   d4672:	bd08      	pop	{r3, pc}
   d4674:	0003022c 	.word	0x0003022c

000d4678 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4678:	b508      	push	{r3, lr}
   d467a:	4b02      	ldr	r3, [pc, #8]	; (d4684 <HAL_GPIO_Write+0xc>)
   d467c:	681b      	ldr	r3, [r3, #0]
   d467e:	691b      	ldr	r3, [r3, #16]
   d4680:	9301      	str	r3, [sp, #4]
   d4682:	bd08      	pop	{r3, pc}
   d4684:	0003022c 	.word	0x0003022c

000d4688 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d4688:	b508      	push	{r3, lr}
   d468a:	4b02      	ldr	r3, [pc, #8]	; (d4694 <HAL_ADC_Read+0xc>)
   d468c:	681b      	ldr	r3, [r3, #0]
   d468e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4690:	9301      	str	r3, [sp, #4]
   d4692:	bd08      	pop	{r3, pc}
   d4694:	0003022c 	.word	0x0003022c

000d4698 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4698:	b508      	push	{r3, lr}
   d469a:	4b02      	ldr	r3, [pc, #8]	; (d46a4 <HAL_SPI_Init+0xc>)
   d469c:	681b      	ldr	r3, [r3, #0]
   d469e:	69db      	ldr	r3, [r3, #28]
   d46a0:	9301      	str	r3, [sp, #4]
   d46a2:	bd08      	pop	{r3, pc}
   d46a4:	00030230 	.word	0x00030230

000d46a8 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d46a8:	b508      	push	{r3, lr}
   d46aa:	4b02      	ldr	r3, [pc, #8]	; (d46b4 <HAL_SPI_Is_Enabled+0xc>)
   d46ac:	681b      	ldr	r3, [r3, #0]
   d46ae:	6a1b      	ldr	r3, [r3, #32]
   d46b0:	9301      	str	r3, [sp, #4]
   d46b2:	bd08      	pop	{r3, pc}
   d46b4:	00030230 	.word	0x00030230

000d46b8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d46b8:	b508      	push	{r3, lr}
   d46ba:	4b02      	ldr	r3, [pc, #8]	; (d46c4 <HAL_RNG_GetRandomNumber+0xc>)
   d46bc:	681b      	ldr	r3, [r3, #0]
   d46be:	685b      	ldr	r3, [r3, #4]
   d46c0:	9301      	str	r3, [sp, #4]
   d46c2:	bd08      	pop	{r3, pc}
   d46c4:	00030218 	.word	0x00030218

000d46c8 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d46c8:	b508      	push	{r3, lr}
   d46ca:	4b02      	ldr	r3, [pc, #8]	; (d46d4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d46cc:	681b      	ldr	r3, [r3, #0]
   d46ce:	695b      	ldr	r3, [r3, #20]
   d46d0:	9301      	str	r3, [sp, #4]
   d46d2:	bd08      	pop	{r3, pc}
   d46d4:	00030218 	.word	0x00030218

000d46d8 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d46d8:	b508      	push	{r3, lr}
   d46da:	4b02      	ldr	r3, [pc, #8]	; (d46e4 <os_thread_is_current+0xc>)
   d46dc:	681b      	ldr	r3, [r3, #0]
   d46de:	689b      	ldr	r3, [r3, #8]
   d46e0:	9301      	str	r3, [sp, #4]
   d46e2:	bd08      	pop	{r3, pc}
   d46e4:	00030248 	.word	0x00030248

000d46e8 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d46e8:	b508      	push	{r3, lr}
   d46ea:	4b02      	ldr	r3, [pc, #8]	; (d46f4 <os_thread_join+0xc>)
   d46ec:	681b      	ldr	r3, [r3, #0]
   d46ee:	691b      	ldr	r3, [r3, #16]
   d46f0:	9301      	str	r3, [sp, #4]
   d46f2:	bd08      	pop	{r3, pc}
   d46f4:	00030248 	.word	0x00030248

000d46f8 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d46f8:	b508      	push	{r3, lr}
   d46fa:	4b02      	ldr	r3, [pc, #8]	; (d4704 <os_thread_cleanup+0xc>)
   d46fc:	681b      	ldr	r3, [r3, #0]
   d46fe:	695b      	ldr	r3, [r3, #20]
   d4700:	9301      	str	r3, [sp, #4]
   d4702:	bd08      	pop	{r3, pc}
   d4704:	00030248 	.word	0x00030248

000d4708 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4708:	b508      	push	{r3, lr}
   d470a:	4b02      	ldr	r3, [pc, #8]	; (d4714 <os_mutex_recursive_create+0xc>)
   d470c:	681b      	ldr	r3, [r3, #0]
   d470e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4710:	9301      	str	r3, [sp, #4]
   d4712:	bd08      	pop	{r3, pc}
   d4714:	00030248 	.word	0x00030248

000d4718 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4718:	b508      	push	{r3, lr}
   d471a:	4b02      	ldr	r3, [pc, #8]	; (d4724 <os_mutex_recursive_destroy+0xc>)
   d471c:	681b      	ldr	r3, [r3, #0]
   d471e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4720:	9301      	str	r3, [sp, #4]
   d4722:	bd08      	pop	{r3, pc}
   d4724:	00030248 	.word	0x00030248

000d4728 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4728:	b508      	push	{r3, lr}
   d472a:	4b02      	ldr	r3, [pc, #8]	; (d4734 <inet_inet_ntop+0xc>)
   d472c:	681b      	ldr	r3, [r3, #0]
   d472e:	695b      	ldr	r3, [r3, #20]
   d4730:	9301      	str	r3, [sp, #4]
   d4732:	bd08      	pop	{r3, pc}
   d4734:	00030264 	.word	0x00030264

000d4738 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4738:	b508      	push	{r3, lr}
   d473a:	4b02      	ldr	r3, [pc, #8]	; (d4744 <HAL_USART_Init+0xc>)
   d473c:	681b      	ldr	r3, [r3, #0]
   d473e:	681b      	ldr	r3, [r3, #0]
   d4740:	9301      	str	r3, [sp, #4]
   d4742:	bd08      	pop	{r3, pc}
   d4744:	0003023c 	.word	0x0003023c

000d4748 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4748:	b508      	push	{r3, lr}
   d474a:	4b02      	ldr	r3, [pc, #8]	; (d4754 <HAL_USART_Write_Data+0xc>)
   d474c:	681b      	ldr	r3, [r3, #0]
   d474e:	68db      	ldr	r3, [r3, #12]
   d4750:	9301      	str	r3, [sp, #4]
   d4752:	bd08      	pop	{r3, pc}
   d4754:	0003023c 	.word	0x0003023c

000d4758 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4758:	b508      	push	{r3, lr}
   d475a:	4b02      	ldr	r3, [pc, #8]	; (d4764 <HAL_USART_Available_Data+0xc>)
   d475c:	681b      	ldr	r3, [r3, #0]
   d475e:	691b      	ldr	r3, [r3, #16]
   d4760:	9301      	str	r3, [sp, #4]
   d4762:	bd08      	pop	{r3, pc}
   d4764:	0003023c 	.word	0x0003023c

000d4768 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4768:	b508      	push	{r3, lr}
   d476a:	4b02      	ldr	r3, [pc, #8]	; (d4774 <HAL_USART_Read_Data+0xc>)
   d476c:	681b      	ldr	r3, [r3, #0]
   d476e:	695b      	ldr	r3, [r3, #20]
   d4770:	9301      	str	r3, [sp, #4]
   d4772:	bd08      	pop	{r3, pc}
   d4774:	0003023c 	.word	0x0003023c

000d4778 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4778:	b508      	push	{r3, lr}
   d477a:	4b02      	ldr	r3, [pc, #8]	; (d4784 <HAL_USART_Peek_Data+0xc>)
   d477c:	681b      	ldr	r3, [r3, #0]
   d477e:	699b      	ldr	r3, [r3, #24]
   d4780:	9301      	str	r3, [sp, #4]
   d4782:	bd08      	pop	{r3, pc}
   d4784:	0003023c 	.word	0x0003023c

000d4788 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4788:	b508      	push	{r3, lr}
   d478a:	4b02      	ldr	r3, [pc, #8]	; (d4794 <HAL_USART_Flush_Data+0xc>)
   d478c:	681b      	ldr	r3, [r3, #0]
   d478e:	69db      	ldr	r3, [r3, #28]
   d4790:	9301      	str	r3, [sp, #4]
   d4792:	bd08      	pop	{r3, pc}
   d4794:	0003023c 	.word	0x0003023c

000d4798 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4798:	b508      	push	{r3, lr}
   d479a:	4b02      	ldr	r3, [pc, #8]	; (d47a4 <HAL_USART_Is_Enabled+0xc>)
   d479c:	681b      	ldr	r3, [r3, #0]
   d479e:	6a1b      	ldr	r3, [r3, #32]
   d47a0:	9301      	str	r3, [sp, #4]
   d47a2:	bd08      	pop	{r3, pc}
   d47a4:	0003023c 	.word	0x0003023c

000d47a8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d47a8:	b508      	push	{r3, lr}
   d47aa:	4b02      	ldr	r3, [pc, #8]	; (d47b4 <HAL_USART_Available_Data_For_Write+0xc>)
   d47ac:	681b      	ldr	r3, [r3, #0]
   d47ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d47b0:	9301      	str	r3, [sp, #4]
   d47b2:	bd08      	pop	{r3, pc}
   d47b4:	0003023c 	.word	0x0003023c

000d47b8 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d47b8:	b508      	push	{r3, lr}
   d47ba:	4b02      	ldr	r3, [pc, #8]	; (d47c4 <HAL_I2C_Begin+0xc>)
   d47bc:	681b      	ldr	r3, [r3, #0]
   d47be:	68db      	ldr	r3, [r3, #12]
   d47c0:	9301      	str	r3, [sp, #4]
   d47c2:	bd08      	pop	{r3, pc}
   d47c4:	00030228 	.word	0x00030228

000d47c8 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d47c8:	b508      	push	{r3, lr}
   d47ca:	4b02      	ldr	r3, [pc, #8]	; (d47d4 <HAL_I2C_Begin_Transmission+0xc>)
   d47cc:	681b      	ldr	r3, [r3, #0]
   d47ce:	699b      	ldr	r3, [r3, #24]
   d47d0:	9301      	str	r3, [sp, #4]
   d47d2:	bd08      	pop	{r3, pc}
   d47d4:	00030228 	.word	0x00030228

000d47d8 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d47d8:	b508      	push	{r3, lr}
   d47da:	4b02      	ldr	r3, [pc, #8]	; (d47e4 <HAL_I2C_End_Transmission+0xc>)
   d47dc:	681b      	ldr	r3, [r3, #0]
   d47de:	69db      	ldr	r3, [r3, #28]
   d47e0:	9301      	str	r3, [sp, #4]
   d47e2:	bd08      	pop	{r3, pc}
   d47e4:	00030228 	.word	0x00030228

000d47e8 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d47e8:	b508      	push	{r3, lr}
   d47ea:	4b02      	ldr	r3, [pc, #8]	; (d47f4 <HAL_I2C_Write_Data+0xc>)
   d47ec:	681b      	ldr	r3, [r3, #0]
   d47ee:	6a1b      	ldr	r3, [r3, #32]
   d47f0:	9301      	str	r3, [sp, #4]
   d47f2:	bd08      	pop	{r3, pc}
   d47f4:	00030228 	.word	0x00030228

000d47f8 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d47f8:	b508      	push	{r3, lr}
   d47fa:	4b02      	ldr	r3, [pc, #8]	; (d4804 <HAL_I2C_Available_Data+0xc>)
   d47fc:	681b      	ldr	r3, [r3, #0]
   d47fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4800:	9301      	str	r3, [sp, #4]
   d4802:	bd08      	pop	{r3, pc}
   d4804:	00030228 	.word	0x00030228

000d4808 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4808:	b508      	push	{r3, lr}
   d480a:	4b02      	ldr	r3, [pc, #8]	; (d4814 <HAL_I2C_Read_Data+0xc>)
   d480c:	681b      	ldr	r3, [r3, #0]
   d480e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4810:	9301      	str	r3, [sp, #4]
   d4812:	bd08      	pop	{r3, pc}
   d4814:	00030228 	.word	0x00030228

000d4818 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4818:	b508      	push	{r3, lr}
   d481a:	4b02      	ldr	r3, [pc, #8]	; (d4824 <HAL_I2C_Peek_Data+0xc>)
   d481c:	681b      	ldr	r3, [r3, #0]
   d481e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4820:	9301      	str	r3, [sp, #4]
   d4822:	bd08      	pop	{r3, pc}
   d4824:	00030228 	.word	0x00030228

000d4828 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4828:	b508      	push	{r3, lr}
   d482a:	4b02      	ldr	r3, [pc, #8]	; (d4834 <HAL_I2C_Flush_Data+0xc>)
   d482c:	681b      	ldr	r3, [r3, #0]
   d482e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4830:	9301      	str	r3, [sp, #4]
   d4832:	bd08      	pop	{r3, pc}
   d4834:	00030228 	.word	0x00030228

000d4838 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4838:	b508      	push	{r3, lr}
   d483a:	4b02      	ldr	r3, [pc, #8]	; (d4844 <HAL_I2C_Is_Enabled+0xc>)
   d483c:	681b      	ldr	r3, [r3, #0]
   d483e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4840:	9301      	str	r3, [sp, #4]
   d4842:	bd08      	pop	{r3, pc}
   d4844:	00030228 	.word	0x00030228

000d4848 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d4848:	b508      	push	{r3, lr}
   d484a:	4b02      	ldr	r3, [pc, #8]	; (d4854 <HAL_I2C_Init+0xc>)
   d484c:	681b      	ldr	r3, [r3, #0]
   d484e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4850:	9301      	str	r3, [sp, #4]
   d4852:	bd08      	pop	{r3, pc}
   d4854:	00030228 	.word	0x00030228

000d4858 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d4858:	b508      	push	{r3, lr}
   d485a:	4b02      	ldr	r3, [pc, #8]	; (d4864 <HAL_I2C_Request_Data_Ex+0xc>)
   d485c:	681b      	ldr	r3, [r3, #0]
   d485e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4860:	9301      	str	r3, [sp, #4]
   d4862:	bd08      	pop	{r3, pc}
   d4864:	00030228 	.word	0x00030228

000d4868 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4868:	b508      	push	{r3, lr}
   d486a:	4b02      	ldr	r3, [pc, #8]	; (d4874 <HAL_USB_USART_Init+0xc>)
   d486c:	681b      	ldr	r3, [r3, #0]
   d486e:	681b      	ldr	r3, [r3, #0]
   d4870:	9301      	str	r3, [sp, #4]
   d4872:	bd08      	pop	{r3, pc}
   d4874:	0003024c 	.word	0x0003024c

000d4878 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4878:	b508      	push	{r3, lr}
   d487a:	4b02      	ldr	r3, [pc, #8]	; (d4884 <HAL_USB_USART_Begin+0xc>)
   d487c:	681b      	ldr	r3, [r3, #0]
   d487e:	685b      	ldr	r3, [r3, #4]
   d4880:	9301      	str	r3, [sp, #4]
   d4882:	bd08      	pop	{r3, pc}
   d4884:	0003024c 	.word	0x0003024c

000d4888 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4888:	b508      	push	{r3, lr}
   d488a:	4b02      	ldr	r3, [pc, #8]	; (d4894 <HAL_USB_USART_Available_Data+0xc>)
   d488c:	681b      	ldr	r3, [r3, #0]
   d488e:	691b      	ldr	r3, [r3, #16]
   d4890:	9301      	str	r3, [sp, #4]
   d4892:	bd08      	pop	{r3, pc}
   d4894:	0003024c 	.word	0x0003024c

000d4898 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4898:	b508      	push	{r3, lr}
   d489a:	4b02      	ldr	r3, [pc, #8]	; (d48a4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d489c:	681b      	ldr	r3, [r3, #0]
   d489e:	695b      	ldr	r3, [r3, #20]
   d48a0:	9301      	str	r3, [sp, #4]
   d48a2:	bd08      	pop	{r3, pc}
   d48a4:	0003024c 	.word	0x0003024c

000d48a8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d48a8:	b508      	push	{r3, lr}
   d48aa:	4b02      	ldr	r3, [pc, #8]	; (d48b4 <HAL_USB_USART_Receive_Data+0xc>)
   d48ac:	681b      	ldr	r3, [r3, #0]
   d48ae:	699b      	ldr	r3, [r3, #24]
   d48b0:	9301      	str	r3, [sp, #4]
   d48b2:	bd08      	pop	{r3, pc}
   d48b4:	0003024c 	.word	0x0003024c

000d48b8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d48b8:	b508      	push	{r3, lr}
   d48ba:	4b02      	ldr	r3, [pc, #8]	; (d48c4 <HAL_USB_USART_Send_Data+0xc>)
   d48bc:	681b      	ldr	r3, [r3, #0]
   d48be:	69db      	ldr	r3, [r3, #28]
   d48c0:	9301      	str	r3, [sp, #4]
   d48c2:	bd08      	pop	{r3, pc}
   d48c4:	0003024c 	.word	0x0003024c

000d48c8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d48c8:	b508      	push	{r3, lr}
   d48ca:	4b02      	ldr	r3, [pc, #8]	; (d48d4 <HAL_USB_USART_Flush_Data+0xc>)
   d48cc:	681b      	ldr	r3, [r3, #0]
   d48ce:	6a1b      	ldr	r3, [r3, #32]
   d48d0:	9301      	str	r3, [sp, #4]
   d48d2:	bd08      	pop	{r3, pc}
   d48d4:	0003024c 	.word	0x0003024c

000d48d8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d48d8:	b508      	push	{r3, lr}
   d48da:	4b02      	ldr	r3, [pc, #8]	; (d48e4 <set_system_mode+0xc>)
   d48dc:	681b      	ldr	r3, [r3, #0]
   d48de:	685b      	ldr	r3, [r3, #4]
   d48e0:	9301      	str	r3, [sp, #4]
   d48e2:	bd08      	pop	{r3, pc}
   d48e4:	00030220 	.word	0x00030220

000d48e8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d48e8:	b508      	push	{r3, lr}
   d48ea:	4b02      	ldr	r3, [pc, #8]	; (d48f4 <system_delay_ms+0xc>)
   d48ec:	681b      	ldr	r3, [r3, #0]
   d48ee:	695b      	ldr	r3, [r3, #20]
   d48f0:	9301      	str	r3, [sp, #4]
   d48f2:	bd08      	pop	{r3, pc}
   d48f4:	00030220 	.word	0x00030220

000d48f8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d48f8:	b508      	push	{r3, lr}
   d48fa:	4b02      	ldr	r3, [pc, #8]	; (d4904 <application_thread_current+0xc>)
   d48fc:	681b      	ldr	r3, [r3, #0]
   d48fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4900:	9301      	str	r3, [sp, #4]
   d4902:	bd08      	pop	{r3, pc}
   d4904:	00030220 	.word	0x00030220

000d4908 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4908:	b508      	push	{r3, lr}
   d490a:	4b02      	ldr	r3, [pc, #8]	; (d4914 <application_thread_invoke+0xc>)
   d490c:	681b      	ldr	r3, [r3, #0]
   d490e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4910:	9301      	str	r3, [sp, #4]
   d4912:	bd08      	pop	{r3, pc}
   d4914:	00030220 	.word	0x00030220

000d4918 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4918:	b508      	push	{r3, lr}
   d491a:	4b03      	ldr	r3, [pc, #12]	; (d4928 <system_ctrl_set_app_request_handler+0x10>)
   d491c:	681b      	ldr	r3, [r3, #0]
   d491e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4922:	9301      	str	r3, [sp, #4]
   d4924:	bd08      	pop	{r3, pc}
   d4926:	0000      	.short	0x0000
   d4928:	00030220 	.word	0x00030220

000d492c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d492c:	b508      	push	{r3, lr}
   d492e:	4b03      	ldr	r3, [pc, #12]	; (d493c <system_ctrl_set_result+0x10>)
   d4930:	681b      	ldr	r3, [r3, #0]
   d4932:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4936:	9301      	str	r3, [sp, #4]
   d4938:	bd08      	pop	{r3, pc}
   d493a:	0000      	.short	0x0000
   d493c:	00030220 	.word	0x00030220

000d4940 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4940:	b508      	push	{r3, lr}
   d4942:	4b02      	ldr	r3, [pc, #8]	; (d494c <network_connect+0xc>)
   d4944:	681b      	ldr	r3, [r3, #0]
   d4946:	685b      	ldr	r3, [r3, #4]
   d4948:	9301      	str	r3, [sp, #4]
   d494a:	bd08      	pop	{r3, pc}
   d494c:	00030240 	.word	0x00030240

000d4950 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4950:	b508      	push	{r3, lr}
   d4952:	4b02      	ldr	r3, [pc, #8]	; (d495c <network_connecting+0xc>)
   d4954:	681b      	ldr	r3, [r3, #0]
   d4956:	689b      	ldr	r3, [r3, #8]
   d4958:	9301      	str	r3, [sp, #4]
   d495a:	bd08      	pop	{r3, pc}
   d495c:	00030240 	.word	0x00030240

000d4960 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4960:	b508      	push	{r3, lr}
   d4962:	4b02      	ldr	r3, [pc, #8]	; (d496c <network_disconnect+0xc>)
   d4964:	681b      	ldr	r3, [r3, #0]
   d4966:	68db      	ldr	r3, [r3, #12]
   d4968:	9301      	str	r3, [sp, #4]
   d496a:	bd08      	pop	{r3, pc}
   d496c:	00030240 	.word	0x00030240

000d4970 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4970:	b508      	push	{r3, lr}
   d4972:	4b02      	ldr	r3, [pc, #8]	; (d497c <network_ready+0xc>)
   d4974:	681b      	ldr	r3, [r3, #0]
   d4976:	691b      	ldr	r3, [r3, #16]
   d4978:	9301      	str	r3, [sp, #4]
   d497a:	bd08      	pop	{r3, pc}
   d497c:	00030240 	.word	0x00030240

000d4980 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4980:	b508      	push	{r3, lr}
   d4982:	4b02      	ldr	r3, [pc, #8]	; (d498c <network_on+0xc>)
   d4984:	681b      	ldr	r3, [r3, #0]
   d4986:	695b      	ldr	r3, [r3, #20]
   d4988:	9301      	str	r3, [sp, #4]
   d498a:	bd08      	pop	{r3, pc}
   d498c:	00030240 	.word	0x00030240

000d4990 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4990:	b508      	push	{r3, lr}
   d4992:	4b02      	ldr	r3, [pc, #8]	; (d499c <network_off+0xc>)
   d4994:	681b      	ldr	r3, [r3, #0]
   d4996:	699b      	ldr	r3, [r3, #24]
   d4998:	9301      	str	r3, [sp, #4]
   d499a:	bd08      	pop	{r3, pc}
   d499c:	00030240 	.word	0x00030240

000d49a0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d49a0:	b508      	push	{r3, lr}
   d49a2:	4b02      	ldr	r3, [pc, #8]	; (d49ac <network_listen+0xc>)
   d49a4:	681b      	ldr	r3, [r3, #0]
   d49a6:	69db      	ldr	r3, [r3, #28]
   d49a8:	9301      	str	r3, [sp, #4]
   d49aa:	bd08      	pop	{r3, pc}
   d49ac:	00030240 	.word	0x00030240

000d49b0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d49b0:	b508      	push	{r3, lr}
   d49b2:	4b02      	ldr	r3, [pc, #8]	; (d49bc <network_listening+0xc>)
   d49b4:	681b      	ldr	r3, [r3, #0]
   d49b6:	6a1b      	ldr	r3, [r3, #32]
   d49b8:	9301      	str	r3, [sp, #4]
   d49ba:	bd08      	pop	{r3, pc}
   d49bc:	00030240 	.word	0x00030240

000d49c0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d49c0:	b508      	push	{r3, lr}
   d49c2:	4b02      	ldr	r3, [pc, #8]	; (d49cc <network_set_listen_timeout+0xc>)
   d49c4:	681b      	ldr	r3, [r3, #0]
   d49c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d49c8:	9301      	str	r3, [sp, #4]
   d49ca:	bd08      	pop	{r3, pc}
   d49cc:	00030240 	.word	0x00030240

000d49d0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d49d0:	b508      	push	{r3, lr}
   d49d2:	4b02      	ldr	r3, [pc, #8]	; (d49dc <network_get_listen_timeout+0xc>)
   d49d4:	681b      	ldr	r3, [r3, #0]
   d49d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d49d8:	9301      	str	r3, [sp, #4]
   d49da:	bd08      	pop	{r3, pc}
   d49dc:	00030240 	.word	0x00030240

000d49e0 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d49e0:	b508      	push	{r3, lr}
   d49e2:	4b02      	ldr	r3, [pc, #8]	; (d49ec <spark_cloud_flag_connected+0xc>)
   d49e4:	681b      	ldr	r3, [r3, #0]
   d49e6:	695b      	ldr	r3, [r3, #20]
   d49e8:	9301      	str	r3, [sp, #4]
   d49ea:	bd08      	pop	{r3, pc}
   d49ec:	00030244 	.word	0x00030244

000d49f0 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d49f0:	b508      	push	{r3, lr}
   d49f2:	4b02      	ldr	r3, [pc, #8]	; (d49fc <spark_send_event+0xc>)
   d49f4:	681b      	ldr	r3, [r3, #0]
   d49f6:	6a1b      	ldr	r3, [r3, #32]
   d49f8:	9301      	str	r3, [sp, #4]
   d49fa:	bd08      	pop	{r3, pc}
   d49fc:	00030244 	.word	0x00030244

000d4a00 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4a00:	b508      	push	{r3, lr}
   d4a02:	4b02      	ldr	r3, [pc, #8]	; (d4a0c <spark_set_random_seed_from_cloud_handler+0xc>)
   d4a04:	681b      	ldr	r3, [r3, #0]
   d4a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4a08:	9301      	str	r3, [sp, #4]
   d4a0a:	bd08      	pop	{r3, pc}
   d4a0c:	00030244 	.word	0x00030244

000d4a10 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4a10:	b508      	push	{r3, lr}
   d4a12:	4b02      	ldr	r3, [pc, #8]	; (d4a1c <malloc+0xc>)
   d4a14:	681b      	ldr	r3, [r3, #0]
   d4a16:	681b      	ldr	r3, [r3, #0]
   d4a18:	9301      	str	r3, [sp, #4]
   d4a1a:	bd08      	pop	{r3, pc}
   d4a1c:	0003021c 	.word	0x0003021c

000d4a20 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4a20:	b508      	push	{r3, lr}
   d4a22:	4b02      	ldr	r3, [pc, #8]	; (d4a2c <free+0xc>)
   d4a24:	681b      	ldr	r3, [r3, #0]
   d4a26:	685b      	ldr	r3, [r3, #4]
   d4a28:	9301      	str	r3, [sp, #4]
   d4a2a:	bd08      	pop	{r3, pc}
   d4a2c:	0003021c 	.word	0x0003021c

000d4a30 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4a30:	b508      	push	{r3, lr}
   d4a32:	4b02      	ldr	r3, [pc, #8]	; (d4a3c <realloc+0xc>)
   d4a34:	681b      	ldr	r3, [r3, #0]
   d4a36:	689b      	ldr	r3, [r3, #8]
   d4a38:	9301      	str	r3, [sp, #4]
   d4a3a:	bd08      	pop	{r3, pc}
   d4a3c:	0003021c 	.word	0x0003021c

000d4a40 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4a40:	b508      	push	{r3, lr}
   d4a42:	4b02      	ldr	r3, [pc, #8]	; (d4a4c <abort+0xc>)
   d4a44:	681b      	ldr	r3, [r3, #0]
   d4a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4a48:	9301      	str	r3, [sp, #4]
   d4a4a:	bd08      	pop	{r3, pc}
   d4a4c:	0003021c 	.word	0x0003021c

000d4a50 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4a50:	b508      	push	{r3, lr}
   d4a52:	4b02      	ldr	r3, [pc, #8]	; (d4a5c <_malloc_r+0xc>)
   d4a54:	681b      	ldr	r3, [r3, #0]
   d4a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4a58:	9301      	str	r3, [sp, #4]
   d4a5a:	bd08      	pop	{r3, pc}
   d4a5c:	0003021c 	.word	0x0003021c

000d4a60 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4a60:	2200      	movs	r2, #0
   d4a62:	4611      	mov	r1, r2
   d4a64:	6840      	ldr	r0, [r0, #4]
   d4a66:	f7ff bfa3 	b.w	d49b0 <network_listening>

000d4a6a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4a6a:	2200      	movs	r2, #0
   d4a6c:	4611      	mov	r1, r2
   d4a6e:	6840      	ldr	r0, [r0, #4]
   d4a70:	f7ff bfae 	b.w	d49d0 <network_get_listen_timeout>

000d4a74 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4a74:	2200      	movs	r2, #0
   d4a76:	6840      	ldr	r0, [r0, #4]
   d4a78:	f7ff bfa2 	b.w	d49c0 <network_set_listen_timeout>

000d4a7c <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4a7c:	2200      	movs	r2, #0
   d4a7e:	f081 0101 	eor.w	r1, r1, #1
   d4a82:	6840      	ldr	r0, [r0, #4]
   d4a84:	f7ff bf8c 	b.w	d49a0 <network_listen>

000d4a88 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4a88:	2300      	movs	r3, #0
   d4a8a:	461a      	mov	r2, r3
   d4a8c:	4619      	mov	r1, r3
   d4a8e:	6840      	ldr	r0, [r0, #4]
   d4a90:	f7ff bf7e 	b.w	d4990 <network_off>

000d4a94 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4a94:	2300      	movs	r3, #0
   d4a96:	461a      	mov	r2, r3
   d4a98:	4619      	mov	r1, r3
   d4a9a:	6840      	ldr	r0, [r0, #4]
   d4a9c:	f7ff bf70 	b.w	d4980 <network_on>

000d4aa0 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4aa0:	2200      	movs	r2, #0
   d4aa2:	4611      	mov	r1, r2
   d4aa4:	6840      	ldr	r0, [r0, #4]
   d4aa6:	f7ff bf63 	b.w	d4970 <network_ready>

000d4aaa <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4aaa:	2200      	movs	r2, #0
   d4aac:	4611      	mov	r1, r2
   d4aae:	6840      	ldr	r0, [r0, #4]
   d4ab0:	f7ff bf4e 	b.w	d4950 <network_connecting>

000d4ab4 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4ab4:	2200      	movs	r2, #0
   d4ab6:	2102      	movs	r1, #2
   d4ab8:	6840      	ldr	r0, [r0, #4]
   d4aba:	f7ff bf51 	b.w	d4960 <network_disconnect>

000d4abe <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4abe:	2300      	movs	r3, #0
   d4ac0:	461a      	mov	r2, r3
   d4ac2:	6840      	ldr	r0, [r0, #4]
   d4ac4:	f7ff bf3c 	b.w	d4940 <network_connect>

000d4ac8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4ac8:	4b02      	ldr	r3, [pc, #8]	; (d4ad4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4aca:	2203      	movs	r2, #3
   d4acc:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4ace:	4a02      	ldr	r2, [pc, #8]	; (d4ad8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4ad0:	601a      	str	r2, [r3, #0]
   d4ad2:	4770      	bx	lr
   d4ad4:	2003e3a4 	.word	0x2003e3a4
   d4ad8:	000d6dfc 	.word	0x000d6dfc

000d4adc <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d4adc:	4770      	bx	lr

000d4ade <_ZN8SPIClassD0Ev>:
   d4ade:	b510      	push	{r4, lr}
   d4ae0:	210c      	movs	r1, #12
   d4ae2:	4604      	mov	r4, r0
   d4ae4:	f001 fa22 	bl	d5f2c <_ZdlPvj>
   d4ae8:	4620      	mov	r0, r4
   d4aea:	bd10      	pop	{r4, pc}

000d4aec <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4aec:	b510      	push	{r4, lr}
   d4aee:	4b05      	ldr	r3, [pc, #20]	; (d4b04 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x18>)
   d4af0:	6003      	str	r3, [r0, #0]
   d4af2:	4604      	mov	r4, r0
{
    _spi = spi;
   d4af4:	7101      	strb	r1, [r0, #4]
    HAL_SPI_Init(_spi);
   d4af6:	4608      	mov	r0, r1
   d4af8:	f7ff fdce 	bl	d4698 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4afc:	2300      	movs	r3, #0
   d4afe:	60a3      	str	r3, [r4, #8]
}
   d4b00:	4620      	mov	r0, r4
   d4b02:	bd10      	pop	{r4, pc}
   d4b04:	000d6e30 	.word	0x000d6e30

000d4b08 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d4b08:	7900      	ldrb	r0, [r0, #4]
   d4b0a:	f7ff bdcd 	b.w	d46a8 <HAL_SPI_Is_Enabled>

000d4b0e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d4b0e:	b510      	push	{r4, lr}
   d4b10:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4b12:	6800      	ldr	r0, [r0, #0]
   d4b14:	b118      	cbz	r0, d4b1e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d4b16:	f7ff ff83 	bl	d4a20 <free>
            wakeupSource_ = nullptr;
   d4b1a:	2300      	movs	r3, #0
   d4b1c:	6023      	str	r3, [r4, #0]
   d4b1e:	bd10      	pop	{r4, pc}

000d4b20 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4b20:	b510      	push	{r4, lr}
   d4b22:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d4b24:	f7ff fff3 	bl	d4b0e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4b28:	4620      	mov	r0, r4
   d4b2a:	bd10      	pop	{r4, pc}

000d4b2c <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4b2c:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4b2e:	4c09      	ldr	r4, [pc, #36]	; (d4b54 <_GLOBAL__sub_I_System+0x28>)
   d4b30:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4b32:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4b36:	6020      	str	r0, [r4, #0]
   d4b38:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4b3a:	71a0      	strb	r0, [r4, #6]
   d4b3c:	8120      	strh	r0, [r4, #8]
   d4b3e:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4b40:	f7ff feca 	bl	d48d8 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4b44:	4620      	mov	r0, r4
   d4b46:	4a04      	ldr	r2, [pc, #16]	; (d4b58 <_GLOBAL__sub_I_System+0x2c>)
   d4b48:	4904      	ldr	r1, [pc, #16]	; (d4b5c <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4b4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4b4e:	f001 b9df 	b.w	d5f10 <__aeabi_atexit>
   d4b52:	bf00      	nop
   d4b54:	2003e3ac 	.word	0x2003e3ac
   d4b58:	2003e334 	.word	0x2003e334
   d4b5c:	000d4b21 	.word	0x000d4b21

000d4b60 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4b60:	b510      	push	{r4, lr}
   d4b62:	4604      	mov	r4, r0
{
	free(buffer);
   d4b64:	6800      	ldr	r0, [r0, #0]
   d4b66:	f7ff ff5b 	bl	d4a20 <free>
}
   d4b6a:	4620      	mov	r0, r4
   d4b6c:	bd10      	pop	{r4, pc}

000d4b6e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4b6e:	b510      	push	{r4, lr}
   d4b70:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4b72:	6800      	ldr	r0, [r0, #0]
   d4b74:	b108      	cbz	r0, d4b7a <_ZN6String10invalidateEv+0xc>
   d4b76:	f7ff ff53 	bl	d4a20 <free>
	buffer = NULL;
   d4b7a:	2300      	movs	r3, #0
   d4b7c:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d4b7e:	60a3      	str	r3, [r4, #8]
   d4b80:	6063      	str	r3, [r4, #4]
   d4b82:	bd10      	pop	{r4, pc}

000d4b84 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4b84:	b538      	push	{r3, r4, r5, lr}
   d4b86:	4604      	mov	r4, r0
   d4b88:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4b8a:	6800      	ldr	r0, [r0, #0]
   d4b8c:	3101      	adds	r1, #1
   d4b8e:	f7ff ff4f 	bl	d4a30 <realloc>
	if (newbuffer) {
   d4b92:	b110      	cbz	r0, d4b9a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4b94:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d4b98:	2001      	movs	r0, #1
	}
	return 0;
}
   d4b9a:	bd38      	pop	{r3, r4, r5, pc}

000d4b9c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4b9c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4b9e:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4ba0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4ba2:	b113      	cbz	r3, d4baa <_ZN6String7reserveEj+0xe>
   d4ba4:	6843      	ldr	r3, [r0, #4]
   d4ba6:	428b      	cmp	r3, r1
   d4ba8:	d207      	bcs.n	d4bba <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d4baa:	4620      	mov	r0, r4
   d4bac:	f7ff ffea 	bl	d4b84 <_ZN6String12changeBufferEj>
   d4bb0:	b120      	cbz	r0, d4bbc <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d4bb2:	68a3      	ldr	r3, [r4, #8]
   d4bb4:	b90b      	cbnz	r3, d4bba <_ZN6String7reserveEj+0x1e>
   d4bb6:	6822      	ldr	r2, [r4, #0]
   d4bb8:	7013      	strb	r3, [r2, #0]
   d4bba:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d4bbc:	bd10      	pop	{r4, pc}

000d4bbe <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4bbe:	b570      	push	{r4, r5, r6, lr}
   d4bc0:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d4bc2:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4bc4:	4604      	mov	r4, r0
   d4bc6:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d4bc8:	f7ff ffe8 	bl	d4b9c <_ZN6String7reserveEj>
   d4bcc:	b918      	cbnz	r0, d4bd6 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d4bce:	4620      	mov	r0, r4
   d4bd0:	f7ff ffcd 	bl	d4b6e <_ZN6String10invalidateEv>
		return *this;
   d4bd4:	e009      	b.n	d4bea <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d4bd6:	462a      	mov	r2, r5
   d4bd8:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d4bda:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d4bdc:	6820      	ldr	r0, [r4, #0]
   d4bde:	f002 f811 	bl	d6c04 <memcpy>
	buffer[len] = 0;
   d4be2:	6822      	ldr	r2, [r4, #0]
   d4be4:	68a3      	ldr	r3, [r4, #8]
   d4be6:	2100      	movs	r1, #0
   d4be8:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d4bea:	4620      	mov	r0, r4
   d4bec:	bd70      	pop	{r4, r5, r6, pc}

000d4bee <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4bee:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4bf0:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4bf2:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4bf4:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4bf6:	6043      	str	r3, [r0, #4]
	len = 0;
   d4bf8:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4bfa:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d4bfc:	460d      	mov	r5, r1
   d4bfe:	b139      	cbz	r1, d4c10 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d4c00:	4608      	mov	r0, r1
   d4c02:	f002 f856 	bl	d6cb2 <strlen>
   d4c06:	4629      	mov	r1, r5
   d4c08:	4602      	mov	r2, r0
   d4c0a:	4620      	mov	r0, r4
   d4c0c:	f7ff ffd7 	bl	d4bbe <_ZN6String4copyEPKcj>
}
   d4c10:	4620      	mov	r0, r4
   d4c12:	bd38      	pop	{r3, r4, r5, pc}

000d4c14 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4c14:	b510      	push	{r4, lr}
   d4c16:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4c18:	6800      	ldr	r0, [r0, #0]
   d4c1a:	b108      	cbz	r0, d4c20 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4c1c:	f7ff fd7c 	bl	d4718 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d4c20:	4620      	mov	r0, r4
   d4c22:	bd10      	pop	{r4, pc}

000d4c24 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4c24:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4c26:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4c28:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4c2a:	689b      	ldr	r3, [r3, #8]
   d4c2c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4c2e:	68a3      	ldr	r3, [r4, #8]
   d4c30:	3b01      	subs	r3, #1
   d4c32:	60a3      	str	r3, [r4, #8]
   d4c34:	b92b      	cbnz	r3, d4c42 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d4c36:	6823      	ldr	r3, [r4, #0]
   d4c38:	4620      	mov	r0, r4
   d4c3a:	68db      	ldr	r3, [r3, #12]
        }
    }
   d4c3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d4c40:	4718      	bx	r3
   d4c42:	bd10      	pop	{r4, pc}

000d4c44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4c44:	680b      	ldr	r3, [r1, #0]
   d4c46:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4c48:	b113      	cbz	r3, d4c50 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d4c4a:	685a      	ldr	r2, [r3, #4]
   d4c4c:	3201      	adds	r2, #1
   d4c4e:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d4c50:	4770      	bx	lr

000d4c52 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4c52:	b510      	push	{r4, lr}
   d4c54:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d4c56:	6800      	ldr	r0, [r0, #0]
   d4c58:	b128      	cbz	r0, d4c66 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4c5a:	6843      	ldr	r3, [r0, #4]
   d4c5c:	3b01      	subs	r3, #1
   d4c5e:	6043      	str	r3, [r0, #4]
   d4c60:	b90b      	cbnz	r3, d4c66 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d4c62:	f7ff ffdf 	bl	d4c24 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4c66:	4620      	mov	r0, r4
   d4c68:	bd10      	pop	{r4, pc}
	...

000d4c6c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4c6c:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4c6e:	4c06      	ldr	r4, [pc, #24]	; (d4c88 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4c70:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d4c72:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4c74:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4c76:	f7ff fd47 	bl	d4708 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4c7a:	4620      	mov	r0, r4
   d4c7c:	4a03      	ldr	r2, [pc, #12]	; (d4c8c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4c7e:	4904      	ldr	r1, [pc, #16]	; (d4c90 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4c84:	f001 b944 	b.w	d5f10 <__aeabi_atexit>
   d4c88:	2003e3b8 	.word	0x2003e3b8
   d4c8c:	2003e334 	.word	0x2003e334
   d4c90:	000d4c15 	.word	0x000d4c15

000d4c94 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4c96:	4606      	mov	r6, r0
   d4c98:	460d      	mov	r5, r1
   d4c9a:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4c9c:	2400      	movs	r4, #0
  while (size--) {
   d4c9e:	42bd      	cmp	r5, r7
   d4ca0:	d00c      	beq.n	d4cbc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4ca2:	6833      	ldr	r3, [r6, #0]
   d4ca4:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4ca8:	689b      	ldr	r3, [r3, #8]
   d4caa:	4630      	mov	r0, r6
   d4cac:	4798      	blx	r3
     if (chunk>=0)
   d4cae:	2800      	cmp	r0, #0
   d4cb0:	db01      	blt.n	d4cb6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4cb2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4cb4:	e7f3      	b.n	d4c9e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4cb6:	2c00      	cmp	r4, #0
   d4cb8:	bf08      	it	eq
   d4cba:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4cbc:	4620      	mov	r0, r4
   d4cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4cc0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4cc0:	b570      	push	{r4, r5, r6, lr}
   d4cc2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4cc4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4cc6:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4cc8:	b149      	cbz	r1, d4cde <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4cca:	f001 fff2 	bl	d6cb2 <strlen>
   d4cce:	682b      	ldr	r3, [r5, #0]
   d4cd0:	4602      	mov	r2, r0
   d4cd2:	4621      	mov	r1, r4
   d4cd4:	4628      	mov	r0, r5
   d4cd6:	68db      	ldr	r3, [r3, #12]
    }
   d4cd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4cdc:	4718      	bx	r3
    }
   d4cde:	bd70      	pop	{r4, r5, r6, pc}

000d4ce0 <_ZN5Print5printEPKc>:
   d4ce0:	b508      	push	{r3, lr}
   d4ce2:	f7ff ffed 	bl	d4cc0 <_ZN5Print5writeEPKc>
   d4ce6:	bd08      	pop	{r3, pc}

000d4ce8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4ce8:	6803      	ldr	r3, [r0, #0]
   d4cea:	689b      	ldr	r3, [r3, #8]
   d4cec:	4718      	bx	r3

000d4cee <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4cee:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4cf0:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4cf2:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4cf4:	f7ff fff8 	bl	d4ce8 <_ZN5Print5printEc>
  n += print('\n');
   d4cf8:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d4cfa:	4604      	mov	r4, r0
  n += print('\n');
   d4cfc:	4628      	mov	r0, r5
   d4cfe:	f7ff fff3 	bl	d4ce8 <_ZN5Print5printEc>
  return n;
}
   d4d02:	4420      	add	r0, r4
   d4d04:	bd38      	pop	{r3, r4, r5, pc}

000d4d06 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d4d06:	b538      	push	{r3, r4, r5, lr}
   d4d08:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4d0a:	f7ff ffd9 	bl	d4cc0 <_ZN5Print5writeEPKc>
   d4d0e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d4d10:	4628      	mov	r0, r5
   d4d12:	f7ff ffec 	bl	d4cee <_ZN5Print7printlnEv>
  return n;
}
   d4d16:	4420      	add	r0, r4
   d4d18:	bd38      	pop	{r3, r4, r5, pc}

000d4d1a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4d1a:	b530      	push	{r4, r5, lr}
   d4d1c:	b08b      	sub	sp, #44	; 0x2c
   d4d1e:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4d20:	2100      	movs	r1, #0
   d4d22:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4d26:	2a01      	cmp	r2, #1
   d4d28:	bf98      	it	ls
   d4d2a:	220a      	movls	r2, #10
   d4d2c:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d4d30:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d4d34:	fb05 3312 	mls	r3, r5, r2, r3
   d4d38:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4d3c:	2b09      	cmp	r3, #9
   d4d3e:	bf94      	ite	ls
   d4d40:	3330      	addls	r3, #48	; 0x30
   d4d42:	3337      	addhi	r3, #55	; 0x37
   d4d44:	b2db      	uxtb	r3, r3
   d4d46:	4621      	mov	r1, r4
   d4d48:	f804 3901 	strb.w	r3, [r4], #-1
   d4d4c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4d4e:	2d00      	cmp	r5, #0
   d4d50:	d1ee      	bne.n	d4d30 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4d52:	f7ff ffb5 	bl	d4cc0 <_ZN5Print5writeEPKc>
}
   d4d56:	b00b      	add	sp, #44	; 0x2c
   d4d58:	bd30      	pop	{r4, r5, pc}
	...

000d4d5c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d4d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4d60:	ec57 6b10 	vmov	r6, r7, d0
   d4d64:	4682      	mov	sl, r0
   d4d66:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d4d68:	ee10 2a10 	vmov	r2, s0
   d4d6c:	463b      	mov	r3, r7
   d4d6e:	ee10 0a10 	vmov	r0, s0
   d4d72:	4639      	mov	r1, r7
   d4d74:	f001 fe8a 	bl	d6a8c <__aeabi_dcmpun>
   d4d78:	b108      	cbz	r0, d4d7e <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4d7a:	494e      	ldr	r1, [pc, #312]	; (d4eb4 <_ZN5Print10printFloatEdh+0x158>)
   d4d7c:	e012      	b.n	d4da4 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d4d7e:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d4d82:	f04f 32ff 	mov.w	r2, #4294967295
   d4d86:	4b4c      	ldr	r3, [pc, #304]	; (d4eb8 <_ZN5Print10printFloatEdh+0x15c>)
   d4d88:	4630      	mov	r0, r6
   d4d8a:	4649      	mov	r1, r9
   d4d8c:	f001 fe7e 	bl	d6a8c <__aeabi_dcmpun>
   d4d90:	b968      	cbnz	r0, d4dae <_ZN5Print10printFloatEdh+0x52>
   d4d92:	f04f 32ff 	mov.w	r2, #4294967295
   d4d96:	4b48      	ldr	r3, [pc, #288]	; (d4eb8 <_ZN5Print10printFloatEdh+0x15c>)
   d4d98:	4630      	mov	r0, r6
   d4d9a:	4649      	mov	r1, r9
   d4d9c:	f001 fe58 	bl	d6a50 <__aeabi_dcmple>
   d4da0:	b928      	cbnz	r0, d4dae <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4da2:	4946      	ldr	r1, [pc, #280]	; (d4ebc <_ZN5Print10printFloatEdh+0x160>)
   d4da4:	4650      	mov	r0, sl
   d4da6:	f7ff ff8b 	bl	d4cc0 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d4daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d4dae:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d4db2:	4b43      	ldr	r3, [pc, #268]	; (d4ec0 <_ZN5Print10printFloatEdh+0x164>)
   d4db4:	4630      	mov	r0, r6
   d4db6:	4639      	mov	r1, r7
   d4db8:	f001 fe5e 	bl	d6a78 <__aeabi_dcmpgt>
   d4dbc:	b108      	cbz	r0, d4dc2 <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4dbe:	4941      	ldr	r1, [pc, #260]	; (d4ec4 <_ZN5Print10printFloatEdh+0x168>)
   d4dc0:	e7f0      	b.n	d4da4 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d4dc2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d4dc6:	4b40      	ldr	r3, [pc, #256]	; (d4ec8 <_ZN5Print10printFloatEdh+0x16c>)
   d4dc8:	4630      	mov	r0, r6
   d4dca:	4639      	mov	r1, r7
   d4dcc:	f001 fe36 	bl	d6a3c <__aeabi_dcmplt>
   d4dd0:	2800      	cmp	r0, #0
   d4dd2:	d1f4      	bne.n	d4dbe <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d4dd4:	2200      	movs	r2, #0
   d4dd6:	2300      	movs	r3, #0
   d4dd8:	4630      	mov	r0, r6
   d4dda:	4639      	mov	r1, r7
   d4ddc:	f001 fe2e 	bl	d6a3c <__aeabi_dcmplt>
   d4de0:	b140      	cbz	r0, d4df4 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d4de2:	212d      	movs	r1, #45	; 0x2d
   d4de4:	4650      	mov	r0, sl
   d4de6:	f7ff ff7f 	bl	d4ce8 <_ZN5Print5printEc>
     number = -number;
   d4dea:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d4dee:	4604      	mov	r4, r0
     number = -number;
   d4df0:	461f      	mov	r7, r3
   d4df2:	e000      	b.n	d4df6 <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d4df4:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d4df6:	4935      	ldr	r1, [pc, #212]	; (d4ecc <_ZN5Print10printFloatEdh+0x170>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d4df8:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d4dfc:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d4dfe:	fa5f f388 	uxtb.w	r3, r8
   d4e02:	429d      	cmp	r5, r3
   d4e04:	d906      	bls.n	d4e14 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d4e06:	2200      	movs	r2, #0
   d4e08:	4b31      	ldr	r3, [pc, #196]	; (d4ed0 <_ZN5Print10printFloatEdh+0x174>)
   d4e0a:	f001 fccf 	bl	d67ac <__aeabi_ddiv>
   d4e0e:	f108 0801 	add.w	r8, r8, #1
   d4e12:	e7f4      	b.n	d4dfe <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d4e14:	4632      	mov	r2, r6
   d4e16:	463b      	mov	r3, r7
   d4e18:	f001 f9ec 	bl	d61f4 <__adddf3>
   d4e1c:	460f      	mov	r7, r1
   d4e1e:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d4e20:	f001 fe72 	bl	d6b08 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4e24:	220a      	movs	r2, #10
   d4e26:	4601      	mov	r1, r0
   d4e28:	4680      	mov	r8, r0
   d4e2a:	4650      	mov	r0, sl
   d4e2c:	f7ff ff75 	bl	d4d1a <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
   d4e30:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d4e32:	b3e5      	cbz	r5, d4eae <_ZN5Print10printFloatEdh+0x152>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d4e34:	4640      	mov	r0, r8
   d4e36:	f001 fb19 	bl	d646c <__aeabi_ui2d>
   d4e3a:	4602      	mov	r2, r0
   d4e3c:	460b      	mov	r3, r1
   d4e3e:	4630      	mov	r0, r6
   d4e40:	4639      	mov	r1, r7
   d4e42:	f001 f9d5 	bl	d61f0 <__aeabi_dsub>
   d4e46:	4606      	mov	r6, r0
   d4e48:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4e4a:	4650      	mov	r0, sl
   d4e4c:	4921      	ldr	r1, [pc, #132]	; (d4ed4 <_ZN5Print10printFloatEdh+0x178>)
   d4e4e:	f7ff ff37 	bl	d4cc0 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d4e52:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d4e54:	2200      	movs	r2, #0
   d4e56:	4b1e      	ldr	r3, [pc, #120]	; (d4ed0 <_ZN5Print10printFloatEdh+0x174>)
   d4e58:	4630      	mov	r0, r6
   d4e5a:	4639      	mov	r1, r7
   d4e5c:	f001 fb7c 	bl	d6558 <__aeabi_dmul>
   d4e60:	4606      	mov	r6, r0
   d4e62:	460f      	mov	r7, r1
    int toPrint = int(remainder);
   d4e64:	f001 fe28 	bl	d6ab8 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d4e68:	f1b0 0900 	subs.w	r9, r0, #0
   d4e6c:	da07      	bge.n	d4e7e <_ZN5Print10printFloatEdh+0x122>
            t = print('-');
   d4e6e:	212d      	movs	r1, #45	; 0x2d
   d4e70:	4650      	mov	r0, sl
   d4e72:	f7ff ff39 	bl	d4ce8 <_ZN5Print5printEc>
            val = -n;
   d4e76:	f1c9 0100 	rsb	r1, r9, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d4e7a:	4680      	mov	r8, r0
   d4e7c:	e002      	b.n	d4e84 <_ZN5Print10printFloatEdh+0x128>
            val = -n;
        } else {
            val = n;
   d4e7e:	4649      	mov	r1, r9
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d4e80:	f04f 0800 	mov.w	r8, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4e84:	220a      	movs	r2, #10
   d4e86:	4650      	mov	r0, sl
   d4e88:	f7ff ff47 	bl	d4d1a <_ZN5Print11printNumberEmh>
    n += print(toPrint);
   d4e8c:	4440      	add	r0, r8
   d4e8e:	4404      	add	r4, r0
    remainder -= toPrint;
   d4e90:	4648      	mov	r0, r9
   d4e92:	f001 fafb 	bl	d648c <__aeabi_i2d>
   d4e96:	4602      	mov	r2, r0
   d4e98:	460b      	mov	r3, r1
   d4e9a:	4630      	mov	r0, r6
   d4e9c:	4639      	mov	r1, r7
   d4e9e:	f001 f9a7 	bl	d61f0 <__aeabi_dsub>
   d4ea2:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d4ea4:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d4ea8:	4606      	mov	r6, r0
   d4eaa:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d4eac:	d1d2      	bne.n	d4e54 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d4eae:	4620      	mov	r0, r4
   d4eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4eb4:	000d6e38 	.word	0x000d6e38
   d4eb8:	7fefffff 	.word	0x7fefffff
   d4ebc:	000d6e42 	.word	0x000d6e42
   d4ec0:	41efffff 	.word	0x41efffff
   d4ec4:	000d6e3c 	.word	0x000d6e3c
   d4ec8:	c1efffff 	.word	0xc1efffff
   d4ecc:	3fe00000 	.word	0x3fe00000
   d4ed0:	40240000 	.word	0x40240000
   d4ed4:	000d6e40 	.word	0x000d6e40

000d4ed8 <_ZN5Print7printlnEdi>:
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d4ed8:	b538      	push	{r3, r4, r5, lr}
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d4eda:	b2c9      	uxtb	r1, r1
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d4edc:	4605      	mov	r5, r0
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d4ede:	f7ff ff3d 	bl	d4d5c <_ZN5Print10printFloatEdh>
   d4ee2:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d4ee4:	4628      	mov	r0, r5
   d4ee6:	f7ff ff02 	bl	d4cee <_ZN5Print7printlnEv>
  return n;
}
   d4eea:	4420      	add	r0, r4
   d4eec:	bd38      	pop	{r3, r4, r5, pc}

000d4eee <_ZN5Print7printlnEfi>:
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d4eee:	b538      	push	{r3, r4, r5, lr}
   d4ef0:	4604      	mov	r4, r0
    return println((double)num, digits);
   d4ef2:	ee10 0a10 	vmov	r0, s0
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d4ef6:	460d      	mov	r5, r1
    return println((double)num, digits);
   d4ef8:	f001 fada 	bl	d64b0 <__aeabi_f2d>
   d4efc:	ec41 0b10 	vmov	d0, r0, r1
   d4f00:	4629      	mov	r1, r5
   d4f02:	4620      	mov	r0, r4
}
   d4f04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return n;
}

size_t Print::println(float num, int digits)
{
    return println((double)num, digits);
   d4f08:	f7ff bfe6 	b.w	d4ed8 <_ZN5Print7printlnEdi>

000d4f0c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4f0c:	4b01      	ldr	r3, [pc, #4]	; (d4f14 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4f0e:	4a02      	ldr	r2, [pc, #8]	; (d4f18 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4f10:	601a      	str	r2, [r3, #0]
   d4f12:	4770      	bx	lr
   d4f14:	2003e3bc 	.word	0x2003e3bc
   d4f18:	000d6eb9 	.word	0x000d6eb9

000d4f1c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4f1c:	4b02      	ldr	r3, [pc, #8]	; (d4f28 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4f1e:	681a      	ldr	r2, [r3, #0]
   d4f20:	4b02      	ldr	r3, [pc, #8]	; (d4f2c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4f22:	601a      	str	r2, [r3, #0]
   d4f24:	4770      	bx	lr
   d4f26:	bf00      	nop
   d4f28:	2003e2cc 	.word	0x2003e2cc
   d4f2c:	2003e3c0 	.word	0x2003e3c0

000d4f30 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4f30:	2100      	movs	r1, #0
   d4f32:	f7ff bcd9 	b.w	d48e8 <system_delay_ms>

000d4f36 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4f36:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4f38:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4f3a:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4f3c:	b113      	cbz	r3, d4f44 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4f3e:	2203      	movs	r2, #3
   d4f40:	4601      	mov	r1, r0
   d4f42:	4798      	blx	r3
    }
   d4f44:	4620      	mov	r0, r4
   d4f46:	bd10      	pop	{r4, pc}

000d4f48 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4f48:	b510      	push	{r4, lr}
   d4f4a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4f4c:	f7ff fff3 	bl	d4f36 <_ZNSt14_Function_baseD1Ev>
   d4f50:	4620      	mov	r0, r4
   d4f52:	bd10      	pop	{r4, pc}

000d4f54 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d4f54:	b513      	push	{r0, r1, r4, lr}
   d4f56:	460b      	mov	r3, r1
   d4f58:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4f5a:	c803      	ldmia	r0, {r0, r1}
   d4f5c:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4f60:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4f64:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4f68:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d4f6c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4f70:	b002      	add	sp, #8
   d4f72:	bd10      	pop	{r4, pc}

000d4f74 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4f74:	4803      	ldr	r0, [pc, #12]	; (d4f84 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4f76:	4a04      	ldr	r2, [pc, #16]	; (d4f88 <_GLOBAL__sub_I_RGB+0x14>)
   d4f78:	4904      	ldr	r1, [pc, #16]	; (d4f8c <_GLOBAL__sub_I_RGB+0x18>)
   d4f7a:	2300      	movs	r3, #0
   d4f7c:	6083      	str	r3, [r0, #8]
   d4f7e:	f000 bfc7 	b.w	d5f10 <__aeabi_atexit>
   d4f82:	bf00      	nop
   d4f84:	2003e3c4 	.word	0x2003e3c4
   d4f88:	2003e334 	.word	0x2003e334
   d4f8c:	000d4f49 	.word	0x000d4f49

000d4f90 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d4f90:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4f92:	4b0c      	ldr	r3, [pc, #48]	; (d4fc4 <serialEventRun+0x34>)
   d4f94:	b133      	cbz	r3, d4fa4 <serialEventRun+0x14>
   d4f96:	f000 fc1b 	bl	d57d0 <_Z16_fetch_usbserialv>
   d4f9a:	6803      	ldr	r3, [r0, #0]
   d4f9c:	691b      	ldr	r3, [r3, #16]
   d4f9e:	4798      	blx	r3
   d4fa0:	2800      	cmp	r0, #0
   d4fa2:	dc09      	bgt.n	d4fb8 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d4fa4:	4b08      	ldr	r3, [pc, #32]	; (d4fc8 <serialEventRun+0x38>)
   d4fa6:	b163      	cbz	r3, d4fc2 <serialEventRun+0x32>
   d4fa8:	f000 fce0 	bl	d596c <_Z22__fetch_global_Serial1v>
   d4fac:	6803      	ldr	r3, [r0, #0]
   d4fae:	691b      	ldr	r3, [r3, #16]
   d4fb0:	4798      	blx	r3
   d4fb2:	2800      	cmp	r0, #0
   d4fb4:	dc03      	bgt.n	d4fbe <serialEventRun+0x2e>
   d4fb6:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d4fb8:	f3af 8000 	nop.w
   d4fbc:	e7f2      	b.n	d4fa4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d4fbe:	f3af 8000 	nop.w
   d4fc2:	bd08      	pop	{r3, pc}
	...

000d4fcc <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d4fcc:	b508      	push	{r3, lr}
	serialEventRun();
   d4fce:	f7ff ffdf 	bl	d4f90 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4fd2:	f7ff fb79 	bl	d46c8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4fd6:	4b01      	ldr	r3, [pc, #4]	; (d4fdc <_post_loop+0x10>)
   d4fd8:	6018      	str	r0, [r3, #0]
   d4fda:	bd08      	pop	{r3, pc}
   d4fdc:	2003e730 	.word	0x2003e730

000d4fe0 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4fe0:	4802      	ldr	r0, [pc, #8]	; (d4fec <_Z33system_initialize_user_backup_ramv+0xc>)
   d4fe2:	4a03      	ldr	r2, [pc, #12]	; (d4ff0 <_Z33system_initialize_user_backup_ramv+0x10>)
   d4fe4:	4903      	ldr	r1, [pc, #12]	; (d4ff4 <_Z33system_initialize_user_backup_ramv+0x14>)
   d4fe6:	1a12      	subs	r2, r2, r0
   d4fe8:	f001 be0c 	b.w	d6c04 <memcpy>
   d4fec:	2003f400 	.word	0x2003f400
   d4ff0:	2003f404 	.word	0x2003f404
   d4ff4:	000d7150 	.word	0x000d7150

000d4ff8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4ff8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4ffa:	2300      	movs	r3, #0
   d4ffc:	9300      	str	r3, [sp, #0]
   d4ffe:	461a      	mov	r2, r3
   d5000:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5004:	f7ff fc92 	bl	d492c <system_ctrl_set_result>
}
   d5008:	b003      	add	sp, #12
   d500a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5010 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5010:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5012:	8843      	ldrh	r3, [r0, #2]
   d5014:	2b0a      	cmp	r3, #10
   d5016:	d008      	beq.n	d502a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5018:	2b50      	cmp	r3, #80	; 0x50
   d501a:	d109      	bne.n	d5030 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d501c:	4b09      	ldr	r3, [pc, #36]	; (d5044 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d501e:	681b      	ldr	r3, [r3, #0]
   d5020:	b13b      	cbz	r3, d5032 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5022:	b003      	add	sp, #12
   d5024:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5028:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d502a:	f7ff ffe5 	bl	d4ff8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d502e:	e006      	b.n	d503e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5030:	2300      	movs	r3, #0
   d5032:	9300      	str	r3, [sp, #0]
   d5034:	461a      	mov	r2, r3
   d5036:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d503a:	f7ff fc77 	bl	d492c <system_ctrl_set_result>
        break;
    }
}
   d503e:	b003      	add	sp, #12
   d5040:	f85d fb04 	ldr.w	pc, [sp], #4
   d5044:	2003e3d4 	.word	0x2003e3d4

000d5048 <module_user_init_hook>:

void module_user_init_hook()
{
   d5048:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d504a:	4c10      	ldr	r4, [pc, #64]	; (d508c <module_user_init_hook+0x44>)
   d504c:	4d10      	ldr	r5, [pc, #64]	; (d5090 <module_user_init_hook+0x48>)
   d504e:	6823      	ldr	r3, [r4, #0]
   d5050:	42ab      	cmp	r3, r5
   d5052:	4b10      	ldr	r3, [pc, #64]	; (d5094 <module_user_init_hook+0x4c>)
   d5054:	bf0c      	ite	eq
   d5056:	2201      	moveq	r2, #1
   d5058:	2200      	movne	r2, #0
   d505a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d505c:	d002      	beq.n	d5064 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d505e:	f7ff ffbf 	bl	d4fe0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5062:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5064:	f7ff fb28 	bl	d46b8 <HAL_RNG_GetRandomNumber>
   d5068:	4604      	mov	r4, r0
    srand(seed);
   d506a:	f001 fddf 	bl	d6c2c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d506e:	4b0a      	ldr	r3, [pc, #40]	; (d5098 <module_user_init_hook+0x50>)
   d5070:	b113      	cbz	r3, d5078 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d5072:	4620      	mov	r0, r4
   d5074:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5078:	2100      	movs	r1, #0
   d507a:	4807      	ldr	r0, [pc, #28]	; (d5098 <module_user_init_hook+0x50>)
   d507c:	f7ff fcc0 	bl	d4a00 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5080:	2100      	movs	r1, #0
   d5082:	4806      	ldr	r0, [pc, #24]	; (d509c <module_user_init_hook+0x54>)
}
   d5084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5088:	f7ff bc46 	b.w	d4918 <system_ctrl_set_app_request_handler>
   d508c:	2003f400 	.word	0x2003f400
   d5090:	9a271c1e 	.word	0x9a271c1e
   d5094:	2003e3d8 	.word	0x2003e3d8
   d5098:	00000000 	.word	0x00000000
   d509c:	000d5011 	.word	0x000d5011

000d50a0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d50a0:	4770      	bx	lr

000d50a2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d50a2:	2000      	movs	r0, #0
   d50a4:	4770      	bx	lr

000d50a6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d50a6:	b510      	push	{r4, lr}
   d50a8:	2110      	movs	r1, #16
   d50aa:	4604      	mov	r4, r0
   d50ac:	f000 ff3e 	bl	d5f2c <_ZdlPvj>
   d50b0:	4620      	mov	r0, r4
   d50b2:	bd10      	pop	{r4, pc}

000d50b4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d50b4:	b508      	push	{r3, lr}
      { delete this; }
   d50b6:	b108      	cbz	r0, d50bc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d50b8:	f7ff fff5 	bl	d50a6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d50bc:	bd08      	pop	{r3, pc}

000d50be <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d50be:	2200      	movs	r2, #0
   d50c0:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d50c2:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d50c4:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d50c8:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d50ca:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d50ce:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d50d0:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d50d2:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d50d4:	680c      	ldr	r4, [r1, #0]
   d50d6:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d50d8:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d50da:	bd10      	pop	{r4, pc}

000d50dc <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d50dc:	b510      	push	{r4, lr}
   d50de:	4604      	mov	r4, r0
    free((void*)msg_);
   d50e0:	6800      	ldr	r0, [r0, #0]
   d50e2:	f7ff fc9d 	bl	d4a20 <free>
}
   d50e6:	4620      	mov	r0, r4
   d50e8:	bd10      	pop	{r4, pc}

000d50ea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d50ea:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d50ec:	68c4      	ldr	r4, [r0, #12]
   d50ee:	b1f4      	cbz	r4, d512e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d50f0:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d50f2:	2b02      	cmp	r3, #2
   d50f4:	d103      	bne.n	d50fe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d50f6:	f104 000c 	add.w	r0, r4, #12
   d50fa:	f7ff ffef 	bl	d50dc <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d50fe:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d5100:	b135      	cbz	r5, d5110 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5102:	4628      	mov	r0, r5
   d5104:	f7ff ff17 	bl	d4f36 <_ZNSt14_Function_baseD1Ev>
   d5108:	2110      	movs	r1, #16
   d510a:	4628      	mov	r0, r5
   d510c:	f000 ff0e 	bl	d5f2c <_ZdlPvj>
   d5110:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d5112:	b135      	cbz	r5, d5122 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d5114:	4628      	mov	r0, r5
   d5116:	f7ff ff0e 	bl	d4f36 <_ZNSt14_Function_baseD1Ev>
   d511a:	2110      	movs	r1, #16
   d511c:	4628      	mov	r0, r5
   d511e:	f000 ff05 	bl	d5f2c <_ZdlPvj>
   d5122:	4620      	mov	r0, r4
   d5124:	2114      	movs	r1, #20
   d5126:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d512a:	f000 beff 	b.w	d5f2c <_ZdlPvj>
   d512e:	bd38      	pop	{r3, r4, r5, pc}

000d5130 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d5130:	b513      	push	{r0, r1, r4, lr}
   d5132:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5134:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d5138:	2300      	movs	r3, #0
   d513a:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d513c:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d513e:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5140:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5142:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5144:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5146:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5148:	f7ff fd83 	bl	d4c52 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d514c:	4620      	mov	r0, r4
   d514e:	b002      	add	sp, #8
   d5150:	bd10      	pop	{r4, pc}

000d5152 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d5152:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5154:	460c      	mov	r4, r1
   d5156:	ad02      	add	r5, sp, #8
   d5158:	f854 3b04 	ldr.w	r3, [r4], #4
   d515c:	f845 3d08 	str.w	r3, [r5, #-8]!
   d5160:	4606      	mov	r6, r0
   d5162:	460f      	mov	r7, r1
   d5164:	a801      	add	r0, sp, #4
   d5166:	4621      	mov	r1, r4
   d5168:	f7ff fd6c 	bl	d4c44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d516c:	4629      	mov	r1, r5
   d516e:	4630      	mov	r0, r6
   d5170:	f7ff ffde 	bl	d5130 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5174:	a801      	add	r0, sp, #4
   d5176:	f7ff fd6c 	bl	d4c52 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d517a:	4620      	mov	r0, r4
   d517c:	f7ff fd69 	bl	d4c52 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d5180:	4638      	mov	r0, r7
   d5182:	2108      	movs	r1, #8
   d5184:	f000 fed2 	bl	d5f2c <_ZdlPvj>
        return p;
    }
   d5188:	4630      	mov	r0, r6
   d518a:	b003      	add	sp, #12
   d518c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d5190 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5190:	b538      	push	{r3, r4, r5, lr}
   d5192:	2300      	movs	r3, #0
   d5194:	4604      	mov	r4, r0
   d5196:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5198:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d519a:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d519c:	f7fe ff7d 	bl	d409a <_Znwj>
   d51a0:	b128      	cbz	r0, d51ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d51a2:	2301      	movs	r3, #1
   d51a4:	6043      	str	r3, [r0, #4]
   d51a6:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d51a8:	4b02      	ldr	r3, [pc, #8]	; (d51b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d51aa:	6003      	str	r3, [r0, #0]
   d51ac:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d51ae:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d51b0:	4620      	mov	r0, r4
   d51b2:	bd38      	pop	{r3, r4, r5, pc}
   d51b4:	000d6f58 	.word	0x000d6f58

000d51b8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d51b8:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d51ba:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d51bc:	b90a      	cbnz	r2, d51c2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d51be:	f000 fec8 	bl	d5f52 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d51c2:	68c3      	ldr	r3, [r0, #12]
    }
   d51c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d51c8:	4718      	bx	r3

000d51ca <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d51ca:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d51cc:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d51ce:	f100 0110 	add.w	r1, r0, #16
   d51d2:	f7ff fff1 	bl	d51b8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d51d6:	bd08      	pop	{r3, pc}

000d51d8 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d51d8:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d51da:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d51dc:	b90a      	cbnz	r2, d51e2 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d51de:	f000 feb8 	bl	d5f52 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d51e2:	68c3      	ldr	r3, [r0, #12]
    }
   d51e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d51e8:	4718      	bx	r3

000d51ea <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d51ea:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d51ec:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d51ee:	f100 0110 	add.w	r1, r0, #16
   d51f2:	f7ff fff1 	bl	d51d8 <_ZNKSt8functionIFvRKbEEclES1_>
   d51f6:	bd08      	pop	{r3, pc}

000d51f8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d51f8:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d51fa:	2300      	movs	r3, #0
   d51fc:	6083      	str	r3, [r0, #8]
   d51fe:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5200:	4604      	mov	r4, r0
   d5202:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5204:	b12b      	cbz	r3, d5212 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5206:	2202      	movs	r2, #2
   d5208:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d520a:	68eb      	ldr	r3, [r5, #12]
   d520c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d520e:	68ab      	ldr	r3, [r5, #8]
   d5210:	60a3      	str	r3, [r4, #8]
	}
    }
   d5212:	4620      	mov	r0, r4
   d5214:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5218 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d5218:	b5f0      	push	{r4, r5, r6, r7, lr}
   d521a:	b089      	sub	sp, #36	; 0x24
   d521c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d521e:	4668      	mov	r0, sp
   d5220:	f7ff ff4d 	bl	d50be <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5224:	2300      	movs	r3, #0
   d5226:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d522a:	f04f 0202 	mov.w	r2, #2
   d522e:	e8d4 3f4f 	ldrexb	r3, [r4]
   d5232:	2b00      	cmp	r3, #0
   d5234:	d103      	bne.n	d523e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d5236:	e8c4 2f41 	strexb	r1, r2, [r4]
   d523a:	2900      	cmp	r1, #0
   d523c:	d1f7      	bne.n	d522e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d523e:	d002      	beq.n	d5246 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d5240:	f88d 3008 	strb.w	r3, [sp, #8]
   d5244:	e063      	b.n	d530e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d5246:	f114 050c 	adds.w	r5, r4, #12
   d524a:	d003      	beq.n	d5254 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d524c:	4669      	mov	r1, sp
   d524e:	4628      	mov	r0, r5
   d5250:	f7ff ff35 	bl	d50be <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5254:	f3bf 8f5f 	dmb	sy
   d5258:	2301      	movs	r3, #1
   d525a:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d525c:	2000      	movs	r0, #0
   d525e:	f104 0308 	add.w	r3, r4, #8
   d5262:	f3bf 8f5f 	dmb	sy
   d5266:	e853 6f00 	ldrex	r6, [r3]
   d526a:	e843 0200 	strex	r2, r0, [r3]
   d526e:	2a00      	cmp	r2, #0
   d5270:	d1f9      	bne.n	d5266 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d5272:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5276:	2e00      	cmp	r6, #0
   d5278:	d049      	beq.n	d530e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d527a:	f7ff fb3d 	bl	d48f8 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d527e:	b120      	cbz	r0, d528a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5280:	4629      	mov	r1, r5
   d5282:	4630      	mov	r0, r6
   d5284:	f7ff ff98 	bl	d51b8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5288:	e03a      	b.n	d5300 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d528a:	4631      	mov	r1, r6
   d528c:	a802      	add	r0, sp, #8
   d528e:	f7ff ffb3 	bl	d51f8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5292:	68e0      	ldr	r0, [r4, #12]
   d5294:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5298:	b108      	cbz	r0, d529e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d529a:	f001 fcef 	bl	d6c7c <strdup>
   d529e:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d52a0:	2010      	movs	r0, #16
   d52a2:	f8ad 501c 	strh.w	r5, [sp, #28]
   d52a6:	f7fe fef8 	bl	d409a <_Znwj>
   d52aa:	4605      	mov	r5, r0
   d52ac:	b1e8      	cbz	r0, d52ea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d52ae:	2700      	movs	r7, #0
   d52b0:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d52b2:	2018      	movs	r0, #24
   d52b4:	f7fe fef1 	bl	d409a <_Znwj>
   d52b8:	4604      	mov	r4, r0
   d52ba:	b188      	cbz	r0, d52e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d52bc:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d52be:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d52c0:	a802      	add	r0, sp, #8
   d52c2:	f7ff fe47 	bl	d4f54 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d52c6:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d52c8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d52ca:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d52cc:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d52ce:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d52d0:	a906      	add	r1, sp, #24
   d52d2:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d52d4:	60e3      	str	r3, [r4, #12]
   d52d6:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d52da:	9205      	str	r2, [sp, #20]
   d52dc:	f7ff feef 	bl	d50be <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d52e0:	4b0d      	ldr	r3, [pc, #52]	; (d5318 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d52e2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d52e4:	4b0d      	ldr	r3, [pc, #52]	; (d531c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d52e6:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d52e8:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d52ea:	a806      	add	r0, sp, #24
   d52ec:	f7ff fef6 	bl	d50dc <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d52f0:	a802      	add	r0, sp, #8
   d52f2:	f7ff fe20 	bl	d4f36 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d52f6:	2200      	movs	r2, #0
   d52f8:	4629      	mov	r1, r5
   d52fa:	4809      	ldr	r0, [pc, #36]	; (d5320 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d52fc:	f7ff fb04 	bl	d4908 <application_thread_invoke>
   d5300:	4630      	mov	r0, r6
   d5302:	f7ff fe18 	bl	d4f36 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5306:	2110      	movs	r1, #16
   d5308:	4630      	mov	r0, r6
   d530a:	f000 fe0f 	bl	d5f2c <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d530e:	4668      	mov	r0, sp
   d5310:	f7ff fee4 	bl	d50dc <_ZN8particle5ErrorD1Ev>
    }
   d5314:	b009      	add	sp, #36	; 0x24
   d5316:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5318:	000d51cb 	.word	0x000d51cb
   d531c:	000d5441 	.word	0x000d5441
   d5320:	000d59b9 	.word	0x000d59b9

000d5324 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5328:	b08b      	sub	sp, #44	; 0x2c
   d532a:	4606      	mov	r6, r0
   d532c:	460f      	mov	r7, r1
   d532e:	4690      	mov	r8, r2
   d5330:	4699      	mov	r9, r3
   d5332:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5336:	f7ff fb53 	bl	d49e0 <spark_cloud_flag_connected>
   d533a:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d533c:	4683      	mov	fp, r0
   d533e:	bb30      	cbnz	r0, d538e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5340:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d5344:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5346:	a905      	add	r1, sp, #20
   d5348:	4628      	mov	r0, r5
   d534a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d534e:	f7ff feb6 	bl	d50be <_ZN8particle5ErrorC1EOS0_>
   d5352:	2014      	movs	r0, #20
   d5354:	f7fe fea1 	bl	d409a <_Znwj>
   d5358:	4604      	mov	r4, r0
   d535a:	b158      	cbz	r0, d5374 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d535c:	2302      	movs	r3, #2
   d535e:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5360:	2301      	movs	r3, #1
   d5362:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5364:	f8c0 b004 	str.w	fp, [r0, #4]
   d5368:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d536c:	4629      	mov	r1, r5
   d536e:	300c      	adds	r0, #12
   d5370:	f7ff fea5 	bl	d50be <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d5374:	4630      	mov	r0, r6
   d5376:	4621      	mov	r1, r4
   d5378:	f840 4b04 	str.w	r4, [r0], #4
   d537c:	f7ff ff08 	bl	d5190 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5380:	4628      	mov	r0, r5
   d5382:	f7ff feab 	bl	d50dc <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d5386:	a805      	add	r0, sp, #20
   d5388:	f7ff fea8 	bl	d50dc <_ZN8particle5ErrorD1Ev>
   d538c:	e052      	b.n	d5434 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d538e:	2400      	movs	r4, #0
   d5390:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d5392:	2014      	movs	r0, #20
   d5394:	606c      	str	r4, [r5, #4]
   d5396:	60ac      	str	r4, [r5, #8]
   d5398:	9307      	str	r3, [sp, #28]
   d539a:	f7fe fe7e 	bl	d409a <_Znwj>
   d539e:	4601      	mov	r1, r0
   d53a0:	b118      	cbz	r0, d53aa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d53a2:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d53a4:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d53a6:	6044      	str	r4, [r0, #4]
   d53a8:	6084      	str	r4, [r0, #8]
   d53aa:	a804      	add	r0, sp, #16
   d53ac:	9103      	str	r1, [sp, #12]
   d53ae:	f7ff feef 	bl	d5190 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d53b2:	4b22      	ldr	r3, [pc, #136]	; (d543c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d53b4:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d53b6:	2008      	movs	r0, #8
   d53b8:	f7fe fe6f 	bl	d409a <_Znwj>
   d53bc:	4604      	mov	r4, r0
   d53be:	b128      	cbz	r0, d53cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d53c0:	9b03      	ldr	r3, [sp, #12]
   d53c2:	f840 3b04 	str.w	r3, [r0], #4
   d53c6:	a904      	add	r1, sp, #16
   d53c8:	f7ff fc3c 	bl	d4c44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d53cc:	9500      	str	r5, [sp, #0]
   d53ce:	fa5f f38a 	uxtb.w	r3, sl
   d53d2:	464a      	mov	r2, r9
   d53d4:	4641      	mov	r1, r8
   d53d6:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d53d8:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d53da:	f7ff fb09 	bl	d49f0 <spark_send_event>
   d53de:	b920      	cbnz	r0, d53ea <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d53e0:	9b03      	ldr	r3, [sp, #12]
   d53e2:	785b      	ldrb	r3, [r3, #1]
   d53e4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d53e8:	b183      	cbz	r3, d540c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d53ea:	9b03      	ldr	r3, [sp, #12]
   d53ec:	9305      	str	r3, [sp, #20]
   d53ee:	a904      	add	r1, sp, #16
   d53f0:	a806      	add	r0, sp, #24
   d53f2:	f7ff fc27 	bl	d4c44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d53f6:	a905      	add	r1, sp, #20
   d53f8:	4630      	mov	r0, r6
   d53fa:	f7ff fe99 	bl	d5130 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d53fe:	a806      	add	r0, sp, #24
   d5400:	f7ff fc27 	bl	d4c52 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5404:	a804      	add	r0, sp, #16
   d5406:	f7ff fc24 	bl	d4c52 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d540a:	e013      	b.n	d5434 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d540c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d5410:	a905      	add	r1, sp, #20
   d5412:	a803      	add	r0, sp, #12
   d5414:	9205      	str	r2, [sp, #20]
   d5416:	f8ad 3018 	strh.w	r3, [sp, #24]
   d541a:	f7ff fefd 	bl	d5218 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d541e:	a805      	add	r0, sp, #20
   d5420:	f7ff fe5c 	bl	d50dc <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d5424:	a805      	add	r0, sp, #20
   d5426:	9909      	ldr	r1, [sp, #36]	; 0x24
   d5428:	f7ff fe93 	bl	d5152 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d542c:	a806      	add	r0, sp, #24
   d542e:	f7ff fc10 	bl	d4c52 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5432:	e7da      	b.n	d53ea <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d5434:	4630      	mov	r0, r6
   d5436:	b00b      	add	sp, #44	; 0x2c
   d5438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d543c:	000d55b1 	.word	0x000d55b1

000d5440 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5440:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5442:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5444:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5446:	d006      	beq.n	d5456 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d5448:	2a03      	cmp	r2, #3
   d544a:	d017      	beq.n	d547c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d544c:	2a01      	cmp	r2, #1
   d544e:	d122      	bne.n	d5496 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5450:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5452:	6003      	str	r3, [r0, #0]
	      break;
   d5454:	e01f      	b.n	d5496 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5456:	2018      	movs	r0, #24
   d5458:	680e      	ldr	r6, [r1, #0]
   d545a:	f7fe fe1e 	bl	d409a <_Znwj>
   d545e:	4605      	mov	r5, r0
   d5460:	b150      	cbz	r0, d5478 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5462:	4631      	mov	r1, r6
   d5464:	f7ff fec8 	bl	d51f8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5468:	6930      	ldr	r0, [r6, #16]
   d546a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d546e:	b108      	cbz	r0, d5474 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d5470:	f001 fc04 	bl	d6c7c <strdup>
   d5474:	6128      	str	r0, [r5, #16]
   d5476:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5478:	6025      	str	r5, [r4, #0]
   d547a:	e00c      	b.n	d5496 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d547c:	6804      	ldr	r4, [r0, #0]
   d547e:	b154      	cbz	r4, d5496 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d5480:	f104 0010 	add.w	r0, r4, #16
   d5484:	f7ff fe2a 	bl	d50dc <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5488:	4620      	mov	r0, r4
   d548a:	f7ff fd54 	bl	d4f36 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d548e:	2118      	movs	r1, #24
   d5490:	4620      	mov	r0, r4
   d5492:	f000 fd4b 	bl	d5f2c <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5496:	2000      	movs	r0, #0
   d5498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d549a <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d549a:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d549c:	2300      	movs	r3, #0
   d549e:	6083      	str	r3, [r0, #8]
   d54a0:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d54a2:	4604      	mov	r4, r0
   d54a4:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d54a6:	b12b      	cbz	r3, d54b4 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d54a8:	2202      	movs	r2, #2
   d54aa:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d54ac:	68eb      	ldr	r3, [r5, #12]
   d54ae:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d54b0:	68ab      	ldr	r3, [r5, #8]
   d54b2:	60a3      	str	r3, [r4, #8]
	}
    }
   d54b4:	4620      	mov	r0, r4
   d54b6:	bd38      	pop	{r3, r4, r5, pc}

000d54b8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d54b8:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d54ba:	b570      	push	{r4, r5, r6, lr}
   d54bc:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d54be:	d006      	beq.n	d54ce <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d54c0:	2a03      	cmp	r2, #3
   d54c2:	d011      	beq.n	d54e8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d54c4:	2a01      	cmp	r2, #1
   d54c6:	d118      	bne.n	d54fa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d54c8:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d54ca:	6003      	str	r3, [r0, #0]
	      break;
   d54cc:	e015      	b.n	d54fa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d54ce:	2014      	movs	r0, #20
   d54d0:	680e      	ldr	r6, [r1, #0]
   d54d2:	f7fe fde2 	bl	d409a <_Znwj>
   d54d6:	4605      	mov	r5, r0
   d54d8:	b120      	cbz	r0, d54e4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d54da:	4631      	mov	r1, r6
   d54dc:	f7ff ffdd 	bl	d549a <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d54e0:	7c33      	ldrb	r3, [r6, #16]
   d54e2:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d54e4:	6025      	str	r5, [r4, #0]
   d54e6:	e008      	b.n	d54fa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d54e8:	6804      	ldr	r4, [r0, #0]
   d54ea:	b134      	cbz	r4, d54fa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d54ec:	4620      	mov	r0, r4
   d54ee:	f7ff fd22 	bl	d4f36 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d54f2:	2114      	movs	r1, #20
   d54f4:	4620      	mov	r0, r4
   d54f6:	f000 fd19 	bl	d5f2c <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d54fa:	2000      	movs	r0, #0
   d54fc:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5500 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d5500:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5502:	2300      	movs	r3, #0
   d5504:	b087      	sub	sp, #28
   d5506:	460c      	mov	r4, r1
   d5508:	f3bf 8f5f 	dmb	sy
   d550c:	e850 6f00 	ldrex	r6, [r0]
   d5510:	e840 3200 	strex	r2, r3, [r0]
   d5514:	2a00      	cmp	r2, #0
   d5516:	d1f9      	bne.n	d550c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d5518:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d551c:	2e00      	cmp	r6, #0
   d551e:	d03f      	beq.n	d55a0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5520:	4618      	mov	r0, r3
   d5522:	f7ff f9e9 	bl	d48f8 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5526:	4607      	mov	r7, r0
   d5528:	b120      	cbz	r0, d5534 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d552a:	4621      	mov	r1, r4
   d552c:	4630      	mov	r0, r6
   d552e:	f7ff fe53 	bl	d51d8 <_ZNKSt8functionIFvRKbEEclES1_>
   d5532:	e02e      	b.n	d5592 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5534:	4631      	mov	r1, r6
   d5536:	a801      	add	r0, sp, #4
   d5538:	f7ff ffaf 	bl	d549a <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d553c:	7823      	ldrb	r3, [r4, #0]
   d553e:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5542:	2010      	movs	r0, #16
   d5544:	f7fe fda9 	bl	d409a <_Znwj>
   d5548:	4605      	mov	r5, r0
   d554a:	b1d0      	cbz	r0, d5582 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d554c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d554e:	2014      	movs	r0, #20
   d5550:	f7fe fda3 	bl	d409a <_Znwj>
   d5554:	4604      	mov	r4, r0
   d5556:	b178      	cbz	r0, d5578 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5558:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d555a:	4601      	mov	r1, r0
   d555c:	a801      	add	r0, sp, #4
   d555e:	f7ff fcf9 	bl	d4f54 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5562:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5564:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5566:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5568:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d556a:	9203      	str	r2, [sp, #12]
   d556c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d556e:	60e3      	str	r3, [r4, #12]
   d5570:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5574:	9204      	str	r2, [sp, #16]
   d5576:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5578:	4b0a      	ldr	r3, [pc, #40]	; (d55a4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d557a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d557c:	4b0a      	ldr	r3, [pc, #40]	; (d55a8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d557e:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5580:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5582:	a801      	add	r0, sp, #4
   d5584:	f7ff fcd7 	bl	d4f36 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5588:	2200      	movs	r2, #0
   d558a:	4629      	mov	r1, r5
   d558c:	4807      	ldr	r0, [pc, #28]	; (d55ac <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d558e:	f7ff f9bb 	bl	d4908 <application_thread_invoke>
   d5592:	4630      	mov	r0, r6
   d5594:	f7ff fccf 	bl	d4f36 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5598:	2110      	movs	r1, #16
   d559a:	4630      	mov	r0, r6
   d559c:	f000 fcc6 	bl	d5f2c <_ZdlPvj>
        }
    }
   d55a0:	b007      	add	sp, #28
   d55a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d55a4:	000d51eb 	.word	0x000d51eb
   d55a8:	000d54b9 	.word	0x000d54b9
   d55ac:	000d59b9 	.word	0x000d59b9

000d55b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d55b0:	b530      	push	{r4, r5, lr}
   d55b2:	b085      	sub	sp, #20
   d55b4:	4604      	mov	r4, r0
   d55b6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d55b8:	4668      	mov	r0, sp
   d55ba:	4611      	mov	r1, r2
   d55bc:	f7ff fdc9 	bl	d5152 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d55c0:	b17c      	cbz	r4, d55e2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d55c2:	b224      	sxth	r4, r4
   d55c4:	4628      	mov	r0, r5
   d55c6:	b10d      	cbz	r5, d55cc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d55c8:	f001 fb58 	bl	d6c7c <strdup>
   d55cc:	9002      	str	r0, [sp, #8]
   d55ce:	a902      	add	r1, sp, #8
   d55d0:	4668      	mov	r0, sp
   d55d2:	f8ad 400c 	strh.w	r4, [sp, #12]
   d55d6:	f7ff fe1f 	bl	d5218 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d55da:	a802      	add	r0, sp, #8
   d55dc:	f7ff fd7e 	bl	d50dc <_ZN8particle5ErrorD1Ev>
   d55e0:	e01d      	b.n	d561e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d55e2:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d55e4:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d55e8:	f04f 0201 	mov.w	r2, #1
   d55ec:	e8d0 3f4f 	ldrexb	r3, [r0]
   d55f0:	42a3      	cmp	r3, r4
   d55f2:	d103      	bne.n	d55fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d55f4:	e8c0 2f41 	strexb	r1, r2, [r0]
   d55f8:	2900      	cmp	r1, #0
   d55fa:	d1f7      	bne.n	d55ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d55fc:	d002      	beq.n	d5604 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d55fe:	f88d 3008 	strb.w	r3, [sp, #8]
   d5602:	e00c      	b.n	d561e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d5604:	f110 010c 	adds.w	r1, r0, #12
   d5608:	f04f 0301 	mov.w	r3, #1
   d560c:	bf18      	it	ne
   d560e:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5610:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d5614:	3004      	adds	r0, #4
   d5616:	f800 3c03 	strb.w	r3, [r0, #-3]
   d561a:	f7ff ff71 	bl	d5500 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d561e:	a801      	add	r0, sp, #4
   d5620:	f7ff fb17 	bl	d4c52 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d5624:	b005      	add	sp, #20
   d5626:	bd30      	pop	{r4, r5, pc}

000d5628 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5628:	4770      	bx	lr

000d562a <_ZN9IPAddressD0Ev>:
   d562a:	b510      	push	{r4, lr}
   d562c:	2118      	movs	r1, #24
   d562e:	4604      	mov	r4, r0
   d5630:	f000 fc7c 	bl	d5f2c <_ZdlPvj>
   d5634:	4620      	mov	r0, r4
   d5636:	bd10      	pop	{r4, pc}

000d5638 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5638:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d563a:	7d03      	ldrb	r3, [r0, #20]
   d563c:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d563e:	b08d      	sub	sp, #52	; 0x34
   d5640:	460e      	mov	r6, r1
   d5642:	f100 0704 	add.w	r7, r0, #4
   d5646:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d564a:	d002      	beq.n	d5652 <_ZNK9IPAddress7printToER5Print+0x1a>
   d564c:	f100 0508 	add.w	r5, r0, #8
   d5650:	e018      	b.n	d5684 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5652:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5654:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5656:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d565a:	232f      	movs	r3, #47	; 0x2f
   d565c:	462a      	mov	r2, r5
   d565e:	200a      	movs	r0, #10
   d5660:	f7ff f862 	bl	d4728 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5664:	4628      	mov	r0, r5
   d5666:	f001 fb24 	bl	d6cb2 <strlen>
   d566a:	6833      	ldr	r3, [r6, #0]
   d566c:	4602      	mov	r2, r0
   d566e:	68db      	ldr	r3, [r3, #12]
   d5670:	4629      	mov	r1, r5
   d5672:	4630      	mov	r0, r6
   d5674:	4798      	blx	r3
   d5676:	e00f      	b.n	d5698 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5678:	b124      	cbz	r4, d5684 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d567a:	212e      	movs	r1, #46	; 0x2e
   d567c:	4630      	mov	r0, r6
   d567e:	f7ff fb33 	bl	d4ce8 <_ZN5Print5printEc>
   d5682:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5684:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5688:	220a      	movs	r2, #10
   d568a:	4630      	mov	r0, r6
   d568c:	f7ff fb45 	bl	d4d1a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5690:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5692:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5694:	d1f0      	bne.n	d5678 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5696:	4620      	mov	r0, r4
    }
    return n;
}
   d5698:	b00d      	add	sp, #52	; 0x34
   d569a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d569c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d569c:	b510      	push	{r4, lr}
   d569e:	4b05      	ldr	r3, [pc, #20]	; (d56b4 <_ZN9IPAddressC1Ev+0x18>)
   d56a0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d56a2:	2211      	movs	r2, #17
   d56a4:	f840 3b04 	str.w	r3, [r0], #4
   d56a8:	2100      	movs	r1, #0
   d56aa:	f001 fab6 	bl	d6c1a <memset>
{
    clear();
}
   d56ae:	4620      	mov	r0, r4
   d56b0:	bd10      	pop	{r4, pc}
   d56b2:	bf00      	nop
   d56b4:	000d6f74 	.word	0x000d6f74

000d56b8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d56b8:	4603      	mov	r3, r0
   d56ba:	4a07      	ldr	r2, [pc, #28]	; (d56d8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d56bc:	b510      	push	{r4, lr}
   d56be:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d56c2:	f101 0210 	add.w	r2, r1, #16
   d56c6:	f851 4b04 	ldr.w	r4, [r1], #4
   d56ca:	f843 4b04 	str.w	r4, [r3], #4
   d56ce:	4291      	cmp	r1, r2
   d56d0:	d1f9      	bne.n	d56c6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d56d2:	780a      	ldrb	r2, [r1, #0]
   d56d4:	701a      	strb	r2, [r3, #0]
}
   d56d6:	bd10      	pop	{r4, pc}
   d56d8:	000d6f74 	.word	0x000d6f74

000d56dc <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d56dc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d56de:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d56e2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d56e6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d56ea:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d56ee:	2304      	movs	r3, #4
   d56f0:	6041      	str	r1, [r0, #4]
   d56f2:	7503      	strb	r3, [r0, #20]
   d56f4:	bd10      	pop	{r4, pc}

000d56f6 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d56f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d56f8:	780d      	ldrb	r5, [r1, #0]
   d56fa:	788b      	ldrb	r3, [r1, #2]
   d56fc:	784a      	ldrb	r2, [r1, #1]
   d56fe:	78c9      	ldrb	r1, [r1, #3]
   d5700:	9100      	str	r1, [sp, #0]
   d5702:	4629      	mov	r1, r5
   d5704:	f7ff ffea 	bl	d56dc <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5708:	b003      	add	sp, #12
   d570a:	bd30      	pop	{r4, r5, pc}

000d570c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d570c:	7441      	strb	r1, [r0, #17]
   d570e:	4770      	bx	lr

000d5710 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5710:	4770      	bx	lr

000d5712 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d5712:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5714:	2100      	movs	r1, #0
   d5716:	7c00      	ldrb	r0, [r0, #16]
   d5718:	f7ff f8c6 	bl	d48a8 <HAL_USB_USART_Receive_Data>
}
   d571c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5720:	bf28      	it	cs
   d5722:	f04f 30ff 	movcs.w	r0, #4294967295
   d5726:	bd08      	pop	{r3, pc}

000d5728 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5728:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d572a:	2101      	movs	r1, #1
   d572c:	7c00      	ldrb	r0, [r0, #16]
   d572e:	f7ff f8bb 	bl	d48a8 <HAL_USB_USART_Receive_Data>
}
   d5732:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5736:	bf28      	it	cs
   d5738:	f04f 30ff 	movcs.w	r0, #4294967295
   d573c:	bd08      	pop	{r3, pc}

000d573e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d573e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5740:	7c00      	ldrb	r0, [r0, #16]
   d5742:	f7ff f8a9 	bl	d4898 <HAL_USB_USART_Available_Data_For_Write>
}
   d5746:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d574a:	bd08      	pop	{r3, pc}

000d574c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d574c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d574e:	7c00      	ldrb	r0, [r0, #16]
   d5750:	f7ff f89a 	bl	d4888 <HAL_USB_USART_Available_Data>
}
   d5754:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5758:	bd08      	pop	{r3, pc}

000d575a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d575a:	7c00      	ldrb	r0, [r0, #16]
   d575c:	f7ff b8b4 	b.w	d48c8 <HAL_USB_USART_Flush_Data>

000d5760 <_ZN9USBSerialD0Ev>:
   d5760:	b510      	push	{r4, lr}
   d5762:	2114      	movs	r1, #20
   d5764:	4604      	mov	r4, r0
   d5766:	f000 fbe1 	bl	d5f2c <_ZdlPvj>
   d576a:	4620      	mov	r0, r4
   d576c:	bd10      	pop	{r4, pc}

000d576e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d576e:	b538      	push	{r3, r4, r5, lr}
   d5770:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5772:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5774:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5776:	f7ff f88f 	bl	d4898 <HAL_USB_USART_Available_Data_For_Write>
   d577a:	2800      	cmp	r0, #0
   d577c:	dc01      	bgt.n	d5782 <_ZN9USBSerial5writeEh+0x14>
   d577e:	7c60      	ldrb	r0, [r4, #17]
   d5780:	b128      	cbz	r0, d578e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5782:	4629      	mov	r1, r5
   d5784:	7c20      	ldrb	r0, [r4, #16]
   d5786:	f7ff f897 	bl	d48b8 <HAL_USB_USART_Send_Data>
   d578a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d578e:	bd38      	pop	{r3, r4, r5, pc}

000d5790 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5790:	b510      	push	{r4, lr}
   d5792:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5794:	2300      	movs	r3, #0
   d5796:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5798:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d579c:	60a3      	str	r3, [r4, #8]
   d579e:	4b05      	ldr	r3, [pc, #20]	; (d57b4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d57a0:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d57a2:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d57a4:	4608      	mov	r0, r1
{
  _serial = serial;
   d57a6:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d57a8:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d57aa:	4611      	mov	r1, r2
   d57ac:	f7ff f85c 	bl	d4868 <HAL_USB_USART_Init>
}
   d57b0:	4620      	mov	r0, r4
   d57b2:	bd10      	pop	{r4, pc}
   d57b4:	000d6f88 	.word	0x000d6f88

000d57b8 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d57b8:	2200      	movs	r2, #0
   d57ba:	7c00      	ldrb	r0, [r0, #16]
   d57bc:	f7ff b85c 	b.w	d4878 <HAL_USB_USART_Begin>

000d57c0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d57c0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d57c2:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d57c4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d57c6:	2100      	movs	r1, #0
   d57c8:	f001 fa27 	bl	d6c1a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d57cc:	4620      	mov	r0, r4
   d57ce:	bd10      	pop	{r4, pc}

000d57d0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d57d0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d57d2:	4d0e      	ldr	r5, [pc, #56]	; (d580c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d57d4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d57d6:	a801      	add	r0, sp, #4
   d57d8:	f7ff fff2 	bl	d57c0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d57dc:	6829      	ldr	r1, [r5, #0]
   d57de:	f011 0401 	ands.w	r4, r1, #1
   d57e2:	d110      	bne.n	d5806 <_Z16_fetch_usbserialv+0x36>
   d57e4:	4628      	mov	r0, r5
   d57e6:	f7fe fc5e 	bl	d40a6 <__cxa_guard_acquire>
   d57ea:	b160      	cbz	r0, d5806 <_Z16_fetch_usbserialv+0x36>
   d57ec:	aa01      	add	r2, sp, #4
   d57ee:	4621      	mov	r1, r4
   d57f0:	4807      	ldr	r0, [pc, #28]	; (d5810 <_Z16_fetch_usbserialv+0x40>)
   d57f2:	f7ff ffcd 	bl	d5790 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d57f6:	4628      	mov	r0, r5
   d57f8:	f7fe fc5a 	bl	d40b0 <__cxa_guard_release>
   d57fc:	4a05      	ldr	r2, [pc, #20]	; (d5814 <_Z16_fetch_usbserialv+0x44>)
   d57fe:	4906      	ldr	r1, [pc, #24]	; (d5818 <_Z16_fetch_usbserialv+0x48>)
   d5800:	4803      	ldr	r0, [pc, #12]	; (d5810 <_Z16_fetch_usbserialv+0x40>)
   d5802:	f000 fb85 	bl	d5f10 <__aeabi_atexit>
	return _usbserial;
}
   d5806:	4802      	ldr	r0, [pc, #8]	; (d5810 <_Z16_fetch_usbserialv+0x40>)
   d5808:	b007      	add	sp, #28
   d580a:	bd30      	pop	{r4, r5, pc}
   d580c:	2003e3dc 	.word	0x2003e3dc
   d5810:	2003e3e0 	.word	0x2003e3e0
   d5814:	2003e334 	.word	0x2003e334
   d5818:	000d5711 	.word	0x000d5711

000d581c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d581c:	2200      	movs	r2, #0
   d581e:	4611      	mov	r1, r2
   d5820:	6840      	ldr	r0, [r0, #4]
   d5822:	f7ff b8a5 	b.w	d4970 <network_ready>

000d5826 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5826:	2200      	movs	r2, #0
   d5828:	4611      	mov	r1, r2
   d582a:	6840      	ldr	r0, [r0, #4]
   d582c:	f7ff b8c0 	b.w	d49b0 <network_listening>

000d5830 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5830:	2200      	movs	r2, #0
   d5832:	4611      	mov	r1, r2
   d5834:	6840      	ldr	r0, [r0, #4]
   d5836:	f7ff b8cb 	b.w	d49d0 <network_get_listen_timeout>

000d583a <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d583a:	2200      	movs	r2, #0
   d583c:	6840      	ldr	r0, [r0, #4]
   d583e:	f7ff b8bf 	b.w	d49c0 <network_set_listen_timeout>

000d5842 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5842:	2200      	movs	r2, #0
   d5844:	f081 0101 	eor.w	r1, r1, #1
   d5848:	6840      	ldr	r0, [r0, #4]
   d584a:	f7ff b8a9 	b.w	d49a0 <network_listen>

000d584e <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d584e:	2300      	movs	r3, #0
   d5850:	461a      	mov	r2, r3
   d5852:	4619      	mov	r1, r3
   d5854:	6840      	ldr	r0, [r0, #4]
   d5856:	f7ff b89b 	b.w	d4990 <network_off>

000d585a <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d585a:	2300      	movs	r3, #0
   d585c:	461a      	mov	r2, r3
   d585e:	4619      	mov	r1, r3
   d5860:	6840      	ldr	r0, [r0, #4]
   d5862:	f7ff b88d 	b.w	d4980 <network_on>

000d5866 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5866:	2200      	movs	r2, #0
   d5868:	4611      	mov	r1, r2
   d586a:	6840      	ldr	r0, [r0, #4]
   d586c:	f7ff b870 	b.w	d4950 <network_connecting>

000d5870 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5870:	2200      	movs	r2, #0
   d5872:	2102      	movs	r1, #2
   d5874:	6840      	ldr	r0, [r0, #4]
   d5876:	f7ff b873 	b.w	d4960 <network_disconnect>

000d587a <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d587a:	2300      	movs	r3, #0
   d587c:	461a      	mov	r2, r3
   d587e:	6840      	ldr	r0, [r0, #4]
   d5880:	f7ff b85e 	b.w	d4940 <network_connect>

000d5884 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d5884:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d5886:	4c08      	ldr	r4, [pc, #32]	; (d58a8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d5888:	2528      	movs	r5, #40	; 0x28
   d588a:	462a      	mov	r2, r5
   d588c:	2100      	movs	r1, #0
   d588e:	4620      	mov	r0, r4
   d5890:	f001 f9c3 	bl	d6c1a <memset>
        cid = -1;
   d5894:	f04f 33ff 	mov.w	r3, #4294967295
   d5898:	6063      	str	r3, [r4, #4]
   d589a:	4b04      	ldr	r3, [pc, #16]	; (d58ac <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d589c:	8025      	strh	r5, [r4, #0]
   d589e:	2204      	movs	r2, #4
   d58a0:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d58a2:	4a03      	ldr	r2, [pc, #12]	; (d58b0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d58a4:	601a      	str	r2, [r3, #0]
   d58a6:	bd38      	pop	{r3, r4, r5, pc}
   d58a8:	2003e3fc 	.word	0x2003e3fc
   d58ac:	2003e3f4 	.word	0x2003e3f4
   d58b0:	000d6fb8 	.word	0x000d6fb8

000d58b4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d58b4:	4770      	bx	lr

000d58b6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d58b6:	7441      	strb	r1, [r0, #17]
   d58b8:	4770      	bx	lr

000d58ba <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d58ba:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d58bc:	7c00      	ldrb	r0, [r0, #16]
   d58be:	f7fe ff73 	bl	d47a8 <HAL_USART_Available_Data_For_Write>
}
   d58c2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d58c6:	bd08      	pop	{r3, pc}

000d58c8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d58c8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d58ca:	7c00      	ldrb	r0, [r0, #16]
   d58cc:	f7fe ff44 	bl	d4758 <HAL_USART_Available_Data>
}
   d58d0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d58d4:	bd08      	pop	{r3, pc}

000d58d6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d58d6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d58d8:	7c00      	ldrb	r0, [r0, #16]
   d58da:	f7fe ff4d 	bl	d4778 <HAL_USART_Peek_Data>
}
   d58de:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d58e2:	bf28      	it	cs
   d58e4:	f04f 30ff 	movcs.w	r0, #4294967295
   d58e8:	bd08      	pop	{r3, pc}

000d58ea <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d58ea:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d58ec:	7c00      	ldrb	r0, [r0, #16]
   d58ee:	f7fe ff3b 	bl	d4768 <HAL_USART_Read_Data>
}
   d58f2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d58f6:	bf28      	it	cs
   d58f8:	f04f 30ff 	movcs.w	r0, #4294967295
   d58fc:	bd08      	pop	{r3, pc}

000d58fe <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d58fe:	7c00      	ldrb	r0, [r0, #16]
   d5900:	f7fe bf42 	b.w	d4788 <HAL_USART_Flush_Data>

000d5904 <_ZN11USARTSerialD0Ev>:
   d5904:	b510      	push	{r4, lr}
   d5906:	2114      	movs	r1, #20
   d5908:	4604      	mov	r4, r0
   d590a:	f000 fb0f 	bl	d5f2c <_ZdlPvj>
   d590e:	4620      	mov	r0, r4
   d5910:	bd10      	pop	{r4, pc}

000d5912 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5912:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5914:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5916:	4604      	mov	r4, r0
   d5918:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d591a:	b925      	cbnz	r5, d5926 <_ZN11USARTSerial5writeEh+0x14>
   d591c:	7c00      	ldrb	r0, [r0, #16]
   d591e:	f7fe ff43 	bl	d47a8 <HAL_USART_Available_Data_For_Write>
   d5922:	2800      	cmp	r0, #0
   d5924:	dd05      	ble.n	d5932 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5926:	4631      	mov	r1, r6
   d5928:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d592a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d592e:	f7fe bf0b 	b.w	d4748 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5932:	4628      	mov	r0, r5
   d5934:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5938 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5938:	b510      	push	{r4, lr}
   d593a:	4604      	mov	r4, r0
   d593c:	4608      	mov	r0, r1
   d593e:	4611      	mov	r1, r2
   d5940:	2200      	movs	r2, #0
   d5942:	6062      	str	r2, [r4, #4]
   d5944:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5948:	60a2      	str	r2, [r4, #8]
   d594a:	4a05      	ldr	r2, [pc, #20]	; (d5960 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d594c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d594e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5950:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5952:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5954:	461a      	mov	r2, r3
   d5956:	f7fe feef 	bl	d4738 <HAL_USART_Init>
}
   d595a:	4620      	mov	r0, r4
   d595c:	bd10      	pop	{r4, pc}
   d595e:	bf00      	nop
   d5960:	000d6fec 	.word	0x000d6fec

000d5964 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5964:	7c00      	ldrb	r0, [r0, #16]
   d5966:	f7fe bf17 	b.w	d4798 <HAL_USART_Is_Enabled>
	...

000d596c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d596c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d596e:	4d0c      	ldr	r5, [pc, #48]	; (d59a0 <_Z22__fetch_global_Serial1v+0x34>)
   d5970:	6829      	ldr	r1, [r5, #0]
   d5972:	f011 0401 	ands.w	r4, r1, #1
   d5976:	d111      	bne.n	d599c <_Z22__fetch_global_Serial1v+0x30>
   d5978:	4628      	mov	r0, r5
   d597a:	f7fe fb94 	bl	d40a6 <__cxa_guard_acquire>
   d597e:	b168      	cbz	r0, d599c <_Z22__fetch_global_Serial1v+0x30>
   d5980:	4a08      	ldr	r2, [pc, #32]	; (d59a4 <_Z22__fetch_global_Serial1v+0x38>)
   d5982:	4b09      	ldr	r3, [pc, #36]	; (d59a8 <_Z22__fetch_global_Serial1v+0x3c>)
   d5984:	4809      	ldr	r0, [pc, #36]	; (d59ac <_Z22__fetch_global_Serial1v+0x40>)
   d5986:	4621      	mov	r1, r4
   d5988:	f7ff ffd6 	bl	d5938 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d598c:	4628      	mov	r0, r5
   d598e:	f7fe fb8f 	bl	d40b0 <__cxa_guard_release>
   d5992:	4a07      	ldr	r2, [pc, #28]	; (d59b0 <_Z22__fetch_global_Serial1v+0x44>)
   d5994:	4907      	ldr	r1, [pc, #28]	; (d59b4 <_Z22__fetch_global_Serial1v+0x48>)
   d5996:	4805      	ldr	r0, [pc, #20]	; (d59ac <_Z22__fetch_global_Serial1v+0x40>)
   d5998:	f000 faba 	bl	d5f10 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d599c:	4803      	ldr	r0, [pc, #12]	; (d59ac <_Z22__fetch_global_Serial1v+0x40>)
   d599e:	bd38      	pop	{r3, r4, r5, pc}
   d59a0:	2003e4bc 	.word	0x2003e4bc
   d59a4:	2003e4c0 	.word	0x2003e4c0
   d59a8:	2003e438 	.word	0x2003e438
   d59ac:	2003e424 	.word	0x2003e424
   d59b0:	2003e334 	.word	0x2003e334
   d59b4:	000d58b5 	.word	0x000d58b5

000d59b8 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d59b8:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d59ba:	6883      	ldr	r3, [r0, #8]
   d59bc:	4604      	mov	r4, r0
   d59be:	b90b      	cbnz	r3, d59c4 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d59c0:	f000 fac7 	bl	d5f52 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d59c4:	68c3      	ldr	r3, [r0, #12]
   d59c6:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d59c8:	68a3      	ldr	r3, [r4, #8]
   d59ca:	b11b      	cbz	r3, d59d4 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d59cc:	2203      	movs	r2, #3
   d59ce:	4621      	mov	r1, r4
   d59d0:	4620      	mov	r0, r4
   d59d2:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d59d4:	4620      	mov	r0, r4
   d59d6:	2110      	movs	r1, #16
}
   d59d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d59dc:	f000 baa6 	b.w	d5f2c <_ZdlPvj>

000d59e0 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d59e0:	4770      	bx	lr

000d59e2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d59e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d59e4:	4606      	mov	r6, r0
   d59e6:	4615      	mov	r5, r2
   d59e8:	460c      	mov	r4, r1
   d59ea:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d59ec:	42bc      	cmp	r4, r7
   d59ee:	d006      	beq.n	d59fe <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d59f0:	6833      	ldr	r3, [r6, #0]
   d59f2:	f814 1b01 	ldrb.w	r1, [r4], #1
   d59f6:	689b      	ldr	r3, [r3, #8]
   d59f8:	4630      	mov	r0, r6
   d59fa:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d59fc:	e7f6      	b.n	d59ec <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d59fe:	4628      	mov	r0, r5
   d5a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5a02 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5a02:	2200      	movs	r2, #0
   d5a04:	7c00      	ldrb	r0, [r0, #16]
   d5a06:	f7fe beef 	b.w	d47e8 <HAL_I2C_Write_Data>

000d5a0a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5a0a:	2100      	movs	r1, #0
   d5a0c:	7c00      	ldrb	r0, [r0, #16]
   d5a0e:	f7fe bef3 	b.w	d47f8 <HAL_I2C_Available_Data>

000d5a12 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5a12:	2100      	movs	r1, #0
   d5a14:	7c00      	ldrb	r0, [r0, #16]
   d5a16:	f7fe bef7 	b.w	d4808 <HAL_I2C_Read_Data>

000d5a1a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5a1a:	2100      	movs	r1, #0
   d5a1c:	7c00      	ldrb	r0, [r0, #16]
   d5a1e:	f7fe befb 	b.w	d4818 <HAL_I2C_Peek_Data>

000d5a22 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5a22:	2100      	movs	r1, #0
   d5a24:	7c00      	ldrb	r0, [r0, #16]
   d5a26:	f7fe beff 	b.w	d4828 <HAL_I2C_Flush_Data>

000d5a2a <_ZN7TwoWireD0Ev>:
   d5a2a:	b510      	push	{r4, lr}
   d5a2c:	2114      	movs	r1, #20
   d5a2e:	4604      	mov	r4, r0
   d5a30:	f000 fa7c 	bl	d5f2c <_ZdlPvj>
   d5a34:	4620      	mov	r0, r4
   d5a36:	bd10      	pop	{r4, pc}

000d5a38 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5a38:	b510      	push	{r4, lr}
   d5a3a:	4604      	mov	r4, r0
   d5a3c:	2300      	movs	r3, #0
   d5a3e:	6063      	str	r3, [r4, #4]
   d5a40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5a44:	60a3      	str	r3, [r4, #8]
   d5a46:	4b04      	ldr	r3, [pc, #16]	; (d5a58 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d5a48:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5a4a:	4608      	mov	r0, r1
   d5a4c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d5a4e:	4611      	mov	r1, r2
   d5a50:	f7fe fefa 	bl	d4848 <HAL_I2C_Init>
}
   d5a54:	4620      	mov	r0, r4
   d5a56:	bd10      	pop	{r4, pc}
   d5a58:	000d701c 	.word	0x000d701c

000d5a5c <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d5a5c:	2300      	movs	r3, #0
   d5a5e:	461a      	mov	r2, r3
   d5a60:	4619      	mov	r1, r3
   d5a62:	7c00      	ldrb	r0, [r0, #16]
   d5a64:	f7fe bea8 	b.w	d47b8 <HAL_I2C_Begin>

000d5a68 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d5a68:	b570      	push	{r4, r5, r6, lr}
   d5a6a:	460c      	mov	r4, r1
   d5a6c:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d5a6e:	2514      	movs	r5, #20
   d5a70:	4606      	mov	r6, r0
   d5a72:	462a      	mov	r2, r5
   d5a74:	2100      	movs	r1, #0
   d5a76:	a801      	add	r0, sp, #4
   d5a78:	f001 f8cf 	bl	d6c1a <memset>
   d5a7c:	7823      	ldrb	r3, [r4, #0]
   d5a7e:	f88d 3008 	strb.w	r3, [sp, #8]
   d5a82:	6863      	ldr	r3, [r4, #4]
   d5a84:	9303      	str	r3, [sp, #12]
   d5a86:	68e3      	ldr	r3, [r4, #12]
   d5a88:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d5a8a:	2200      	movs	r2, #0
   d5a8c:	7a23      	ldrb	r3, [r4, #8]
   d5a8e:	7c30      	ldrb	r0, [r6, #16]
   d5a90:	f8ad 5004 	strh.w	r5, [sp, #4]
   d5a94:	a901      	add	r1, sp, #4
   d5a96:	9305      	str	r3, [sp, #20]
   d5a98:	f7fe fede 	bl	d4858 <HAL_I2C_Request_Data_Ex>
}
   d5a9c:	b006      	add	sp, #24
   d5a9e:	bd70      	pop	{r4, r5, r6, pc}

000d5aa0 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d5aa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d5aa2:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d5aa4:	f88d 1000 	strb.w	r1, [sp]
   d5aa8:	f04f 0164 	mov.w	r1, #100	; 0x64
   d5aac:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d5aae:	bf18      	it	ne
   d5ab0:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d5ab2:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d5ab4:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d5ab6:	f88d 3008 	strb.w	r3, [sp, #8]
   d5aba:	f7ff ffd5 	bl	d5a68 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d5abe:	b005      	add	sp, #20
   d5ac0:	f85d fb04 	ldr.w	pc, [sp], #4

000d5ac4 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d5ac4:	2301      	movs	r3, #1
   d5ac6:	f7ff bfeb 	b.w	d5aa0 <_ZN7TwoWire11requestFromEhjh>

000d5aca <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d5aca:	2200      	movs	r2, #0
   d5acc:	7c00      	ldrb	r0, [r0, #16]
   d5ace:	f7fe be7b 	b.w	d47c8 <HAL_I2C_Begin_Transmission>

000d5ad2 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d5ad2:	2200      	movs	r2, #0
   d5ad4:	7c00      	ldrb	r0, [r0, #16]
   d5ad6:	f7fe be7f 	b.w	d47d8 <HAL_I2C_End_Transmission>

000d5ada <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d5ada:	2101      	movs	r1, #1
   d5adc:	f7ff bff9 	b.w	d5ad2 <_ZN7TwoWire15endTransmissionEh>

000d5ae0 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5ae0:	2100      	movs	r1, #0
   d5ae2:	7c00      	ldrb	r0, [r0, #16]
   d5ae4:	f7fe bea8 	b.w	d4838 <HAL_I2C_Is_Enabled>

000d5ae8 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5ae8:	2200      	movs	r2, #0
   d5aea:	4611      	mov	r1, r2
   d5aec:	6840      	ldr	r0, [r0, #4]
   d5aee:	f7fe bf5f 	b.w	d49b0 <network_listening>

000d5af2 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5af2:	2200      	movs	r2, #0
   d5af4:	4611      	mov	r1, r2
   d5af6:	6840      	ldr	r0, [r0, #4]
   d5af8:	f7fe bf6a 	b.w	d49d0 <network_get_listen_timeout>

000d5afc <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5afc:	2200      	movs	r2, #0
   d5afe:	6840      	ldr	r0, [r0, #4]
   d5b00:	f7fe bf5e 	b.w	d49c0 <network_set_listen_timeout>

000d5b04 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5b04:	2200      	movs	r2, #0
   d5b06:	f081 0101 	eor.w	r1, r1, #1
   d5b0a:	6840      	ldr	r0, [r0, #4]
   d5b0c:	f7fe bf48 	b.w	d49a0 <network_listen>

000d5b10 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5b10:	2300      	movs	r3, #0
   d5b12:	461a      	mov	r2, r3
   d5b14:	2101      	movs	r1, #1
   d5b16:	6840      	ldr	r0, [r0, #4]
   d5b18:	f7fe bf3a 	b.w	d4990 <network_off>

000d5b1c <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5b1c:	2300      	movs	r3, #0
   d5b1e:	461a      	mov	r2, r3
   d5b20:	4619      	mov	r1, r3
   d5b22:	6840      	ldr	r0, [r0, #4]
   d5b24:	f7fe bf2c 	b.w	d4980 <network_on>

000d5b28 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5b28:	2200      	movs	r2, #0
   d5b2a:	4611      	mov	r1, r2
   d5b2c:	6840      	ldr	r0, [r0, #4]
   d5b2e:	f7fe bf1f 	b.w	d4970 <network_ready>

000d5b32 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5b32:	2200      	movs	r2, #0
   d5b34:	4611      	mov	r1, r2
   d5b36:	6840      	ldr	r0, [r0, #4]
   d5b38:	f7fe bf0a 	b.w	d4950 <network_connecting>

000d5b3c <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5b3c:	2200      	movs	r2, #0
   d5b3e:	2102      	movs	r1, #2
   d5b40:	6840      	ldr	r0, [r0, #4]
   d5b42:	f7fe bf0d 	b.w	d4960 <network_disconnect>

000d5b46 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5b46:	2300      	movs	r3, #0
   d5b48:	461a      	mov	r2, r3
   d5b4a:	6840      	ldr	r0, [r0, #4]
   d5b4c:	f7fe bef8 	b.w	d4940 <network_connect>

000d5b50 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5b50:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5b52:	4605      	mov	r5, r0
   d5b54:	b188      	cbz	r0, d5b7a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5b56:	6804      	ldr	r4, [r0, #0]
   d5b58:	b14c      	cbz	r4, d5b6e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5b5a:	68a3      	ldr	r3, [r4, #8]
   d5b5c:	b11b      	cbz	r3, d5b66 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5b5e:	2203      	movs	r2, #3
   d5b60:	4621      	mov	r1, r4
   d5b62:	4620      	mov	r0, r4
   d5b64:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5b66:	2110      	movs	r1, #16
   d5b68:	4620      	mov	r0, r4
   d5b6a:	f000 f9df 	bl	d5f2c <_ZdlPvj>
   d5b6e:	4628      	mov	r0, r5
   d5b70:	2114      	movs	r1, #20
      }
   d5b72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5b76:	f000 b9d9 	b.w	d5f2c <_ZdlPvj>
   d5b7a:	bd38      	pop	{r3, r4, r5, pc}

000d5b7c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d5b7c:	b110      	cbz	r0, d5b84 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d5b7e:	6803      	ldr	r3, [r0, #0]
   d5b80:	685b      	ldr	r3, [r3, #4]
   d5b82:	4718      	bx	r3
   d5b84:	4770      	bx	lr

000d5b86 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5b86:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5b88:	6803      	ldr	r3, [r0, #0]
   d5b8a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5b8c:	b1bb      	cbz	r3, d5bbe <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5b8e:	6858      	ldr	r0, [r3, #4]
   d5b90:	f7fe fda2 	bl	d46d8 <os_thread_is_current>
   d5b94:	b978      	cbnz	r0, d5bb6 <_ZN6ThreadD1Ev+0x30>
   d5b96:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5b98:	7c5a      	ldrb	r2, [r3, #17]
   d5b9a:	b912      	cbnz	r2, d5ba2 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5b9c:	6858      	ldr	r0, [r3, #4]
   d5b9e:	f7fe fda3 	bl	d46e8 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5ba2:	6823      	ldr	r3, [r4, #0]
   d5ba4:	6858      	ldr	r0, [r3, #4]
   d5ba6:	f7fe fda7 	bl	d46f8 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5baa:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5bac:	2300      	movs	r3, #0
   d5bae:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5bb0:	b128      	cbz	r0, d5bbe <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5bb2:	f7ff ffcd 	bl	d5b50 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5bb6:	6820      	ldr	r0, [r4, #0]
   d5bb8:	b108      	cbz	r0, d5bbe <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5bba:	f7ff ffc9 	bl	d5b50 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d5bbe:	4620      	mov	r0, r4
   d5bc0:	bd10      	pop	{r4, pc}

000d5bc2 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d5bc2:	b538      	push	{r3, r4, r5, lr}
   d5bc4:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5bc6:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d5bca:	b108      	cbz	r0, d5bd0 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5bcc:	f7fe fa69 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5bd0:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d5bd4:	b108      	cbz	r0, d5bda <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d5bd6:	f7fe fd9f 	bl	d4718 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5bda:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d5bde:	b135      	cbz	r5, d5bee <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5be0:	4628      	mov	r0, r5
   d5be2:	f7ff ffd0 	bl	d5b86 <_ZN6ThreadD1Ev>
   d5be6:	2104      	movs	r1, #4
   d5be8:	4628      	mov	r0, r5
   d5bea:	f000 f99f 	bl	d5f2c <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5bee:	6820      	ldr	r0, [r4, #0]
   d5bf0:	b108      	cbz	r0, d5bf6 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d5bf2:	f7ff ffc3 	bl	d5b7c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d5bf6:	4620      	mov	r0, r4
   d5bf8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5bfc <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5bfc:	b510      	push	{r4, lr}
   d5bfe:	4b04      	ldr	r3, [pc, #16]	; (d5c10 <_ZN5spark9MeshClassD1Ev+0x14>)
   d5c00:	4604      	mov	r4, r0
   d5c02:	f840 3b08 	str.w	r3, [r0], #8
   d5c06:	f7ff ffdc 	bl	d5bc2 <_ZN5spark11MeshPublishD1Ev>
   d5c0a:	4620      	mov	r0, r4
   d5c0c:	bd10      	pop	{r4, pc}
   d5c0e:	bf00      	nop
   d5c10:	000d7044 	.word	0x000d7044

000d5c14 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5c14:	b538      	push	{r3, r4, r5, lr}
   d5c16:	4c0e      	ldr	r4, [pc, #56]	; (d5c50 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5c18:	4b0e      	ldr	r3, [pc, #56]	; (d5c54 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d5c1a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5c1c:	2500      	movs	r5, #0
   d5c1e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5c20:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5c24:	6063      	str	r3, [r4, #4]
   d5c26:	60a5      	str	r5, [r4, #8]
   d5c28:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5c2c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5c30:	f7fe fd6a 	bl	d4708 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5c34:	4b08      	ldr	r3, [pc, #32]	; (d5c58 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d5c36:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5c3a:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d5c3e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5c40:	4620      	mov	r0, r4
   d5c42:	4a06      	ldr	r2, [pc, #24]	; (d5c5c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5c44:	4906      	ldr	r1, [pc, #24]	; (d5c60 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d5c46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5c4a:	f000 b961 	b.w	d5f10 <__aeabi_atexit>
   d5c4e:	bf00      	nop
   d5c50:	2003e544 	.word	0x2003e544
   d5c54:	000d7078 	.word	0x000d7078
   d5c58:	000d7044 	.word	0x000d7044
   d5c5c:	2003e334 	.word	0x2003e334
   d5c60:	000d5bfd 	.word	0x000d5bfd

000d5c64 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5c64:	2300      	movs	r3, #0
   d5c66:	461a      	mov	r2, r3
   d5c68:	6840      	ldr	r0, [r0, #4]
   d5c6a:	f7fe be69 	b.w	d4940 <network_connect>

000d5c6e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5c6e:	2200      	movs	r2, #0
   d5c70:	2102      	movs	r1, #2
   d5c72:	6840      	ldr	r0, [r0, #4]
   d5c74:	f7fe be74 	b.w	d4960 <network_disconnect>

000d5c78 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5c78:	2200      	movs	r2, #0
   d5c7a:	4611      	mov	r1, r2
   d5c7c:	6840      	ldr	r0, [r0, #4]
   d5c7e:	f7fe be67 	b.w	d4950 <network_connecting>

000d5c82 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5c82:	2200      	movs	r2, #0
   d5c84:	4611      	mov	r1, r2
   d5c86:	6840      	ldr	r0, [r0, #4]
   d5c88:	f7fe be72 	b.w	d4970 <network_ready>

000d5c8c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5c8c:	2300      	movs	r3, #0
   d5c8e:	461a      	mov	r2, r3
   d5c90:	4619      	mov	r1, r3
   d5c92:	6840      	ldr	r0, [r0, #4]
   d5c94:	f7fe be74 	b.w	d4980 <network_on>

000d5c98 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5c98:	2300      	movs	r3, #0
   d5c9a:	461a      	mov	r2, r3
   d5c9c:	4619      	mov	r1, r3
   d5c9e:	6840      	ldr	r0, [r0, #4]
   d5ca0:	f7fe be76 	b.w	d4990 <network_off>

000d5ca4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5ca4:	2200      	movs	r2, #0
   d5ca6:	f081 0101 	eor.w	r1, r1, #1
   d5caa:	6840      	ldr	r0, [r0, #4]
   d5cac:	f7fe be78 	b.w	d49a0 <network_listen>

000d5cb0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5cb0:	2200      	movs	r2, #0
   d5cb2:	6840      	ldr	r0, [r0, #4]
   d5cb4:	f7fe be84 	b.w	d49c0 <network_set_listen_timeout>

000d5cb8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5cb8:	2200      	movs	r2, #0
   d5cba:	4611      	mov	r1, r2
   d5cbc:	6840      	ldr	r0, [r0, #4]
   d5cbe:	f7fe be87 	b.w	d49d0 <network_get_listen_timeout>

000d5cc2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5cc2:	2200      	movs	r2, #0
   d5cc4:	4611      	mov	r1, r2
   d5cc6:	6840      	ldr	r0, [r0, #4]
   d5cc8:	f7fe be72 	b.w	d49b0 <network_listening>

000d5ccc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5ccc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5cd0:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5cd2:	b095      	sub	sp, #84	; 0x54
   d5cd4:	4616      	mov	r6, r2
   d5cd6:	460d      	mov	r5, r1
   d5cd8:	4607      	mov	r7, r0
    IPAddress addr;
   d5cda:	f7ff fcdf 	bl	d569c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5cde:	4621      	mov	r1, r4
   d5ce0:	2220      	movs	r2, #32
   d5ce2:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5ce4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5ce6:	f000 ff98 	bl	d6c1a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5cea:	2340      	movs	r3, #64	; 0x40
   d5cec:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5cee:	4621      	mov	r1, r4
   d5cf0:	466b      	mov	r3, sp
   d5cf2:	aa0c      	add	r2, sp, #48	; 0x30
   d5cf4:	4630      	mov	r0, r6
   d5cf6:	f7fe fc9f 	bl	d4638 <netdb_getaddrinfo>
    if (!r) {
   d5cfa:	4604      	mov	r4, r0
   d5cfc:	2800      	cmp	r0, #0
   d5cfe:	d144      	bne.n	d5d8a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5d00:	4602      	mov	r2, r0
   d5d02:	2101      	movs	r1, #1
   d5d04:	6868      	ldr	r0, [r5, #4]
   d5d06:	f7fe fe33 	bl	d4970 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5d0a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5d0c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5d0e:	4622      	mov	r2, r4
   d5d10:	6868      	ldr	r0, [r5, #4]
   d5d12:	f7fe fe2d 	bl	d4970 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5d16:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5d18:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5d1a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5d1c:	2e00      	cmp	r6, #0
   d5d1e:	d034      	beq.n	d5d8a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5d20:	2900      	cmp	r1, #0
   d5d22:	d132      	bne.n	d5d8a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5d24:	6873      	ldr	r3, [r6, #4]
   d5d26:	2b02      	cmp	r3, #2
   d5d28:	d002      	beq.n	d5d30 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5d2a:	2b0a      	cmp	r3, #10
   d5d2c:	d009      	beq.n	d5d42 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5d2e:	e02a      	b.n	d5d86 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5d30:	f1b8 0f00 	cmp.w	r8, #0
   d5d34:	d027      	beq.n	d5d86 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5d36:	6971      	ldr	r1, [r6, #20]
   d5d38:	4638      	mov	r0, r7
   d5d3a:	3104      	adds	r1, #4
   d5d3c:	f7ff fcdb 	bl	d56f6 <_ZN9IPAddressaSEPKh>
   d5d40:	e020      	b.n	d5d84 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5d42:	f1b9 0f00 	cmp.w	r9, #0
   d5d46:	d01e      	beq.n	d5d86 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5d48:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5d4a:	2211      	movs	r2, #17
   d5d4c:	a801      	add	r0, sp, #4
   d5d4e:	f000 ff64 	bl	d6c1a <memset>
                    a.v = 6;
   d5d52:	2306      	movs	r3, #6
   d5d54:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5d58:	ad01      	add	r5, sp, #4
   d5d5a:	f104 0308 	add.w	r3, r4, #8
   d5d5e:	3418      	adds	r4, #24
   d5d60:	6818      	ldr	r0, [r3, #0]
   d5d62:	6859      	ldr	r1, [r3, #4]
   d5d64:	462a      	mov	r2, r5
   d5d66:	c203      	stmia	r2!, {r0, r1}
   d5d68:	3308      	adds	r3, #8
   d5d6a:	42a3      	cmp	r3, r4
   d5d6c:	4615      	mov	r5, r2
   d5d6e:	d1f7      	bne.n	d5d60 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5d70:	a901      	add	r1, sp, #4
   d5d72:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5d74:	ad07      	add	r5, sp, #28
   d5d76:	f7ff fc9f 	bl	d56b8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5d7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5d7c:	1d3c      	adds	r4, r7, #4
   d5d7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5d80:	682b      	ldr	r3, [r5, #0]
   d5d82:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5d84:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5d86:	69f6      	ldr	r6, [r6, #28]
   d5d88:	e7c8      	b.n	d5d1c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5d8a:	9800      	ldr	r0, [sp, #0]
   d5d8c:	f7fe fc4c 	bl	d4628 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5d90:	4638      	mov	r0, r7
   d5d92:	b015      	add	sp, #84	; 0x54
   d5d94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5d98 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5d98:	4b02      	ldr	r3, [pc, #8]	; (d5da4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5d9a:	4a03      	ldr	r2, [pc, #12]	; (d5da8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5d9c:	601a      	str	r2, [r3, #0]
   d5d9e:	2200      	movs	r2, #0
   d5da0:	605a      	str	r2, [r3, #4]
   d5da2:	4770      	bx	lr
   d5da4:	2003e718 	.word	0x2003e718
   d5da8:	000d7078 	.word	0x000d7078

000d5dac <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d5dac:	b510      	push	{r4, lr}
   d5dae:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d5db0:	f000 f84e 	bl	d5e50 <_ZN8particle7globals11instanceSpiEv>
   d5db4:	f7fe fea8 	bl	d4b08 <_ZN8SPIClass9isEnabledEv>
   d5db8:	b128      	cbz	r0, d5dc6 <pinAvailable+0x1a>
   d5dba:	f1a4 030b 	sub.w	r3, r4, #11
   d5dbe:	2b02      	cmp	r3, #2
   d5dc0:	d801      	bhi.n	d5dc6 <pinAvailable+0x1a>
  {
    return 0; // 'pin' is used
   d5dc2:	2000      	movs	r0, #0
   d5dc4:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d5dc6:	f000 f87d 	bl	d5ec4 <_Z19__fetch_global_Wirev>
   d5dca:	f7ff fe89 	bl	d5ae0 <_ZN7TwoWire9isEnabledEv>
   d5dce:	b108      	cbz	r0, d5dd4 <pinAvailable+0x28>
   d5dd0:	2c01      	cmp	r4, #1
   d5dd2:	d9f6      	bls.n	d5dc2 <pinAvailable+0x16>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d5dd4:	f7ff fdca 	bl	d596c <_Z22__fetch_global_Serial1v>
   d5dd8:	f7ff fdc4 	bl	d5964 <_ZN11USARTSerial9isEnabledEv>
   d5ddc:	b118      	cbz	r0, d5de6 <pinAvailable+0x3a>
   d5dde:	f1a4 0309 	sub.w	r3, r4, #9
   d5de2:	2b01      	cmp	r3, #1
   d5de4:	d9ed      	bls.n	d5dc2 <pinAvailable+0x16>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d5de6:	2c23      	cmp	r4, #35	; 0x23
   d5de8:	bf8c      	ite	hi
   d5dea:	2000      	movhi	r0, #0
   d5dec:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d5dee:	bd10      	pop	{r4, pc}

000d5df0 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d5df0:	b538      	push	{r3, r4, r5, lr}
   d5df2:	4604      	mov	r4, r0
   d5df4:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5df6:	f7fe fc37 	bl	d4668 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5dfa:	28ff      	cmp	r0, #255	; 0xff
   d5dfc:	d010      	beq.n	d5e20 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d5dfe:	2806      	cmp	r0, #6
   d5e00:	d804      	bhi.n	d5e0c <digitalWrite+0x1c>
   d5e02:	234d      	movs	r3, #77	; 0x4d
   d5e04:	fa23 f000 	lsr.w	r0, r3, r0
   d5e08:	07c3      	lsls	r3, r0, #31
   d5e0a:	d409      	bmi.n	d5e20 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d5e0c:	4620      	mov	r0, r4
   d5e0e:	f7ff ffcd 	bl	d5dac <pinAvailable>
   d5e12:	b128      	cbz	r0, d5e20 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5e14:	4629      	mov	r1, r5
   d5e16:	4620      	mov	r0, r4
}
   d5e18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5e1c:	f7fe bc2c 	b.w	d4678 <HAL_GPIO_Write>
   d5e20:	bd38      	pop	{r3, r4, r5, pc}

000d5e22 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d5e22:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d5e24:	b510      	push	{r4, lr}
   d5e26:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d5e28:	bf9c      	itt	ls
   d5e2a:	340e      	addls	r4, #14
   d5e2c:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5e2e:	4620      	mov	r0, r4
   d5e30:	f7ff ffbc 	bl	d5dac <pinAvailable>
   d5e34:	b150      	cbz	r0, d5e4c <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d5e36:	2103      	movs	r1, #3
   d5e38:	4620      	mov	r0, r4
   d5e3a:	f7fe fc0d 	bl	d4658 <HAL_Validate_Pin_Function>
   d5e3e:	2803      	cmp	r0, #3
   d5e40:	d104      	bne.n	d5e4c <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d5e42:	4620      	mov	r0, r4
}
   d5e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d5e48:	f7fe bc1e 	b.w	d4688 <HAL_ADC_Read>
}
   d5e4c:	2000      	movs	r0, #0
   d5e4e:	bd10      	pop	{r4, pc}

000d5e50 <_ZN8particle7globals11instanceSpiEv>:
#ifndef SPARK_WIRING_NO_SPI

namespace particle {
namespace globals {

SPIClass& instanceSpi() {
   d5e50:	b538      	push	{r3, r4, r5, lr}
    static SPIClass instance(HAL_SPI_INTERFACE1);
   d5e52:	4d0b      	ldr	r5, [pc, #44]	; (d5e80 <_ZN8particle7globals11instanceSpiEv+0x30>)
   d5e54:	6829      	ldr	r1, [r5, #0]
   d5e56:	f011 0401 	ands.w	r4, r1, #1
   d5e5a:	d10f      	bne.n	d5e7c <_ZN8particle7globals11instanceSpiEv+0x2c>
   d5e5c:	4628      	mov	r0, r5
   d5e5e:	f7fe f922 	bl	d40a6 <__cxa_guard_acquire>
   d5e62:	b158      	cbz	r0, d5e7c <_ZN8particle7globals11instanceSpiEv+0x2c>
   d5e64:	4621      	mov	r1, r4
   d5e66:	4807      	ldr	r0, [pc, #28]	; (d5e84 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d5e68:	f7fe fe40 	bl	d4aec <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5e6c:	4628      	mov	r0, r5
   d5e6e:	f7fe f91f 	bl	d40b0 <__cxa_guard_release>
   d5e72:	4a05      	ldr	r2, [pc, #20]	; (d5e88 <_ZN8particle7globals11instanceSpiEv+0x38>)
   d5e74:	4905      	ldr	r1, [pc, #20]	; (d5e8c <_ZN8particle7globals11instanceSpiEv+0x3c>)
   d5e76:	4803      	ldr	r0, [pc, #12]	; (d5e84 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d5e78:	f000 f84a 	bl	d5f10 <__aeabi_atexit>
    return instance;
}
   d5e7c:	4801      	ldr	r0, [pc, #4]	; (d5e84 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d5e7e:	bd38      	pop	{r3, r4, r5, pc}
   d5e80:	2003e72c 	.word	0x2003e72c
   d5e84:	2003e720 	.word	0x2003e720
   d5e88:	2003e334 	.word	0x2003e334
   d5e8c:	000d4add 	.word	0x000d4add

000d5e90 <_Z17acquireWireBufferv>:
   d5e90:	b570      	push	{r4, r5, r6, lr}
   d5e92:	4604      	mov	r4, r0
   d5e94:	2514      	movs	r5, #20
   d5e96:	462a      	mov	r2, r5
   d5e98:	4e09      	ldr	r6, [pc, #36]	; (d5ec0 <_Z17acquireWireBufferv+0x30>)
   d5e9a:	2100      	movs	r1, #0
   d5e9c:	f000 febd 	bl	d6c1a <memset>
   d5ea0:	8025      	strh	r5, [r4, #0]
   d5ea2:	2520      	movs	r5, #32
   d5ea4:	4631      	mov	r1, r6
   d5ea6:	60a5      	str	r5, [r4, #8]
   d5ea8:	6125      	str	r5, [r4, #16]
   d5eaa:	4628      	mov	r0, r5
   d5eac:	f000 f840 	bl	d5f30 <_ZnajRKSt9nothrow_t>
   d5eb0:	4631      	mov	r1, r6
   d5eb2:	6060      	str	r0, [r4, #4]
   d5eb4:	4628      	mov	r0, r5
   d5eb6:	f000 f83b 	bl	d5f30 <_ZnajRKSt9nothrow_t>
   d5eba:	60e0      	str	r0, [r4, #12]
   d5ebc:	4620      	mov	r0, r4
   d5ebe:	bd70      	pop	{r4, r5, r6, pc}
   d5ec0:	000d70a4 	.word	0x000d70a4

000d5ec4 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5ec4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5ec6:	4d0e      	ldr	r5, [pc, #56]	; (d5f00 <_Z19__fetch_global_Wirev+0x3c>)
   d5ec8:	6829      	ldr	r1, [r5, #0]
   d5eca:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5ece:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5ed0:	d113      	bne.n	d5efa <_Z19__fetch_global_Wirev+0x36>
   d5ed2:	4628      	mov	r0, r5
   d5ed4:	f7fe f8e7 	bl	d40a6 <__cxa_guard_acquire>
   d5ed8:	b178      	cbz	r0, d5efa <_Z19__fetch_global_Wirev+0x36>
   d5eda:	a801      	add	r0, sp, #4
   d5edc:	f7ff ffd8 	bl	d5e90 <_Z17acquireWireBufferv>
   d5ee0:	aa01      	add	r2, sp, #4
   d5ee2:	4621      	mov	r1, r4
   d5ee4:	4807      	ldr	r0, [pc, #28]	; (d5f04 <_Z19__fetch_global_Wirev+0x40>)
   d5ee6:	f7ff fda7 	bl	d5a38 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d5eea:	4628      	mov	r0, r5
   d5eec:	f7fe f8e0 	bl	d40b0 <__cxa_guard_release>
   d5ef0:	4a05      	ldr	r2, [pc, #20]	; (d5f08 <_Z19__fetch_global_Wirev+0x44>)
   d5ef2:	4906      	ldr	r1, [pc, #24]	; (d5f0c <_Z19__fetch_global_Wirev+0x48>)
   d5ef4:	4803      	ldr	r0, [pc, #12]	; (d5f04 <_Z19__fetch_global_Wirev+0x40>)
   d5ef6:	f000 f80b 	bl	d5f10 <__aeabi_atexit>
	return wire;
}
   d5efa:	4802      	ldr	r0, [pc, #8]	; (d5f04 <_Z19__fetch_global_Wirev+0x40>)
   d5efc:	b007      	add	sp, #28
   d5efe:	bd30      	pop	{r4, r5, pc}
   d5f00:	2003e734 	.word	0x2003e734
   d5f04:	2003e738 	.word	0x2003e738
   d5f08:	2003e334 	.word	0x2003e334
   d5f0c:	000d59e1 	.word	0x000d59e1

000d5f10 <__aeabi_atexit>:
   d5f10:	460b      	mov	r3, r1
   d5f12:	4601      	mov	r1, r0
   d5f14:	4618      	mov	r0, r3
   d5f16:	f000 be67 	b.w	d6be8 <__cxa_atexit>
	...

000d5f1c <_ZSt15get_new_handlerv>:
   d5f1c:	4b02      	ldr	r3, [pc, #8]	; (d5f28 <_ZSt15get_new_handlerv+0xc>)
   d5f1e:	6818      	ldr	r0, [r3, #0]
   d5f20:	f3bf 8f5f 	dmb	sy
   d5f24:	4770      	bx	lr
   d5f26:	bf00      	nop
   d5f28:	2003e74c 	.word	0x2003e74c

000d5f2c <_ZdlPvj>:
   d5f2c:	f7fe b8b7 	b.w	d409e <_ZdlPv>

000d5f30 <_ZnajRKSt9nothrow_t>:
   d5f30:	f000 b800 	b.w	d5f34 <_ZnwjRKSt9nothrow_t>

000d5f34 <_ZnwjRKSt9nothrow_t>:
   d5f34:	b510      	push	{r4, lr}
   d5f36:	2800      	cmp	r0, #0
   d5f38:	bf14      	ite	ne
   d5f3a:	4604      	movne	r4, r0
   d5f3c:	2401      	moveq	r4, #1
   d5f3e:	4620      	mov	r0, r4
   d5f40:	f7fe fd66 	bl	d4a10 <malloc>
   d5f44:	b920      	cbnz	r0, d5f50 <_ZnwjRKSt9nothrow_t+0x1c>
   d5f46:	f7ff ffe9 	bl	d5f1c <_ZSt15get_new_handlerv>
   d5f4a:	b108      	cbz	r0, d5f50 <_ZnwjRKSt9nothrow_t+0x1c>
   d5f4c:	4780      	blx	r0
   d5f4e:	e7f6      	b.n	d5f3e <_ZnwjRKSt9nothrow_t+0xa>
   d5f50:	bd10      	pop	{r4, pc}

000d5f52 <_ZSt25__throw_bad_function_callv>:
   d5f52:	b508      	push	{r3, lr}
   d5f54:	f7fe fd74 	bl	d4a40 <abort>

000d5f58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5f58:	4b18      	ldr	r3, [pc, #96]	; (d5fbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5f5a:	681a      	ldr	r2, [r3, #0]
   d5f5c:	07d1      	lsls	r1, r2, #31
   d5f5e:	bf5c      	itt	pl
   d5f60:	2201      	movpl	r2, #1
   d5f62:	601a      	strpl	r2, [r3, #0]
   d5f64:	4b16      	ldr	r3, [pc, #88]	; (d5fc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5f66:	681a      	ldr	r2, [r3, #0]
   d5f68:	07d2      	lsls	r2, r2, #31
   d5f6a:	bf5c      	itt	pl
   d5f6c:	2201      	movpl	r2, #1
   d5f6e:	601a      	strpl	r2, [r3, #0]
   d5f70:	4b14      	ldr	r3, [pc, #80]	; (d5fc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5f72:	681a      	ldr	r2, [r3, #0]
   d5f74:	07d0      	lsls	r0, r2, #31
   d5f76:	bf5c      	itt	pl
   d5f78:	2201      	movpl	r2, #1
   d5f7a:	601a      	strpl	r2, [r3, #0]
   d5f7c:	4b12      	ldr	r3, [pc, #72]	; (d5fc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5f7e:	681a      	ldr	r2, [r3, #0]
   d5f80:	07d1      	lsls	r1, r2, #31
   d5f82:	bf5c      	itt	pl
   d5f84:	2201      	movpl	r2, #1
   d5f86:	601a      	strpl	r2, [r3, #0]
   d5f88:	4b10      	ldr	r3, [pc, #64]	; (d5fcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5f8a:	681a      	ldr	r2, [r3, #0]
   d5f8c:	07d2      	lsls	r2, r2, #31
   d5f8e:	bf5c      	itt	pl
   d5f90:	2201      	movpl	r2, #1
   d5f92:	601a      	strpl	r2, [r3, #0]
   d5f94:	4b0e      	ldr	r3, [pc, #56]	; (d5fd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5f96:	681a      	ldr	r2, [r3, #0]
   d5f98:	07d0      	lsls	r0, r2, #31
   d5f9a:	bf5c      	itt	pl
   d5f9c:	2201      	movpl	r2, #1
   d5f9e:	601a      	strpl	r2, [r3, #0]
   d5fa0:	4b0c      	ldr	r3, [pc, #48]	; (d5fd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5fa2:	681a      	ldr	r2, [r3, #0]
   d5fa4:	07d1      	lsls	r1, r2, #31
   d5fa6:	bf5c      	itt	pl
   d5fa8:	2201      	movpl	r2, #1
   d5faa:	601a      	strpl	r2, [r3, #0]
   d5fac:	4b0a      	ldr	r3, [pc, #40]	; (d5fd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5fae:	681a      	ldr	r2, [r3, #0]
   d5fb0:	07d2      	lsls	r2, r2, #31
   d5fb2:	bf5c      	itt	pl
   d5fb4:	2201      	movpl	r2, #1
   d5fb6:	601a      	strpl	r2, [r3, #0]
   d5fb8:	4770      	bx	lr
   d5fba:	bf00      	nop
   d5fbc:	2003e76c 	.word	0x2003e76c
   d5fc0:	2003e768 	.word	0x2003e768
   d5fc4:	2003e764 	.word	0x2003e764
   d5fc8:	2003e760 	.word	0x2003e760
   d5fcc:	2003e75c 	.word	0x2003e75c
   d5fd0:	2003e758 	.word	0x2003e758
   d5fd4:	2003e754 	.word	0x2003e754
   d5fd8:	2003e750 	.word	0x2003e750

000d5fdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5fdc:	4b24      	ldr	r3, [pc, #144]	; (d6070 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5fde:	681a      	ldr	r2, [r3, #0]
   d5fe0:	07d0      	lsls	r0, r2, #31
   d5fe2:	bf5c      	itt	pl
   d5fe4:	2201      	movpl	r2, #1
   d5fe6:	601a      	strpl	r2, [r3, #0]
   d5fe8:	4b22      	ldr	r3, [pc, #136]	; (d6074 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5fea:	681a      	ldr	r2, [r3, #0]
   d5fec:	07d1      	lsls	r1, r2, #31
   d5fee:	bf5c      	itt	pl
   d5ff0:	2201      	movpl	r2, #1
   d5ff2:	601a      	strpl	r2, [r3, #0]
   d5ff4:	4b20      	ldr	r3, [pc, #128]	; (d6078 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5ff6:	681a      	ldr	r2, [r3, #0]
   d5ff8:	07d2      	lsls	r2, r2, #31
   d5ffa:	bf5c      	itt	pl
   d5ffc:	2201      	movpl	r2, #1
   d5ffe:	601a      	strpl	r2, [r3, #0]
   d6000:	4b1e      	ldr	r3, [pc, #120]	; (d607c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d6002:	681a      	ldr	r2, [r3, #0]
   d6004:	07d0      	lsls	r0, r2, #31
   d6006:	bf5c      	itt	pl
   d6008:	2201      	movpl	r2, #1
   d600a:	601a      	strpl	r2, [r3, #0]
   d600c:	4b1c      	ldr	r3, [pc, #112]	; (d6080 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d600e:	681a      	ldr	r2, [r3, #0]
   d6010:	07d1      	lsls	r1, r2, #31
   d6012:	bf5c      	itt	pl
   d6014:	2201      	movpl	r2, #1
   d6016:	601a      	strpl	r2, [r3, #0]
   d6018:	4b1a      	ldr	r3, [pc, #104]	; (d6084 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d601a:	681a      	ldr	r2, [r3, #0]
   d601c:	07d2      	lsls	r2, r2, #31
   d601e:	bf5c      	itt	pl
   d6020:	2201      	movpl	r2, #1
   d6022:	601a      	strpl	r2, [r3, #0]
   d6024:	4b18      	ldr	r3, [pc, #96]	; (d6088 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d6026:	681a      	ldr	r2, [r3, #0]
   d6028:	07d0      	lsls	r0, r2, #31
   d602a:	bf5c      	itt	pl
   d602c:	2201      	movpl	r2, #1
   d602e:	601a      	strpl	r2, [r3, #0]
   d6030:	4b16      	ldr	r3, [pc, #88]	; (d608c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d6032:	681a      	ldr	r2, [r3, #0]
   d6034:	07d1      	lsls	r1, r2, #31
   d6036:	bf5c      	itt	pl
   d6038:	2201      	movpl	r2, #1
   d603a:	601a      	strpl	r2, [r3, #0]
   d603c:	4b14      	ldr	r3, [pc, #80]	; (d6090 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d603e:	681a      	ldr	r2, [r3, #0]
   d6040:	07d2      	lsls	r2, r2, #31
   d6042:	bf5c      	itt	pl
   d6044:	2201      	movpl	r2, #1
   d6046:	601a      	strpl	r2, [r3, #0]
   d6048:	4b12      	ldr	r3, [pc, #72]	; (d6094 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d604a:	681a      	ldr	r2, [r3, #0]
   d604c:	07d0      	lsls	r0, r2, #31
   d604e:	bf5c      	itt	pl
   d6050:	2201      	movpl	r2, #1
   d6052:	601a      	strpl	r2, [r3, #0]
   d6054:	4b10      	ldr	r3, [pc, #64]	; (d6098 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d6056:	681a      	ldr	r2, [r3, #0]
   d6058:	07d1      	lsls	r1, r2, #31
   d605a:	bf5c      	itt	pl
   d605c:	2201      	movpl	r2, #1
   d605e:	601a      	strpl	r2, [r3, #0]
   d6060:	4b0e      	ldr	r3, [pc, #56]	; (d609c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d6062:	681a      	ldr	r2, [r3, #0]
   d6064:	07d2      	lsls	r2, r2, #31
   d6066:	bf5c      	itt	pl
   d6068:	2201      	movpl	r2, #1
   d606a:	601a      	strpl	r2, [r3, #0]
   d606c:	4770      	bx	lr
   d606e:	bf00      	nop
   d6070:	2003e79c 	.word	0x2003e79c
   d6074:	2003e798 	.word	0x2003e798
   d6078:	2003e794 	.word	0x2003e794
   d607c:	2003e790 	.word	0x2003e790
   d6080:	2003e78c 	.word	0x2003e78c
   d6084:	2003e788 	.word	0x2003e788
   d6088:	2003e784 	.word	0x2003e784
   d608c:	2003e780 	.word	0x2003e780
   d6090:	2003e77c 	.word	0x2003e77c
   d6094:	2003e778 	.word	0x2003e778
   d6098:	2003e774 	.word	0x2003e774
   d609c:	2003e770 	.word	0x2003e770

000d60a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d60a0:	4b24      	ldr	r3, [pc, #144]	; (d6134 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d60a2:	681a      	ldr	r2, [r3, #0]
   d60a4:	07d0      	lsls	r0, r2, #31
   d60a6:	bf5c      	itt	pl
   d60a8:	2201      	movpl	r2, #1
   d60aa:	601a      	strpl	r2, [r3, #0]
   d60ac:	4b22      	ldr	r3, [pc, #136]	; (d6138 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d60ae:	681a      	ldr	r2, [r3, #0]
   d60b0:	07d1      	lsls	r1, r2, #31
   d60b2:	bf5c      	itt	pl
   d60b4:	2201      	movpl	r2, #1
   d60b6:	601a      	strpl	r2, [r3, #0]
   d60b8:	4b20      	ldr	r3, [pc, #128]	; (d613c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d60ba:	681a      	ldr	r2, [r3, #0]
   d60bc:	07d2      	lsls	r2, r2, #31
   d60be:	bf5c      	itt	pl
   d60c0:	2201      	movpl	r2, #1
   d60c2:	601a      	strpl	r2, [r3, #0]
   d60c4:	4b1e      	ldr	r3, [pc, #120]	; (d6140 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d60c6:	681a      	ldr	r2, [r3, #0]
   d60c8:	07d0      	lsls	r0, r2, #31
   d60ca:	bf5c      	itt	pl
   d60cc:	2201      	movpl	r2, #1
   d60ce:	601a      	strpl	r2, [r3, #0]
   d60d0:	4b1c      	ldr	r3, [pc, #112]	; (d6144 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d60d2:	681a      	ldr	r2, [r3, #0]
   d60d4:	07d1      	lsls	r1, r2, #31
   d60d6:	bf5c      	itt	pl
   d60d8:	2201      	movpl	r2, #1
   d60da:	601a      	strpl	r2, [r3, #0]
   d60dc:	4b1a      	ldr	r3, [pc, #104]	; (d6148 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d60de:	681a      	ldr	r2, [r3, #0]
   d60e0:	07d2      	lsls	r2, r2, #31
   d60e2:	bf5c      	itt	pl
   d60e4:	2201      	movpl	r2, #1
   d60e6:	601a      	strpl	r2, [r3, #0]
   d60e8:	4b18      	ldr	r3, [pc, #96]	; (d614c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d60ea:	681a      	ldr	r2, [r3, #0]
   d60ec:	07d0      	lsls	r0, r2, #31
   d60ee:	bf5c      	itt	pl
   d60f0:	2201      	movpl	r2, #1
   d60f2:	601a      	strpl	r2, [r3, #0]
   d60f4:	4b16      	ldr	r3, [pc, #88]	; (d6150 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d60f6:	681a      	ldr	r2, [r3, #0]
   d60f8:	07d1      	lsls	r1, r2, #31
   d60fa:	bf5c      	itt	pl
   d60fc:	2201      	movpl	r2, #1
   d60fe:	601a      	strpl	r2, [r3, #0]
   d6100:	4b14      	ldr	r3, [pc, #80]	; (d6154 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6102:	681a      	ldr	r2, [r3, #0]
   d6104:	07d2      	lsls	r2, r2, #31
   d6106:	bf5c      	itt	pl
   d6108:	2201      	movpl	r2, #1
   d610a:	601a      	strpl	r2, [r3, #0]
   d610c:	4b12      	ldr	r3, [pc, #72]	; (d6158 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d610e:	681a      	ldr	r2, [r3, #0]
   d6110:	07d0      	lsls	r0, r2, #31
   d6112:	bf5c      	itt	pl
   d6114:	2201      	movpl	r2, #1
   d6116:	601a      	strpl	r2, [r3, #0]
   d6118:	4b10      	ldr	r3, [pc, #64]	; (d615c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d611a:	681a      	ldr	r2, [r3, #0]
   d611c:	07d1      	lsls	r1, r2, #31
   d611e:	bf5c      	itt	pl
   d6120:	2201      	movpl	r2, #1
   d6122:	601a      	strpl	r2, [r3, #0]
   d6124:	4b0e      	ldr	r3, [pc, #56]	; (d6160 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d6126:	681a      	ldr	r2, [r3, #0]
   d6128:	07d2      	lsls	r2, r2, #31
   d612a:	bf5c      	itt	pl
   d612c:	2201      	movpl	r2, #1
   d612e:	601a      	strpl	r2, [r3, #0]
   d6130:	4770      	bx	lr
   d6132:	bf00      	nop
   d6134:	2003e7cc 	.word	0x2003e7cc
   d6138:	2003e7c8 	.word	0x2003e7c8
   d613c:	2003e7c4 	.word	0x2003e7c4
   d6140:	2003e7c0 	.word	0x2003e7c0
   d6144:	2003e7bc 	.word	0x2003e7bc
   d6148:	2003e7b8 	.word	0x2003e7b8
   d614c:	2003e7b4 	.word	0x2003e7b4
   d6150:	2003e7b0 	.word	0x2003e7b0
   d6154:	2003e7ac 	.word	0x2003e7ac
   d6158:	2003e7a8 	.word	0x2003e7a8
   d615c:	2003e7a4 	.word	0x2003e7a4
   d6160:	2003e7a0 	.word	0x2003e7a0

000d6164 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6164:	4b18      	ldr	r3, [pc, #96]	; (d61c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6166:	681a      	ldr	r2, [r3, #0]
   d6168:	07d1      	lsls	r1, r2, #31
   d616a:	bf5c      	itt	pl
   d616c:	2201      	movpl	r2, #1
   d616e:	601a      	strpl	r2, [r3, #0]
   d6170:	4b16      	ldr	r3, [pc, #88]	; (d61cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6172:	681a      	ldr	r2, [r3, #0]
   d6174:	07d2      	lsls	r2, r2, #31
   d6176:	bf5c      	itt	pl
   d6178:	2201      	movpl	r2, #1
   d617a:	601a      	strpl	r2, [r3, #0]
   d617c:	4b14      	ldr	r3, [pc, #80]	; (d61d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d617e:	681a      	ldr	r2, [r3, #0]
   d6180:	07d0      	lsls	r0, r2, #31
   d6182:	bf5c      	itt	pl
   d6184:	2201      	movpl	r2, #1
   d6186:	601a      	strpl	r2, [r3, #0]
   d6188:	4b12      	ldr	r3, [pc, #72]	; (d61d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d618a:	681a      	ldr	r2, [r3, #0]
   d618c:	07d1      	lsls	r1, r2, #31
   d618e:	bf5c      	itt	pl
   d6190:	2201      	movpl	r2, #1
   d6192:	601a      	strpl	r2, [r3, #0]
   d6194:	4b10      	ldr	r3, [pc, #64]	; (d61d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6196:	681a      	ldr	r2, [r3, #0]
   d6198:	07d2      	lsls	r2, r2, #31
   d619a:	bf5c      	itt	pl
   d619c:	2201      	movpl	r2, #1
   d619e:	601a      	strpl	r2, [r3, #0]
   d61a0:	4b0e      	ldr	r3, [pc, #56]	; (d61dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d61a2:	681a      	ldr	r2, [r3, #0]
   d61a4:	07d0      	lsls	r0, r2, #31
   d61a6:	bf5c      	itt	pl
   d61a8:	2201      	movpl	r2, #1
   d61aa:	601a      	strpl	r2, [r3, #0]
   d61ac:	4b0c      	ldr	r3, [pc, #48]	; (d61e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d61ae:	681a      	ldr	r2, [r3, #0]
   d61b0:	07d1      	lsls	r1, r2, #31
   d61b2:	bf5c      	itt	pl
   d61b4:	2201      	movpl	r2, #1
   d61b6:	601a      	strpl	r2, [r3, #0]
   d61b8:	4b0a      	ldr	r3, [pc, #40]	; (d61e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d61ba:	681a      	ldr	r2, [r3, #0]
   d61bc:	07d2      	lsls	r2, r2, #31
   d61be:	bf5c      	itt	pl
   d61c0:	2201      	movpl	r2, #1
   d61c2:	601a      	strpl	r2, [r3, #0]
   d61c4:	4770      	bx	lr
   d61c6:	bf00      	nop
   d61c8:	2003e7ec 	.word	0x2003e7ec
   d61cc:	2003e7e8 	.word	0x2003e7e8
   d61d0:	2003e7e4 	.word	0x2003e7e4
   d61d4:	2003e7e0 	.word	0x2003e7e0
   d61d8:	2003e7dc 	.word	0x2003e7dc
   d61dc:	2003e7d8 	.word	0x2003e7d8
   d61e0:	2003e7d4 	.word	0x2003e7d4
   d61e4:	2003e7d0 	.word	0x2003e7d0

000d61e8 <__aeabi_drsub>:
   d61e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d61ec:	e002      	b.n	d61f4 <__adddf3>
   d61ee:	bf00      	nop

000d61f0 <__aeabi_dsub>:
   d61f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d61f4 <__adddf3>:
   d61f4:	b530      	push	{r4, r5, lr}
   d61f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d61fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d61fe:	ea94 0f05 	teq	r4, r5
   d6202:	bf08      	it	eq
   d6204:	ea90 0f02 	teqeq	r0, r2
   d6208:	bf1f      	itttt	ne
   d620a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d620e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d6212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d6216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d621a:	f000 80e2 	beq.w	d63e2 <__adddf3+0x1ee>
   d621e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d6222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d6226:	bfb8      	it	lt
   d6228:	426d      	neglt	r5, r5
   d622a:	dd0c      	ble.n	d6246 <__adddf3+0x52>
   d622c:	442c      	add	r4, r5
   d622e:	ea80 0202 	eor.w	r2, r0, r2
   d6232:	ea81 0303 	eor.w	r3, r1, r3
   d6236:	ea82 0000 	eor.w	r0, r2, r0
   d623a:	ea83 0101 	eor.w	r1, r3, r1
   d623e:	ea80 0202 	eor.w	r2, r0, r2
   d6242:	ea81 0303 	eor.w	r3, r1, r3
   d6246:	2d36      	cmp	r5, #54	; 0x36
   d6248:	bf88      	it	hi
   d624a:	bd30      	pophi	{r4, r5, pc}
   d624c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6250:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d625c:	d002      	beq.n	d6264 <__adddf3+0x70>
   d625e:	4240      	negs	r0, r0
   d6260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6268:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d626c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6270:	d002      	beq.n	d6278 <__adddf3+0x84>
   d6272:	4252      	negs	r2, r2
   d6274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6278:	ea94 0f05 	teq	r4, r5
   d627c:	f000 80a7 	beq.w	d63ce <__adddf3+0x1da>
   d6280:	f1a4 0401 	sub.w	r4, r4, #1
   d6284:	f1d5 0e20 	rsbs	lr, r5, #32
   d6288:	db0d      	blt.n	d62a6 <__adddf3+0xb2>
   d628a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d628e:	fa22 f205 	lsr.w	r2, r2, r5
   d6292:	1880      	adds	r0, r0, r2
   d6294:	f141 0100 	adc.w	r1, r1, #0
   d6298:	fa03 f20e 	lsl.w	r2, r3, lr
   d629c:	1880      	adds	r0, r0, r2
   d629e:	fa43 f305 	asr.w	r3, r3, r5
   d62a2:	4159      	adcs	r1, r3
   d62a4:	e00e      	b.n	d62c4 <__adddf3+0xd0>
   d62a6:	f1a5 0520 	sub.w	r5, r5, #32
   d62aa:	f10e 0e20 	add.w	lr, lr, #32
   d62ae:	2a01      	cmp	r2, #1
   d62b0:	fa03 fc0e 	lsl.w	ip, r3, lr
   d62b4:	bf28      	it	cs
   d62b6:	f04c 0c02 	orrcs.w	ip, ip, #2
   d62ba:	fa43 f305 	asr.w	r3, r3, r5
   d62be:	18c0      	adds	r0, r0, r3
   d62c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d62c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d62c8:	d507      	bpl.n	d62da <__adddf3+0xe6>
   d62ca:	f04f 0e00 	mov.w	lr, #0
   d62ce:	f1dc 0c00 	rsbs	ip, ip, #0
   d62d2:	eb7e 0000 	sbcs.w	r0, lr, r0
   d62d6:	eb6e 0101 	sbc.w	r1, lr, r1
   d62da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d62de:	d31b      	bcc.n	d6318 <__adddf3+0x124>
   d62e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d62e4:	d30c      	bcc.n	d6300 <__adddf3+0x10c>
   d62e6:	0849      	lsrs	r1, r1, #1
   d62e8:	ea5f 0030 	movs.w	r0, r0, rrx
   d62ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d62f0:	f104 0401 	add.w	r4, r4, #1
   d62f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d62f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d62fc:	f080 809a 	bcs.w	d6434 <__adddf3+0x240>
   d6300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6304:	bf08      	it	eq
   d6306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d630a:	f150 0000 	adcs.w	r0, r0, #0
   d630e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6312:	ea41 0105 	orr.w	r1, r1, r5
   d6316:	bd30      	pop	{r4, r5, pc}
   d6318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d631c:	4140      	adcs	r0, r0
   d631e:	eb41 0101 	adc.w	r1, r1, r1
   d6322:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6326:	f1a4 0401 	sub.w	r4, r4, #1
   d632a:	d1e9      	bne.n	d6300 <__adddf3+0x10c>
   d632c:	f091 0f00 	teq	r1, #0
   d6330:	bf04      	itt	eq
   d6332:	4601      	moveq	r1, r0
   d6334:	2000      	moveq	r0, #0
   d6336:	fab1 f381 	clz	r3, r1
   d633a:	bf08      	it	eq
   d633c:	3320      	addeq	r3, #32
   d633e:	f1a3 030b 	sub.w	r3, r3, #11
   d6342:	f1b3 0220 	subs.w	r2, r3, #32
   d6346:	da0c      	bge.n	d6362 <__adddf3+0x16e>
   d6348:	320c      	adds	r2, #12
   d634a:	dd08      	ble.n	d635e <__adddf3+0x16a>
   d634c:	f102 0c14 	add.w	ip, r2, #20
   d6350:	f1c2 020c 	rsb	r2, r2, #12
   d6354:	fa01 f00c 	lsl.w	r0, r1, ip
   d6358:	fa21 f102 	lsr.w	r1, r1, r2
   d635c:	e00c      	b.n	d6378 <__adddf3+0x184>
   d635e:	f102 0214 	add.w	r2, r2, #20
   d6362:	bfd8      	it	le
   d6364:	f1c2 0c20 	rsble	ip, r2, #32
   d6368:	fa01 f102 	lsl.w	r1, r1, r2
   d636c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6370:	bfdc      	itt	le
   d6372:	ea41 010c 	orrle.w	r1, r1, ip
   d6376:	4090      	lslle	r0, r2
   d6378:	1ae4      	subs	r4, r4, r3
   d637a:	bfa2      	ittt	ge
   d637c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6380:	4329      	orrge	r1, r5
   d6382:	bd30      	popge	{r4, r5, pc}
   d6384:	ea6f 0404 	mvn.w	r4, r4
   d6388:	3c1f      	subs	r4, #31
   d638a:	da1c      	bge.n	d63c6 <__adddf3+0x1d2>
   d638c:	340c      	adds	r4, #12
   d638e:	dc0e      	bgt.n	d63ae <__adddf3+0x1ba>
   d6390:	f104 0414 	add.w	r4, r4, #20
   d6394:	f1c4 0220 	rsb	r2, r4, #32
   d6398:	fa20 f004 	lsr.w	r0, r0, r4
   d639c:	fa01 f302 	lsl.w	r3, r1, r2
   d63a0:	ea40 0003 	orr.w	r0, r0, r3
   d63a4:	fa21 f304 	lsr.w	r3, r1, r4
   d63a8:	ea45 0103 	orr.w	r1, r5, r3
   d63ac:	bd30      	pop	{r4, r5, pc}
   d63ae:	f1c4 040c 	rsb	r4, r4, #12
   d63b2:	f1c4 0220 	rsb	r2, r4, #32
   d63b6:	fa20 f002 	lsr.w	r0, r0, r2
   d63ba:	fa01 f304 	lsl.w	r3, r1, r4
   d63be:	ea40 0003 	orr.w	r0, r0, r3
   d63c2:	4629      	mov	r1, r5
   d63c4:	bd30      	pop	{r4, r5, pc}
   d63c6:	fa21 f004 	lsr.w	r0, r1, r4
   d63ca:	4629      	mov	r1, r5
   d63cc:	bd30      	pop	{r4, r5, pc}
   d63ce:	f094 0f00 	teq	r4, #0
   d63d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d63d6:	bf06      	itte	eq
   d63d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d63dc:	3401      	addeq	r4, #1
   d63de:	3d01      	subne	r5, #1
   d63e0:	e74e      	b.n	d6280 <__adddf3+0x8c>
   d63e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d63e6:	bf18      	it	ne
   d63e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d63ec:	d029      	beq.n	d6442 <__adddf3+0x24e>
   d63ee:	ea94 0f05 	teq	r4, r5
   d63f2:	bf08      	it	eq
   d63f4:	ea90 0f02 	teqeq	r0, r2
   d63f8:	d005      	beq.n	d6406 <__adddf3+0x212>
   d63fa:	ea54 0c00 	orrs.w	ip, r4, r0
   d63fe:	bf04      	itt	eq
   d6400:	4619      	moveq	r1, r3
   d6402:	4610      	moveq	r0, r2
   d6404:	bd30      	pop	{r4, r5, pc}
   d6406:	ea91 0f03 	teq	r1, r3
   d640a:	bf1e      	ittt	ne
   d640c:	2100      	movne	r1, #0
   d640e:	2000      	movne	r0, #0
   d6410:	bd30      	popne	{r4, r5, pc}
   d6412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6416:	d105      	bne.n	d6424 <__adddf3+0x230>
   d6418:	0040      	lsls	r0, r0, #1
   d641a:	4149      	adcs	r1, r1
   d641c:	bf28      	it	cs
   d641e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d6422:	bd30      	pop	{r4, r5, pc}
   d6424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6428:	bf3c      	itt	cc
   d642a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d642e:	bd30      	popcc	{r4, r5, pc}
   d6430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d643c:	f04f 0000 	mov.w	r0, #0
   d6440:	bd30      	pop	{r4, r5, pc}
   d6442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6446:	bf1a      	itte	ne
   d6448:	4619      	movne	r1, r3
   d644a:	4610      	movne	r0, r2
   d644c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6450:	bf1c      	itt	ne
   d6452:	460b      	movne	r3, r1
   d6454:	4602      	movne	r2, r0
   d6456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d645a:	bf06      	itte	eq
   d645c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6460:	ea91 0f03 	teqeq	r1, r3
   d6464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6468:	bd30      	pop	{r4, r5, pc}
   d646a:	bf00      	nop

000d646c <__aeabi_ui2d>:
   d646c:	f090 0f00 	teq	r0, #0
   d6470:	bf04      	itt	eq
   d6472:	2100      	moveq	r1, #0
   d6474:	4770      	bxeq	lr
   d6476:	b530      	push	{r4, r5, lr}
   d6478:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d647c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6480:	f04f 0500 	mov.w	r5, #0
   d6484:	f04f 0100 	mov.w	r1, #0
   d6488:	e750      	b.n	d632c <__adddf3+0x138>
   d648a:	bf00      	nop

000d648c <__aeabi_i2d>:
   d648c:	f090 0f00 	teq	r0, #0
   d6490:	bf04      	itt	eq
   d6492:	2100      	moveq	r1, #0
   d6494:	4770      	bxeq	lr
   d6496:	b530      	push	{r4, r5, lr}
   d6498:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d649c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d64a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d64a4:	bf48      	it	mi
   d64a6:	4240      	negmi	r0, r0
   d64a8:	f04f 0100 	mov.w	r1, #0
   d64ac:	e73e      	b.n	d632c <__adddf3+0x138>
   d64ae:	bf00      	nop

000d64b0 <__aeabi_f2d>:
   d64b0:	0042      	lsls	r2, r0, #1
   d64b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d64b6:	ea4f 0131 	mov.w	r1, r1, rrx
   d64ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d64be:	bf1f      	itttt	ne
   d64c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d64c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d64c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d64cc:	4770      	bxne	lr
   d64ce:	f092 0f00 	teq	r2, #0
   d64d2:	bf14      	ite	ne
   d64d4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d64d8:	4770      	bxeq	lr
   d64da:	b530      	push	{r4, r5, lr}
   d64dc:	f44f 7460 	mov.w	r4, #896	; 0x380
   d64e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d64e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d64e8:	e720      	b.n	d632c <__adddf3+0x138>
   d64ea:	bf00      	nop

000d64ec <__aeabi_ul2d>:
   d64ec:	ea50 0201 	orrs.w	r2, r0, r1
   d64f0:	bf08      	it	eq
   d64f2:	4770      	bxeq	lr
   d64f4:	b530      	push	{r4, r5, lr}
   d64f6:	f04f 0500 	mov.w	r5, #0
   d64fa:	e00a      	b.n	d6512 <__aeabi_l2d+0x16>

000d64fc <__aeabi_l2d>:
   d64fc:	ea50 0201 	orrs.w	r2, r0, r1
   d6500:	bf08      	it	eq
   d6502:	4770      	bxeq	lr
   d6504:	b530      	push	{r4, r5, lr}
   d6506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d650a:	d502      	bpl.n	d6512 <__aeabi_l2d+0x16>
   d650c:	4240      	negs	r0, r0
   d650e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6512:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6516:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d651a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d651e:	f43f aedc 	beq.w	d62da <__adddf3+0xe6>
   d6522:	f04f 0203 	mov.w	r2, #3
   d6526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d652a:	bf18      	it	ne
   d652c:	3203      	addne	r2, #3
   d652e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6532:	bf18      	it	ne
   d6534:	3203      	addne	r2, #3
   d6536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d653a:	f1c2 0320 	rsb	r3, r2, #32
   d653e:	fa00 fc03 	lsl.w	ip, r0, r3
   d6542:	fa20 f002 	lsr.w	r0, r0, r2
   d6546:	fa01 fe03 	lsl.w	lr, r1, r3
   d654a:	ea40 000e 	orr.w	r0, r0, lr
   d654e:	fa21 f102 	lsr.w	r1, r1, r2
   d6552:	4414      	add	r4, r2
   d6554:	e6c1      	b.n	d62da <__adddf3+0xe6>
   d6556:	bf00      	nop

000d6558 <__aeabi_dmul>:
   d6558:	b570      	push	{r4, r5, r6, lr}
   d655a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d655e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6566:	bf1d      	ittte	ne
   d6568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d656c:	ea94 0f0c 	teqne	r4, ip
   d6570:	ea95 0f0c 	teqne	r5, ip
   d6574:	f000 f8de 	bleq	d6734 <__aeabi_dmul+0x1dc>
   d6578:	442c      	add	r4, r5
   d657a:	ea81 0603 	eor.w	r6, r1, r3
   d657e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d658a:	bf18      	it	ne
   d658c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6598:	d038      	beq.n	d660c <__aeabi_dmul+0xb4>
   d659a:	fba0 ce02 	umull	ip, lr, r0, r2
   d659e:	f04f 0500 	mov.w	r5, #0
   d65a2:	fbe1 e502 	umlal	lr, r5, r1, r2
   d65a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d65aa:	fbe0 e503 	umlal	lr, r5, r0, r3
   d65ae:	f04f 0600 	mov.w	r6, #0
   d65b2:	fbe1 5603 	umlal	r5, r6, r1, r3
   d65b6:	f09c 0f00 	teq	ip, #0
   d65ba:	bf18      	it	ne
   d65bc:	f04e 0e01 	orrne.w	lr, lr, #1
   d65c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d65c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d65c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d65cc:	d204      	bcs.n	d65d8 <__aeabi_dmul+0x80>
   d65ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d65d2:	416d      	adcs	r5, r5
   d65d4:	eb46 0606 	adc.w	r6, r6, r6
   d65d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d65dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d65e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d65e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d65e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d65ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d65f0:	bf88      	it	hi
   d65f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d65f6:	d81e      	bhi.n	d6636 <__aeabi_dmul+0xde>
   d65f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d65fc:	bf08      	it	eq
   d65fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d6602:	f150 0000 	adcs.w	r0, r0, #0
   d6606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d660a:	bd70      	pop	{r4, r5, r6, pc}
   d660c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6610:	ea46 0101 	orr.w	r1, r6, r1
   d6614:	ea40 0002 	orr.w	r0, r0, r2
   d6618:	ea81 0103 	eor.w	r1, r1, r3
   d661c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6620:	bfc2      	ittt	gt
   d6622:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d662a:	bd70      	popgt	{r4, r5, r6, pc}
   d662c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6630:	f04f 0e00 	mov.w	lr, #0
   d6634:	3c01      	subs	r4, #1
   d6636:	f300 80ab 	bgt.w	d6790 <__aeabi_dmul+0x238>
   d663a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d663e:	bfde      	ittt	le
   d6640:	2000      	movle	r0, #0
   d6642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6646:	bd70      	pople	{r4, r5, r6, pc}
   d6648:	f1c4 0400 	rsb	r4, r4, #0
   d664c:	3c20      	subs	r4, #32
   d664e:	da35      	bge.n	d66bc <__aeabi_dmul+0x164>
   d6650:	340c      	adds	r4, #12
   d6652:	dc1b      	bgt.n	d668c <__aeabi_dmul+0x134>
   d6654:	f104 0414 	add.w	r4, r4, #20
   d6658:	f1c4 0520 	rsb	r5, r4, #32
   d665c:	fa00 f305 	lsl.w	r3, r0, r5
   d6660:	fa20 f004 	lsr.w	r0, r0, r4
   d6664:	fa01 f205 	lsl.w	r2, r1, r5
   d6668:	ea40 0002 	orr.w	r0, r0, r2
   d666c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6678:	fa21 f604 	lsr.w	r6, r1, r4
   d667c:	eb42 0106 	adc.w	r1, r2, r6
   d6680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6684:	bf08      	it	eq
   d6686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d668a:	bd70      	pop	{r4, r5, r6, pc}
   d668c:	f1c4 040c 	rsb	r4, r4, #12
   d6690:	f1c4 0520 	rsb	r5, r4, #32
   d6694:	fa00 f304 	lsl.w	r3, r0, r4
   d6698:	fa20 f005 	lsr.w	r0, r0, r5
   d669c:	fa01 f204 	lsl.w	r2, r1, r4
   d66a0:	ea40 0002 	orr.w	r0, r0, r2
   d66a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d66a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d66ac:	f141 0100 	adc.w	r1, r1, #0
   d66b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d66b4:	bf08      	it	eq
   d66b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d66ba:	bd70      	pop	{r4, r5, r6, pc}
   d66bc:	f1c4 0520 	rsb	r5, r4, #32
   d66c0:	fa00 f205 	lsl.w	r2, r0, r5
   d66c4:	ea4e 0e02 	orr.w	lr, lr, r2
   d66c8:	fa20 f304 	lsr.w	r3, r0, r4
   d66cc:	fa01 f205 	lsl.w	r2, r1, r5
   d66d0:	ea43 0302 	orr.w	r3, r3, r2
   d66d4:	fa21 f004 	lsr.w	r0, r1, r4
   d66d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d66dc:	fa21 f204 	lsr.w	r2, r1, r4
   d66e0:	ea20 0002 	bic.w	r0, r0, r2
   d66e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d66e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d66ec:	bf08      	it	eq
   d66ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d66f2:	bd70      	pop	{r4, r5, r6, pc}
   d66f4:	f094 0f00 	teq	r4, #0
   d66f8:	d10f      	bne.n	d671a <__aeabi_dmul+0x1c2>
   d66fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d66fe:	0040      	lsls	r0, r0, #1
   d6700:	eb41 0101 	adc.w	r1, r1, r1
   d6704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6708:	bf08      	it	eq
   d670a:	3c01      	subeq	r4, #1
   d670c:	d0f7      	beq.n	d66fe <__aeabi_dmul+0x1a6>
   d670e:	ea41 0106 	orr.w	r1, r1, r6
   d6712:	f095 0f00 	teq	r5, #0
   d6716:	bf18      	it	ne
   d6718:	4770      	bxne	lr
   d671a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d671e:	0052      	lsls	r2, r2, #1
   d6720:	eb43 0303 	adc.w	r3, r3, r3
   d6724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6728:	bf08      	it	eq
   d672a:	3d01      	subeq	r5, #1
   d672c:	d0f7      	beq.n	d671e <__aeabi_dmul+0x1c6>
   d672e:	ea43 0306 	orr.w	r3, r3, r6
   d6732:	4770      	bx	lr
   d6734:	ea94 0f0c 	teq	r4, ip
   d6738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d673c:	bf18      	it	ne
   d673e:	ea95 0f0c 	teqne	r5, ip
   d6742:	d00c      	beq.n	d675e <__aeabi_dmul+0x206>
   d6744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6748:	bf18      	it	ne
   d674a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d674e:	d1d1      	bne.n	d66f4 <__aeabi_dmul+0x19c>
   d6750:	ea81 0103 	eor.w	r1, r1, r3
   d6754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6758:	f04f 0000 	mov.w	r0, #0
   d675c:	bd70      	pop	{r4, r5, r6, pc}
   d675e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6762:	bf06      	itte	eq
   d6764:	4610      	moveq	r0, r2
   d6766:	4619      	moveq	r1, r3
   d6768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d676c:	d019      	beq.n	d67a2 <__aeabi_dmul+0x24a>
   d676e:	ea94 0f0c 	teq	r4, ip
   d6772:	d102      	bne.n	d677a <__aeabi_dmul+0x222>
   d6774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6778:	d113      	bne.n	d67a2 <__aeabi_dmul+0x24a>
   d677a:	ea95 0f0c 	teq	r5, ip
   d677e:	d105      	bne.n	d678c <__aeabi_dmul+0x234>
   d6780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6784:	bf1c      	itt	ne
   d6786:	4610      	movne	r0, r2
   d6788:	4619      	movne	r1, r3
   d678a:	d10a      	bne.n	d67a2 <__aeabi_dmul+0x24a>
   d678c:	ea81 0103 	eor.w	r1, r1, r3
   d6790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d679c:	f04f 0000 	mov.w	r0, #0
   d67a0:	bd70      	pop	{r4, r5, r6, pc}
   d67a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d67a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d67aa:	bd70      	pop	{r4, r5, r6, pc}

000d67ac <__aeabi_ddiv>:
   d67ac:	b570      	push	{r4, r5, r6, lr}
   d67ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d67b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d67b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d67ba:	bf1d      	ittte	ne
   d67bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d67c0:	ea94 0f0c 	teqne	r4, ip
   d67c4:	ea95 0f0c 	teqne	r5, ip
   d67c8:	f000 f8a7 	bleq	d691a <__aeabi_ddiv+0x16e>
   d67cc:	eba4 0405 	sub.w	r4, r4, r5
   d67d0:	ea81 0e03 	eor.w	lr, r1, r3
   d67d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d67d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d67dc:	f000 8088 	beq.w	d68f0 <__aeabi_ddiv+0x144>
   d67e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d67e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d67e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d67ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d67f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d67f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d67f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d67fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6804:	429d      	cmp	r5, r3
   d6806:	bf08      	it	eq
   d6808:	4296      	cmpeq	r6, r2
   d680a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d680e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d6812:	d202      	bcs.n	d681a <__aeabi_ddiv+0x6e>
   d6814:	085b      	lsrs	r3, r3, #1
   d6816:	ea4f 0232 	mov.w	r2, r2, rrx
   d681a:	1ab6      	subs	r6, r6, r2
   d681c:	eb65 0503 	sbc.w	r5, r5, r3
   d6820:	085b      	lsrs	r3, r3, #1
   d6822:	ea4f 0232 	mov.w	r2, r2, rrx
   d6826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d682a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d682e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6832:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6836:	bf22      	ittt	cs
   d6838:	1ab6      	subcs	r6, r6, r2
   d683a:	4675      	movcs	r5, lr
   d683c:	ea40 000c 	orrcs.w	r0, r0, ip
   d6840:	085b      	lsrs	r3, r3, #1
   d6842:	ea4f 0232 	mov.w	r2, r2, rrx
   d6846:	ebb6 0e02 	subs.w	lr, r6, r2
   d684a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d684e:	bf22      	ittt	cs
   d6850:	1ab6      	subcs	r6, r6, r2
   d6852:	4675      	movcs	r5, lr
   d6854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6858:	085b      	lsrs	r3, r3, #1
   d685a:	ea4f 0232 	mov.w	r2, r2, rrx
   d685e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6862:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6866:	bf22      	ittt	cs
   d6868:	1ab6      	subcs	r6, r6, r2
   d686a:	4675      	movcs	r5, lr
   d686c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6870:	085b      	lsrs	r3, r3, #1
   d6872:	ea4f 0232 	mov.w	r2, r2, rrx
   d6876:	ebb6 0e02 	subs.w	lr, r6, r2
   d687a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d687e:	bf22      	ittt	cs
   d6880:	1ab6      	subcs	r6, r6, r2
   d6882:	4675      	movcs	r5, lr
   d6884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6888:	ea55 0e06 	orrs.w	lr, r5, r6
   d688c:	d018      	beq.n	d68c0 <__aeabi_ddiv+0x114>
   d688e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d6892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6896:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d689a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d689e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d68a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d68a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d68aa:	d1c0      	bne.n	d682e <__aeabi_ddiv+0x82>
   d68ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d68b0:	d10b      	bne.n	d68ca <__aeabi_ddiv+0x11e>
   d68b2:	ea41 0100 	orr.w	r1, r1, r0
   d68b6:	f04f 0000 	mov.w	r0, #0
   d68ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d68be:	e7b6      	b.n	d682e <__aeabi_ddiv+0x82>
   d68c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d68c4:	bf04      	itt	eq
   d68c6:	4301      	orreq	r1, r0
   d68c8:	2000      	moveq	r0, #0
   d68ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d68ce:	bf88      	it	hi
   d68d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d68d4:	f63f aeaf 	bhi.w	d6636 <__aeabi_dmul+0xde>
   d68d8:	ebb5 0c03 	subs.w	ip, r5, r3
   d68dc:	bf04      	itt	eq
   d68de:	ebb6 0c02 	subseq.w	ip, r6, r2
   d68e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d68e6:	f150 0000 	adcs.w	r0, r0, #0
   d68ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d68ee:	bd70      	pop	{r4, r5, r6, pc}
   d68f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d68f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d68f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d68fc:	bfc2      	ittt	gt
   d68fe:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6906:	bd70      	popgt	{r4, r5, r6, pc}
   d6908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d690c:	f04f 0e00 	mov.w	lr, #0
   d6910:	3c01      	subs	r4, #1
   d6912:	e690      	b.n	d6636 <__aeabi_dmul+0xde>
   d6914:	ea45 0e06 	orr.w	lr, r5, r6
   d6918:	e68d      	b.n	d6636 <__aeabi_dmul+0xde>
   d691a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d691e:	ea94 0f0c 	teq	r4, ip
   d6922:	bf08      	it	eq
   d6924:	ea95 0f0c 	teqeq	r5, ip
   d6928:	f43f af3b 	beq.w	d67a2 <__aeabi_dmul+0x24a>
   d692c:	ea94 0f0c 	teq	r4, ip
   d6930:	d10a      	bne.n	d6948 <__aeabi_ddiv+0x19c>
   d6932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6936:	f47f af34 	bne.w	d67a2 <__aeabi_dmul+0x24a>
   d693a:	ea95 0f0c 	teq	r5, ip
   d693e:	f47f af25 	bne.w	d678c <__aeabi_dmul+0x234>
   d6942:	4610      	mov	r0, r2
   d6944:	4619      	mov	r1, r3
   d6946:	e72c      	b.n	d67a2 <__aeabi_dmul+0x24a>
   d6948:	ea95 0f0c 	teq	r5, ip
   d694c:	d106      	bne.n	d695c <__aeabi_ddiv+0x1b0>
   d694e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6952:	f43f aefd 	beq.w	d6750 <__aeabi_dmul+0x1f8>
   d6956:	4610      	mov	r0, r2
   d6958:	4619      	mov	r1, r3
   d695a:	e722      	b.n	d67a2 <__aeabi_dmul+0x24a>
   d695c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6960:	bf18      	it	ne
   d6962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6966:	f47f aec5 	bne.w	d66f4 <__aeabi_dmul+0x19c>
   d696a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d696e:	f47f af0d 	bne.w	d678c <__aeabi_dmul+0x234>
   d6972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6976:	f47f aeeb 	bne.w	d6750 <__aeabi_dmul+0x1f8>
   d697a:	e712      	b.n	d67a2 <__aeabi_dmul+0x24a>

000d697c <__gedf2>:
   d697c:	f04f 3cff 	mov.w	ip, #4294967295
   d6980:	e006      	b.n	d6990 <__cmpdf2+0x4>
   d6982:	bf00      	nop

000d6984 <__ledf2>:
   d6984:	f04f 0c01 	mov.w	ip, #1
   d6988:	e002      	b.n	d6990 <__cmpdf2+0x4>
   d698a:	bf00      	nop

000d698c <__cmpdf2>:
   d698c:	f04f 0c01 	mov.w	ip, #1
   d6990:	f84d cd04 	str.w	ip, [sp, #-4]!
   d6994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d699c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d69a0:	bf18      	it	ne
   d69a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d69a6:	d01b      	beq.n	d69e0 <__cmpdf2+0x54>
   d69a8:	b001      	add	sp, #4
   d69aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d69ae:	bf0c      	ite	eq
   d69b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d69b4:	ea91 0f03 	teqne	r1, r3
   d69b8:	bf02      	ittt	eq
   d69ba:	ea90 0f02 	teqeq	r0, r2
   d69be:	2000      	moveq	r0, #0
   d69c0:	4770      	bxeq	lr
   d69c2:	f110 0f00 	cmn.w	r0, #0
   d69c6:	ea91 0f03 	teq	r1, r3
   d69ca:	bf58      	it	pl
   d69cc:	4299      	cmppl	r1, r3
   d69ce:	bf08      	it	eq
   d69d0:	4290      	cmpeq	r0, r2
   d69d2:	bf2c      	ite	cs
   d69d4:	17d8      	asrcs	r0, r3, #31
   d69d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d69da:	f040 0001 	orr.w	r0, r0, #1
   d69de:	4770      	bx	lr
   d69e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d69e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d69e8:	d102      	bne.n	d69f0 <__cmpdf2+0x64>
   d69ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d69ee:	d107      	bne.n	d6a00 <__cmpdf2+0x74>
   d69f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d69f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d69f8:	d1d6      	bne.n	d69a8 <__cmpdf2+0x1c>
   d69fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d69fe:	d0d3      	beq.n	d69a8 <__cmpdf2+0x1c>
   d6a00:	f85d 0b04 	ldr.w	r0, [sp], #4
   d6a04:	4770      	bx	lr
   d6a06:	bf00      	nop

000d6a08 <__aeabi_cdrcmple>:
   d6a08:	4684      	mov	ip, r0
   d6a0a:	4610      	mov	r0, r2
   d6a0c:	4662      	mov	r2, ip
   d6a0e:	468c      	mov	ip, r1
   d6a10:	4619      	mov	r1, r3
   d6a12:	4663      	mov	r3, ip
   d6a14:	e000      	b.n	d6a18 <__aeabi_cdcmpeq>
   d6a16:	bf00      	nop

000d6a18 <__aeabi_cdcmpeq>:
   d6a18:	b501      	push	{r0, lr}
   d6a1a:	f7ff ffb7 	bl	d698c <__cmpdf2>
   d6a1e:	2800      	cmp	r0, #0
   d6a20:	bf48      	it	mi
   d6a22:	f110 0f00 	cmnmi.w	r0, #0
   d6a26:	bd01      	pop	{r0, pc}

000d6a28 <__aeabi_dcmpeq>:
   d6a28:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6a2c:	f7ff fff4 	bl	d6a18 <__aeabi_cdcmpeq>
   d6a30:	bf0c      	ite	eq
   d6a32:	2001      	moveq	r0, #1
   d6a34:	2000      	movne	r0, #0
   d6a36:	f85d fb08 	ldr.w	pc, [sp], #8
   d6a3a:	bf00      	nop

000d6a3c <__aeabi_dcmplt>:
   d6a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6a40:	f7ff ffea 	bl	d6a18 <__aeabi_cdcmpeq>
   d6a44:	bf34      	ite	cc
   d6a46:	2001      	movcc	r0, #1
   d6a48:	2000      	movcs	r0, #0
   d6a4a:	f85d fb08 	ldr.w	pc, [sp], #8
   d6a4e:	bf00      	nop

000d6a50 <__aeabi_dcmple>:
   d6a50:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6a54:	f7ff ffe0 	bl	d6a18 <__aeabi_cdcmpeq>
   d6a58:	bf94      	ite	ls
   d6a5a:	2001      	movls	r0, #1
   d6a5c:	2000      	movhi	r0, #0
   d6a5e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6a62:	bf00      	nop

000d6a64 <__aeabi_dcmpge>:
   d6a64:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6a68:	f7ff ffce 	bl	d6a08 <__aeabi_cdrcmple>
   d6a6c:	bf94      	ite	ls
   d6a6e:	2001      	movls	r0, #1
   d6a70:	2000      	movhi	r0, #0
   d6a72:	f85d fb08 	ldr.w	pc, [sp], #8
   d6a76:	bf00      	nop

000d6a78 <__aeabi_dcmpgt>:
   d6a78:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6a7c:	f7ff ffc4 	bl	d6a08 <__aeabi_cdrcmple>
   d6a80:	bf34      	ite	cc
   d6a82:	2001      	movcc	r0, #1
   d6a84:	2000      	movcs	r0, #0
   d6a86:	f85d fb08 	ldr.w	pc, [sp], #8
   d6a8a:	bf00      	nop

000d6a8c <__aeabi_dcmpun>:
   d6a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6a94:	d102      	bne.n	d6a9c <__aeabi_dcmpun+0x10>
   d6a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6a9a:	d10a      	bne.n	d6ab2 <__aeabi_dcmpun+0x26>
   d6a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6aa4:	d102      	bne.n	d6aac <__aeabi_dcmpun+0x20>
   d6aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6aaa:	d102      	bne.n	d6ab2 <__aeabi_dcmpun+0x26>
   d6aac:	f04f 0000 	mov.w	r0, #0
   d6ab0:	4770      	bx	lr
   d6ab2:	f04f 0001 	mov.w	r0, #1
   d6ab6:	4770      	bx	lr

000d6ab8 <__aeabi_d2iz>:
   d6ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6ac0:	d215      	bcs.n	d6aee <__aeabi_d2iz+0x36>
   d6ac2:	d511      	bpl.n	d6ae8 <__aeabi_d2iz+0x30>
   d6ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6acc:	d912      	bls.n	d6af4 <__aeabi_d2iz+0x3c>
   d6ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6ada:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6ade:	fa23 f002 	lsr.w	r0, r3, r2
   d6ae2:	bf18      	it	ne
   d6ae4:	4240      	negne	r0, r0
   d6ae6:	4770      	bx	lr
   d6ae8:	f04f 0000 	mov.w	r0, #0
   d6aec:	4770      	bx	lr
   d6aee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6af2:	d105      	bne.n	d6b00 <__aeabi_d2iz+0x48>
   d6af4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d6af8:	bf08      	it	eq
   d6afa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d6afe:	4770      	bx	lr
   d6b00:	f04f 0000 	mov.w	r0, #0
   d6b04:	4770      	bx	lr
   d6b06:	bf00      	nop

000d6b08 <__aeabi_d2uiz>:
   d6b08:	004a      	lsls	r2, r1, #1
   d6b0a:	d211      	bcs.n	d6b30 <__aeabi_d2uiz+0x28>
   d6b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6b10:	d211      	bcs.n	d6b36 <__aeabi_d2uiz+0x2e>
   d6b12:	d50d      	bpl.n	d6b30 <__aeabi_d2uiz+0x28>
   d6b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6b1c:	d40e      	bmi.n	d6b3c <__aeabi_d2uiz+0x34>
   d6b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6b2a:	fa23 f002 	lsr.w	r0, r3, r2
   d6b2e:	4770      	bx	lr
   d6b30:	f04f 0000 	mov.w	r0, #0
   d6b34:	4770      	bx	lr
   d6b36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6b3a:	d102      	bne.n	d6b42 <__aeabi_d2uiz+0x3a>
   d6b3c:	f04f 30ff 	mov.w	r0, #4294967295
   d6b40:	4770      	bx	lr
   d6b42:	f04f 0000 	mov.w	r0, #0
   d6b46:	4770      	bx	lr

000d6b48 <__aeabi_d2f>:
   d6b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6b4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d6b50:	bf24      	itt	cs
   d6b52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d6b56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d6b5a:	d90d      	bls.n	d6b78 <__aeabi_d2f+0x30>
   d6b5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d6b60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d6b64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d6b68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d6b6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d6b70:	bf08      	it	eq
   d6b72:	f020 0001 	biceq.w	r0, r0, #1
   d6b76:	4770      	bx	lr
   d6b78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d6b7c:	d121      	bne.n	d6bc2 <__aeabi_d2f+0x7a>
   d6b7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d6b82:	bfbc      	itt	lt
   d6b84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d6b88:	4770      	bxlt	lr
   d6b8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6b8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d6b92:	f1c2 0218 	rsb	r2, r2, #24
   d6b96:	f1c2 0c20 	rsb	ip, r2, #32
   d6b9a:	fa10 f30c 	lsls.w	r3, r0, ip
   d6b9e:	fa20 f002 	lsr.w	r0, r0, r2
   d6ba2:	bf18      	it	ne
   d6ba4:	f040 0001 	orrne.w	r0, r0, #1
   d6ba8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6bac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d6bb0:	fa03 fc0c 	lsl.w	ip, r3, ip
   d6bb4:	ea40 000c 	orr.w	r0, r0, ip
   d6bb8:	fa23 f302 	lsr.w	r3, r3, r2
   d6bbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d6bc0:	e7cc      	b.n	d6b5c <__aeabi_d2f+0x14>
   d6bc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d6bc6:	d107      	bne.n	d6bd8 <__aeabi_d2f+0x90>
   d6bc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d6bcc:	bf1e      	ittt	ne
   d6bce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d6bd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d6bd6:	4770      	bxne	lr
   d6bd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d6bdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d6be0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d6be4:	4770      	bx	lr
   d6be6:	bf00      	nop

000d6be8 <__cxa_atexit>:
   d6be8:	b510      	push	{r4, lr}
   d6bea:	4c05      	ldr	r4, [pc, #20]	; (d6c00 <__cxa_atexit+0x18>)
   d6bec:	4613      	mov	r3, r2
   d6bee:	b12c      	cbz	r4, d6bfc <__cxa_atexit+0x14>
   d6bf0:	460a      	mov	r2, r1
   d6bf2:	4601      	mov	r1, r0
   d6bf4:	2002      	movs	r0, #2
   d6bf6:	f3af 8000 	nop.w
   d6bfa:	bd10      	pop	{r4, pc}
   d6bfc:	4620      	mov	r0, r4
   d6bfe:	bd10      	pop	{r4, pc}
   d6c00:	00000000 	.word	0x00000000

000d6c04 <memcpy>:
   d6c04:	b510      	push	{r4, lr}
   d6c06:	1e43      	subs	r3, r0, #1
   d6c08:	440a      	add	r2, r1
   d6c0a:	4291      	cmp	r1, r2
   d6c0c:	d004      	beq.n	d6c18 <memcpy+0x14>
   d6c0e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6c12:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6c16:	e7f8      	b.n	d6c0a <memcpy+0x6>
   d6c18:	bd10      	pop	{r4, pc}

000d6c1a <memset>:
   d6c1a:	4402      	add	r2, r0
   d6c1c:	4603      	mov	r3, r0
   d6c1e:	4293      	cmp	r3, r2
   d6c20:	d002      	beq.n	d6c28 <memset+0xe>
   d6c22:	f803 1b01 	strb.w	r1, [r3], #1
   d6c26:	e7fa      	b.n	d6c1e <memset+0x4>
   d6c28:	4770      	bx	lr
	...

000d6c2c <srand>:
   d6c2c:	b538      	push	{r3, r4, r5, lr}
   d6c2e:	4b12      	ldr	r3, [pc, #72]	; (d6c78 <srand+0x4c>)
   d6c30:	681c      	ldr	r4, [r3, #0]
   d6c32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6c34:	4605      	mov	r5, r0
   d6c36:	b9d3      	cbnz	r3, d6c6e <srand+0x42>
   d6c38:	2018      	movs	r0, #24
   d6c3a:	f7fd fee9 	bl	d4a10 <malloc>
   d6c3e:	f243 330e 	movw	r3, #13070	; 0x330e
   d6c42:	63a0      	str	r0, [r4, #56]	; 0x38
   d6c44:	8003      	strh	r3, [r0, #0]
   d6c46:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6c4a:	8043      	strh	r3, [r0, #2]
   d6c4c:	f241 2334 	movw	r3, #4660	; 0x1234
   d6c50:	8083      	strh	r3, [r0, #4]
   d6c52:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d6c56:	80c3      	strh	r3, [r0, #6]
   d6c58:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6c5c:	8103      	strh	r3, [r0, #8]
   d6c5e:	2305      	movs	r3, #5
   d6c60:	8143      	strh	r3, [r0, #10]
   d6c62:	230b      	movs	r3, #11
   d6c64:	8183      	strh	r3, [r0, #12]
   d6c66:	2201      	movs	r2, #1
   d6c68:	2300      	movs	r3, #0
   d6c6a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6c6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6c70:	2200      	movs	r2, #0
   d6c72:	611d      	str	r5, [r3, #16]
   d6c74:	615a      	str	r2, [r3, #20]
   d6c76:	bd38      	pop	{r3, r4, r5, pc}
   d6c78:	2003e330 	.word	0x2003e330

000d6c7c <strdup>:
   d6c7c:	4b02      	ldr	r3, [pc, #8]	; (d6c88 <strdup+0xc>)
   d6c7e:	4601      	mov	r1, r0
   d6c80:	6818      	ldr	r0, [r3, #0]
   d6c82:	f000 b803 	b.w	d6c8c <_strdup_r>
   d6c86:	bf00      	nop
   d6c88:	2003e330 	.word	0x2003e330

000d6c8c <_strdup_r>:
   d6c8c:	b570      	push	{r4, r5, r6, lr}
   d6c8e:	4606      	mov	r6, r0
   d6c90:	4608      	mov	r0, r1
   d6c92:	460c      	mov	r4, r1
   d6c94:	f000 f80d 	bl	d6cb2 <strlen>
   d6c98:	1c45      	adds	r5, r0, #1
   d6c9a:	4629      	mov	r1, r5
   d6c9c:	4630      	mov	r0, r6
   d6c9e:	f7fd fed7 	bl	d4a50 <_malloc_r>
   d6ca2:	4606      	mov	r6, r0
   d6ca4:	b118      	cbz	r0, d6cae <_strdup_r+0x22>
   d6ca6:	462a      	mov	r2, r5
   d6ca8:	4621      	mov	r1, r4
   d6caa:	f7ff ffab 	bl	d6c04 <memcpy>
   d6cae:	4630      	mov	r0, r6
   d6cb0:	bd70      	pop	{r4, r5, r6, pc}

000d6cb2 <strlen>:
   d6cb2:	4603      	mov	r3, r0
   d6cb4:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6cb8:	2a00      	cmp	r2, #0
   d6cba:	d1fb      	bne.n	d6cb4 <strlen+0x2>
   d6cbc:	1a18      	subs	r0, r3, r0
   d6cbe:	3801      	subs	r0, #1
   d6cc0:	4770      	bx	lr

000d6cc2 <link_code_end>:
	...

000d6cc4 <dynalib_user>:
   d6cc4:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d6cd4:	0000 0000 7774 6c69 6f69 735f 736d 5300     ....twilio_sms.S
   d6ce4:	6e65 6964 676e 654d 7373 6761 0065 6854     endingMessage.Th
   d6cf4:	2065 6863 6c69 2064 7661 7265 6761 2065     e child average 
   d6d04:	7369 203a 0020 6553 646e 6e69 2067 656d     is:  .Sending me
   d6d14:	7373 6761 2065 6562 6163 7375 2065 6163     ssage because ca
   d6d24:	2072 7574 6e72 6465 6f20 6666 6120 646e     r turned off and
   d6d34:	6320 6968 646c 6920 2073 6e69 7420 6568      child is in the
   d6d44:	6320 7261 5400 6568 7420 6d65 6570 6172      car.The tempera
   d6d54:	7574 6572 6920 2073 6972 6973 676e 7420     ture is rising t
   d6d64:	6f6f 6620 7361 0074 6854 2065 6574 706d     oo fast.The temp
   d6d74:	6120 6576 6172 6567 6920 3a73 2020 5300      average is:  .S
   d6d84:	6e65 6964 676e 6d20 7365 6173 6567 6220     ending message b
   d6d94:	6365 7561 6573 7420 6d65 6570 6172 7574     ecause temperatu
   d6da4:	6572 6920 2073 6f74 206f 6f68 0074 6553     re is too hot.Se
   d6db4:	646e 6e69 2067 656d 7373 6761 2065 6562     nding message be
   d6dc4:	6163 7375 2065 6574 706d 6920 2073 7263     cause temp is cr
   d6dd4:	7469 6369 6c61 5900 756f 2072 6863 6c69     itical.Your chil
   d6de4:	2064 7369 6920 206e 6874 2065 6163 0072     d is in the car.

000d6df4 <_ZTVN5spark13EthernetClassE>:
	...
   d6dfc:	4abf 000d 4ab5 000d 4aab 000d 4aa1 000d     .J...J...J...J..
   d6e0c:	4a95 000d 4a89 000d 4a7d 000d 4a75 000d     .J...J..}J..uJ..
   d6e1c:	4a6b 000d 4a61 000d 5ccd 000d               kJ..aJ...\..

000d6e28 <_ZTV8SPIClass>:
	...
   d6e30:	4add 000d 4adf 000d 616e 006e 766f 0066     .J...J..nan.ovf.
   d6e40:	002e 6e69 0066 6162 6475 5300 7265 6169     ..inf.baud.Seria
   d6e50:	006c 6553 6972 6c61 0031 7974 6570 7000     l.Serial1.type.p
   d6e60:	7261 6d61 6300 646d 6900 0064 6e68 0064     aram.cmd.id.hnd.
   d6e70:	7473 6d72 6600 6c69 0074 766c 006c 6461     strm.filt.lvl.ad
   d6e80:	4864 6e61 6c64 7265 7200 6d65 766f 4865     dHandler.removeH
   d6e90:	6e61 6c64 7265 6500 756e 486d 6e61 6c64     andler.enumHandl
   d6ea0:	7265 0073 534a 4e4f 7453 6572 6d61 6f4c     ers.JSONStreamLo
   d6eb0:	4867 6e61 6c64 7265 6100 7070 2500 3130     gHandler.app.%01
   d6ec0:	7530 0020 205d 2500 0064 202c 2800 3a29     0u .] .%d., .():
   d6ed0:	0020 5b20 6300 646f 2065 203d 2500 0069      . [.code = .%i.
   d6ee0:	6564 6174 6c69 2073 203d 0d00 000a 6e6c     details = ....ln
   d6ef0:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
   d6f00:	6f6e 656e 7400 6172 6563 6900 666e 006f     none.trace.info.
   d6f10:	6177 6e72 6500 7272 726f 7000 6e61 6369     warn.error.panic
   d6f20:	6100 6c6c 5a00 2500 302b 6433 253a 3230     .all.Z.%+03d:%02
   d6f30:	0075 5925 252d 2d6d 6425 2554 3a48 4d25     u.%Y-%m-%dT%H:%M
   d6f40:	253a 2553 007a 7361 7463 6d69 0065 0000     :%S%z.asctime...

000d6f50 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d6f58:	50a1 000d 50a7 000d 50eb 000d 50b5 000d     .P...P...P...P..
   d6f68:	50a3 000d                                   .P..

000d6f6c <_ZTV9IPAddress>:
	...
   d6f74:	5639 000d 5629 000d 562b 000d               9V..)V..+V..

000d6f80 <_ZTV9USBSerial>:
	...
   d6f88:	5711 000d 5761 000d 576f 000d 4c95 000d     .W..aW..oW...L..
   d6f98:	574d 000d 5713 000d 5729 000d 575b 000d     MW...W..)W..[W..
   d6fa8:	573f 000d 570d 000d                         ?W...W..

000d6fb0 <_ZTVN5spark13CellularClassE>:
	...
   d6fb8:	587b 000d 5871 000d 5867 000d 581d 000d     {X..qX..gX...X..
   d6fc8:	585b 000d 584f 000d 5843 000d 583b 000d     [X..OX..CX..;X..
   d6fd8:	5831 000d 5827 000d 5ccd 000d               1X..'X...\..

000d6fe4 <_ZTV11USARTSerial>:
	...
   d6fec:	58b5 000d 5905 000d 5913 000d 4c95 000d     .X...Y...Y...L..
   d6ffc:	58c9 000d 58eb 000d 58d7 000d 58ff 000d     .X...X...X...X..
   d700c:	58b7 000d 58bb 000d                         .X...X..

000d7014 <_ZTV7TwoWire>:
	...
   d701c:	59e1 000d 5a2b 000d 5a03 000d 59e3 000d     .Y..+Z...Z...Y..
   d702c:	5a0b 000d 5a13 000d 5a1b 000d 5a23 000d     .Z...Z...Z..#Z..

000d703c <_ZTVN5spark9MeshClassE>:
	...
   d7044:	5b47 000d 5b3d 000d 5b33 000d 5b29 000d     G[..=[..3[..)[..
   d7054:	5b1d 000d 5b11 000d 5b05 000d 5afd 000d     .[...[...[...Z..
   d7064:	5af3 000d 5ae9 000d 5ccd 000d               .Z...Z...\..

000d7070 <_ZTVN5spark12NetworkClassE>:
	...
   d7078:	5c65 000d 5c6f 000d 5c79 000d 5c83 000d     e\..o\..y\...\..
   d7088:	5c8d 000d 5c99 000d 5ca5 000d 5cb1 000d     .\...\...\...\..
   d7098:	5cb9 000d 5cc3 000d 5ccd 000d               .\...\...\..

000d70a4 <_ZSt7nothrow>:
   d70a4:	0000 0000                                   ....

000d70a8 <__sf_fake_stdin>:
	...

000d70c8 <__sf_fake_stdout>:
	...

000d70e8 <__sf_fake_stderr>:
	...
   d7108:	0043                                        C.

000d710a <link_const_variable_data_end>:
	...

000d710c <link_constructors_location>:
   d710c:	000d444d 	.word	0x000d444d
   d7110:	000d4625 	.word	0x000d4625
   d7114:	000d4ac9 	.word	0x000d4ac9
   d7118:	000d4b2d 	.word	0x000d4b2d
   d711c:	000d4c6d 	.word	0x000d4c6d
   d7120:	000d4f0d 	.word	0x000d4f0d
   d7124:	000d4f1d 	.word	0x000d4f1d
   d7128:	000d4f75 	.word	0x000d4f75
   d712c:	000d5885 	.word	0x000d5885
   d7130:	000d5c15 	.word	0x000d5c15
   d7134:	000d5d99 	.word	0x000d5d99
   d7138:	000d5f59 	.word	0x000d5f59
   d713c:	000d5fdd 	.word	0x000d5fdd
   d7140:	000d60a1 	.word	0x000d60a1
   d7144:	000d6165 	.word	0x000d6165

000d7148 <link_constructors_end>:
	...
