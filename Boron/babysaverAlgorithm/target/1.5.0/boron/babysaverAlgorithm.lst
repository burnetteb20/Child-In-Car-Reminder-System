
c:/Users/BryceBurnette/Documents/ParticleProjects/babysaverAlgorithm/target/1.5.0/boron/babysaverAlgorithm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002f04  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d6f20  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e2d8  000d6f24  0001e2d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000004b0  2003e340  2003e340  0002e340  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d6f8c  000d6f8c  00026f8c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6fb4  000d6fb4  00026fb4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000ded15  00000000  00000000  00026fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00011931  00000000  00000000  00105ccd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001edaf  00000000  00000000  001175fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002580  00000000  00000000  001363ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000048a0  00000000  00000000  0013892d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00035542  00000000  00000000  0013d1cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002a41f  00000000  00000000  0017270f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001054ce  00000000  00000000  0019cb2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000d148  00000000  00000000  002a1ffc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fc87 	bl	d6940 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fc8c 	bl	d6956 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e2d8 	.word	0x2003e2d8
   d4048:	000d6f24 	.word	0x000d6f24
   d404c:	2003e340 	.word	0x2003e340
   d4050:	2003e340 	.word	0x2003e340
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f000 ff3b 	bl	d4ed4 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d6f18 	.word	0x000d6f18
   d4080:	000d6ee0 	.word	0x000d6ee0

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b816 	b.w	d40b4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f91d 	bl	d42c8 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f000 bee1 	b.w	d4e58 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bbf1 	b.w	d487c <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 bbf7 	b.w	d488c <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bbf5 	b.w	d488c <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <setup>:
float tempTotal = 0;                  // the running total
float tempAverage = 0;                // the average

// setup() runs once, when the device is first turned on.
void setup() 
{
   d40b4:	b570      	push	{r4, r5, r6, lr}
  Serial.begin(9600);
   d40b6:	f001 fad1 	bl	d565c <_Z16_fetch_usbserialv>
   d40ba:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40be:	f001 fac1 	bl	d5644 <_ZN9USBSerial5beginEl>
  delay(100);
}

int randomNumber(int minVal, int maxVal)              //function to generate random values within a range
{
  return rand() % (maxVal-minVal+1) + minVal;
   d40c2:	f002 fc79 	bl	d69b8 <rand>
void setup() 
{
  Serial.begin(9600);
  for (int thisReading = 0; thisReading < usbReadings; thisReading++) 
  {
    usb[thisReading] = randomNumber(0, 1);
   d40c6:	4b24      	ldr	r3, [pc, #144]	; (d4158 <setup+0xa4>)
   d40c8:	4c24      	ldr	r4, [pc, #144]	; (d415c <setup+0xa8>)
   d40ca:	4003      	ands	r3, r0
   d40cc:	2b00      	cmp	r3, #0
   d40ce:	bfbe      	ittt	lt
   d40d0:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d40d4:	f063 0301 	ornlt	r3, r3, #1
   d40d8:	3301      	addlt	r3, #1
   d40da:	ee07 3a90 	vmov	s15, r3
   d40de:	4b20      	ldr	r3, [pc, #128]	; (d4160 <setup+0xac>)
   d40e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d40e4:	f104 0514 	add.w	r5, r4, #20
   d40e8:	edc3 7a00 	vstr	s15, [r3]
  delay(100);
}

int randomNumber(int minVal, int maxVal)              //function to generate random values within a range
{
  return rand() % (maxVal-minVal+1) + minVal;
   d40ec:	f002 fc64 	bl	d69b8 <rand>
void setup() 
{
  Serial.begin(9600);
  for (int thisReading = 0; thisReading < usbReadings; thisReading++) 
  {
    usb[thisReading] = randomNumber(0, 1);
   d40f0:	4b19      	ldr	r3, [pc, #100]	; (d4158 <setup+0xa4>)
   d40f2:	4003      	ands	r3, r0
   d40f4:	2b00      	cmp	r3, #0
   d40f6:	bfbe      	ittt	lt
   d40f8:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d40fc:	f063 0301 	ornlt	r3, r3, #1
   d4100:	3301      	addlt	r3, #1
   d4102:	ee07 3a90 	vmov	s15, r3
   d4106:	4b16      	ldr	r3, [pc, #88]	; (d4160 <setup+0xac>)
   d4108:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  }

  for (int thisReading = 0; thisReading < childReadings; thisReading++) 
  {
    child[thisReading] = randomNumber(0, 2);
   d410c:	2603      	movs	r6, #3
void setup() 
{
  Serial.begin(9600);
  for (int thisReading = 0; thisReading < usbReadings; thisReading++) 
  {
    usb[thisReading] = randomNumber(0, 1);
   d410e:	edc3 7a01 	vstr	s15, [r3, #4]
  delay(100);
}

int randomNumber(int minVal, int maxVal)              //function to generate random values within a range
{
  return rand() % (maxVal-minVal+1) + minVal;
   d4112:	f002 fc51 	bl	d69b8 <rand>
    usb[thisReading] = randomNumber(0, 1);
  }

  for (int thisReading = 0; thisReading < childReadings; thisReading++) 
  {
    child[thisReading] = randomNumber(0, 2);
   d4116:	fb90 f3f6 	sdiv	r3, r0, r6
   d411a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d411e:	1ac0      	subs	r0, r0, r3
   d4120:	ee07 0a90 	vmov	s15, r0
   d4124:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4128:	ece4 7a01 	vstmia	r4!, {s15}
  for (int thisReading = 0; thisReading < usbReadings; thisReading++) 
  {
    usb[thisReading] = randomNumber(0, 1);
  }

  for (int thisReading = 0; thisReading < childReadings; thisReading++) 
   d412c:	42a5      	cmp	r5, r4
   d412e:	d1f0      	bne.n	d4112 <setup+0x5e>
   d4130:	4c0c      	ldr	r4, [pc, #48]	; (d4164 <setup+0xb0>)
    child[thisReading] = randomNumber(0, 2);
  }

  for (int thisReading = 0; thisReading < tempReadings; thisReading++) 
  {
    temp[thisReading] = randomNumber(80, 150);
   d4132:	2547      	movs	r5, #71	; 0x47
   d4134:	f104 0614 	add.w	r6, r4, #20
  delay(100);
}

int randomNumber(int minVal, int maxVal)              //function to generate random values within a range
{
  return rand() % (maxVal-minVal+1) + minVal;
   d4138:	f002 fc3e 	bl	d69b8 <rand>
    child[thisReading] = randomNumber(0, 2);
  }

  for (int thisReading = 0; thisReading < tempReadings; thisReading++) 
  {
    temp[thisReading] = randomNumber(80, 150);
   d413c:	fb90 f3f5 	sdiv	r3, r0, r5
   d4140:	fb03 0015 	mls	r0, r3, r5, r0
   d4144:	3050      	adds	r0, #80	; 0x50
   d4146:	ee07 0a90 	vmov	s15, r0
   d414a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d414e:	ece4 7a01 	vstmia	r4!, {s15}
  for (int thisReading = 0; thisReading < childReadings; thisReading++) 
  {
    child[thisReading] = randomNumber(0, 2);
  }

  for (int thisReading = 0; thisReading < tempReadings; thisReading++) 
   d4152:	42a6      	cmp	r6, r4
   d4154:	d1f0      	bne.n	d4138 <setup+0x84>
  {
    temp[thisReading] = randomNumber(80, 150);
  }
}
   d4156:	bd70      	pop	{r4, r5, r6, pc}
   d4158:	80000001 	.word	0x80000001
   d415c:	2003e370 	.word	0x2003e370
   d4160:	2003e388 	.word	0x2003e388
   d4164:	2003e390 	.word	0x2003e390

000d4168 <_Z7collectv>:
  digitalWrite(DONEPIN, LOW);              //toggle the done pin to let tpl know to sleep
  delay(2000);
}

void collect()
{  
   d4168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  delay(100);
}

int randomNumber(int minVal, int maxVal)              //function to generate random values within a range
{
  return rand() % (maxVal-minVal+1) + minVal;
   d416a:	f002 fc25 	bl	d69b8 <rand>
   d416e:	4c38      	ldr	r4, [pc, #224]	; (d4250 <_Z7collectv+0xe8>)
  // Serial.println(tempVal);
  

  //check if the child is in the seat

  childTotal = childTotal - child[childIndex];  //drop the last value
   d4170:	4e38      	ldr	r6, [pc, #224]	; (d4254 <_Z7collectv+0xec>)
   d4172:	4f39      	ldr	r7, [pc, #228]	; (d4258 <_Z7collectv+0xf0>)
  delay(100);
}

int randomNumber(int minVal, int maxVal)              //function to generate random values within a range
{
  return rand() % (maxVal-minVal+1) + minVal;
   d4174:	4004      	ands	r4, r0
   d4176:	2c00      	cmp	r4, #0
   d4178:	bfbc      	itt	lt
   d417a:	f104 34ff 	addlt.w	r4, r4, #4294967295
   d417e:	f064 0401 	ornlt	r4, r4, #1
void collect()
{  
  int carOn = randomNumber(0, 1);       //generate random value for if the car is on
  // Serial.print("car val: ");
  // Serial.println(carOn);
  digitalWrite(VELOSTATPIN, HIGH);     //power the velostat
   d4182:	f04f 0101 	mov.w	r1, #1
   d4186:	f04f 0008 	mov.w	r0, #8
  delay(100);
}

int randomNumber(int minVal, int maxVal)              //function to generate random values within a range
{
  return rand() % (maxVal-minVal+1) + minVal;
   d418a:	bfb8      	it	lt
   d418c:	3401      	addlt	r4, #1
void collect()
{  
  int carOn = randomNumber(0, 1);       //generate random value for if the car is on
  // Serial.print("car val: ");
  // Serial.println(carOn);
  digitalWrite(VELOSTATPIN, HIGH);     //power the velostat
   d418e:	f001 fd33 	bl	d5bf8 <digitalWrite>
  delay(100);
}

int randomNumber(int minVal, int maxVal)              //function to generate random values within a range
{
  return rand() % (maxVal-minVal+1) + minVal;
   d4192:	f002 fc11 	bl	d69b8 <rand>
  int carOn = randomNumber(0, 1);       //generate random value for if the car is on
  // Serial.print("car val: ");
  // Serial.println(carOn);
  digitalWrite(VELOSTATPIN, HIGH);     //power the velostat
  int childVal = randomNumber(0, 2);    //generate random value for if the child is in the car
  digitalWrite(VELOSTATPIN, LOW);      //turn power off to the velostat
   d4196:	2100      	movs	r1, #0
  delay(100);
}

int randomNumber(int minVal, int maxVal)              //function to generate random values within a range
{
  return rand() % (maxVal-minVal+1) + minVal;
   d4198:	4605      	mov	r5, r0
  int carOn = randomNumber(0, 1);       //generate random value for if the car is on
  // Serial.print("car val: ");
  // Serial.println(carOn);
  digitalWrite(VELOSTATPIN, HIGH);     //power the velostat
  int childVal = randomNumber(0, 2);    //generate random value for if the child is in the car
  digitalWrite(VELOSTATPIN, LOW);      //turn power off to the velostat
   d419a:	2008      	movs	r0, #8
   d419c:	f001 fd2c 	bl	d5bf8 <digitalWrite>
  delay(100);
}

int randomNumber(int minVal, int maxVal)              //function to generate random values within a range
{
  return rand() % (maxVal-minVal+1) + minVal;
   d41a0:	f002 fc0a 	bl	d69b8 <rand>
   d41a4:	233d      	movs	r3, #61	; 0x3d
  // Serial.println(tempVal);
  

  //check if the child is in the seat

  childTotal = childTotal - child[childIndex];  //drop the last value
   d41a6:	492d      	ldr	r1, [pc, #180]	; (d425c <_Z7collectv+0xf4>)
  delay(100);
}

int randomNumber(int minVal, int maxVal)              //function to generate random values within a range
{
  return rand() % (maxVal-minVal+1) + minVal;
   d41a8:	fb90 f2f3 	sdiv	r2, r0, r3
   d41ac:	fb02 0013 	mls	r0, r2, r3, r0
  // Serial.println(tempVal);
  

  //check if the child is in the seat

  childTotal = childTotal - child[childIndex];  //drop the last value
   d41b0:	6832      	ldr	r2, [r6, #0]
   d41b2:	edd7 7a00 	vldr	s15, [r7]
   d41b6:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   d41ba:	ed91 7a00 	vldr	s14, [r1]
  child[childIndex] = childVal;                 //get the current value
   d41be:	2303      	movs	r3, #3
   d41c0:	fb95 f3f3 	sdiv	r3, r5, r3
   d41c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d41c8:	1aed      	subs	r5, r5, r3
  // Serial.println(tempVal);
  

  //check if the child is in the seat

  childTotal = childTotal - child[childIndex];  //drop the last value
   d41ca:	ee37 7ac7 	vsub.f32	s14, s15, s14
  child[childIndex] = childVal;                 //get the current value
   d41ce:	ee07 5a90 	vmov	s15, r5
   d41d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  childTotal = childTotal + child[childIndex];  //add to total
  childIndex++;                                 //increment the index
   d41d6:	1c53      	adds	r3, r2, #1
  

  //check if the child is in the seat

  childTotal = childTotal - child[childIndex];  //drop the last value
  child[childIndex] = childVal;                 //get the current value
   d41d8:	edc1 7a00 	vstr	s15, [r1]
  childTotal = childTotal + child[childIndex];  //add to total
   d41dc:	ee77 7a27 	vadd.f32	s15, s14, s15
  childIndex++;                                 //increment the index
  

  if (childIndex >= childReadings)  // ...wrap around to the beginning:
   d41e0:	2b04      	cmp	r3, #4
    childIndex = 0;  
  }
  
  //car on/off check
  
  usb[usbIndex] = carOn;  //read the value
   d41e2:	4a1f      	ldr	r2, [pc, #124]	; (d4260 <_Z7collectv+0xf8>)

  //check if the child is in the seat

  childTotal = childTotal - child[childIndex];  //drop the last value
  child[childIndex] = childVal;                 //get the current value
  childTotal = childTotal + child[childIndex];  //add to total
   d41e4:	edc7 7a00 	vstr	s15, [r7]
  childIndex++;                                 //increment the index
  

  if (childIndex >= childReadings)  // ...wrap around to the beginning:
  {
    childIndex = 0;  
   d41e8:	bfc8      	it	gt
   d41ea:	2300      	movgt	r3, #0
  }
  
  //car on/off check
  
  usb[usbIndex] = carOn;  //read the value
   d41ec:	ee07 4a90 	vmov	s15, r4
  childIndex++;                                 //increment the index
  

  if (childIndex >= childReadings)  // ...wrap around to the beginning:
  {
    childIndex = 0;  
   d41f0:	6033      	str	r3, [r6, #0]
  }
  
  //car on/off check
  
  usb[usbIndex] = carOn;  //read the value
   d41f2:	491c      	ldr	r1, [pc, #112]	; (d4264 <_Z7collectv+0xfc>)
   d41f4:	6813      	ldr	r3, [r2, #0]
  {
    usbIndex = 0;  
  }

  //Tempearature readings 
  tempTotal = tempTotal - temp[tempIndex];    //drop the last value
   d41f6:	4c1c      	ldr	r4, [pc, #112]	; (d4268 <_Z7collectv+0x100>)
    childIndex = 0;  
  }
  
  //car on/off check
  
  usb[usbIndex] = carOn;  //read the value
   d41f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d41fc:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  usbIndex++;   //increase the index
   d4200:	3301      	adds	r3, #1
    childIndex = 0;  
  }
  
  //car on/off check
  
  usb[usbIndex] = carOn;  //read the value
   d4202:	edc1 7a00 	vstr	s15, [r1]
  usbIndex++;   //increase the index
  

  if (usbIndex >= usbReadings)  // ...wrap around to the beginning:
   d4206:	2b01      	cmp	r3, #1
  {
    usbIndex = 0;  
  }

  //Tempearature readings 
  tempTotal = tempTotal - temp[tempIndex];    //drop the last value
   d4208:	4918      	ldr	r1, [pc, #96]	; (d426c <_Z7collectv+0x104>)
   d420a:	edd4 7a00 	vldr	s15, [r4]
  usbIndex++;   //increase the index
  

  if (usbIndex >= usbReadings)  // ...wrap around to the beginning:
  {
    usbIndex = 0;  
   d420e:	bfc8      	it	gt
   d4210:	2300      	movgt	r3, #0
   d4212:	6013      	str	r3, [r2, #0]
  }

  //Tempearature readings 
  tempTotal = tempTotal - temp[tempIndex];    //drop the last value
   d4214:	680b      	ldr	r3, [r1, #0]
   d4216:	4a16      	ldr	r2, [pc, #88]	; (d4270 <_Z7collectv+0x108>)
   d4218:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   d421c:	ed92 7a00 	vldr	s14, [r2]
  delay(100);
}

int randomNumber(int minVal, int maxVal)              //function to generate random values within a range
{
  return rand() % (maxVal-minVal+1) + minVal;
   d4220:	305a      	adds	r0, #90	; 0x5a
  {
    usbIndex = 0;  
  }

  //Tempearature readings 
  tempTotal = tempTotal - temp[tempIndex];    //drop the last value
   d4222:	ee37 7ac7 	vsub.f32	s14, s15, s14
  temp[tempIndex] = tempVal;                  //get the current value
   d4226:	ee07 0a90 	vmov	s15, r0
   d422a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  tempTotal = tempTotal + temp[tempIndex];    //add to total
  tempIndex++;                                //increment the index
   d422e:	3301      	adds	r3, #1
    usbIndex = 0;  
  }

  //Tempearature readings 
  tempTotal = tempTotal - temp[tempIndex];    //drop the last value
  temp[tempIndex] = tempVal;                  //get the current value
   d4230:	edc2 7a00 	vstr	s15, [r2]
  tempTotal = tempTotal + temp[tempIndex];    //add to total
  tempIndex++;                                //increment the index
  
  if (tempIndex >= tempReadings)  // ...wrap around to the beginning:
   d4234:	2b04      	cmp	r3, #4
  }

  //Tempearature readings 
  tempTotal = tempTotal - temp[tempIndex];    //drop the last value
  temp[tempIndex] = tempVal;                  //get the current value
  tempTotal = tempTotal + temp[tempIndex];    //add to total
   d4236:	ee77 7a27 	vadd.f32	s15, s14, s15
  tempIndex++;                                //increment the index
  
  if (tempIndex >= tempReadings)  // ...wrap around to the beginning:
  {
    tempIndex = 0;  
   d423a:	bfc8      	it	gt
   d423c:	2300      	movgt	r3, #0
  }

  //Tempearature readings 
  tempTotal = tempTotal - temp[tempIndex];    //drop the last value
  temp[tempIndex] = tempVal;                  //get the current value
  tempTotal = tempTotal + temp[tempIndex];    //add to total
   d423e:	edc4 7a00 	vstr	s15, [r4]
  tempIndex++;                                //increment the index
  
  if (tempIndex >= tempReadings)  // ...wrap around to the beginning:
  {
    tempIndex = 0;  
   d4242:	600b      	str	r3, [r1, #0]
  }
  delay(100);
   d4244:	2064      	movs	r0, #100	; 0x64
}
   d4246:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  
  if (tempIndex >= tempReadings)  // ...wrap around to the beginning:
  {
    tempIndex = 0;  
  }
  delay(100);
   d424a:	f000 bdb7 	b.w	d4dbc <delay>
   d424e:	bf00      	nop
   d4250:	80000001 	.word	0x80000001
   d4254:	2003e368 	.word	0x2003e368
   d4258:	2003e354 	.word	0x2003e354
   d425c:	2003e370 	.word	0x2003e370
   d4260:	2003e35c 	.word	0x2003e35c
   d4264:	2003e388 	.word	0x2003e388
   d4268:	2003e358 	.word	0x2003e358
   d426c:	2003e384 	.word	0x2003e384
   d4270:	2003e390 	.word	0x2003e390

000d4274 <_Z11sendMessageRK6String>:
{
  return rand() % (maxVal-minVal+1) + minVal;
}

void sendMessage(const String& body)            //function that triggers twilio webhook
{
   d4274:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4276:	4b11      	ldr	r3, [pc, #68]	; (d42bc <_Z11sendMessageRK6String+0x48>)
   d4278:	6802      	ldr	r2, [r0, #0]
   d427a:	781b      	ldrb	r3, [r3, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d427c:	f88d 3000 	strb.w	r3, [sp]
   d4280:	490f      	ldr	r1, [pc, #60]	; (d42c0 <_Z11sendMessageRK6String+0x4c>)
   d4282:	233c      	movs	r3, #60	; 0x3c
   d4284:	a802      	add	r0, sp, #8
   d4286:	f000 ff93 	bl	d51b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d428a:	9c03      	ldr	r4, [sp, #12]
   d428c:	b17c      	cbz	r4, d42ae <_Z11sendMessageRK6String+0x3a>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d428e:	6863      	ldr	r3, [r4, #4]
   d4290:	3b01      	subs	r3, #1
   d4292:	6063      	str	r3, [r4, #4]
   d4294:	b95b      	cbnz	r3, d42ae <_Z11sendMessageRK6String+0x3a>
        {
          _M_dispose();
   d4296:	6823      	ldr	r3, [r4, #0]
   d4298:	4620      	mov	r0, r4
   d429a:	689b      	ldr	r3, [r3, #8]
   d429c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d429e:	68a3      	ldr	r3, [r4, #8]
   d42a0:	3b01      	subs	r3, #1
   d42a2:	60a3      	str	r3, [r4, #8]
   d42a4:	b91b      	cbnz	r3, d42ae <_Z11sendMessageRK6String+0x3a>
            _M_destroy();
   d42a6:	6823      	ldr	r3, [r4, #0]
   d42a8:	4620      	mov	r0, r4
   d42aa:	68db      	ldr	r3, [r3, #12]
   d42ac:	4798      	blx	r3
  Particle.publish("twilio_sms", body, PRIVATE);
  Serial.println("SendingMessage");
   d42ae:	f001 f9d5 	bl	d565c <_Z16_fetch_usbserialv>
   d42b2:	4904      	ldr	r1, [pc, #16]	; (d42c4 <_Z11sendMessageRK6String+0x50>)
   d42b4:	f000 fc5d 	bl	d4b72 <_ZN5Print7printlnEPKc>
   d42b8:	b004      	add	sp, #16
   d42ba:	bd10      	pop	{r4, pc}
   d42bc:	2003e36c 	.word	0x2003e36c
   d42c0:	000d6a88 	.word	0x000d6a88
   d42c4:	000d6a93 	.word	0x000d6a93

000d42c8 <loop>:
  }
}

// loop() runs over and over again, as quickly as it can execute.
void loop() 
{
   d42c8:	b510      	push	{r4, lr}
  digitalWrite(DONEPIN, HIGH);
   d42ca:	2101      	movs	r1, #1
  }
}

// loop() runs over and over again, as quickly as it can execute.
void loop() 
{
   d42cc:	ed2d 8b02 	vpush	{d8}
  digitalWrite(DONEPIN, HIGH);
   d42d0:	2007      	movs	r0, #7
   d42d2:	f001 fc91 	bl	d5bf8 <digitalWrite>
  collect();
   d42d6:	f7ff ff47 	bl	d4168 <_Z7collectv>
   d42da:	4b64      	ldr	r3, [pc, #400]	; (d446c <loop+0x1a4>)
   d42dc:	eddf 7a64 	vldr	s15, [pc, #400]	; d4470 <loop+0x1a8>
   d42e0:	f103 0214 	add.w	r2, r3, #20

  childTotal = 0;
  for (int thisReading = 0; thisReading <= childReadings - 1; thisReading++) 
  {
    childTotal = childTotal + child[thisReading];
   d42e4:	ecb3 7a01 	vldmia	r3!, {s14}
{
  digitalWrite(DONEPIN, HIGH);
  collect();

  childTotal = 0;
  for (int thisReading = 0; thisReading <= childReadings - 1; thisReading++) 
   d42e8:	429a      	cmp	r2, r3
  {
    childTotal = childTotal + child[thisReading];
   d42ea:	ee77 7a87 	vadd.f32	s15, s15, s14
{
  digitalWrite(DONEPIN, HIGH);
  collect();

  childTotal = 0;
  for (int thisReading = 0; thisReading <= childReadings - 1; thisReading++) 
   d42ee:	d1f9      	bne.n	d42e4 <loop+0x1c>
  {
    childTotal = childTotal + child[thisReading];
  }
  childAverage = childTotal / childReadings;    //running average
   d42f0:	eeb1 8a04 	vmov.f32	s16, #20	; 0x40a00000  5.0
   d42f4:	ee87 7a88 	vdiv.f32	s14, s15, s16
   d42f8:	4b5e      	ldr	r3, [pc, #376]	; (d4474 <loop+0x1ac>)
   d42fa:	4c5f      	ldr	r4, [pc, #380]	; (d4478 <loop+0x1b0>)
   d42fc:	edc3 7a00 	vstr	s15, [r3]
   d4300:	ed84 7a00 	vstr	s14, [r4]

  Serial.print("The child average is:  ");
   d4304:	f001 f9aa 	bl	d565c <_Z16_fetch_usbserialv>
   d4308:	495c      	ldr	r1, [pc, #368]	; (d447c <loop+0x1b4>)
   d430a:	f000 fc1f 	bl	d4b4c <_ZN5Print5printEPKc>
  Serial.println(childAverage);
   d430e:	f001 f9a5 	bl	d565c <_Z16_fetch_usbserialv>
   d4312:	2102      	movs	r1, #2
   d4314:	ed94 0a00 	vldr	s0, [r4]
   d4318:	f000 fd2e 	bl	d4d78 <_ZN5Print7printlnEfi>

  if (childAverage < 3)                         //if the child is in the seat
   d431c:	ed94 7a00 	vldr	s14, [r4]
   d4320:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
   d4324:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d4328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d432c:	f140 8091 	bpl.w	d4452 <loop+0x18a>
  {
    Serial.println("child in car");
   d4330:	f001 f994 	bl	d565c <_Z16_fetch_usbserialv>

    Serial.print("the usb array is:  ");
    Serial.print(usb[0]);
   d4334:	4c52      	ldr	r4, [pc, #328]	; (d4480 <loop+0x1b8>)
  Serial.print("The child average is:  ");
  Serial.println(childAverage);

  if (childAverage < 3)                         //if the child is in the seat
  {
    Serial.println("child in car");
   d4336:	4953      	ldr	r1, [pc, #332]	; (d4484 <loop+0x1bc>)
   d4338:	f000 fc1b 	bl	d4b72 <_ZN5Print7printlnEPKc>

    Serial.print("the usb array is:  ");
   d433c:	f001 f98e 	bl	d565c <_Z16_fetch_usbserialv>
   d4340:	4951      	ldr	r1, [pc, #324]	; (d4488 <loop+0x1c0>)
   d4342:	f000 fc03 	bl	d4b4c <_ZN5Print5printEPKc>
    Serial.print(usb[0]);
   d4346:	f001 f989 	bl	d565c <_Z16_fetch_usbserialv>
   d434a:	ed94 0a00 	vldr	s0, [r4]
   d434e:	2102      	movs	r1, #2
   d4350:	f000 fcf8 	bl	d4d44 <_ZN5Print5printEfi>
    Serial.print(" ");
   d4354:	f001 f982 	bl	d565c <_Z16_fetch_usbserialv>
   d4358:	494c      	ldr	r1, [pc, #304]	; (d448c <loop+0x1c4>)
   d435a:	f000 fbf7 	bl	d4b4c <_ZN5Print5printEPKc>
    Serial.println(usb[1]);
   d435e:	f001 f97d 	bl	d565c <_Z16_fetch_usbserialv>
   d4362:	2102      	movs	r1, #2
   d4364:	ed94 0a01 	vldr	s0, [r4, #4]
   d4368:	f000 fd06 	bl	d4d78 <_ZN5Print7printlnEfi>

    if (usb[0] == 1 && usb[1] == 0)   //check to see if the car went from on to off
   d436c:	ed94 7a00 	vldr	s14, [r4]
   d4370:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   d4374:	eeb4 7a67 	vcmp.f32	s14, s15
   d4378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d437c:	d10e      	bne.n	d439c <loop+0xd4>
   d437e:	edd4 7a01 	vldr	s15, [r4, #4]
   d4382:	eef5 7a40 	vcmp.f32	s15, #0.0
   d4386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d438a:	d107      	bne.n	d439c <loop+0xd4>
    {
      sendMessage(body);
   d438c:	4840      	ldr	r0, [pc, #256]	; (d4490 <loop+0x1c8>)
   d438e:	f7ff ff71 	bl	d4274 <_Z11sendMessageRK6String>
      Serial.println("Sending message because car turned off and child is in the car");
   d4392:	f001 f963 	bl	d565c <_Z16_fetch_usbserialv>
   d4396:	493f      	ldr	r1, [pc, #252]	; (d4494 <loop+0x1cc>)
   d4398:	f000 fbeb 	bl	d4b72 <_ZN5Print7printlnEPKc>
    }

    //check if the temperature is too hot or rising too fast

    if (temp[tempReadings - 1] - temp[0] >= 10)     //if temperature is rising too fast
   d439c:	4b3e      	ldr	r3, [pc, #248]	; (d4498 <loop+0x1d0>)
   d439e:	ed93 7a00 	vldr	s14, [r3]
   d43a2:	edd3 7a04 	vldr	s15, [r3, #16]
   d43a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
   d43aa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d43ae:	eef4 7ac7 	vcmpe.f32	s15, s14
   d43b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d43b6:	db07      	blt.n	d43c8 <loop+0x100>
    {
      sendMessage(body);
   d43b8:	4835      	ldr	r0, [pc, #212]	; (d4490 <loop+0x1c8>)
   d43ba:	f7ff ff5b 	bl	d4274 <_Z11sendMessageRK6String>
      Serial.println("The temperature is rising too fast");
   d43be:	f001 f94d 	bl	d565c <_Z16_fetch_usbserialv>
   d43c2:	4936      	ldr	r1, [pc, #216]	; (d449c <loop+0x1d4>)
   d43c4:	f000 fbd5 	bl	d4b72 <_ZN5Print7printlnEPKc>
   d43c8:	4b33      	ldr	r3, [pc, #204]	; (d4498 <loop+0x1d0>)

// loop() runs over and over again, as quickly as it can execute.
void loop() 
{
  digitalWrite(DONEPIN, HIGH);
  collect();
   d43ca:	eddf 7a29 	vldr	s15, [pc, #164]	; d4470 <loop+0x1a8>
   d43ce:	f103 0214 	add.w	r2, r3, #20

    //average for tester examples
    tempTotal = 0;
    for (int thisReading = 0; thisReading <= tempReadings - 1; thisReading++) 
    {
      tempTotal = tempTotal + temp[thisReading];
   d43d2:	ecb3 7a01 	vldmia	r3!, {s14}
      Serial.println("The temperature is rising too fast");
    }

    //average for tester examples
    tempTotal = 0;
    for (int thisReading = 0; thisReading <= tempReadings - 1; thisReading++) 
   d43d6:	429a      	cmp	r2, r3
    {
      tempTotal = tempTotal + temp[thisReading];
   d43d8:	ee77 7a87 	vadd.f32	s15, s15, s14
      Serial.println("The temperature is rising too fast");
    }

    //average for tester examples
    tempTotal = 0;
    for (int thisReading = 0; thisReading <= tempReadings - 1; thisReading++) 
   d43dc:	d1f9      	bne.n	d43d2 <loop+0x10a>
    {
      tempTotal = tempTotal + temp[thisReading];
    }
    tempAverage = tempTotal / tempReadings;       //calculate running average
   d43de:	ee87 7a88 	vdiv.f32	s14, s15, s16
   d43e2:	4b2f      	ldr	r3, [pc, #188]	; (d44a0 <loop+0x1d8>)
   d43e4:	4c2f      	ldr	r4, [pc, #188]	; (d44a4 <loop+0x1dc>)
   d43e6:	edc3 7a00 	vstr	s15, [r3]
   d43ea:	ed84 7a00 	vstr	s14, [r4]
    
    Serial.print("The temp average is:  ");
   d43ee:	f001 f935 	bl	d565c <_Z16_fetch_usbserialv>
   d43f2:	492d      	ldr	r1, [pc, #180]	; (d44a8 <loop+0x1e0>)
   d43f4:	ed9f 8a2d 	vldr	s16, [pc, #180]	; d44ac <loop+0x1e4>
   d43f8:	f000 fba8 	bl	d4b4c <_ZN5Print5printEPKc>
    Serial.println(tempAverage);
   d43fc:	f001 f92e 	bl	d565c <_Z16_fetch_usbserialv>
   d4400:	2102      	movs	r1, #2
   d4402:	ed94 0a00 	vldr	s0, [r4]
   d4406:	f000 fcb7 	bl	d4d78 <_ZN5Print7printlnEfi>

    if (tempAverage >= 80 && tempAverage < 90)  //if the temp is too hot
   d440a:	edd4 7a00 	vldr	s15, [r4]
   d440e:	ed9f 7a28 	vldr	s14, [pc, #160]	; d44b0 <loop+0x1e8>
   d4412:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d441a:	db0c      	blt.n	d4436 <loop+0x16e>
   d441c:	eef4 7ac8 	vcmpe.f32	s15, s16
   d4420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4424:	d507      	bpl.n	d4436 <loop+0x16e>
    {
      sendMessage(body);
   d4426:	481a      	ldr	r0, [pc, #104]	; (d4490 <loop+0x1c8>)
   d4428:	f7ff ff24 	bl	d4274 <_Z11sendMessageRK6String>
      Serial.println("Sending message because temperature is too hot");
   d442c:	f001 f916 	bl	d565c <_Z16_fetch_usbserialv>
   d4430:	4920      	ldr	r1, [pc, #128]	; (d44b4 <loop+0x1ec>)
   d4432:	f000 fb9e 	bl	d4b72 <_ZN5Print7printlnEPKc>
    }

    while (tempAverage >= 90) //if the temp is way too hot
   d4436:	edd4 7a00 	vldr	s15, [r4]
   d443a:	eef4 7ac8 	vcmpe.f32	s15, s16
   d443e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4442:	db06      	blt.n	d4452 <loop+0x18a>
    {
      sendMessage(body);
   d4444:	4812      	ldr	r0, [pc, #72]	; (d4490 <loop+0x1c8>)
   d4446:	f7ff ff15 	bl	d4274 <_Z11sendMessageRK6String>
      Serial.println("Sending message because temp is critical");
   d444a:	f001 f907 	bl	d565c <_Z16_fetch_usbserialv>
   d444e:	491a      	ldr	r1, [pc, #104]	; (d44b8 <loop+0x1f0>)
   d4450:	e7ef      	b.n	d4432 <loop+0x16a>
    }
  }
  digitalWrite(DONEPIN, LOW);              //toggle the done pin to let tpl know to sleep
   d4452:	2007      	movs	r0, #7
   d4454:	2100      	movs	r1, #0
   d4456:	f001 fbcf 	bl	d5bf8 <digitalWrite>
  delay(2000);
}
   d445a:	ecbd 8b02 	vpop	{d8}
      sendMessage(body);
      Serial.println("Sending message because temp is critical");
    }
  }
  digitalWrite(DONEPIN, LOW);              //toggle the done pin to let tpl know to sleep
  delay(2000);
   d445e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
}
   d4462:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      sendMessage(body);
      Serial.println("Sending message because temp is critical");
    }
  }
  digitalWrite(DONEPIN, LOW);              //toggle the done pin to let tpl know to sleep
  delay(2000);
   d4466:	f000 bca9 	b.w	d4dbc <delay>
   d446a:	bf00      	nop
   d446c:	2003e370 	.word	0x2003e370
   d4470:	00000000 	.word	0x00000000
   d4474:	2003e354 	.word	0x2003e354
   d4478:	2003e364 	.word	0x2003e364
   d447c:	000d6aa2 	.word	0x000d6aa2
   d4480:	2003e388 	.word	0x2003e388
   d4484:	000d6aba 	.word	0x000d6aba
   d4488:	000d6ac7 	.word	0x000d6ac7
   d448c:	000d6ab8 	.word	0x000d6ab8
   d4490:	2003e344 	.word	0x2003e344
   d4494:	000d6adb 	.word	0x000d6adb
   d4498:	2003e390 	.word	0x2003e390
   d449c:	000d6b1a 	.word	0x000d6b1a
   d44a0:	2003e358 	.word	0x2003e358
   d44a4:	2003e360 	.word	0x2003e360
   d44a8:	000d6b3d 	.word	0x000d6b3d
   d44ac:	42b40000 	.word	0x42b40000
   d44b0:	42a00000 	.word	0x42a00000
   d44b4:	000d6b54 	.word	0x000d6b54
   d44b8:	000d6b83 	.word	0x000d6b83

000d44bc <_GLOBAL__sub_I_body>:

void sendMessage(const String& body)            //function that triggers twilio webhook
{
  Particle.publish("twilio_sms", body, PRIVATE);
  Serial.println("SendingMessage");
   d44bc:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d44be:	4b08      	ldr	r3, [pc, #32]	; (d44e0 <_GLOBAL__sub_I_body+0x24>)
*/

#define DONEPIN 7
#define VELOSTATPIN 8

String body = "Your child is in the car";  //body of SMS message to send
   d44c0:	4c08      	ldr	r4, [pc, #32]	; (d44e4 <_GLOBAL__sub_I_body+0x28>)
   d44c2:	2201      	movs	r2, #1
   d44c4:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d44c6:	f000 f825 	bl	d4514 <HAL_Pin_Map>
   d44ca:	4907      	ldr	r1, [pc, #28]	; (d44e8 <_GLOBAL__sub_I_body+0x2c>)
   d44cc:	4620      	mov	r0, r4
   d44ce:	f000 fac4 	bl	d4a5a <_ZN6StringC1EPK19__FlashStringHelper>
   d44d2:	4620      	mov	r0, r4
   d44d4:	4a05      	ldr	r2, [pc, #20]	; (d44ec <_GLOBAL__sub_I_body+0x30>)
   d44d6:	4906      	ldr	r1, [pc, #24]	; (d44f0 <_GLOBAL__sub_I_body+0x34>)

void sendMessage(const String& body)            //function that triggers twilio webhook
{
  Particle.publish("twilio_sms", body, PRIVATE);
  Serial.println("SendingMessage");
   d44d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
*/

#define DONEPIN 7
#define VELOSTATPIN 8

String body = "Your child is in the car";  //body of SMS message to send
   d44dc:	f001 bc06 	b.w	d5cec <__aeabi_atexit>
   d44e0:	2003e36c 	.word	0x2003e36c
   d44e4:	2003e344 	.word	0x2003e344
   d44e8:	000d6bac 	.word	0x000d6bac
   d44ec:	2003e340 	.word	0x2003e340
   d44f0:	000d49cd 	.word	0x000d49cd

000d44f4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d44f4:	b508      	push	{r3, lr}
   d44f6:	4b02      	ldr	r3, [pc, #8]	; (d4500 <netdb_freeaddrinfo+0xc>)
   d44f8:	681b      	ldr	r3, [r3, #0]
   d44fa:	689b      	ldr	r3, [r3, #8]
   d44fc:	9301      	str	r3, [sp, #4]
   d44fe:	bd08      	pop	{r3, pc}
   d4500:	00030268 	.word	0x00030268

000d4504 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4504:	b508      	push	{r3, lr}
   d4506:	4b02      	ldr	r3, [pc, #8]	; (d4510 <netdb_getaddrinfo+0xc>)
   d4508:	681b      	ldr	r3, [r3, #0]
   d450a:	68db      	ldr	r3, [r3, #12]
   d450c:	9301      	str	r3, [sp, #4]
   d450e:	bd08      	pop	{r3, pc}
   d4510:	00030268 	.word	0x00030268

000d4514 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4514:	b508      	push	{r3, lr}
   d4516:	4b02      	ldr	r3, [pc, #8]	; (d4520 <HAL_Pin_Map+0xc>)
   d4518:	681b      	ldr	r3, [r3, #0]
   d451a:	681b      	ldr	r3, [r3, #0]
   d451c:	9301      	str	r3, [sp, #4]
   d451e:	bd08      	pop	{r3, pc}
   d4520:	0003022c 	.word	0x0003022c

000d4524 <HAL_Get_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4524:	b508      	push	{r3, lr}
   d4526:	4b02      	ldr	r3, [pc, #8]	; (d4530 <HAL_Get_Pin_Mode+0xc>)
   d4528:	681b      	ldr	r3, [r3, #0]
   d452a:	68db      	ldr	r3, [r3, #12]
   d452c:	9301      	str	r3, [sp, #4]
   d452e:	bd08      	pop	{r3, pc}
   d4530:	0003022c 	.word	0x0003022c

000d4534 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4534:	b508      	push	{r3, lr}
   d4536:	4b02      	ldr	r3, [pc, #8]	; (d4540 <HAL_GPIO_Write+0xc>)
   d4538:	681b      	ldr	r3, [r3, #0]
   d453a:	691b      	ldr	r3, [r3, #16]
   d453c:	9301      	str	r3, [sp, #4]
   d453e:	bd08      	pop	{r3, pc}
   d4540:	0003022c 	.word	0x0003022c

000d4544 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4544:	b508      	push	{r3, lr}
   d4546:	4b02      	ldr	r3, [pc, #8]	; (d4550 <HAL_SPI_Init+0xc>)
   d4548:	681b      	ldr	r3, [r3, #0]
   d454a:	69db      	ldr	r3, [r3, #28]
   d454c:	9301      	str	r3, [sp, #4]
   d454e:	bd08      	pop	{r3, pc}
   d4550:	00030230 	.word	0x00030230

000d4554 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4554:	b508      	push	{r3, lr}
   d4556:	4b02      	ldr	r3, [pc, #8]	; (d4560 <HAL_SPI_Is_Enabled+0xc>)
   d4558:	681b      	ldr	r3, [r3, #0]
   d455a:	6a1b      	ldr	r3, [r3, #32]
   d455c:	9301      	str	r3, [sp, #4]
   d455e:	bd08      	pop	{r3, pc}
   d4560:	00030230 	.word	0x00030230

000d4564 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4564:	b508      	push	{r3, lr}
   d4566:	4b02      	ldr	r3, [pc, #8]	; (d4570 <HAL_RNG_GetRandomNumber+0xc>)
   d4568:	681b      	ldr	r3, [r3, #0]
   d456a:	685b      	ldr	r3, [r3, #4]
   d456c:	9301      	str	r3, [sp, #4]
   d456e:	bd08      	pop	{r3, pc}
   d4570:	00030218 	.word	0x00030218

000d4574 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4574:	b508      	push	{r3, lr}
   d4576:	4b02      	ldr	r3, [pc, #8]	; (d4580 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4578:	681b      	ldr	r3, [r3, #0]
   d457a:	695b      	ldr	r3, [r3, #20]
   d457c:	9301      	str	r3, [sp, #4]
   d457e:	bd08      	pop	{r3, pc}
   d4580:	00030218 	.word	0x00030218

000d4584 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4584:	b508      	push	{r3, lr}
   d4586:	4b02      	ldr	r3, [pc, #8]	; (d4590 <os_thread_is_current+0xc>)
   d4588:	681b      	ldr	r3, [r3, #0]
   d458a:	689b      	ldr	r3, [r3, #8]
   d458c:	9301      	str	r3, [sp, #4]
   d458e:	bd08      	pop	{r3, pc}
   d4590:	00030248 	.word	0x00030248

000d4594 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4594:	b508      	push	{r3, lr}
   d4596:	4b02      	ldr	r3, [pc, #8]	; (d45a0 <os_thread_join+0xc>)
   d4598:	681b      	ldr	r3, [r3, #0]
   d459a:	691b      	ldr	r3, [r3, #16]
   d459c:	9301      	str	r3, [sp, #4]
   d459e:	bd08      	pop	{r3, pc}
   d45a0:	00030248 	.word	0x00030248

000d45a4 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d45a4:	b508      	push	{r3, lr}
   d45a6:	4b02      	ldr	r3, [pc, #8]	; (d45b0 <os_thread_cleanup+0xc>)
   d45a8:	681b      	ldr	r3, [r3, #0]
   d45aa:	695b      	ldr	r3, [r3, #20]
   d45ac:	9301      	str	r3, [sp, #4]
   d45ae:	bd08      	pop	{r3, pc}
   d45b0:	00030248 	.word	0x00030248

000d45b4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d45b4:	b508      	push	{r3, lr}
   d45b6:	4b02      	ldr	r3, [pc, #8]	; (d45c0 <os_mutex_recursive_create+0xc>)
   d45b8:	681b      	ldr	r3, [r3, #0]
   d45ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d45bc:	9301      	str	r3, [sp, #4]
   d45be:	bd08      	pop	{r3, pc}
   d45c0:	00030248 	.word	0x00030248

000d45c4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d45c4:	b508      	push	{r3, lr}
   d45c6:	4b02      	ldr	r3, [pc, #8]	; (d45d0 <os_mutex_recursive_destroy+0xc>)
   d45c8:	681b      	ldr	r3, [r3, #0]
   d45ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d45cc:	9301      	str	r3, [sp, #4]
   d45ce:	bd08      	pop	{r3, pc}
   d45d0:	00030248 	.word	0x00030248

000d45d4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d45d4:	b508      	push	{r3, lr}
   d45d6:	4b02      	ldr	r3, [pc, #8]	; (d45e0 <inet_inet_ntop+0xc>)
   d45d8:	681b      	ldr	r3, [r3, #0]
   d45da:	695b      	ldr	r3, [r3, #20]
   d45dc:	9301      	str	r3, [sp, #4]
   d45de:	bd08      	pop	{r3, pc}
   d45e0:	00030264 	.word	0x00030264

000d45e4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d45e4:	b508      	push	{r3, lr}
   d45e6:	4b02      	ldr	r3, [pc, #8]	; (d45f0 <HAL_USART_Init+0xc>)
   d45e8:	681b      	ldr	r3, [r3, #0]
   d45ea:	681b      	ldr	r3, [r3, #0]
   d45ec:	9301      	str	r3, [sp, #4]
   d45ee:	bd08      	pop	{r3, pc}
   d45f0:	0003023c 	.word	0x0003023c

000d45f4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d45f4:	b508      	push	{r3, lr}
   d45f6:	4b02      	ldr	r3, [pc, #8]	; (d4600 <HAL_USART_Write_Data+0xc>)
   d45f8:	681b      	ldr	r3, [r3, #0]
   d45fa:	68db      	ldr	r3, [r3, #12]
   d45fc:	9301      	str	r3, [sp, #4]
   d45fe:	bd08      	pop	{r3, pc}
   d4600:	0003023c 	.word	0x0003023c

000d4604 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4604:	b508      	push	{r3, lr}
   d4606:	4b02      	ldr	r3, [pc, #8]	; (d4610 <HAL_USART_Available_Data+0xc>)
   d4608:	681b      	ldr	r3, [r3, #0]
   d460a:	691b      	ldr	r3, [r3, #16]
   d460c:	9301      	str	r3, [sp, #4]
   d460e:	bd08      	pop	{r3, pc}
   d4610:	0003023c 	.word	0x0003023c

000d4614 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4614:	b508      	push	{r3, lr}
   d4616:	4b02      	ldr	r3, [pc, #8]	; (d4620 <HAL_USART_Read_Data+0xc>)
   d4618:	681b      	ldr	r3, [r3, #0]
   d461a:	695b      	ldr	r3, [r3, #20]
   d461c:	9301      	str	r3, [sp, #4]
   d461e:	bd08      	pop	{r3, pc}
   d4620:	0003023c 	.word	0x0003023c

000d4624 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4624:	b508      	push	{r3, lr}
   d4626:	4b02      	ldr	r3, [pc, #8]	; (d4630 <HAL_USART_Peek_Data+0xc>)
   d4628:	681b      	ldr	r3, [r3, #0]
   d462a:	699b      	ldr	r3, [r3, #24]
   d462c:	9301      	str	r3, [sp, #4]
   d462e:	bd08      	pop	{r3, pc}
   d4630:	0003023c 	.word	0x0003023c

000d4634 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4634:	b508      	push	{r3, lr}
   d4636:	4b02      	ldr	r3, [pc, #8]	; (d4640 <HAL_USART_Flush_Data+0xc>)
   d4638:	681b      	ldr	r3, [r3, #0]
   d463a:	69db      	ldr	r3, [r3, #28]
   d463c:	9301      	str	r3, [sp, #4]
   d463e:	bd08      	pop	{r3, pc}
   d4640:	0003023c 	.word	0x0003023c

000d4644 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4644:	b508      	push	{r3, lr}
   d4646:	4b02      	ldr	r3, [pc, #8]	; (d4650 <HAL_USART_Is_Enabled+0xc>)
   d4648:	681b      	ldr	r3, [r3, #0]
   d464a:	6a1b      	ldr	r3, [r3, #32]
   d464c:	9301      	str	r3, [sp, #4]
   d464e:	bd08      	pop	{r3, pc}
   d4650:	0003023c 	.word	0x0003023c

000d4654 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4654:	b508      	push	{r3, lr}
   d4656:	4b02      	ldr	r3, [pc, #8]	; (d4660 <HAL_USART_Available_Data_For_Write+0xc>)
   d4658:	681b      	ldr	r3, [r3, #0]
   d465a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d465c:	9301      	str	r3, [sp, #4]
   d465e:	bd08      	pop	{r3, pc}
   d4660:	0003023c 	.word	0x0003023c

000d4664 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4664:	b508      	push	{r3, lr}
   d4666:	4b02      	ldr	r3, [pc, #8]	; (d4670 <HAL_I2C_Write_Data+0xc>)
   d4668:	681b      	ldr	r3, [r3, #0]
   d466a:	6a1b      	ldr	r3, [r3, #32]
   d466c:	9301      	str	r3, [sp, #4]
   d466e:	bd08      	pop	{r3, pc}
   d4670:	00030228 	.word	0x00030228

000d4674 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4674:	b508      	push	{r3, lr}
   d4676:	4b02      	ldr	r3, [pc, #8]	; (d4680 <HAL_I2C_Available_Data+0xc>)
   d4678:	681b      	ldr	r3, [r3, #0]
   d467a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d467c:	9301      	str	r3, [sp, #4]
   d467e:	bd08      	pop	{r3, pc}
   d4680:	00030228 	.word	0x00030228

000d4684 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4684:	b508      	push	{r3, lr}
   d4686:	4b02      	ldr	r3, [pc, #8]	; (d4690 <HAL_I2C_Read_Data+0xc>)
   d4688:	681b      	ldr	r3, [r3, #0]
   d468a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d468c:	9301      	str	r3, [sp, #4]
   d468e:	bd08      	pop	{r3, pc}
   d4690:	00030228 	.word	0x00030228

000d4694 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4694:	b508      	push	{r3, lr}
   d4696:	4b02      	ldr	r3, [pc, #8]	; (d46a0 <HAL_I2C_Peek_Data+0xc>)
   d4698:	681b      	ldr	r3, [r3, #0]
   d469a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d469c:	9301      	str	r3, [sp, #4]
   d469e:	bd08      	pop	{r3, pc}
   d46a0:	00030228 	.word	0x00030228

000d46a4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d46a4:	b508      	push	{r3, lr}
   d46a6:	4b02      	ldr	r3, [pc, #8]	; (d46b0 <HAL_I2C_Flush_Data+0xc>)
   d46a8:	681b      	ldr	r3, [r3, #0]
   d46aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d46ac:	9301      	str	r3, [sp, #4]
   d46ae:	bd08      	pop	{r3, pc}
   d46b0:	00030228 	.word	0x00030228

000d46b4 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d46b4:	b508      	push	{r3, lr}
   d46b6:	4b02      	ldr	r3, [pc, #8]	; (d46c0 <HAL_I2C_Is_Enabled+0xc>)
   d46b8:	681b      	ldr	r3, [r3, #0]
   d46ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d46bc:	9301      	str	r3, [sp, #4]
   d46be:	bd08      	pop	{r3, pc}
   d46c0:	00030228 	.word	0x00030228

000d46c4 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d46c4:	b508      	push	{r3, lr}
   d46c6:	4b02      	ldr	r3, [pc, #8]	; (d46d0 <HAL_I2C_Init+0xc>)
   d46c8:	681b      	ldr	r3, [r3, #0]
   d46ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d46cc:	9301      	str	r3, [sp, #4]
   d46ce:	bd08      	pop	{r3, pc}
   d46d0:	00030228 	.word	0x00030228

000d46d4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d46d4:	b508      	push	{r3, lr}
   d46d6:	4b02      	ldr	r3, [pc, #8]	; (d46e0 <HAL_USB_USART_Init+0xc>)
   d46d8:	681b      	ldr	r3, [r3, #0]
   d46da:	681b      	ldr	r3, [r3, #0]
   d46dc:	9301      	str	r3, [sp, #4]
   d46de:	bd08      	pop	{r3, pc}
   d46e0:	0003024c 	.word	0x0003024c

000d46e4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d46e4:	b508      	push	{r3, lr}
   d46e6:	4b02      	ldr	r3, [pc, #8]	; (d46f0 <HAL_USB_USART_Begin+0xc>)
   d46e8:	681b      	ldr	r3, [r3, #0]
   d46ea:	685b      	ldr	r3, [r3, #4]
   d46ec:	9301      	str	r3, [sp, #4]
   d46ee:	bd08      	pop	{r3, pc}
   d46f0:	0003024c 	.word	0x0003024c

000d46f4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d46f4:	b508      	push	{r3, lr}
   d46f6:	4b02      	ldr	r3, [pc, #8]	; (d4700 <HAL_USB_USART_Available_Data+0xc>)
   d46f8:	681b      	ldr	r3, [r3, #0]
   d46fa:	691b      	ldr	r3, [r3, #16]
   d46fc:	9301      	str	r3, [sp, #4]
   d46fe:	bd08      	pop	{r3, pc}
   d4700:	0003024c 	.word	0x0003024c

000d4704 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4704:	b508      	push	{r3, lr}
   d4706:	4b02      	ldr	r3, [pc, #8]	; (d4710 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4708:	681b      	ldr	r3, [r3, #0]
   d470a:	695b      	ldr	r3, [r3, #20]
   d470c:	9301      	str	r3, [sp, #4]
   d470e:	bd08      	pop	{r3, pc}
   d4710:	0003024c 	.word	0x0003024c

000d4714 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4714:	b508      	push	{r3, lr}
   d4716:	4b02      	ldr	r3, [pc, #8]	; (d4720 <HAL_USB_USART_Receive_Data+0xc>)
   d4718:	681b      	ldr	r3, [r3, #0]
   d471a:	699b      	ldr	r3, [r3, #24]
   d471c:	9301      	str	r3, [sp, #4]
   d471e:	bd08      	pop	{r3, pc}
   d4720:	0003024c 	.word	0x0003024c

000d4724 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4724:	b508      	push	{r3, lr}
   d4726:	4b02      	ldr	r3, [pc, #8]	; (d4730 <HAL_USB_USART_Send_Data+0xc>)
   d4728:	681b      	ldr	r3, [r3, #0]
   d472a:	69db      	ldr	r3, [r3, #28]
   d472c:	9301      	str	r3, [sp, #4]
   d472e:	bd08      	pop	{r3, pc}
   d4730:	0003024c 	.word	0x0003024c

000d4734 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4734:	b508      	push	{r3, lr}
   d4736:	4b02      	ldr	r3, [pc, #8]	; (d4740 <HAL_USB_USART_Flush_Data+0xc>)
   d4738:	681b      	ldr	r3, [r3, #0]
   d473a:	6a1b      	ldr	r3, [r3, #32]
   d473c:	9301      	str	r3, [sp, #4]
   d473e:	bd08      	pop	{r3, pc}
   d4740:	0003024c 	.word	0x0003024c

000d4744 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4744:	b508      	push	{r3, lr}
   d4746:	4b02      	ldr	r3, [pc, #8]	; (d4750 <set_system_mode+0xc>)
   d4748:	681b      	ldr	r3, [r3, #0]
   d474a:	685b      	ldr	r3, [r3, #4]
   d474c:	9301      	str	r3, [sp, #4]
   d474e:	bd08      	pop	{r3, pc}
   d4750:	00030220 	.word	0x00030220

000d4754 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4754:	b508      	push	{r3, lr}
   d4756:	4b02      	ldr	r3, [pc, #8]	; (d4760 <system_delay_ms+0xc>)
   d4758:	681b      	ldr	r3, [r3, #0]
   d475a:	695b      	ldr	r3, [r3, #20]
   d475c:	9301      	str	r3, [sp, #4]
   d475e:	bd08      	pop	{r3, pc}
   d4760:	00030220 	.word	0x00030220

000d4764 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4764:	b508      	push	{r3, lr}
   d4766:	4b02      	ldr	r3, [pc, #8]	; (d4770 <application_thread_current+0xc>)
   d4768:	681b      	ldr	r3, [r3, #0]
   d476a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d476c:	9301      	str	r3, [sp, #4]
   d476e:	bd08      	pop	{r3, pc}
   d4770:	00030220 	.word	0x00030220

000d4774 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4774:	b508      	push	{r3, lr}
   d4776:	4b02      	ldr	r3, [pc, #8]	; (d4780 <application_thread_invoke+0xc>)
   d4778:	681b      	ldr	r3, [r3, #0]
   d477a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d477c:	9301      	str	r3, [sp, #4]
   d477e:	bd08      	pop	{r3, pc}
   d4780:	00030220 	.word	0x00030220

000d4784 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4784:	b508      	push	{r3, lr}
   d4786:	4b03      	ldr	r3, [pc, #12]	; (d4794 <system_ctrl_set_app_request_handler+0x10>)
   d4788:	681b      	ldr	r3, [r3, #0]
   d478a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d478e:	9301      	str	r3, [sp, #4]
   d4790:	bd08      	pop	{r3, pc}
   d4792:	0000      	.short	0x0000
   d4794:	00030220 	.word	0x00030220

000d4798 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4798:	b508      	push	{r3, lr}
   d479a:	4b03      	ldr	r3, [pc, #12]	; (d47a8 <system_ctrl_set_result+0x10>)
   d479c:	681b      	ldr	r3, [r3, #0]
   d479e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d47a2:	9301      	str	r3, [sp, #4]
   d47a4:	bd08      	pop	{r3, pc}
   d47a6:	0000      	.short	0x0000
   d47a8:	00030220 	.word	0x00030220

000d47ac <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d47ac:	b508      	push	{r3, lr}
   d47ae:	4b02      	ldr	r3, [pc, #8]	; (d47b8 <network_connect+0xc>)
   d47b0:	681b      	ldr	r3, [r3, #0]
   d47b2:	685b      	ldr	r3, [r3, #4]
   d47b4:	9301      	str	r3, [sp, #4]
   d47b6:	bd08      	pop	{r3, pc}
   d47b8:	00030240 	.word	0x00030240

000d47bc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d47bc:	b508      	push	{r3, lr}
   d47be:	4b02      	ldr	r3, [pc, #8]	; (d47c8 <network_connecting+0xc>)
   d47c0:	681b      	ldr	r3, [r3, #0]
   d47c2:	689b      	ldr	r3, [r3, #8]
   d47c4:	9301      	str	r3, [sp, #4]
   d47c6:	bd08      	pop	{r3, pc}
   d47c8:	00030240 	.word	0x00030240

000d47cc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d47cc:	b508      	push	{r3, lr}
   d47ce:	4b02      	ldr	r3, [pc, #8]	; (d47d8 <network_disconnect+0xc>)
   d47d0:	681b      	ldr	r3, [r3, #0]
   d47d2:	68db      	ldr	r3, [r3, #12]
   d47d4:	9301      	str	r3, [sp, #4]
   d47d6:	bd08      	pop	{r3, pc}
   d47d8:	00030240 	.word	0x00030240

000d47dc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d47dc:	b508      	push	{r3, lr}
   d47de:	4b02      	ldr	r3, [pc, #8]	; (d47e8 <network_ready+0xc>)
   d47e0:	681b      	ldr	r3, [r3, #0]
   d47e2:	691b      	ldr	r3, [r3, #16]
   d47e4:	9301      	str	r3, [sp, #4]
   d47e6:	bd08      	pop	{r3, pc}
   d47e8:	00030240 	.word	0x00030240

000d47ec <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d47ec:	b508      	push	{r3, lr}
   d47ee:	4b02      	ldr	r3, [pc, #8]	; (d47f8 <network_on+0xc>)
   d47f0:	681b      	ldr	r3, [r3, #0]
   d47f2:	695b      	ldr	r3, [r3, #20]
   d47f4:	9301      	str	r3, [sp, #4]
   d47f6:	bd08      	pop	{r3, pc}
   d47f8:	00030240 	.word	0x00030240

000d47fc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d47fc:	b508      	push	{r3, lr}
   d47fe:	4b02      	ldr	r3, [pc, #8]	; (d4808 <network_off+0xc>)
   d4800:	681b      	ldr	r3, [r3, #0]
   d4802:	699b      	ldr	r3, [r3, #24]
   d4804:	9301      	str	r3, [sp, #4]
   d4806:	bd08      	pop	{r3, pc}
   d4808:	00030240 	.word	0x00030240

000d480c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d480c:	b508      	push	{r3, lr}
   d480e:	4b02      	ldr	r3, [pc, #8]	; (d4818 <network_listen+0xc>)
   d4810:	681b      	ldr	r3, [r3, #0]
   d4812:	69db      	ldr	r3, [r3, #28]
   d4814:	9301      	str	r3, [sp, #4]
   d4816:	bd08      	pop	{r3, pc}
   d4818:	00030240 	.word	0x00030240

000d481c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d481c:	b508      	push	{r3, lr}
   d481e:	4b02      	ldr	r3, [pc, #8]	; (d4828 <network_listening+0xc>)
   d4820:	681b      	ldr	r3, [r3, #0]
   d4822:	6a1b      	ldr	r3, [r3, #32]
   d4824:	9301      	str	r3, [sp, #4]
   d4826:	bd08      	pop	{r3, pc}
   d4828:	00030240 	.word	0x00030240

000d482c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d482c:	b508      	push	{r3, lr}
   d482e:	4b02      	ldr	r3, [pc, #8]	; (d4838 <network_set_listen_timeout+0xc>)
   d4830:	681b      	ldr	r3, [r3, #0]
   d4832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4834:	9301      	str	r3, [sp, #4]
   d4836:	bd08      	pop	{r3, pc}
   d4838:	00030240 	.word	0x00030240

000d483c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d483c:	b508      	push	{r3, lr}
   d483e:	4b02      	ldr	r3, [pc, #8]	; (d4848 <network_get_listen_timeout+0xc>)
   d4840:	681b      	ldr	r3, [r3, #0]
   d4842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4844:	9301      	str	r3, [sp, #4]
   d4846:	bd08      	pop	{r3, pc}
   d4848:	00030240 	.word	0x00030240

000d484c <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d484c:	b508      	push	{r3, lr}
   d484e:	4b02      	ldr	r3, [pc, #8]	; (d4858 <spark_cloud_flag_connected+0xc>)
   d4850:	681b      	ldr	r3, [r3, #0]
   d4852:	695b      	ldr	r3, [r3, #20]
   d4854:	9301      	str	r3, [sp, #4]
   d4856:	bd08      	pop	{r3, pc}
   d4858:	00030244 	.word	0x00030244

000d485c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d485c:	b508      	push	{r3, lr}
   d485e:	4b02      	ldr	r3, [pc, #8]	; (d4868 <spark_send_event+0xc>)
   d4860:	681b      	ldr	r3, [r3, #0]
   d4862:	6a1b      	ldr	r3, [r3, #32]
   d4864:	9301      	str	r3, [sp, #4]
   d4866:	bd08      	pop	{r3, pc}
   d4868:	00030244 	.word	0x00030244

000d486c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d486c:	b508      	push	{r3, lr}
   d486e:	4b02      	ldr	r3, [pc, #8]	; (d4878 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4870:	681b      	ldr	r3, [r3, #0]
   d4872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4874:	9301      	str	r3, [sp, #4]
   d4876:	bd08      	pop	{r3, pc}
   d4878:	00030244 	.word	0x00030244

000d487c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d487c:	b508      	push	{r3, lr}
   d487e:	4b02      	ldr	r3, [pc, #8]	; (d4888 <malloc+0xc>)
   d4880:	681b      	ldr	r3, [r3, #0]
   d4882:	681b      	ldr	r3, [r3, #0]
   d4884:	9301      	str	r3, [sp, #4]
   d4886:	bd08      	pop	{r3, pc}
   d4888:	0003021c 	.word	0x0003021c

000d488c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d488c:	b508      	push	{r3, lr}
   d488e:	4b02      	ldr	r3, [pc, #8]	; (d4898 <free+0xc>)
   d4890:	681b      	ldr	r3, [r3, #0]
   d4892:	685b      	ldr	r3, [r3, #4]
   d4894:	9301      	str	r3, [sp, #4]
   d4896:	bd08      	pop	{r3, pc}
   d4898:	0003021c 	.word	0x0003021c

000d489c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d489c:	b508      	push	{r3, lr}
   d489e:	4b02      	ldr	r3, [pc, #8]	; (d48a8 <realloc+0xc>)
   d48a0:	681b      	ldr	r3, [r3, #0]
   d48a2:	689b      	ldr	r3, [r3, #8]
   d48a4:	9301      	str	r3, [sp, #4]
   d48a6:	bd08      	pop	{r3, pc}
   d48a8:	0003021c 	.word	0x0003021c

000d48ac <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d48ac:	b508      	push	{r3, lr}
   d48ae:	4b02      	ldr	r3, [pc, #8]	; (d48b8 <abort+0xc>)
   d48b0:	681b      	ldr	r3, [r3, #0]
   d48b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d48b4:	9301      	str	r3, [sp, #4]
   d48b6:	bd08      	pop	{r3, pc}
   d48b8:	0003021c 	.word	0x0003021c

000d48bc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d48bc:	b508      	push	{r3, lr}
   d48be:	4b02      	ldr	r3, [pc, #8]	; (d48c8 <_malloc_r+0xc>)
   d48c0:	681b      	ldr	r3, [r3, #0]
   d48c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d48c4:	9301      	str	r3, [sp, #4]
   d48c6:	bd08      	pop	{r3, pc}
   d48c8:	0003021c 	.word	0x0003021c

000d48cc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d48cc:	2200      	movs	r2, #0
   d48ce:	4611      	mov	r1, r2
   d48d0:	6840      	ldr	r0, [r0, #4]
   d48d2:	f7ff bfa3 	b.w	d481c <network_listening>

000d48d6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d48d6:	2200      	movs	r2, #0
   d48d8:	4611      	mov	r1, r2
   d48da:	6840      	ldr	r0, [r0, #4]
   d48dc:	f7ff bfae 	b.w	d483c <network_get_listen_timeout>

000d48e0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d48e0:	2200      	movs	r2, #0
   d48e2:	6840      	ldr	r0, [r0, #4]
   d48e4:	f7ff bfa2 	b.w	d482c <network_set_listen_timeout>

000d48e8 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d48e8:	2200      	movs	r2, #0
   d48ea:	f081 0101 	eor.w	r1, r1, #1
   d48ee:	6840      	ldr	r0, [r0, #4]
   d48f0:	f7ff bf8c 	b.w	d480c <network_listen>

000d48f4 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d48f4:	2300      	movs	r3, #0
   d48f6:	461a      	mov	r2, r3
   d48f8:	4619      	mov	r1, r3
   d48fa:	6840      	ldr	r0, [r0, #4]
   d48fc:	f7ff bf7e 	b.w	d47fc <network_off>

000d4900 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4900:	2300      	movs	r3, #0
   d4902:	461a      	mov	r2, r3
   d4904:	4619      	mov	r1, r3
   d4906:	6840      	ldr	r0, [r0, #4]
   d4908:	f7ff bf70 	b.w	d47ec <network_on>

000d490c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d490c:	2200      	movs	r2, #0
   d490e:	4611      	mov	r1, r2
   d4910:	6840      	ldr	r0, [r0, #4]
   d4912:	f7ff bf63 	b.w	d47dc <network_ready>

000d4916 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4916:	2200      	movs	r2, #0
   d4918:	4611      	mov	r1, r2
   d491a:	6840      	ldr	r0, [r0, #4]
   d491c:	f7ff bf4e 	b.w	d47bc <network_connecting>

000d4920 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4920:	2200      	movs	r2, #0
   d4922:	2102      	movs	r1, #2
   d4924:	6840      	ldr	r0, [r0, #4]
   d4926:	f7ff bf51 	b.w	d47cc <network_disconnect>

000d492a <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d492a:	2300      	movs	r3, #0
   d492c:	461a      	mov	r2, r3
   d492e:	6840      	ldr	r0, [r0, #4]
   d4930:	f7ff bf3c 	b.w	d47ac <network_connect>

000d4934 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4934:	4b02      	ldr	r3, [pc, #8]	; (d4940 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4936:	2203      	movs	r2, #3
   d4938:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d493a:	4a02      	ldr	r2, [pc, #8]	; (d4944 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d493c:	601a      	str	r2, [r3, #0]
   d493e:	4770      	bx	lr
   d4940:	2003e3a4 	.word	0x2003e3a4
   d4944:	000d6bd0 	.word	0x000d6bd0

000d4948 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d4948:	4770      	bx	lr

000d494a <_ZN8SPIClassD0Ev>:
   d494a:	b510      	push	{r4, lr}
   d494c:	210c      	movs	r1, #12
   d494e:	4604      	mov	r4, r0
   d4950:	f001 f9da 	bl	d5d08 <_ZdlPvj>
   d4954:	4620      	mov	r0, r4
   d4956:	bd10      	pop	{r4, pc}

000d4958 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4958:	b510      	push	{r4, lr}
   d495a:	4b05      	ldr	r3, [pc, #20]	; (d4970 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x18>)
   d495c:	6003      	str	r3, [r0, #0]
   d495e:	4604      	mov	r4, r0
{
    _spi = spi;
   d4960:	7101      	strb	r1, [r0, #4]
    HAL_SPI_Init(_spi);
   d4962:	4608      	mov	r0, r1
   d4964:	f7ff fdee 	bl	d4544 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4968:	2300      	movs	r3, #0
   d496a:	60a3      	str	r3, [r4, #8]
}
   d496c:	4620      	mov	r0, r4
   d496e:	bd10      	pop	{r4, pc}
   d4970:	000d6c04 	.word	0x000d6c04

000d4974 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d4974:	7900      	ldrb	r0, [r0, #4]
   d4976:	f7ff bded 	b.w	d4554 <HAL_SPI_Is_Enabled>

000d497a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d497a:	b510      	push	{r4, lr}
   d497c:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d497e:	6800      	ldr	r0, [r0, #0]
   d4980:	b118      	cbz	r0, d498a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d4982:	f7ff ff83 	bl	d488c <free>
            wakeupSource_ = nullptr;
   d4986:	2300      	movs	r3, #0
   d4988:	6023      	str	r3, [r4, #0]
   d498a:	bd10      	pop	{r4, pc}

000d498c <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d498c:	b510      	push	{r4, lr}
   d498e:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d4990:	f7ff fff3 	bl	d497a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4994:	4620      	mov	r0, r4
   d4996:	bd10      	pop	{r4, pc}

000d4998 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4998:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d499a:	4c09      	ldr	r4, [pc, #36]	; (d49c0 <_GLOBAL__sub_I_System+0x28>)
   d499c:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d499e:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d49a2:	6020      	str	r0, [r4, #0]
   d49a4:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d49a6:	71a0      	strb	r0, [r4, #6]
   d49a8:	8120      	strh	r0, [r4, #8]
   d49aa:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d49ac:	f7ff feca 	bl	d4744 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d49b0:	4620      	mov	r0, r4
   d49b2:	4a04      	ldr	r2, [pc, #16]	; (d49c4 <_GLOBAL__sub_I_System+0x2c>)
   d49b4:	4904      	ldr	r1, [pc, #16]	; (d49c8 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d49b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d49ba:	f001 b997 	b.w	d5cec <__aeabi_atexit>
   d49be:	bf00      	nop
   d49c0:	2003e3ac 	.word	0x2003e3ac
   d49c4:	2003e340 	.word	0x2003e340
   d49c8:	000d498d 	.word	0x000d498d

000d49cc <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d49cc:	b510      	push	{r4, lr}
   d49ce:	4604      	mov	r4, r0
{
	free(buffer);
   d49d0:	6800      	ldr	r0, [r0, #0]
   d49d2:	f7ff ff5b 	bl	d488c <free>
}
   d49d6:	4620      	mov	r0, r4
   d49d8:	bd10      	pop	{r4, pc}

000d49da <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d49da:	b510      	push	{r4, lr}
   d49dc:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d49de:	6800      	ldr	r0, [r0, #0]
   d49e0:	b108      	cbz	r0, d49e6 <_ZN6String10invalidateEv+0xc>
   d49e2:	f7ff ff53 	bl	d488c <free>
	buffer = NULL;
   d49e6:	2300      	movs	r3, #0
   d49e8:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d49ea:	60a3      	str	r3, [r4, #8]
   d49ec:	6063      	str	r3, [r4, #4]
   d49ee:	bd10      	pop	{r4, pc}

000d49f0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d49f0:	b538      	push	{r3, r4, r5, lr}
   d49f2:	4604      	mov	r4, r0
   d49f4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d49f6:	6800      	ldr	r0, [r0, #0]
   d49f8:	3101      	adds	r1, #1
   d49fa:	f7ff ff4f 	bl	d489c <realloc>
	if (newbuffer) {
   d49fe:	b110      	cbz	r0, d4a06 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4a00:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d4a04:	2001      	movs	r0, #1
	}
	return 0;
}
   d4a06:	bd38      	pop	{r3, r4, r5, pc}

000d4a08 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4a08:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4a0a:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4a0c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4a0e:	b113      	cbz	r3, d4a16 <_ZN6String7reserveEj+0xe>
   d4a10:	6843      	ldr	r3, [r0, #4]
   d4a12:	428b      	cmp	r3, r1
   d4a14:	d207      	bcs.n	d4a26 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d4a16:	4620      	mov	r0, r4
   d4a18:	f7ff ffea 	bl	d49f0 <_ZN6String12changeBufferEj>
   d4a1c:	b120      	cbz	r0, d4a28 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d4a1e:	68a3      	ldr	r3, [r4, #8]
   d4a20:	b90b      	cbnz	r3, d4a26 <_ZN6String7reserveEj+0x1e>
   d4a22:	6822      	ldr	r2, [r4, #0]
   d4a24:	7013      	strb	r3, [r2, #0]
   d4a26:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d4a28:	bd10      	pop	{r4, pc}

000d4a2a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4a2a:	b570      	push	{r4, r5, r6, lr}
   d4a2c:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d4a2e:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4a30:	4604      	mov	r4, r0
   d4a32:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d4a34:	f7ff ffe8 	bl	d4a08 <_ZN6String7reserveEj>
   d4a38:	b918      	cbnz	r0, d4a42 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d4a3a:	4620      	mov	r0, r4
   d4a3c:	f7ff ffcd 	bl	d49da <_ZN6String10invalidateEv>
		return *this;
   d4a40:	e009      	b.n	d4a56 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d4a42:	462a      	mov	r2, r5
   d4a44:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d4a46:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d4a48:	6820      	ldr	r0, [r4, #0]
   d4a4a:	f001 ff79 	bl	d6940 <memcpy>
	buffer[len] = 0;
   d4a4e:	6822      	ldr	r2, [r4, #0]
   d4a50:	68a3      	ldr	r3, [r4, #8]
   d4a52:	2100      	movs	r1, #0
   d4a54:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d4a56:	4620      	mov	r0, r4
   d4a58:	bd70      	pop	{r4, r5, r6, pc}

000d4a5a <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4a5a:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4a5c:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4a5e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4a60:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4a62:	6043      	str	r3, [r0, #4]
	len = 0;
   d4a64:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4a66:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d4a68:	460d      	mov	r5, r1
   d4a6a:	b139      	cbz	r1, d4a7c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d4a6c:	4608      	mov	r0, r1
   d4a6e:	f001 fff8 	bl	d6a62 <strlen>
   d4a72:	4629      	mov	r1, r5
   d4a74:	4602      	mov	r2, r0
   d4a76:	4620      	mov	r0, r4
   d4a78:	f7ff ffd7 	bl	d4a2a <_ZN6String4copyEPKcj>
}
   d4a7c:	4620      	mov	r0, r4
   d4a7e:	bd38      	pop	{r3, r4, r5, pc}

000d4a80 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4a80:	b510      	push	{r4, lr}
   d4a82:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4a84:	6800      	ldr	r0, [r0, #0]
   d4a86:	b108      	cbz	r0, d4a8c <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4a88:	f7ff fd9c 	bl	d45c4 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d4a8c:	4620      	mov	r0, r4
   d4a8e:	bd10      	pop	{r4, pc}

000d4a90 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4a90:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4a92:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4a94:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4a96:	689b      	ldr	r3, [r3, #8]
   d4a98:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4a9a:	68a3      	ldr	r3, [r4, #8]
   d4a9c:	3b01      	subs	r3, #1
   d4a9e:	60a3      	str	r3, [r4, #8]
   d4aa0:	b92b      	cbnz	r3, d4aae <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d4aa2:	6823      	ldr	r3, [r4, #0]
   d4aa4:	4620      	mov	r0, r4
   d4aa6:	68db      	ldr	r3, [r3, #12]
        }
    }
   d4aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d4aac:	4718      	bx	r3
   d4aae:	bd10      	pop	{r4, pc}

000d4ab0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4ab0:	680b      	ldr	r3, [r1, #0]
   d4ab2:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4ab4:	b113      	cbz	r3, d4abc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d4ab6:	685a      	ldr	r2, [r3, #4]
   d4ab8:	3201      	adds	r2, #1
   d4aba:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d4abc:	4770      	bx	lr

000d4abe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4abe:	b510      	push	{r4, lr}
   d4ac0:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d4ac2:	6800      	ldr	r0, [r0, #0]
   d4ac4:	b128      	cbz	r0, d4ad2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4ac6:	6843      	ldr	r3, [r0, #4]
   d4ac8:	3b01      	subs	r3, #1
   d4aca:	6043      	str	r3, [r0, #4]
   d4acc:	b90b      	cbnz	r3, d4ad2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d4ace:	f7ff ffdf 	bl	d4a90 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4ad2:	4620      	mov	r0, r4
   d4ad4:	bd10      	pop	{r4, pc}
	...

000d4ad8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4ad8:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4ada:	4c06      	ldr	r4, [pc, #24]	; (d4af4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4adc:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d4ade:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4ae0:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4ae2:	f7ff fd67 	bl	d45b4 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4ae6:	4620      	mov	r0, r4
   d4ae8:	4a03      	ldr	r2, [pc, #12]	; (d4af8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4aea:	4904      	ldr	r1, [pc, #16]	; (d4afc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4aec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4af0:	f001 b8fc 	b.w	d5cec <__aeabi_atexit>
   d4af4:	2003e3b8 	.word	0x2003e3b8
   d4af8:	2003e340 	.word	0x2003e340
   d4afc:	000d4a81 	.word	0x000d4a81

000d4b00 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4b02:	4606      	mov	r6, r0
   d4b04:	460d      	mov	r5, r1
   d4b06:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4b08:	2400      	movs	r4, #0
  while (size--) {
   d4b0a:	42bd      	cmp	r5, r7
   d4b0c:	d00c      	beq.n	d4b28 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4b0e:	6833      	ldr	r3, [r6, #0]
   d4b10:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4b14:	689b      	ldr	r3, [r3, #8]
   d4b16:	4630      	mov	r0, r6
   d4b18:	4798      	blx	r3
     if (chunk>=0)
   d4b1a:	2800      	cmp	r0, #0
   d4b1c:	db01      	blt.n	d4b22 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4b1e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4b20:	e7f3      	b.n	d4b0a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4b22:	2c00      	cmp	r4, #0
   d4b24:	bf08      	it	eq
   d4b26:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4b28:	4620      	mov	r0, r4
   d4b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4b2c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4b2c:	b570      	push	{r4, r5, r6, lr}
   d4b2e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4b30:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4b32:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4b34:	b149      	cbz	r1, d4b4a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4b36:	f001 ff94 	bl	d6a62 <strlen>
   d4b3a:	682b      	ldr	r3, [r5, #0]
   d4b3c:	4602      	mov	r2, r0
   d4b3e:	4621      	mov	r1, r4
   d4b40:	4628      	mov	r0, r5
   d4b42:	68db      	ldr	r3, [r3, #12]
    }
   d4b44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4b48:	4718      	bx	r3
    }
   d4b4a:	bd70      	pop	{r4, r5, r6, pc}

000d4b4c <_ZN5Print5printEPKc>:
   d4b4c:	b508      	push	{r3, lr}
   d4b4e:	f7ff ffed 	bl	d4b2c <_ZN5Print5writeEPKc>
   d4b52:	bd08      	pop	{r3, pc}

000d4b54 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4b54:	6803      	ldr	r3, [r0, #0]
   d4b56:	689b      	ldr	r3, [r3, #8]
   d4b58:	4718      	bx	r3

000d4b5a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4b5a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4b5c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4b5e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4b60:	f7ff fff8 	bl	d4b54 <_ZN5Print5printEc>
  n += print('\n');
   d4b64:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d4b66:	4604      	mov	r4, r0
  n += print('\n');
   d4b68:	4628      	mov	r0, r5
   d4b6a:	f7ff fff3 	bl	d4b54 <_ZN5Print5printEc>
  return n;
}
   d4b6e:	4420      	add	r0, r4
   d4b70:	bd38      	pop	{r3, r4, r5, pc}

000d4b72 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d4b72:	b538      	push	{r3, r4, r5, lr}
   d4b74:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4b76:	f7ff ffd9 	bl	d4b2c <_ZN5Print5writeEPKc>
   d4b7a:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d4b7c:	4628      	mov	r0, r5
   d4b7e:	f7ff ffec 	bl	d4b5a <_ZN5Print7printlnEv>
  return n;
}
   d4b82:	4420      	add	r0, r4
   d4b84:	bd38      	pop	{r3, r4, r5, pc}

000d4b86 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4b86:	b530      	push	{r4, r5, lr}
   d4b88:	b08b      	sub	sp, #44	; 0x2c
   d4b8a:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4b8c:	2100      	movs	r1, #0
   d4b8e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4b92:	2a01      	cmp	r2, #1
   d4b94:	bf98      	it	ls
   d4b96:	220a      	movls	r2, #10
   d4b98:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d4b9c:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d4ba0:	fb05 3312 	mls	r3, r5, r2, r3
   d4ba4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4ba8:	2b09      	cmp	r3, #9
   d4baa:	bf94      	ite	ls
   d4bac:	3330      	addls	r3, #48	; 0x30
   d4bae:	3337      	addhi	r3, #55	; 0x37
   d4bb0:	b2db      	uxtb	r3, r3
   d4bb2:	4621      	mov	r1, r4
   d4bb4:	f804 3901 	strb.w	r3, [r4], #-1
   d4bb8:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4bba:	2d00      	cmp	r5, #0
   d4bbc:	d1ee      	bne.n	d4b9c <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4bbe:	f7ff ffb5 	bl	d4b2c <_ZN5Print5writeEPKc>
}
   d4bc2:	b00b      	add	sp, #44	; 0x2c
   d4bc4:	bd30      	pop	{r4, r5, pc}
	...

000d4bc8 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d4bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4bcc:	ec57 6b10 	vmov	r6, r7, d0
   d4bd0:	4682      	mov	sl, r0
   d4bd2:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d4bd4:	ee10 2a10 	vmov	r2, s0
   d4bd8:	463b      	mov	r3, r7
   d4bda:	ee10 0a10 	vmov	r0, s0
   d4bde:	4639      	mov	r1, r7
   d4be0:	f001 fe42 	bl	d6868 <__aeabi_dcmpun>
   d4be4:	b108      	cbz	r0, d4bea <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4be6:	494e      	ldr	r1, [pc, #312]	; (d4d20 <_ZN5Print10printFloatEdh+0x158>)
   d4be8:	e012      	b.n	d4c10 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d4bea:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d4bee:	f04f 32ff 	mov.w	r2, #4294967295
   d4bf2:	4b4c      	ldr	r3, [pc, #304]	; (d4d24 <_ZN5Print10printFloatEdh+0x15c>)
   d4bf4:	4630      	mov	r0, r6
   d4bf6:	4649      	mov	r1, r9
   d4bf8:	f001 fe36 	bl	d6868 <__aeabi_dcmpun>
   d4bfc:	b968      	cbnz	r0, d4c1a <_ZN5Print10printFloatEdh+0x52>
   d4bfe:	f04f 32ff 	mov.w	r2, #4294967295
   d4c02:	4b48      	ldr	r3, [pc, #288]	; (d4d24 <_ZN5Print10printFloatEdh+0x15c>)
   d4c04:	4630      	mov	r0, r6
   d4c06:	4649      	mov	r1, r9
   d4c08:	f001 fe10 	bl	d682c <__aeabi_dcmple>
   d4c0c:	b928      	cbnz	r0, d4c1a <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4c0e:	4946      	ldr	r1, [pc, #280]	; (d4d28 <_ZN5Print10printFloatEdh+0x160>)
   d4c10:	4650      	mov	r0, sl
   d4c12:	f7ff ff8b 	bl	d4b2c <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d4c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d4c1a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d4c1e:	4b43      	ldr	r3, [pc, #268]	; (d4d2c <_ZN5Print10printFloatEdh+0x164>)
   d4c20:	4630      	mov	r0, r6
   d4c22:	4639      	mov	r1, r7
   d4c24:	f001 fe16 	bl	d6854 <__aeabi_dcmpgt>
   d4c28:	b108      	cbz	r0, d4c2e <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4c2a:	4941      	ldr	r1, [pc, #260]	; (d4d30 <_ZN5Print10printFloatEdh+0x168>)
   d4c2c:	e7f0      	b.n	d4c10 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d4c2e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d4c32:	4b40      	ldr	r3, [pc, #256]	; (d4d34 <_ZN5Print10printFloatEdh+0x16c>)
   d4c34:	4630      	mov	r0, r6
   d4c36:	4639      	mov	r1, r7
   d4c38:	f001 fdee 	bl	d6818 <__aeabi_dcmplt>
   d4c3c:	2800      	cmp	r0, #0
   d4c3e:	d1f4      	bne.n	d4c2a <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d4c40:	2200      	movs	r2, #0
   d4c42:	2300      	movs	r3, #0
   d4c44:	4630      	mov	r0, r6
   d4c46:	4639      	mov	r1, r7
   d4c48:	f001 fde6 	bl	d6818 <__aeabi_dcmplt>
   d4c4c:	b140      	cbz	r0, d4c60 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d4c4e:	212d      	movs	r1, #45	; 0x2d
   d4c50:	4650      	mov	r0, sl
   d4c52:	f7ff ff7f 	bl	d4b54 <_ZN5Print5printEc>
     number = -number;
   d4c56:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d4c5a:	4604      	mov	r4, r0
     number = -number;
   d4c5c:	461f      	mov	r7, r3
   d4c5e:	e000      	b.n	d4c62 <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d4c60:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d4c62:	4935      	ldr	r1, [pc, #212]	; (d4d38 <_ZN5Print10printFloatEdh+0x170>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d4c64:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d4c68:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d4c6a:	fa5f f388 	uxtb.w	r3, r8
   d4c6e:	429d      	cmp	r5, r3
   d4c70:	d906      	bls.n	d4c80 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d4c72:	2200      	movs	r2, #0
   d4c74:	4b31      	ldr	r3, [pc, #196]	; (d4d3c <_ZN5Print10printFloatEdh+0x174>)
   d4c76:	f001 fc87 	bl	d6588 <__aeabi_ddiv>
   d4c7a:	f108 0801 	add.w	r8, r8, #1
   d4c7e:	e7f4      	b.n	d4c6a <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d4c80:	4632      	mov	r2, r6
   d4c82:	463b      	mov	r3, r7
   d4c84:	f001 f9a4 	bl	d5fd0 <__adddf3>
   d4c88:	460f      	mov	r7, r1
   d4c8a:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d4c8c:	f001 fe2a 	bl	d68e4 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4c90:	220a      	movs	r2, #10
   d4c92:	4601      	mov	r1, r0
   d4c94:	4680      	mov	r8, r0
   d4c96:	4650      	mov	r0, sl
   d4c98:	f7ff ff75 	bl	d4b86 <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
   d4c9c:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d4c9e:	b3e5      	cbz	r5, d4d1a <_ZN5Print10printFloatEdh+0x152>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d4ca0:	4640      	mov	r0, r8
   d4ca2:	f001 fad1 	bl	d6248 <__aeabi_ui2d>
   d4ca6:	4602      	mov	r2, r0
   d4ca8:	460b      	mov	r3, r1
   d4caa:	4630      	mov	r0, r6
   d4cac:	4639      	mov	r1, r7
   d4cae:	f001 f98d 	bl	d5fcc <__aeabi_dsub>
   d4cb2:	4606      	mov	r6, r0
   d4cb4:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4cb6:	4650      	mov	r0, sl
   d4cb8:	4921      	ldr	r1, [pc, #132]	; (d4d40 <_ZN5Print10printFloatEdh+0x178>)
   d4cba:	f7ff ff37 	bl	d4b2c <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d4cbe:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d4cc0:	2200      	movs	r2, #0
   d4cc2:	4b1e      	ldr	r3, [pc, #120]	; (d4d3c <_ZN5Print10printFloatEdh+0x174>)
   d4cc4:	4630      	mov	r0, r6
   d4cc6:	4639      	mov	r1, r7
   d4cc8:	f001 fb34 	bl	d6334 <__aeabi_dmul>
   d4ccc:	4606      	mov	r6, r0
   d4cce:	460f      	mov	r7, r1
    int toPrint = int(remainder);
   d4cd0:	f001 fde0 	bl	d6894 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d4cd4:	f1b0 0900 	subs.w	r9, r0, #0
   d4cd8:	da07      	bge.n	d4cea <_ZN5Print10printFloatEdh+0x122>
            t = print('-');
   d4cda:	212d      	movs	r1, #45	; 0x2d
   d4cdc:	4650      	mov	r0, sl
   d4cde:	f7ff ff39 	bl	d4b54 <_ZN5Print5printEc>
            val = -n;
   d4ce2:	f1c9 0100 	rsb	r1, r9, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d4ce6:	4680      	mov	r8, r0
   d4ce8:	e002      	b.n	d4cf0 <_ZN5Print10printFloatEdh+0x128>
            val = -n;
        } else {
            val = n;
   d4cea:	4649      	mov	r1, r9
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d4cec:	f04f 0800 	mov.w	r8, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4cf0:	220a      	movs	r2, #10
   d4cf2:	4650      	mov	r0, sl
   d4cf4:	f7ff ff47 	bl	d4b86 <_ZN5Print11printNumberEmh>
    n += print(toPrint);
   d4cf8:	4440      	add	r0, r8
   d4cfa:	4404      	add	r4, r0
    remainder -= toPrint;
   d4cfc:	4648      	mov	r0, r9
   d4cfe:	f001 fab3 	bl	d6268 <__aeabi_i2d>
   d4d02:	4602      	mov	r2, r0
   d4d04:	460b      	mov	r3, r1
   d4d06:	4630      	mov	r0, r6
   d4d08:	4639      	mov	r1, r7
   d4d0a:	f001 f95f 	bl	d5fcc <__aeabi_dsub>
   d4d0e:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d4d10:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d4d14:	4606      	mov	r6, r0
   d4d16:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d4d18:	d1d2      	bne.n	d4cc0 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d4d1a:	4620      	mov	r0, r4
   d4d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4d20:	000d6c0c 	.word	0x000d6c0c
   d4d24:	7fefffff 	.word	0x7fefffff
   d4d28:	000d6c16 	.word	0x000d6c16
   d4d2c:	41efffff 	.word	0x41efffff
   d4d30:	000d6c10 	.word	0x000d6c10
   d4d34:	c1efffff 	.word	0xc1efffff
   d4d38:	3fe00000 	.word	0x3fe00000
   d4d3c:	40240000 	.word	0x40240000
   d4d40:	000d6c14 	.word	0x000d6c14

000d4d44 <_ZN5Print5printEfi>:
{
  return write(c);
}

size_t Print::print(float n, int digits)
{
   d4d44:	b538      	push	{r3, r4, r5, lr}
   d4d46:	4604      	mov	r4, r0
  return printFloat((double)n, digits);
   d4d48:	ee10 0a10 	vmov	r0, s0
   d4d4c:	b2cd      	uxtb	r5, r1
   d4d4e:	f001 fa9d 	bl	d628c <__aeabi_f2d>
   d4d52:	ec41 0b10 	vmov	d0, r0, r1
   d4d56:	4629      	mov	r1, r5
   d4d58:	4620      	mov	r0, r4
}
   d4d5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return write(c);
}

size_t Print::print(float n, int digits)
{
  return printFloat((double)n, digits);
   d4d5e:	f7ff bf33 	b.w	d4bc8 <_ZN5Print10printFloatEdh>

000d4d62 <_ZN5Print7printlnEdi>:
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d4d62:	b538      	push	{r3, r4, r5, lr}
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d4d64:	b2c9      	uxtb	r1, r1
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d4d66:	4605      	mov	r5, r0
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d4d68:	f7ff ff2e 	bl	d4bc8 <_ZN5Print10printFloatEdh>
   d4d6c:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d4d6e:	4628      	mov	r0, r5
   d4d70:	f7ff fef3 	bl	d4b5a <_ZN5Print7printlnEv>
  return n;
}
   d4d74:	4420      	add	r0, r4
   d4d76:	bd38      	pop	{r3, r4, r5, pc}

000d4d78 <_ZN5Print7printlnEfi>:
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d4d78:	b538      	push	{r3, r4, r5, lr}
   d4d7a:	4604      	mov	r4, r0
    return println((double)num, digits);
   d4d7c:	ee10 0a10 	vmov	r0, s0
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d4d80:	460d      	mov	r5, r1
    return println((double)num, digits);
   d4d82:	f001 fa83 	bl	d628c <__aeabi_f2d>
   d4d86:	ec41 0b10 	vmov	d0, r0, r1
   d4d8a:	4629      	mov	r1, r5
   d4d8c:	4620      	mov	r0, r4
}
   d4d8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return n;
}

size_t Print::println(float num, int digits)
{
    return println((double)num, digits);
   d4d92:	f7ff bfe6 	b.w	d4d62 <_ZN5Print7printlnEdi>
	...

000d4d98 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4d98:	4b01      	ldr	r3, [pc, #4]	; (d4da0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4d9a:	4a02      	ldr	r2, [pc, #8]	; (d4da4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4d9c:	601a      	str	r2, [r3, #0]
   d4d9e:	4770      	bx	lr
   d4da0:	2003e3bc 	.word	0x2003e3bc
   d4da4:	000d6c8d 	.word	0x000d6c8d

000d4da8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4da8:	4b02      	ldr	r3, [pc, #8]	; (d4db4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4daa:	681a      	ldr	r2, [r3, #0]
   d4dac:	4b02      	ldr	r3, [pc, #8]	; (d4db8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4dae:	601a      	str	r2, [r3, #0]
   d4db0:	4770      	bx	lr
   d4db2:	bf00      	nop
   d4db4:	2003e2d8 	.word	0x2003e2d8
   d4db8:	2003e3c0 	.word	0x2003e3c0

000d4dbc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4dbc:	2100      	movs	r1, #0
   d4dbe:	f7ff bcc9 	b.w	d4754 <system_delay_ms>

000d4dc2 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4dc2:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4dc4:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4dc6:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4dc8:	b113      	cbz	r3, d4dd0 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4dca:	2203      	movs	r2, #3
   d4dcc:	4601      	mov	r1, r0
   d4dce:	4798      	blx	r3
    }
   d4dd0:	4620      	mov	r0, r4
   d4dd2:	bd10      	pop	{r4, pc}

000d4dd4 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4dd4:	b510      	push	{r4, lr}
   d4dd6:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4dd8:	f7ff fff3 	bl	d4dc2 <_ZNSt14_Function_baseD1Ev>
   d4ddc:	4620      	mov	r0, r4
   d4dde:	bd10      	pop	{r4, pc}

000d4de0 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d4de0:	b513      	push	{r0, r1, r4, lr}
   d4de2:	460b      	mov	r3, r1
   d4de4:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4de6:	c803      	ldmia	r0, {r0, r1}
   d4de8:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4dec:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4df0:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4df4:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d4df8:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4dfc:	b002      	add	sp, #8
   d4dfe:	bd10      	pop	{r4, pc}

000d4e00 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4e00:	4803      	ldr	r0, [pc, #12]	; (d4e10 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4e02:	4a04      	ldr	r2, [pc, #16]	; (d4e14 <_GLOBAL__sub_I_RGB+0x14>)
   d4e04:	4904      	ldr	r1, [pc, #16]	; (d4e18 <_GLOBAL__sub_I_RGB+0x18>)
   d4e06:	2300      	movs	r3, #0
   d4e08:	6083      	str	r3, [r0, #8]
   d4e0a:	f000 bf6f 	b.w	d5cec <__aeabi_atexit>
   d4e0e:	bf00      	nop
   d4e10:	2003e3c4 	.word	0x2003e3c4
   d4e14:	2003e340 	.word	0x2003e340
   d4e18:	000d4dd5 	.word	0x000d4dd5

000d4e1c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d4e1c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4e1e:	4b0c      	ldr	r3, [pc, #48]	; (d4e50 <serialEventRun+0x34>)
   d4e20:	b133      	cbz	r3, d4e30 <serialEventRun+0x14>
   d4e22:	f000 fc1b 	bl	d565c <_Z16_fetch_usbserialv>
   d4e26:	6803      	ldr	r3, [r0, #0]
   d4e28:	691b      	ldr	r3, [r3, #16]
   d4e2a:	4798      	blx	r3
   d4e2c:	2800      	cmp	r0, #0
   d4e2e:	dc09      	bgt.n	d4e44 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d4e30:	4b08      	ldr	r3, [pc, #32]	; (d4e54 <serialEventRun+0x38>)
   d4e32:	b163      	cbz	r3, d4e4e <serialEventRun+0x32>
   d4e34:	f000 fce0 	bl	d57f8 <_Z22__fetch_global_Serial1v>
   d4e38:	6803      	ldr	r3, [r0, #0]
   d4e3a:	691b      	ldr	r3, [r3, #16]
   d4e3c:	4798      	blx	r3
   d4e3e:	2800      	cmp	r0, #0
   d4e40:	dc03      	bgt.n	d4e4a <serialEventRun+0x2e>
   d4e42:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d4e44:	f3af 8000 	nop.w
   d4e48:	e7f2      	b.n	d4e30 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d4e4a:	f3af 8000 	nop.w
   d4e4e:	bd08      	pop	{r3, pc}
	...

000d4e58 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d4e58:	b508      	push	{r3, lr}
	serialEventRun();
   d4e5a:	f7ff ffdf 	bl	d4e1c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4e5e:	f7ff fb89 	bl	d4574 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4e62:	4b01      	ldr	r3, [pc, #4]	; (d4e68 <_post_loop+0x10>)
   d4e64:	6018      	str	r0, [r3, #0]
   d4e66:	bd08      	pop	{r3, pc}
   d4e68:	2003e730 	.word	0x2003e730

000d4e6c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4e6c:	4802      	ldr	r0, [pc, #8]	; (d4e78 <_Z33system_initialize_user_backup_ramv+0xc>)
   d4e6e:	4a03      	ldr	r2, [pc, #12]	; (d4e7c <_Z33system_initialize_user_backup_ramv+0x10>)
   d4e70:	4903      	ldr	r1, [pc, #12]	; (d4e80 <_Z33system_initialize_user_backup_ramv+0x14>)
   d4e72:	1a12      	subs	r2, r2, r0
   d4e74:	f001 bd64 	b.w	d6940 <memcpy>
   d4e78:	2003f400 	.word	0x2003f400
   d4e7c:	2003f404 	.word	0x2003f404
   d4e80:	000d6f20 	.word	0x000d6f20

000d4e84 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4e84:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4e86:	2300      	movs	r3, #0
   d4e88:	9300      	str	r3, [sp, #0]
   d4e8a:	461a      	mov	r2, r3
   d4e8c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4e90:	f7ff fc82 	bl	d4798 <system_ctrl_set_result>
}
   d4e94:	b003      	add	sp, #12
   d4e96:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4e9c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d4e9c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4e9e:	8843      	ldrh	r3, [r0, #2]
   d4ea0:	2b0a      	cmp	r3, #10
   d4ea2:	d008      	beq.n	d4eb6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4ea4:	2b50      	cmp	r3, #80	; 0x50
   d4ea6:	d109      	bne.n	d4ebc <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d4ea8:	4b09      	ldr	r3, [pc, #36]	; (d4ed0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4eaa:	681b      	ldr	r3, [r3, #0]
   d4eac:	b13b      	cbz	r3, d4ebe <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d4eae:	b003      	add	sp, #12
   d4eb0:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d4eb4:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d4eb6:	f7ff ffe5 	bl	d4e84 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d4eba:	e006      	b.n	d4eca <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4ebc:	2300      	movs	r3, #0
   d4ebe:	9300      	str	r3, [sp, #0]
   d4ec0:	461a      	mov	r2, r3
   d4ec2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4ec6:	f7ff fc67 	bl	d4798 <system_ctrl_set_result>
        break;
    }
}
   d4eca:	b003      	add	sp, #12
   d4ecc:	f85d fb04 	ldr.w	pc, [sp], #4
   d4ed0:	2003e3d4 	.word	0x2003e3d4

000d4ed4 <module_user_init_hook>:

void module_user_init_hook()
{
   d4ed4:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4ed6:	4c10      	ldr	r4, [pc, #64]	; (d4f18 <module_user_init_hook+0x44>)
   d4ed8:	4d10      	ldr	r5, [pc, #64]	; (d4f1c <module_user_init_hook+0x48>)
   d4eda:	6823      	ldr	r3, [r4, #0]
   d4edc:	42ab      	cmp	r3, r5
   d4ede:	4b10      	ldr	r3, [pc, #64]	; (d4f20 <module_user_init_hook+0x4c>)
   d4ee0:	bf0c      	ite	eq
   d4ee2:	2201      	moveq	r2, #1
   d4ee4:	2200      	movne	r2, #0
   d4ee6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d4ee8:	d002      	beq.n	d4ef0 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d4eea:	f7ff ffbf 	bl	d4e6c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d4eee:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4ef0:	f7ff fb38 	bl	d4564 <HAL_RNG_GetRandomNumber>
   d4ef4:	4604      	mov	r4, r0
    srand(seed);
   d4ef6:	f001 fd37 	bl	d6968 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4efa:	4b0a      	ldr	r3, [pc, #40]	; (d4f24 <module_user_init_hook+0x50>)
   d4efc:	b113      	cbz	r3, d4f04 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d4efe:	4620      	mov	r0, r4
   d4f00:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4f04:	2100      	movs	r1, #0
   d4f06:	4807      	ldr	r0, [pc, #28]	; (d4f24 <module_user_init_hook+0x50>)
   d4f08:	f7ff fcb0 	bl	d486c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4f0c:	2100      	movs	r1, #0
   d4f0e:	4806      	ldr	r0, [pc, #24]	; (d4f28 <module_user_init_hook+0x54>)
}
   d4f10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4f14:	f7ff bc36 	b.w	d4784 <system_ctrl_set_app_request_handler>
   d4f18:	2003f400 	.word	0x2003f400
   d4f1c:	9a271c1e 	.word	0x9a271c1e
   d4f20:	2003e3d8 	.word	0x2003e3d8
   d4f24:	00000000 	.word	0x00000000
   d4f28:	000d4e9d 	.word	0x000d4e9d

000d4f2c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4f2c:	4770      	bx	lr

000d4f2e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d4f2e:	2000      	movs	r0, #0
   d4f30:	4770      	bx	lr

000d4f32 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4f32:	b510      	push	{r4, lr}
   d4f34:	2110      	movs	r1, #16
   d4f36:	4604      	mov	r4, r0
   d4f38:	f000 fee6 	bl	d5d08 <_ZdlPvj>
   d4f3c:	4620      	mov	r0, r4
   d4f3e:	bd10      	pop	{r4, pc}

000d4f40 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d4f40:	b508      	push	{r3, lr}
      { delete this; }
   d4f42:	b108      	cbz	r0, d4f48 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d4f44:	f7ff fff5 	bl	d4f32 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4f48:	bd08      	pop	{r3, pc}

000d4f4a <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4f4a:	2200      	movs	r2, #0
   d4f4c:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d4f4e:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4f50:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d4f54:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4f56:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d4f5a:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d4f5c:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4f5e:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4f60:	680c      	ldr	r4, [r1, #0]
   d4f62:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d4f64:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d4f66:	bd10      	pop	{r4, pc}

000d4f68 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d4f68:	b510      	push	{r4, lr}
   d4f6a:	4604      	mov	r4, r0
    free((void*)msg_);
   d4f6c:	6800      	ldr	r0, [r0, #0]
   d4f6e:	f7ff fc8d 	bl	d488c <free>
}
   d4f72:	4620      	mov	r0, r4
   d4f74:	bd10      	pop	{r4, pc}

000d4f76 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d4f76:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4f78:	68c4      	ldr	r4, [r0, #12]
   d4f7a:	b1f4      	cbz	r4, d4fba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d4f7c:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4f7e:	2b02      	cmp	r3, #2
   d4f80:	d103      	bne.n	d4f8a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d4f82:	f104 000c 	add.w	r0, r4, #12
   d4f86:	f7ff ffef 	bl	d4f68 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d4f8a:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d4f8c:	b135      	cbz	r5, d4f9c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4f8e:	4628      	mov	r0, r5
   d4f90:	f7ff ff17 	bl	d4dc2 <_ZNSt14_Function_baseD1Ev>
   d4f94:	2110      	movs	r1, #16
   d4f96:	4628      	mov	r0, r5
   d4f98:	f000 feb6 	bl	d5d08 <_ZdlPvj>
   d4f9c:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d4f9e:	b135      	cbz	r5, d4fae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d4fa0:	4628      	mov	r0, r5
   d4fa2:	f7ff ff0e 	bl	d4dc2 <_ZNSt14_Function_baseD1Ev>
   d4fa6:	2110      	movs	r1, #16
   d4fa8:	4628      	mov	r0, r5
   d4faa:	f000 fead 	bl	d5d08 <_ZdlPvj>
   d4fae:	4620      	mov	r0, r4
   d4fb0:	2114      	movs	r1, #20
   d4fb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4fb6:	f000 bea7 	b.w	d5d08 <_ZdlPvj>
   d4fba:	bd38      	pop	{r3, r4, r5, pc}

000d4fbc <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d4fbc:	b513      	push	{r0, r1, r4, lr}
   d4fbe:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4fc0:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d4fc4:	2300      	movs	r3, #0
   d4fc6:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4fc8:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4fca:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d4fcc:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4fce:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d4fd0:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4fd2:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4fd4:	f7ff fd73 	bl	d4abe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4fd8:	4620      	mov	r0, r4
   d4fda:	b002      	add	sp, #8
   d4fdc:	bd10      	pop	{r4, pc}

000d4fde <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d4fde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4fe0:	460c      	mov	r4, r1
   d4fe2:	ad02      	add	r5, sp, #8
   d4fe4:	f854 3b04 	ldr.w	r3, [r4], #4
   d4fe8:	f845 3d08 	str.w	r3, [r5, #-8]!
   d4fec:	4606      	mov	r6, r0
   d4fee:	460f      	mov	r7, r1
   d4ff0:	a801      	add	r0, sp, #4
   d4ff2:	4621      	mov	r1, r4
   d4ff4:	f7ff fd5c 	bl	d4ab0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d4ff8:	4629      	mov	r1, r5
   d4ffa:	4630      	mov	r0, r6
   d4ffc:	f7ff ffde 	bl	d4fbc <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5000:	a801      	add	r0, sp, #4
   d5002:	f7ff fd5c 	bl	d4abe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5006:	4620      	mov	r0, r4
   d5008:	f7ff fd59 	bl	d4abe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d500c:	4638      	mov	r0, r7
   d500e:	2108      	movs	r1, #8
   d5010:	f000 fe7a 	bl	d5d08 <_ZdlPvj>
        return p;
    }
   d5014:	4630      	mov	r0, r6
   d5016:	b003      	add	sp, #12
   d5018:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d501c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d501c:	b538      	push	{r3, r4, r5, lr}
   d501e:	2300      	movs	r3, #0
   d5020:	4604      	mov	r4, r0
   d5022:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5024:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5026:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5028:	f7ff f835 	bl	d4096 <_Znwj>
   d502c:	b128      	cbz	r0, d503a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d502e:	2301      	movs	r3, #1
   d5030:	6043      	str	r3, [r0, #4]
   d5032:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d5034:	4b02      	ldr	r3, [pc, #8]	; (d5040 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d5036:	6003      	str	r3, [r0, #0]
   d5038:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d503a:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d503c:	4620      	mov	r0, r4
   d503e:	bd38      	pop	{r3, r4, r5, pc}
   d5040:	000d6d2c 	.word	0x000d6d2c

000d5044 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5044:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5046:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5048:	b90a      	cbnz	r2, d504e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d504a:	f000 fe70 	bl	d5d2e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d504e:	68c3      	ldr	r3, [r0, #12]
    }
   d5050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5054:	4718      	bx	r3

000d5056 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5056:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5058:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d505a:	f100 0110 	add.w	r1, r0, #16
   d505e:	f7ff fff1 	bl	d5044 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5062:	bd08      	pop	{r3, pc}

000d5064 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5064:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5066:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5068:	b90a      	cbnz	r2, d506e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d506a:	f000 fe60 	bl	d5d2e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d506e:	68c3      	ldr	r3, [r0, #12]
    }
   d5070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5074:	4718      	bx	r3

000d5076 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5076:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5078:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d507a:	f100 0110 	add.w	r1, r0, #16
   d507e:	f7ff fff1 	bl	d5064 <_ZNKSt8functionIFvRKbEEclES1_>
   d5082:	bd08      	pop	{r3, pc}

000d5084 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5084:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5086:	2300      	movs	r3, #0
   d5088:	6083      	str	r3, [r0, #8]
   d508a:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d508c:	4604      	mov	r4, r0
   d508e:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5090:	b12b      	cbz	r3, d509e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5092:	2202      	movs	r2, #2
   d5094:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5096:	68eb      	ldr	r3, [r5, #12]
   d5098:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d509a:	68ab      	ldr	r3, [r5, #8]
   d509c:	60a3      	str	r3, [r4, #8]
	}
    }
   d509e:	4620      	mov	r0, r4
   d50a0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d50a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d50a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d50a6:	b089      	sub	sp, #36	; 0x24
   d50a8:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d50aa:	4668      	mov	r0, sp
   d50ac:	f7ff ff4d 	bl	d4f4a <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d50b0:	2300      	movs	r3, #0
   d50b2:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d50b6:	f04f 0202 	mov.w	r2, #2
   d50ba:	e8d4 3f4f 	ldrexb	r3, [r4]
   d50be:	2b00      	cmp	r3, #0
   d50c0:	d103      	bne.n	d50ca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d50c2:	e8c4 2f41 	strexb	r1, r2, [r4]
   d50c6:	2900      	cmp	r1, #0
   d50c8:	d1f7      	bne.n	d50ba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d50ca:	d002      	beq.n	d50d2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d50cc:	f88d 3008 	strb.w	r3, [sp, #8]
   d50d0:	e063      	b.n	d519a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d50d2:	f114 050c 	adds.w	r5, r4, #12
   d50d6:	d003      	beq.n	d50e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d50d8:	4669      	mov	r1, sp
   d50da:	4628      	mov	r0, r5
   d50dc:	f7ff ff35 	bl	d4f4a <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d50e0:	f3bf 8f5f 	dmb	sy
   d50e4:	2301      	movs	r3, #1
   d50e6:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d50e8:	2000      	movs	r0, #0
   d50ea:	f104 0308 	add.w	r3, r4, #8
   d50ee:	f3bf 8f5f 	dmb	sy
   d50f2:	e853 6f00 	ldrex	r6, [r3]
   d50f6:	e843 0200 	strex	r2, r0, [r3]
   d50fa:	2a00      	cmp	r2, #0
   d50fc:	d1f9      	bne.n	d50f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d50fe:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5102:	2e00      	cmp	r6, #0
   d5104:	d049      	beq.n	d519a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5106:	f7ff fb2d 	bl	d4764 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d510a:	b120      	cbz	r0, d5116 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d510c:	4629      	mov	r1, r5
   d510e:	4630      	mov	r0, r6
   d5110:	f7ff ff98 	bl	d5044 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5114:	e03a      	b.n	d518c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5116:	4631      	mov	r1, r6
   d5118:	a802      	add	r0, sp, #8
   d511a:	f7ff ffb3 	bl	d5084 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d511e:	68e0      	ldr	r0, [r4, #12]
   d5120:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5124:	b108      	cbz	r0, d512a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d5126:	f001 fc81 	bl	d6a2c <strdup>
   d512a:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d512c:	2010      	movs	r0, #16
   d512e:	f8ad 501c 	strh.w	r5, [sp, #28]
   d5132:	f7fe ffb0 	bl	d4096 <_Znwj>
   d5136:	4605      	mov	r5, r0
   d5138:	b1e8      	cbz	r0, d5176 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d513a:	2700      	movs	r7, #0
   d513c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d513e:	2018      	movs	r0, #24
   d5140:	f7fe ffa9 	bl	d4096 <_Znwj>
   d5144:	4604      	mov	r4, r0
   d5146:	b188      	cbz	r0, d516c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5148:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d514a:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d514c:	a802      	add	r0, sp, #8
   d514e:	f7ff fe47 	bl	d4de0 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5152:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5154:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5156:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5158:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d515a:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d515c:	a906      	add	r1, sp, #24
   d515e:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5160:	60e3      	str	r3, [r4, #12]
   d5162:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5166:	9205      	str	r2, [sp, #20]
   d5168:	f7ff feef 	bl	d4f4a <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d516c:	4b0d      	ldr	r3, [pc, #52]	; (d51a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d516e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5170:	4b0d      	ldr	r3, [pc, #52]	; (d51a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5172:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5174:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d5176:	a806      	add	r0, sp, #24
   d5178:	f7ff fef6 	bl	d4f68 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d517c:	a802      	add	r0, sp, #8
   d517e:	f7ff fe20 	bl	d4dc2 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5182:	2200      	movs	r2, #0
   d5184:	4629      	mov	r1, r5
   d5186:	4809      	ldr	r0, [pc, #36]	; (d51ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d5188:	f7ff faf4 	bl	d4774 <application_thread_invoke>
   d518c:	4630      	mov	r0, r6
   d518e:	f7ff fe18 	bl	d4dc2 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5192:	2110      	movs	r1, #16
   d5194:	4630      	mov	r0, r6
   d5196:	f000 fdb7 	bl	d5d08 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d519a:	4668      	mov	r0, sp
   d519c:	f7ff fee4 	bl	d4f68 <_ZN8particle5ErrorD1Ev>
    }
   d51a0:	b009      	add	sp, #36	; 0x24
   d51a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d51a4:	000d5057 	.word	0x000d5057
   d51a8:	000d52cd 	.word	0x000d52cd
   d51ac:	000d5845 	.word	0x000d5845

000d51b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d51b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d51b4:	b08b      	sub	sp, #44	; 0x2c
   d51b6:	4606      	mov	r6, r0
   d51b8:	460f      	mov	r7, r1
   d51ba:	4690      	mov	r8, r2
   d51bc:	4699      	mov	r9, r3
   d51be:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d51c2:	f7ff fb43 	bl	d484c <spark_cloud_flag_connected>
   d51c6:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d51c8:	4683      	mov	fp, r0
   d51ca:	bb30      	cbnz	r0, d521a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d51cc:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d51d0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d51d2:	a905      	add	r1, sp, #20
   d51d4:	4628      	mov	r0, r5
   d51d6:	f8ad 3018 	strh.w	r3, [sp, #24]
   d51da:	f7ff feb6 	bl	d4f4a <_ZN8particle5ErrorC1EOS0_>
   d51de:	2014      	movs	r0, #20
   d51e0:	f7fe ff59 	bl	d4096 <_Znwj>
   d51e4:	4604      	mov	r4, r0
   d51e6:	b158      	cbz	r0, d5200 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d51e8:	2302      	movs	r3, #2
   d51ea:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d51ec:	2301      	movs	r3, #1
   d51ee:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d51f0:	f8c0 b004 	str.w	fp, [r0, #4]
   d51f4:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d51f8:	4629      	mov	r1, r5
   d51fa:	300c      	adds	r0, #12
   d51fc:	f7ff fea5 	bl	d4f4a <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d5200:	4630      	mov	r0, r6
   d5202:	4621      	mov	r1, r4
   d5204:	f840 4b04 	str.w	r4, [r0], #4
   d5208:	f7ff ff08 	bl	d501c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d520c:	4628      	mov	r0, r5
   d520e:	f7ff feab 	bl	d4f68 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d5212:	a805      	add	r0, sp, #20
   d5214:	f7ff fea8 	bl	d4f68 <_ZN8particle5ErrorD1Ev>
   d5218:	e052      	b.n	d52c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d521a:	2400      	movs	r4, #0
   d521c:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d521e:	2014      	movs	r0, #20
   d5220:	606c      	str	r4, [r5, #4]
   d5222:	60ac      	str	r4, [r5, #8]
   d5224:	9307      	str	r3, [sp, #28]
   d5226:	f7fe ff36 	bl	d4096 <_Znwj>
   d522a:	4601      	mov	r1, r0
   d522c:	b118      	cbz	r0, d5236 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d522e:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5230:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5232:	6044      	str	r4, [r0, #4]
   d5234:	6084      	str	r4, [r0, #8]
   d5236:	a804      	add	r0, sp, #16
   d5238:	9103      	str	r1, [sp, #12]
   d523a:	f7ff feef 	bl	d501c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d523e:	4b22      	ldr	r3, [pc, #136]	; (d52c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d5240:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d5242:	2008      	movs	r0, #8
   d5244:	f7fe ff27 	bl	d4096 <_Znwj>
   d5248:	4604      	mov	r4, r0
   d524a:	b128      	cbz	r0, d5258 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d524c:	9b03      	ldr	r3, [sp, #12]
   d524e:	f840 3b04 	str.w	r3, [r0], #4
   d5252:	a904      	add	r1, sp, #16
   d5254:	f7ff fc2c 	bl	d4ab0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5258:	9500      	str	r5, [sp, #0]
   d525a:	fa5f f38a 	uxtb.w	r3, sl
   d525e:	464a      	mov	r2, r9
   d5260:	4641      	mov	r1, r8
   d5262:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d5264:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5266:	f7ff faf9 	bl	d485c <spark_send_event>
   d526a:	b920      	cbnz	r0, d5276 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d526c:	9b03      	ldr	r3, [sp, #12]
   d526e:	785b      	ldrb	r3, [r3, #1]
   d5270:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5274:	b183      	cbz	r3, d5298 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d5276:	9b03      	ldr	r3, [sp, #12]
   d5278:	9305      	str	r3, [sp, #20]
   d527a:	a904      	add	r1, sp, #16
   d527c:	a806      	add	r0, sp, #24
   d527e:	f7ff fc17 	bl	d4ab0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d5282:	a905      	add	r1, sp, #20
   d5284:	4630      	mov	r0, r6
   d5286:	f7ff fe99 	bl	d4fbc <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d528a:	a806      	add	r0, sp, #24
   d528c:	f7ff fc17 	bl	d4abe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5290:	a804      	add	r0, sp, #16
   d5292:	f7ff fc14 	bl	d4abe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5296:	e013      	b.n	d52c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d5298:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d529c:	a905      	add	r1, sp, #20
   d529e:	a803      	add	r0, sp, #12
   d52a0:	9205      	str	r2, [sp, #20]
   d52a2:	f8ad 3018 	strh.w	r3, [sp, #24]
   d52a6:	f7ff fefd 	bl	d50a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d52aa:	a805      	add	r0, sp, #20
   d52ac:	f7ff fe5c 	bl	d4f68 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d52b0:	a805      	add	r0, sp, #20
   d52b2:	9909      	ldr	r1, [sp, #36]	; 0x24
   d52b4:	f7ff fe93 	bl	d4fde <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d52b8:	a806      	add	r0, sp, #24
   d52ba:	f7ff fc00 	bl	d4abe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d52be:	e7da      	b.n	d5276 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d52c0:	4630      	mov	r0, r6
   d52c2:	b00b      	add	sp, #44	; 0x2c
   d52c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d52c8:	000d543d 	.word	0x000d543d

000d52cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d52cc:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d52ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d52d0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d52d2:	d006      	beq.n	d52e2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d52d4:	2a03      	cmp	r2, #3
   d52d6:	d017      	beq.n	d5308 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d52d8:	2a01      	cmp	r2, #1
   d52da:	d122      	bne.n	d5322 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d52dc:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d52de:	6003      	str	r3, [r0, #0]
	      break;
   d52e0:	e01f      	b.n	d5322 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d52e2:	2018      	movs	r0, #24
   d52e4:	680e      	ldr	r6, [r1, #0]
   d52e6:	f7fe fed6 	bl	d4096 <_Znwj>
   d52ea:	4605      	mov	r5, r0
   d52ec:	b150      	cbz	r0, d5304 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d52ee:	4631      	mov	r1, r6
   d52f0:	f7ff fec8 	bl	d5084 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d52f4:	6930      	ldr	r0, [r6, #16]
   d52f6:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d52fa:	b108      	cbz	r0, d5300 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d52fc:	f001 fb96 	bl	d6a2c <strdup>
   d5300:	6128      	str	r0, [r5, #16]
   d5302:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5304:	6025      	str	r5, [r4, #0]
   d5306:	e00c      	b.n	d5322 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5308:	6804      	ldr	r4, [r0, #0]
   d530a:	b154      	cbz	r4, d5322 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d530c:	f104 0010 	add.w	r0, r4, #16
   d5310:	f7ff fe2a 	bl	d4f68 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5314:	4620      	mov	r0, r4
   d5316:	f7ff fd54 	bl	d4dc2 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d531a:	2118      	movs	r1, #24
   d531c:	4620      	mov	r0, r4
   d531e:	f000 fcf3 	bl	d5d08 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5322:	2000      	movs	r0, #0
   d5324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5326 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5326:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5328:	2300      	movs	r3, #0
   d532a:	6083      	str	r3, [r0, #8]
   d532c:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d532e:	4604      	mov	r4, r0
   d5330:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5332:	b12b      	cbz	r3, d5340 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5334:	2202      	movs	r2, #2
   d5336:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5338:	68eb      	ldr	r3, [r5, #12]
   d533a:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d533c:	68ab      	ldr	r3, [r5, #8]
   d533e:	60a3      	str	r3, [r4, #8]
	}
    }
   d5340:	4620      	mov	r0, r4
   d5342:	bd38      	pop	{r3, r4, r5, pc}

000d5344 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5344:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5346:	b570      	push	{r4, r5, r6, lr}
   d5348:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d534a:	d006      	beq.n	d535a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d534c:	2a03      	cmp	r2, #3
   d534e:	d011      	beq.n	d5374 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d5350:	2a01      	cmp	r2, #1
   d5352:	d118      	bne.n	d5386 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5354:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5356:	6003      	str	r3, [r0, #0]
	      break;
   d5358:	e015      	b.n	d5386 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d535a:	2014      	movs	r0, #20
   d535c:	680e      	ldr	r6, [r1, #0]
   d535e:	f7fe fe9a 	bl	d4096 <_Znwj>
   d5362:	4605      	mov	r5, r0
   d5364:	b120      	cbz	r0, d5370 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5366:	4631      	mov	r1, r6
   d5368:	f7ff ffdd 	bl	d5326 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d536c:	7c33      	ldrb	r3, [r6, #16]
   d536e:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5370:	6025      	str	r5, [r4, #0]
   d5372:	e008      	b.n	d5386 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5374:	6804      	ldr	r4, [r0, #0]
   d5376:	b134      	cbz	r4, d5386 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5378:	4620      	mov	r0, r4
   d537a:	f7ff fd22 	bl	d4dc2 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d537e:	2114      	movs	r1, #20
   d5380:	4620      	mov	r0, r4
   d5382:	f000 fcc1 	bl	d5d08 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5386:	2000      	movs	r0, #0
   d5388:	bd70      	pop	{r4, r5, r6, pc}
	...

000d538c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d538c:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d538e:	2300      	movs	r3, #0
   d5390:	b087      	sub	sp, #28
   d5392:	460c      	mov	r4, r1
   d5394:	f3bf 8f5f 	dmb	sy
   d5398:	e850 6f00 	ldrex	r6, [r0]
   d539c:	e840 3200 	strex	r2, r3, [r0]
   d53a0:	2a00      	cmp	r2, #0
   d53a2:	d1f9      	bne.n	d5398 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d53a4:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d53a8:	2e00      	cmp	r6, #0
   d53aa:	d03f      	beq.n	d542c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d53ac:	4618      	mov	r0, r3
   d53ae:	f7ff f9d9 	bl	d4764 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d53b2:	4607      	mov	r7, r0
   d53b4:	b120      	cbz	r0, d53c0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d53b6:	4621      	mov	r1, r4
   d53b8:	4630      	mov	r0, r6
   d53ba:	f7ff fe53 	bl	d5064 <_ZNKSt8functionIFvRKbEEclES1_>
   d53be:	e02e      	b.n	d541e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d53c0:	4631      	mov	r1, r6
   d53c2:	a801      	add	r0, sp, #4
   d53c4:	f7ff ffaf 	bl	d5326 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d53c8:	7823      	ldrb	r3, [r4, #0]
   d53ca:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d53ce:	2010      	movs	r0, #16
   d53d0:	f7fe fe61 	bl	d4096 <_Znwj>
   d53d4:	4605      	mov	r5, r0
   d53d6:	b1d0      	cbz	r0, d540e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d53d8:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d53da:	2014      	movs	r0, #20
   d53dc:	f7fe fe5b 	bl	d4096 <_Znwj>
   d53e0:	4604      	mov	r4, r0
   d53e2:	b178      	cbz	r0, d5404 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d53e4:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d53e6:	4601      	mov	r1, r0
   d53e8:	a801      	add	r0, sp, #4
   d53ea:	f7ff fcf9 	bl	d4de0 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d53ee:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d53f0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d53f2:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d53f4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d53f6:	9203      	str	r2, [sp, #12]
   d53f8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d53fa:	60e3      	str	r3, [r4, #12]
   d53fc:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5400:	9204      	str	r2, [sp, #16]
   d5402:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5404:	4b0a      	ldr	r3, [pc, #40]	; (d5430 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d5406:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5408:	4b0a      	ldr	r3, [pc, #40]	; (d5434 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d540a:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d540c:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d540e:	a801      	add	r0, sp, #4
   d5410:	f7ff fcd7 	bl	d4dc2 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5414:	2200      	movs	r2, #0
   d5416:	4629      	mov	r1, r5
   d5418:	4807      	ldr	r0, [pc, #28]	; (d5438 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d541a:	f7ff f9ab 	bl	d4774 <application_thread_invoke>
   d541e:	4630      	mov	r0, r6
   d5420:	f7ff fccf 	bl	d4dc2 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5424:	2110      	movs	r1, #16
   d5426:	4630      	mov	r0, r6
   d5428:	f000 fc6e 	bl	d5d08 <_ZdlPvj>
        }
    }
   d542c:	b007      	add	sp, #28
   d542e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5430:	000d5077 	.word	0x000d5077
   d5434:	000d5345 	.word	0x000d5345
   d5438:	000d5845 	.word	0x000d5845

000d543c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d543c:	b530      	push	{r4, r5, lr}
   d543e:	b085      	sub	sp, #20
   d5440:	4604      	mov	r4, r0
   d5442:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5444:	4668      	mov	r0, sp
   d5446:	4611      	mov	r1, r2
   d5448:	f7ff fdc9 	bl	d4fde <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d544c:	b17c      	cbz	r4, d546e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d544e:	b224      	sxth	r4, r4
   d5450:	4628      	mov	r0, r5
   d5452:	b10d      	cbz	r5, d5458 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d5454:	f001 faea 	bl	d6a2c <strdup>
   d5458:	9002      	str	r0, [sp, #8]
   d545a:	a902      	add	r1, sp, #8
   d545c:	4668      	mov	r0, sp
   d545e:	f8ad 400c 	strh.w	r4, [sp, #12]
   d5462:	f7ff fe1f 	bl	d50a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5466:	a802      	add	r0, sp, #8
   d5468:	f7ff fd7e 	bl	d4f68 <_ZN8particle5ErrorD1Ev>
   d546c:	e01d      	b.n	d54aa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d546e:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5470:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5474:	f04f 0201 	mov.w	r2, #1
   d5478:	e8d0 3f4f 	ldrexb	r3, [r0]
   d547c:	42a3      	cmp	r3, r4
   d547e:	d103      	bne.n	d5488 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d5480:	e8c0 2f41 	strexb	r1, r2, [r0]
   d5484:	2900      	cmp	r1, #0
   d5486:	d1f7      	bne.n	d5478 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d5488:	d002      	beq.n	d5490 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d548a:	f88d 3008 	strb.w	r3, [sp, #8]
   d548e:	e00c      	b.n	d54aa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d5490:	f110 010c 	adds.w	r1, r0, #12
   d5494:	f04f 0301 	mov.w	r3, #1
   d5498:	bf18      	it	ne
   d549a:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d549c:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d54a0:	3004      	adds	r0, #4
   d54a2:	f800 3c03 	strb.w	r3, [r0, #-3]
   d54a6:	f7ff ff71 	bl	d538c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d54aa:	a801      	add	r0, sp, #4
   d54ac:	f7ff fb07 	bl	d4abe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d54b0:	b005      	add	sp, #20
   d54b2:	bd30      	pop	{r4, r5, pc}

000d54b4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d54b4:	4770      	bx	lr

000d54b6 <_ZN9IPAddressD0Ev>:
   d54b6:	b510      	push	{r4, lr}
   d54b8:	2118      	movs	r1, #24
   d54ba:	4604      	mov	r4, r0
   d54bc:	f000 fc24 	bl	d5d08 <_ZdlPvj>
   d54c0:	4620      	mov	r0, r4
   d54c2:	bd10      	pop	{r4, pc}

000d54c4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d54c4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d54c6:	7d03      	ldrb	r3, [r0, #20]
   d54c8:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d54ca:	b08d      	sub	sp, #52	; 0x34
   d54cc:	460e      	mov	r6, r1
   d54ce:	f100 0704 	add.w	r7, r0, #4
   d54d2:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d54d6:	d002      	beq.n	d54de <_ZNK9IPAddress7printToER5Print+0x1a>
   d54d8:	f100 0508 	add.w	r5, r0, #8
   d54dc:	e018      	b.n	d5510 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d54de:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d54e0:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d54e2:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d54e6:	232f      	movs	r3, #47	; 0x2f
   d54e8:	462a      	mov	r2, r5
   d54ea:	200a      	movs	r0, #10
   d54ec:	f7ff f872 	bl	d45d4 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d54f0:	4628      	mov	r0, r5
   d54f2:	f001 fab6 	bl	d6a62 <strlen>
   d54f6:	6833      	ldr	r3, [r6, #0]
   d54f8:	4602      	mov	r2, r0
   d54fa:	68db      	ldr	r3, [r3, #12]
   d54fc:	4629      	mov	r1, r5
   d54fe:	4630      	mov	r0, r6
   d5500:	4798      	blx	r3
   d5502:	e00f      	b.n	d5524 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5504:	b124      	cbz	r4, d5510 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5506:	212e      	movs	r1, #46	; 0x2e
   d5508:	4630      	mov	r0, r6
   d550a:	f7ff fb23 	bl	d4b54 <_ZN5Print5printEc>
   d550e:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5510:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5514:	220a      	movs	r2, #10
   d5516:	4630      	mov	r0, r6
   d5518:	f7ff fb35 	bl	d4b86 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d551c:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d551e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5520:	d1f0      	bne.n	d5504 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5522:	4620      	mov	r0, r4
    }
    return n;
}
   d5524:	b00d      	add	sp, #52	; 0x34
   d5526:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5528 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5528:	b510      	push	{r4, lr}
   d552a:	4b05      	ldr	r3, [pc, #20]	; (d5540 <_ZN9IPAddressC1Ev+0x18>)
   d552c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d552e:	2211      	movs	r2, #17
   d5530:	f840 3b04 	str.w	r3, [r0], #4
   d5534:	2100      	movs	r1, #0
   d5536:	f001 fa0e 	bl	d6956 <memset>
{
    clear();
}
   d553a:	4620      	mov	r0, r4
   d553c:	bd10      	pop	{r4, pc}
   d553e:	bf00      	nop
   d5540:	000d6d48 	.word	0x000d6d48

000d5544 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5544:	4603      	mov	r3, r0
   d5546:	4a07      	ldr	r2, [pc, #28]	; (d5564 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5548:	b510      	push	{r4, lr}
   d554a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d554e:	f101 0210 	add.w	r2, r1, #16
   d5552:	f851 4b04 	ldr.w	r4, [r1], #4
   d5556:	f843 4b04 	str.w	r4, [r3], #4
   d555a:	4291      	cmp	r1, r2
   d555c:	d1f9      	bne.n	d5552 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d555e:	780a      	ldrb	r2, [r1, #0]
   d5560:	701a      	strb	r2, [r3, #0]
}
   d5562:	bd10      	pop	{r4, pc}
   d5564:	000d6d48 	.word	0x000d6d48

000d5568 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5568:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d556a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d556e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5572:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5576:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d557a:	2304      	movs	r3, #4
   d557c:	6041      	str	r1, [r0, #4]
   d557e:	7503      	strb	r3, [r0, #20]
   d5580:	bd10      	pop	{r4, pc}

000d5582 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5582:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5584:	780d      	ldrb	r5, [r1, #0]
   d5586:	788b      	ldrb	r3, [r1, #2]
   d5588:	784a      	ldrb	r2, [r1, #1]
   d558a:	78c9      	ldrb	r1, [r1, #3]
   d558c:	9100      	str	r1, [sp, #0]
   d558e:	4629      	mov	r1, r5
   d5590:	f7ff ffea 	bl	d5568 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5594:	b003      	add	sp, #12
   d5596:	bd30      	pop	{r4, r5, pc}

000d5598 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5598:	7441      	strb	r1, [r0, #17]
   d559a:	4770      	bx	lr

000d559c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d559c:	4770      	bx	lr

000d559e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d559e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d55a0:	2100      	movs	r1, #0
   d55a2:	7c00      	ldrb	r0, [r0, #16]
   d55a4:	f7ff f8b6 	bl	d4714 <HAL_USB_USART_Receive_Data>
}
   d55a8:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d55ac:	bf28      	it	cs
   d55ae:	f04f 30ff 	movcs.w	r0, #4294967295
   d55b2:	bd08      	pop	{r3, pc}

000d55b4 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d55b4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d55b6:	2101      	movs	r1, #1
   d55b8:	7c00      	ldrb	r0, [r0, #16]
   d55ba:	f7ff f8ab 	bl	d4714 <HAL_USB_USART_Receive_Data>
}
   d55be:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d55c2:	bf28      	it	cs
   d55c4:	f04f 30ff 	movcs.w	r0, #4294967295
   d55c8:	bd08      	pop	{r3, pc}

000d55ca <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d55ca:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d55cc:	7c00      	ldrb	r0, [r0, #16]
   d55ce:	f7ff f899 	bl	d4704 <HAL_USB_USART_Available_Data_For_Write>
}
   d55d2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d55d6:	bd08      	pop	{r3, pc}

000d55d8 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d55d8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d55da:	7c00      	ldrb	r0, [r0, #16]
   d55dc:	f7ff f88a 	bl	d46f4 <HAL_USB_USART_Available_Data>
}
   d55e0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d55e4:	bd08      	pop	{r3, pc}

000d55e6 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d55e6:	7c00      	ldrb	r0, [r0, #16]
   d55e8:	f7ff b8a4 	b.w	d4734 <HAL_USB_USART_Flush_Data>

000d55ec <_ZN9USBSerialD0Ev>:
   d55ec:	b510      	push	{r4, lr}
   d55ee:	2114      	movs	r1, #20
   d55f0:	4604      	mov	r4, r0
   d55f2:	f000 fb89 	bl	d5d08 <_ZdlPvj>
   d55f6:	4620      	mov	r0, r4
   d55f8:	bd10      	pop	{r4, pc}

000d55fa <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d55fa:	b538      	push	{r3, r4, r5, lr}
   d55fc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d55fe:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5600:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5602:	f7ff f87f 	bl	d4704 <HAL_USB_USART_Available_Data_For_Write>
   d5606:	2800      	cmp	r0, #0
   d5608:	dc01      	bgt.n	d560e <_ZN9USBSerial5writeEh+0x14>
   d560a:	7c60      	ldrb	r0, [r4, #17]
   d560c:	b128      	cbz	r0, d561a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d560e:	4629      	mov	r1, r5
   d5610:	7c20      	ldrb	r0, [r4, #16]
   d5612:	f7ff f887 	bl	d4724 <HAL_USB_USART_Send_Data>
   d5616:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d561a:	bd38      	pop	{r3, r4, r5, pc}

000d561c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d561c:	b510      	push	{r4, lr}
   d561e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5620:	2300      	movs	r3, #0
   d5622:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5624:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5628:	60a3      	str	r3, [r4, #8]
   d562a:	4b05      	ldr	r3, [pc, #20]	; (d5640 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d562c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d562e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5630:	4608      	mov	r0, r1
{
  _serial = serial;
   d5632:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5634:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5636:	4611      	mov	r1, r2
   d5638:	f7ff f84c 	bl	d46d4 <HAL_USB_USART_Init>
}
   d563c:	4620      	mov	r0, r4
   d563e:	bd10      	pop	{r4, pc}
   d5640:	000d6d5c 	.word	0x000d6d5c

000d5644 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5644:	2200      	movs	r2, #0
   d5646:	7c00      	ldrb	r0, [r0, #16]
   d5648:	f7ff b84c 	b.w	d46e4 <HAL_USB_USART_Begin>

000d564c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d564c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d564e:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5650:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5652:	2100      	movs	r1, #0
   d5654:	f001 f97f 	bl	d6956 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5658:	4620      	mov	r0, r4
   d565a:	bd10      	pop	{r4, pc}

000d565c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d565c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d565e:	4d0e      	ldr	r5, [pc, #56]	; (d5698 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5660:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5662:	a801      	add	r0, sp, #4
   d5664:	f7ff fff2 	bl	d564c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5668:	6829      	ldr	r1, [r5, #0]
   d566a:	f011 0401 	ands.w	r4, r1, #1
   d566e:	d110      	bne.n	d5692 <_Z16_fetch_usbserialv+0x36>
   d5670:	4628      	mov	r0, r5
   d5672:	f7fe fd16 	bl	d40a2 <__cxa_guard_acquire>
   d5676:	b160      	cbz	r0, d5692 <_Z16_fetch_usbserialv+0x36>
   d5678:	aa01      	add	r2, sp, #4
   d567a:	4621      	mov	r1, r4
   d567c:	4807      	ldr	r0, [pc, #28]	; (d569c <_Z16_fetch_usbserialv+0x40>)
   d567e:	f7ff ffcd 	bl	d561c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5682:	4628      	mov	r0, r5
   d5684:	f7fe fd12 	bl	d40ac <__cxa_guard_release>
   d5688:	4a05      	ldr	r2, [pc, #20]	; (d56a0 <_Z16_fetch_usbserialv+0x44>)
   d568a:	4906      	ldr	r1, [pc, #24]	; (d56a4 <_Z16_fetch_usbserialv+0x48>)
   d568c:	4803      	ldr	r0, [pc, #12]	; (d569c <_Z16_fetch_usbserialv+0x40>)
   d568e:	f000 fb2d 	bl	d5cec <__aeabi_atexit>
	return _usbserial;
}
   d5692:	4802      	ldr	r0, [pc, #8]	; (d569c <_Z16_fetch_usbserialv+0x40>)
   d5694:	b007      	add	sp, #28
   d5696:	bd30      	pop	{r4, r5, pc}
   d5698:	2003e3dc 	.word	0x2003e3dc
   d569c:	2003e3e0 	.word	0x2003e3e0
   d56a0:	2003e340 	.word	0x2003e340
   d56a4:	000d559d 	.word	0x000d559d

000d56a8 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d56a8:	2200      	movs	r2, #0
   d56aa:	4611      	mov	r1, r2
   d56ac:	6840      	ldr	r0, [r0, #4]
   d56ae:	f7ff b895 	b.w	d47dc <network_ready>

000d56b2 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d56b2:	2200      	movs	r2, #0
   d56b4:	4611      	mov	r1, r2
   d56b6:	6840      	ldr	r0, [r0, #4]
   d56b8:	f7ff b8b0 	b.w	d481c <network_listening>

000d56bc <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d56bc:	2200      	movs	r2, #0
   d56be:	4611      	mov	r1, r2
   d56c0:	6840      	ldr	r0, [r0, #4]
   d56c2:	f7ff b8bb 	b.w	d483c <network_get_listen_timeout>

000d56c6 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d56c6:	2200      	movs	r2, #0
   d56c8:	6840      	ldr	r0, [r0, #4]
   d56ca:	f7ff b8af 	b.w	d482c <network_set_listen_timeout>

000d56ce <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d56ce:	2200      	movs	r2, #0
   d56d0:	f081 0101 	eor.w	r1, r1, #1
   d56d4:	6840      	ldr	r0, [r0, #4]
   d56d6:	f7ff b899 	b.w	d480c <network_listen>

000d56da <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d56da:	2300      	movs	r3, #0
   d56dc:	461a      	mov	r2, r3
   d56de:	4619      	mov	r1, r3
   d56e0:	6840      	ldr	r0, [r0, #4]
   d56e2:	f7ff b88b 	b.w	d47fc <network_off>

000d56e6 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d56e6:	2300      	movs	r3, #0
   d56e8:	461a      	mov	r2, r3
   d56ea:	4619      	mov	r1, r3
   d56ec:	6840      	ldr	r0, [r0, #4]
   d56ee:	f7ff b87d 	b.w	d47ec <network_on>

000d56f2 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d56f2:	2200      	movs	r2, #0
   d56f4:	4611      	mov	r1, r2
   d56f6:	6840      	ldr	r0, [r0, #4]
   d56f8:	f7ff b860 	b.w	d47bc <network_connecting>

000d56fc <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d56fc:	2200      	movs	r2, #0
   d56fe:	2102      	movs	r1, #2
   d5700:	6840      	ldr	r0, [r0, #4]
   d5702:	f7ff b863 	b.w	d47cc <network_disconnect>

000d5706 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5706:	2300      	movs	r3, #0
   d5708:	461a      	mov	r2, r3
   d570a:	6840      	ldr	r0, [r0, #4]
   d570c:	f7ff b84e 	b.w	d47ac <network_connect>

000d5710 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d5710:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d5712:	4c08      	ldr	r4, [pc, #32]	; (d5734 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d5714:	2528      	movs	r5, #40	; 0x28
   d5716:	462a      	mov	r2, r5
   d5718:	2100      	movs	r1, #0
   d571a:	4620      	mov	r0, r4
   d571c:	f001 f91b 	bl	d6956 <memset>
        cid = -1;
   d5720:	f04f 33ff 	mov.w	r3, #4294967295
   d5724:	6063      	str	r3, [r4, #4]
   d5726:	4b04      	ldr	r3, [pc, #16]	; (d5738 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d5728:	8025      	strh	r5, [r4, #0]
   d572a:	2204      	movs	r2, #4
   d572c:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d572e:	4a03      	ldr	r2, [pc, #12]	; (d573c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d5730:	601a      	str	r2, [r3, #0]
   d5732:	bd38      	pop	{r3, r4, r5, pc}
   d5734:	2003e3fc 	.word	0x2003e3fc
   d5738:	2003e3f4 	.word	0x2003e3f4
   d573c:	000d6d8c 	.word	0x000d6d8c

000d5740 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5740:	4770      	bx	lr

000d5742 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5742:	7441      	strb	r1, [r0, #17]
   d5744:	4770      	bx	lr

000d5746 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5746:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5748:	7c00      	ldrb	r0, [r0, #16]
   d574a:	f7fe ff83 	bl	d4654 <HAL_USART_Available_Data_For_Write>
}
   d574e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5752:	bd08      	pop	{r3, pc}

000d5754 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5754:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5756:	7c00      	ldrb	r0, [r0, #16]
   d5758:	f7fe ff54 	bl	d4604 <HAL_USART_Available_Data>
}
   d575c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5760:	bd08      	pop	{r3, pc}

000d5762 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5762:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5764:	7c00      	ldrb	r0, [r0, #16]
   d5766:	f7fe ff5d 	bl	d4624 <HAL_USART_Peek_Data>
}
   d576a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d576e:	bf28      	it	cs
   d5770:	f04f 30ff 	movcs.w	r0, #4294967295
   d5774:	bd08      	pop	{r3, pc}

000d5776 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5776:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5778:	7c00      	ldrb	r0, [r0, #16]
   d577a:	f7fe ff4b 	bl	d4614 <HAL_USART_Read_Data>
}
   d577e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5782:	bf28      	it	cs
   d5784:	f04f 30ff 	movcs.w	r0, #4294967295
   d5788:	bd08      	pop	{r3, pc}

000d578a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d578a:	7c00      	ldrb	r0, [r0, #16]
   d578c:	f7fe bf52 	b.w	d4634 <HAL_USART_Flush_Data>

000d5790 <_ZN11USARTSerialD0Ev>:
   d5790:	b510      	push	{r4, lr}
   d5792:	2114      	movs	r1, #20
   d5794:	4604      	mov	r4, r0
   d5796:	f000 fab7 	bl	d5d08 <_ZdlPvj>
   d579a:	4620      	mov	r0, r4
   d579c:	bd10      	pop	{r4, pc}

000d579e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d579e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d57a0:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d57a2:	4604      	mov	r4, r0
   d57a4:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d57a6:	b925      	cbnz	r5, d57b2 <_ZN11USARTSerial5writeEh+0x14>
   d57a8:	7c00      	ldrb	r0, [r0, #16]
   d57aa:	f7fe ff53 	bl	d4654 <HAL_USART_Available_Data_For_Write>
   d57ae:	2800      	cmp	r0, #0
   d57b0:	dd05      	ble.n	d57be <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d57b2:	4631      	mov	r1, r6
   d57b4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d57b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d57ba:	f7fe bf1b 	b.w	d45f4 <HAL_USART_Write_Data>
  }
  return 0;
}
   d57be:	4628      	mov	r0, r5
   d57c0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d57c4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d57c4:	b510      	push	{r4, lr}
   d57c6:	4604      	mov	r4, r0
   d57c8:	4608      	mov	r0, r1
   d57ca:	4611      	mov	r1, r2
   d57cc:	2200      	movs	r2, #0
   d57ce:	6062      	str	r2, [r4, #4]
   d57d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d57d4:	60a2      	str	r2, [r4, #8]
   d57d6:	4a05      	ldr	r2, [pc, #20]	; (d57ec <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d57d8:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d57da:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d57dc:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d57de:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d57e0:	461a      	mov	r2, r3
   d57e2:	f7fe feff 	bl	d45e4 <HAL_USART_Init>
}
   d57e6:	4620      	mov	r0, r4
   d57e8:	bd10      	pop	{r4, pc}
   d57ea:	bf00      	nop
   d57ec:	000d6dc0 	.word	0x000d6dc0

000d57f0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d57f0:	7c00      	ldrb	r0, [r0, #16]
   d57f2:	f7fe bf27 	b.w	d4644 <HAL_USART_Is_Enabled>
	...

000d57f8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d57f8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d57fa:	4d0c      	ldr	r5, [pc, #48]	; (d582c <_Z22__fetch_global_Serial1v+0x34>)
   d57fc:	6829      	ldr	r1, [r5, #0]
   d57fe:	f011 0401 	ands.w	r4, r1, #1
   d5802:	d111      	bne.n	d5828 <_Z22__fetch_global_Serial1v+0x30>
   d5804:	4628      	mov	r0, r5
   d5806:	f7fe fc4c 	bl	d40a2 <__cxa_guard_acquire>
   d580a:	b168      	cbz	r0, d5828 <_Z22__fetch_global_Serial1v+0x30>
   d580c:	4a08      	ldr	r2, [pc, #32]	; (d5830 <_Z22__fetch_global_Serial1v+0x38>)
   d580e:	4b09      	ldr	r3, [pc, #36]	; (d5834 <_Z22__fetch_global_Serial1v+0x3c>)
   d5810:	4809      	ldr	r0, [pc, #36]	; (d5838 <_Z22__fetch_global_Serial1v+0x40>)
   d5812:	4621      	mov	r1, r4
   d5814:	f7ff ffd6 	bl	d57c4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5818:	4628      	mov	r0, r5
   d581a:	f7fe fc47 	bl	d40ac <__cxa_guard_release>
   d581e:	4a07      	ldr	r2, [pc, #28]	; (d583c <_Z22__fetch_global_Serial1v+0x44>)
   d5820:	4907      	ldr	r1, [pc, #28]	; (d5840 <_Z22__fetch_global_Serial1v+0x48>)
   d5822:	4805      	ldr	r0, [pc, #20]	; (d5838 <_Z22__fetch_global_Serial1v+0x40>)
   d5824:	f000 fa62 	bl	d5cec <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5828:	4803      	ldr	r0, [pc, #12]	; (d5838 <_Z22__fetch_global_Serial1v+0x40>)
   d582a:	bd38      	pop	{r3, r4, r5, pc}
   d582c:	2003e4bc 	.word	0x2003e4bc
   d5830:	2003e4c0 	.word	0x2003e4c0
   d5834:	2003e438 	.word	0x2003e438
   d5838:	2003e424 	.word	0x2003e424
   d583c:	2003e340 	.word	0x2003e340
   d5840:	000d5741 	.word	0x000d5741

000d5844 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5844:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5846:	6883      	ldr	r3, [r0, #8]
   d5848:	4604      	mov	r4, r0
   d584a:	b90b      	cbnz	r3, d5850 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d584c:	f000 fa6f 	bl	d5d2e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5850:	68c3      	ldr	r3, [r0, #12]
   d5852:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5854:	68a3      	ldr	r3, [r4, #8]
   d5856:	b11b      	cbz	r3, d5860 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5858:	2203      	movs	r2, #3
   d585a:	4621      	mov	r1, r4
   d585c:	4620      	mov	r0, r4
   d585e:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5860:	4620      	mov	r0, r4
   d5862:	2110      	movs	r1, #16
}
   d5864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5868:	f000 ba4e 	b.w	d5d08 <_ZdlPvj>

000d586c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d586c:	4770      	bx	lr

000d586e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d586e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5870:	4606      	mov	r6, r0
   d5872:	4615      	mov	r5, r2
   d5874:	460c      	mov	r4, r1
   d5876:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5878:	42bc      	cmp	r4, r7
   d587a:	d006      	beq.n	d588a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d587c:	6833      	ldr	r3, [r6, #0]
   d587e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5882:	689b      	ldr	r3, [r3, #8]
   d5884:	4630      	mov	r0, r6
   d5886:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5888:	e7f6      	b.n	d5878 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d588a:	4628      	mov	r0, r5
   d588c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d588e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d588e:	2200      	movs	r2, #0
   d5890:	7c00      	ldrb	r0, [r0, #16]
   d5892:	f7fe bee7 	b.w	d4664 <HAL_I2C_Write_Data>

000d5896 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5896:	2100      	movs	r1, #0
   d5898:	7c00      	ldrb	r0, [r0, #16]
   d589a:	f7fe beeb 	b.w	d4674 <HAL_I2C_Available_Data>

000d589e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d589e:	2100      	movs	r1, #0
   d58a0:	7c00      	ldrb	r0, [r0, #16]
   d58a2:	f7fe beef 	b.w	d4684 <HAL_I2C_Read_Data>

000d58a6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d58a6:	2100      	movs	r1, #0
   d58a8:	7c00      	ldrb	r0, [r0, #16]
   d58aa:	f7fe bef3 	b.w	d4694 <HAL_I2C_Peek_Data>

000d58ae <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d58ae:	2100      	movs	r1, #0
   d58b0:	7c00      	ldrb	r0, [r0, #16]
   d58b2:	f7fe bef7 	b.w	d46a4 <HAL_I2C_Flush_Data>

000d58b6 <_ZN7TwoWireD0Ev>:
   d58b6:	b510      	push	{r4, lr}
   d58b8:	2114      	movs	r1, #20
   d58ba:	4604      	mov	r4, r0
   d58bc:	f000 fa24 	bl	d5d08 <_ZdlPvj>
   d58c0:	4620      	mov	r0, r4
   d58c2:	bd10      	pop	{r4, pc}

000d58c4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d58c4:	b510      	push	{r4, lr}
   d58c6:	4604      	mov	r4, r0
   d58c8:	2300      	movs	r3, #0
   d58ca:	6063      	str	r3, [r4, #4]
   d58cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d58d0:	60a3      	str	r3, [r4, #8]
   d58d2:	4b04      	ldr	r3, [pc, #16]	; (d58e4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d58d4:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d58d6:	4608      	mov	r0, r1
   d58d8:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d58da:	4611      	mov	r1, r2
   d58dc:	f7fe fef2 	bl	d46c4 <HAL_I2C_Init>
}
   d58e0:	4620      	mov	r0, r4
   d58e2:	bd10      	pop	{r4, pc}
   d58e4:	000d6df0 	.word	0x000d6df0

000d58e8 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d58e8:	2100      	movs	r1, #0
   d58ea:	7c00      	ldrb	r0, [r0, #16]
   d58ec:	f7fe bee2 	b.w	d46b4 <HAL_I2C_Is_Enabled>

000d58f0 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d58f0:	2200      	movs	r2, #0
   d58f2:	4611      	mov	r1, r2
   d58f4:	6840      	ldr	r0, [r0, #4]
   d58f6:	f7fe bf91 	b.w	d481c <network_listening>

000d58fa <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d58fa:	2200      	movs	r2, #0
   d58fc:	4611      	mov	r1, r2
   d58fe:	6840      	ldr	r0, [r0, #4]
   d5900:	f7fe bf9c 	b.w	d483c <network_get_listen_timeout>

000d5904 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5904:	2200      	movs	r2, #0
   d5906:	6840      	ldr	r0, [r0, #4]
   d5908:	f7fe bf90 	b.w	d482c <network_set_listen_timeout>

000d590c <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d590c:	2200      	movs	r2, #0
   d590e:	f081 0101 	eor.w	r1, r1, #1
   d5912:	6840      	ldr	r0, [r0, #4]
   d5914:	f7fe bf7a 	b.w	d480c <network_listen>

000d5918 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5918:	2300      	movs	r3, #0
   d591a:	461a      	mov	r2, r3
   d591c:	2101      	movs	r1, #1
   d591e:	6840      	ldr	r0, [r0, #4]
   d5920:	f7fe bf6c 	b.w	d47fc <network_off>

000d5924 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5924:	2300      	movs	r3, #0
   d5926:	461a      	mov	r2, r3
   d5928:	4619      	mov	r1, r3
   d592a:	6840      	ldr	r0, [r0, #4]
   d592c:	f7fe bf5e 	b.w	d47ec <network_on>

000d5930 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5930:	2200      	movs	r2, #0
   d5932:	4611      	mov	r1, r2
   d5934:	6840      	ldr	r0, [r0, #4]
   d5936:	f7fe bf51 	b.w	d47dc <network_ready>

000d593a <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d593a:	2200      	movs	r2, #0
   d593c:	4611      	mov	r1, r2
   d593e:	6840      	ldr	r0, [r0, #4]
   d5940:	f7fe bf3c 	b.w	d47bc <network_connecting>

000d5944 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5944:	2200      	movs	r2, #0
   d5946:	2102      	movs	r1, #2
   d5948:	6840      	ldr	r0, [r0, #4]
   d594a:	f7fe bf3f 	b.w	d47cc <network_disconnect>

000d594e <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d594e:	2300      	movs	r3, #0
   d5950:	461a      	mov	r2, r3
   d5952:	6840      	ldr	r0, [r0, #4]
   d5954:	f7fe bf2a 	b.w	d47ac <network_connect>

000d5958 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5958:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d595a:	4605      	mov	r5, r0
   d595c:	b188      	cbz	r0, d5982 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d595e:	6804      	ldr	r4, [r0, #0]
   d5960:	b14c      	cbz	r4, d5976 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5962:	68a3      	ldr	r3, [r4, #8]
   d5964:	b11b      	cbz	r3, d596e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5966:	2203      	movs	r2, #3
   d5968:	4621      	mov	r1, r4
   d596a:	4620      	mov	r0, r4
   d596c:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d596e:	2110      	movs	r1, #16
   d5970:	4620      	mov	r0, r4
   d5972:	f000 f9c9 	bl	d5d08 <_ZdlPvj>
   d5976:	4628      	mov	r0, r5
   d5978:	2114      	movs	r1, #20
      }
   d597a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d597e:	f000 b9c3 	b.w	d5d08 <_ZdlPvj>
   d5982:	bd38      	pop	{r3, r4, r5, pc}

000d5984 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d5984:	b110      	cbz	r0, d598c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d5986:	6803      	ldr	r3, [r0, #0]
   d5988:	685b      	ldr	r3, [r3, #4]
   d598a:	4718      	bx	r3
   d598c:	4770      	bx	lr

000d598e <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d598e:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5990:	6803      	ldr	r3, [r0, #0]
   d5992:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5994:	b1bb      	cbz	r3, d59c6 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5996:	6858      	ldr	r0, [r3, #4]
   d5998:	f7fe fdf4 	bl	d4584 <os_thread_is_current>
   d599c:	b978      	cbnz	r0, d59be <_ZN6ThreadD1Ev+0x30>
   d599e:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d59a0:	7c5a      	ldrb	r2, [r3, #17]
   d59a2:	b912      	cbnz	r2, d59aa <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d59a4:	6858      	ldr	r0, [r3, #4]
   d59a6:	f7fe fdf5 	bl	d4594 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d59aa:	6823      	ldr	r3, [r4, #0]
   d59ac:	6858      	ldr	r0, [r3, #4]
   d59ae:	f7fe fdf9 	bl	d45a4 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d59b2:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d59b4:	2300      	movs	r3, #0
   d59b6:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d59b8:	b128      	cbz	r0, d59c6 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d59ba:	f7ff ffcd 	bl	d5958 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d59be:	6820      	ldr	r0, [r4, #0]
   d59c0:	b108      	cbz	r0, d59c6 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d59c2:	f7ff ffc9 	bl	d5958 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d59c6:	4620      	mov	r0, r4
   d59c8:	bd10      	pop	{r4, pc}

000d59ca <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d59ca:	b538      	push	{r3, r4, r5, lr}
   d59cc:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d59ce:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d59d2:	b108      	cbz	r0, d59d8 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d59d4:	f7fe fb63 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d59d8:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d59dc:	b108      	cbz	r0, d59e2 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d59de:	f7fe fdf1 	bl	d45c4 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d59e2:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d59e6:	b135      	cbz	r5, d59f6 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d59e8:	4628      	mov	r0, r5
   d59ea:	f7ff ffd0 	bl	d598e <_ZN6ThreadD1Ev>
   d59ee:	2104      	movs	r1, #4
   d59f0:	4628      	mov	r0, r5
   d59f2:	f000 f989 	bl	d5d08 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d59f6:	6820      	ldr	r0, [r4, #0]
   d59f8:	b108      	cbz	r0, d59fe <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d59fa:	f7ff ffc3 	bl	d5984 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d59fe:	4620      	mov	r0, r4
   d5a00:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5a04 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5a04:	b510      	push	{r4, lr}
   d5a06:	4b04      	ldr	r3, [pc, #16]	; (d5a18 <_ZN5spark9MeshClassD1Ev+0x14>)
   d5a08:	4604      	mov	r4, r0
   d5a0a:	f840 3b08 	str.w	r3, [r0], #8
   d5a0e:	f7ff ffdc 	bl	d59ca <_ZN5spark11MeshPublishD1Ev>
   d5a12:	4620      	mov	r0, r4
   d5a14:	bd10      	pop	{r4, pc}
   d5a16:	bf00      	nop
   d5a18:	000d6e18 	.word	0x000d6e18

000d5a1c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5a1c:	b538      	push	{r3, r4, r5, lr}
   d5a1e:	4c0e      	ldr	r4, [pc, #56]	; (d5a58 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5a20:	4b0e      	ldr	r3, [pc, #56]	; (d5a5c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d5a22:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5a24:	2500      	movs	r5, #0
   d5a26:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5a28:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5a2c:	6063      	str	r3, [r4, #4]
   d5a2e:	60a5      	str	r5, [r4, #8]
   d5a30:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5a34:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5a38:	f7fe fdbc 	bl	d45b4 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5a3c:	4b08      	ldr	r3, [pc, #32]	; (d5a60 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d5a3e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5a42:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d5a46:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5a48:	4620      	mov	r0, r4
   d5a4a:	4a06      	ldr	r2, [pc, #24]	; (d5a64 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5a4c:	4906      	ldr	r1, [pc, #24]	; (d5a68 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d5a4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5a52:	f000 b94b 	b.w	d5cec <__aeabi_atexit>
   d5a56:	bf00      	nop
   d5a58:	2003e544 	.word	0x2003e544
   d5a5c:	000d6e4c 	.word	0x000d6e4c
   d5a60:	000d6e18 	.word	0x000d6e18
   d5a64:	2003e340 	.word	0x2003e340
   d5a68:	000d5a05 	.word	0x000d5a05

000d5a6c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5a6c:	2300      	movs	r3, #0
   d5a6e:	461a      	mov	r2, r3
   d5a70:	6840      	ldr	r0, [r0, #4]
   d5a72:	f7fe be9b 	b.w	d47ac <network_connect>

000d5a76 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5a76:	2200      	movs	r2, #0
   d5a78:	2102      	movs	r1, #2
   d5a7a:	6840      	ldr	r0, [r0, #4]
   d5a7c:	f7fe bea6 	b.w	d47cc <network_disconnect>

000d5a80 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5a80:	2200      	movs	r2, #0
   d5a82:	4611      	mov	r1, r2
   d5a84:	6840      	ldr	r0, [r0, #4]
   d5a86:	f7fe be99 	b.w	d47bc <network_connecting>

000d5a8a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5a8a:	2200      	movs	r2, #0
   d5a8c:	4611      	mov	r1, r2
   d5a8e:	6840      	ldr	r0, [r0, #4]
   d5a90:	f7fe bea4 	b.w	d47dc <network_ready>

000d5a94 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5a94:	2300      	movs	r3, #0
   d5a96:	461a      	mov	r2, r3
   d5a98:	4619      	mov	r1, r3
   d5a9a:	6840      	ldr	r0, [r0, #4]
   d5a9c:	f7fe bea6 	b.w	d47ec <network_on>

000d5aa0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5aa0:	2300      	movs	r3, #0
   d5aa2:	461a      	mov	r2, r3
   d5aa4:	4619      	mov	r1, r3
   d5aa6:	6840      	ldr	r0, [r0, #4]
   d5aa8:	f7fe bea8 	b.w	d47fc <network_off>

000d5aac <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5aac:	2200      	movs	r2, #0
   d5aae:	f081 0101 	eor.w	r1, r1, #1
   d5ab2:	6840      	ldr	r0, [r0, #4]
   d5ab4:	f7fe beaa 	b.w	d480c <network_listen>

000d5ab8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5ab8:	2200      	movs	r2, #0
   d5aba:	6840      	ldr	r0, [r0, #4]
   d5abc:	f7fe beb6 	b.w	d482c <network_set_listen_timeout>

000d5ac0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5ac0:	2200      	movs	r2, #0
   d5ac2:	4611      	mov	r1, r2
   d5ac4:	6840      	ldr	r0, [r0, #4]
   d5ac6:	f7fe beb9 	b.w	d483c <network_get_listen_timeout>

000d5aca <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5aca:	2200      	movs	r2, #0
   d5acc:	4611      	mov	r1, r2
   d5ace:	6840      	ldr	r0, [r0, #4]
   d5ad0:	f7fe bea4 	b.w	d481c <network_listening>

000d5ad4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5ad4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5ad8:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5ada:	b095      	sub	sp, #84	; 0x54
   d5adc:	4616      	mov	r6, r2
   d5ade:	460d      	mov	r5, r1
   d5ae0:	4607      	mov	r7, r0
    IPAddress addr;
   d5ae2:	f7ff fd21 	bl	d5528 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5ae6:	4621      	mov	r1, r4
   d5ae8:	2220      	movs	r2, #32
   d5aea:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5aec:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5aee:	f000 ff32 	bl	d6956 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5af2:	2340      	movs	r3, #64	; 0x40
   d5af4:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5af6:	4621      	mov	r1, r4
   d5af8:	466b      	mov	r3, sp
   d5afa:	aa0c      	add	r2, sp, #48	; 0x30
   d5afc:	4630      	mov	r0, r6
   d5afe:	f7fe fd01 	bl	d4504 <netdb_getaddrinfo>
    if (!r) {
   d5b02:	4604      	mov	r4, r0
   d5b04:	2800      	cmp	r0, #0
   d5b06:	d144      	bne.n	d5b92 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5b08:	4602      	mov	r2, r0
   d5b0a:	2101      	movs	r1, #1
   d5b0c:	6868      	ldr	r0, [r5, #4]
   d5b0e:	f7fe fe65 	bl	d47dc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5b12:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5b14:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5b16:	4622      	mov	r2, r4
   d5b18:	6868      	ldr	r0, [r5, #4]
   d5b1a:	f7fe fe5f 	bl	d47dc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5b1e:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5b20:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5b22:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5b24:	2e00      	cmp	r6, #0
   d5b26:	d034      	beq.n	d5b92 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5b28:	2900      	cmp	r1, #0
   d5b2a:	d132      	bne.n	d5b92 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5b2c:	6873      	ldr	r3, [r6, #4]
   d5b2e:	2b02      	cmp	r3, #2
   d5b30:	d002      	beq.n	d5b38 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5b32:	2b0a      	cmp	r3, #10
   d5b34:	d009      	beq.n	d5b4a <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5b36:	e02a      	b.n	d5b8e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5b38:	f1b8 0f00 	cmp.w	r8, #0
   d5b3c:	d027      	beq.n	d5b8e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5b3e:	6971      	ldr	r1, [r6, #20]
   d5b40:	4638      	mov	r0, r7
   d5b42:	3104      	adds	r1, #4
   d5b44:	f7ff fd1d 	bl	d5582 <_ZN9IPAddressaSEPKh>
   d5b48:	e020      	b.n	d5b8c <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5b4a:	f1b9 0f00 	cmp.w	r9, #0
   d5b4e:	d01e      	beq.n	d5b8e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5b50:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5b52:	2211      	movs	r2, #17
   d5b54:	a801      	add	r0, sp, #4
   d5b56:	f000 fefe 	bl	d6956 <memset>
                    a.v = 6;
   d5b5a:	2306      	movs	r3, #6
   d5b5c:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5b60:	ad01      	add	r5, sp, #4
   d5b62:	f104 0308 	add.w	r3, r4, #8
   d5b66:	3418      	adds	r4, #24
   d5b68:	6818      	ldr	r0, [r3, #0]
   d5b6a:	6859      	ldr	r1, [r3, #4]
   d5b6c:	462a      	mov	r2, r5
   d5b6e:	c203      	stmia	r2!, {r0, r1}
   d5b70:	3308      	adds	r3, #8
   d5b72:	42a3      	cmp	r3, r4
   d5b74:	4615      	mov	r5, r2
   d5b76:	d1f7      	bne.n	d5b68 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5b78:	a901      	add	r1, sp, #4
   d5b7a:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5b7c:	ad07      	add	r5, sp, #28
   d5b7e:	f7ff fce1 	bl	d5544 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5b82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5b84:	1d3c      	adds	r4, r7, #4
   d5b86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5b88:	682b      	ldr	r3, [r5, #0]
   d5b8a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5b8c:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5b8e:	69f6      	ldr	r6, [r6, #28]
   d5b90:	e7c8      	b.n	d5b24 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5b92:	9800      	ldr	r0, [sp, #0]
   d5b94:	f7fe fcae 	bl	d44f4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5b98:	4638      	mov	r0, r7
   d5b9a:	b015      	add	sp, #84	; 0x54
   d5b9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5ba0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5ba0:	4b02      	ldr	r3, [pc, #8]	; (d5bac <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5ba2:	4a03      	ldr	r2, [pc, #12]	; (d5bb0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5ba4:	601a      	str	r2, [r3, #0]
   d5ba6:	2200      	movs	r2, #0
   d5ba8:	605a      	str	r2, [r3, #4]
   d5baa:	4770      	bx	lr
   d5bac:	2003e718 	.word	0x2003e718
   d5bb0:	000d6e4c 	.word	0x000d6e4c

000d5bb4 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d5bb4:	b510      	push	{r4, lr}
   d5bb6:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d5bb8:	f000 f838 	bl	d5c2c <_ZN8particle7globals11instanceSpiEv>
   d5bbc:	f7fe feda 	bl	d4974 <_ZN8SPIClass9isEnabledEv>
   d5bc0:	b128      	cbz	r0, d5bce <pinAvailable+0x1a>
   d5bc2:	f1a4 030b 	sub.w	r3, r4, #11
   d5bc6:	2b02      	cmp	r3, #2
   d5bc8:	d801      	bhi.n	d5bce <pinAvailable+0x1a>
  {
    return 0; // 'pin' is used
   d5bca:	2000      	movs	r0, #0
   d5bcc:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d5bce:	f000 f867 	bl	d5ca0 <_Z19__fetch_global_Wirev>
   d5bd2:	f7ff fe89 	bl	d58e8 <_ZN7TwoWire9isEnabledEv>
   d5bd6:	b108      	cbz	r0, d5bdc <pinAvailable+0x28>
   d5bd8:	2c01      	cmp	r4, #1
   d5bda:	d9f6      	bls.n	d5bca <pinAvailable+0x16>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d5bdc:	f7ff fe0c 	bl	d57f8 <_Z22__fetch_global_Serial1v>
   d5be0:	f7ff fe06 	bl	d57f0 <_ZN11USARTSerial9isEnabledEv>
   d5be4:	b118      	cbz	r0, d5bee <pinAvailable+0x3a>
   d5be6:	f1a4 0309 	sub.w	r3, r4, #9
   d5bea:	2b01      	cmp	r3, #1
   d5bec:	d9ed      	bls.n	d5bca <pinAvailable+0x16>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d5bee:	2c23      	cmp	r4, #35	; 0x23
   d5bf0:	bf8c      	ite	hi
   d5bf2:	2000      	movhi	r0, #0
   d5bf4:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d5bf6:	bd10      	pop	{r4, pc}

000d5bf8 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d5bf8:	b538      	push	{r3, r4, r5, lr}
   d5bfa:	4604      	mov	r4, r0
   d5bfc:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5bfe:	f7fe fc91 	bl	d4524 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5c02:	28ff      	cmp	r0, #255	; 0xff
   d5c04:	d010      	beq.n	d5c28 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d5c06:	2806      	cmp	r0, #6
   d5c08:	d804      	bhi.n	d5c14 <digitalWrite+0x1c>
   d5c0a:	234d      	movs	r3, #77	; 0x4d
   d5c0c:	fa23 f000 	lsr.w	r0, r3, r0
   d5c10:	07c3      	lsls	r3, r0, #31
   d5c12:	d409      	bmi.n	d5c28 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d5c14:	4620      	mov	r0, r4
   d5c16:	f7ff ffcd 	bl	d5bb4 <pinAvailable>
   d5c1a:	b128      	cbz	r0, d5c28 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5c1c:	4629      	mov	r1, r5
   d5c1e:	4620      	mov	r0, r4
}
   d5c20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5c24:	f7fe bc86 	b.w	d4534 <HAL_GPIO_Write>
   d5c28:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5c2c <_ZN8particle7globals11instanceSpiEv>:
#ifndef SPARK_WIRING_NO_SPI

namespace particle {
namespace globals {

SPIClass& instanceSpi() {
   d5c2c:	b538      	push	{r3, r4, r5, lr}
    static SPIClass instance(HAL_SPI_INTERFACE1);
   d5c2e:	4d0b      	ldr	r5, [pc, #44]	; (d5c5c <_ZN8particle7globals11instanceSpiEv+0x30>)
   d5c30:	6829      	ldr	r1, [r5, #0]
   d5c32:	f011 0401 	ands.w	r4, r1, #1
   d5c36:	d10f      	bne.n	d5c58 <_ZN8particle7globals11instanceSpiEv+0x2c>
   d5c38:	4628      	mov	r0, r5
   d5c3a:	f7fe fa32 	bl	d40a2 <__cxa_guard_acquire>
   d5c3e:	b158      	cbz	r0, d5c58 <_ZN8particle7globals11instanceSpiEv+0x2c>
   d5c40:	4621      	mov	r1, r4
   d5c42:	4807      	ldr	r0, [pc, #28]	; (d5c60 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d5c44:	f7fe fe88 	bl	d4958 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5c48:	4628      	mov	r0, r5
   d5c4a:	f7fe fa2f 	bl	d40ac <__cxa_guard_release>
   d5c4e:	4a05      	ldr	r2, [pc, #20]	; (d5c64 <_ZN8particle7globals11instanceSpiEv+0x38>)
   d5c50:	4905      	ldr	r1, [pc, #20]	; (d5c68 <_ZN8particle7globals11instanceSpiEv+0x3c>)
   d5c52:	4803      	ldr	r0, [pc, #12]	; (d5c60 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d5c54:	f000 f84a 	bl	d5cec <__aeabi_atexit>
    return instance;
}
   d5c58:	4801      	ldr	r0, [pc, #4]	; (d5c60 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d5c5a:	bd38      	pop	{r3, r4, r5, pc}
   d5c5c:	2003e72c 	.word	0x2003e72c
   d5c60:	2003e720 	.word	0x2003e720
   d5c64:	2003e340 	.word	0x2003e340
   d5c68:	000d4949 	.word	0x000d4949

000d5c6c <_Z17acquireWireBufferv>:
   d5c6c:	b570      	push	{r4, r5, r6, lr}
   d5c6e:	4604      	mov	r4, r0
   d5c70:	2514      	movs	r5, #20
   d5c72:	462a      	mov	r2, r5
   d5c74:	4e09      	ldr	r6, [pc, #36]	; (d5c9c <_Z17acquireWireBufferv+0x30>)
   d5c76:	2100      	movs	r1, #0
   d5c78:	f000 fe6d 	bl	d6956 <memset>
   d5c7c:	8025      	strh	r5, [r4, #0]
   d5c7e:	2520      	movs	r5, #32
   d5c80:	4631      	mov	r1, r6
   d5c82:	60a5      	str	r5, [r4, #8]
   d5c84:	6125      	str	r5, [r4, #16]
   d5c86:	4628      	mov	r0, r5
   d5c88:	f000 f840 	bl	d5d0c <_ZnajRKSt9nothrow_t>
   d5c8c:	4631      	mov	r1, r6
   d5c8e:	6060      	str	r0, [r4, #4]
   d5c90:	4628      	mov	r0, r5
   d5c92:	f000 f83b 	bl	d5d0c <_ZnajRKSt9nothrow_t>
   d5c96:	60e0      	str	r0, [r4, #12]
   d5c98:	4620      	mov	r0, r4
   d5c9a:	bd70      	pop	{r4, r5, r6, pc}
   d5c9c:	000d6e78 	.word	0x000d6e78

000d5ca0 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5ca0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5ca2:	4d0e      	ldr	r5, [pc, #56]	; (d5cdc <_Z19__fetch_global_Wirev+0x3c>)
   d5ca4:	6829      	ldr	r1, [r5, #0]
   d5ca6:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5caa:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5cac:	d113      	bne.n	d5cd6 <_Z19__fetch_global_Wirev+0x36>
   d5cae:	4628      	mov	r0, r5
   d5cb0:	f7fe f9f7 	bl	d40a2 <__cxa_guard_acquire>
   d5cb4:	b178      	cbz	r0, d5cd6 <_Z19__fetch_global_Wirev+0x36>
   d5cb6:	a801      	add	r0, sp, #4
   d5cb8:	f7ff ffd8 	bl	d5c6c <_Z17acquireWireBufferv>
   d5cbc:	aa01      	add	r2, sp, #4
   d5cbe:	4621      	mov	r1, r4
   d5cc0:	4807      	ldr	r0, [pc, #28]	; (d5ce0 <_Z19__fetch_global_Wirev+0x40>)
   d5cc2:	f7ff fdff 	bl	d58c4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d5cc6:	4628      	mov	r0, r5
   d5cc8:	f7fe f9f0 	bl	d40ac <__cxa_guard_release>
   d5ccc:	4a05      	ldr	r2, [pc, #20]	; (d5ce4 <_Z19__fetch_global_Wirev+0x44>)
   d5cce:	4906      	ldr	r1, [pc, #24]	; (d5ce8 <_Z19__fetch_global_Wirev+0x48>)
   d5cd0:	4803      	ldr	r0, [pc, #12]	; (d5ce0 <_Z19__fetch_global_Wirev+0x40>)
   d5cd2:	f000 f80b 	bl	d5cec <__aeabi_atexit>
	return wire;
}
   d5cd6:	4802      	ldr	r0, [pc, #8]	; (d5ce0 <_Z19__fetch_global_Wirev+0x40>)
   d5cd8:	b007      	add	sp, #28
   d5cda:	bd30      	pop	{r4, r5, pc}
   d5cdc:	2003e734 	.word	0x2003e734
   d5ce0:	2003e738 	.word	0x2003e738
   d5ce4:	2003e340 	.word	0x2003e340
   d5ce8:	000d586d 	.word	0x000d586d

000d5cec <__aeabi_atexit>:
   d5cec:	460b      	mov	r3, r1
   d5cee:	4601      	mov	r1, r0
   d5cf0:	4618      	mov	r0, r3
   d5cf2:	f000 be17 	b.w	d6924 <__cxa_atexit>
	...

000d5cf8 <_ZSt15get_new_handlerv>:
   d5cf8:	4b02      	ldr	r3, [pc, #8]	; (d5d04 <_ZSt15get_new_handlerv+0xc>)
   d5cfa:	6818      	ldr	r0, [r3, #0]
   d5cfc:	f3bf 8f5f 	dmb	sy
   d5d00:	4770      	bx	lr
   d5d02:	bf00      	nop
   d5d04:	2003e74c 	.word	0x2003e74c

000d5d08 <_ZdlPvj>:
   d5d08:	f7fe b9c7 	b.w	d409a <_ZdlPv>

000d5d0c <_ZnajRKSt9nothrow_t>:
   d5d0c:	f000 b800 	b.w	d5d10 <_ZnwjRKSt9nothrow_t>

000d5d10 <_ZnwjRKSt9nothrow_t>:
   d5d10:	b510      	push	{r4, lr}
   d5d12:	2800      	cmp	r0, #0
   d5d14:	bf14      	ite	ne
   d5d16:	4604      	movne	r4, r0
   d5d18:	2401      	moveq	r4, #1
   d5d1a:	4620      	mov	r0, r4
   d5d1c:	f7fe fdae 	bl	d487c <malloc>
   d5d20:	b920      	cbnz	r0, d5d2c <_ZnwjRKSt9nothrow_t+0x1c>
   d5d22:	f7ff ffe9 	bl	d5cf8 <_ZSt15get_new_handlerv>
   d5d26:	b108      	cbz	r0, d5d2c <_ZnwjRKSt9nothrow_t+0x1c>
   d5d28:	4780      	blx	r0
   d5d2a:	e7f6      	b.n	d5d1a <_ZnwjRKSt9nothrow_t+0xa>
   d5d2c:	bd10      	pop	{r4, pc}

000d5d2e <_ZSt25__throw_bad_function_callv>:
   d5d2e:	b508      	push	{r3, lr}
   d5d30:	f7fe fdbc 	bl	d48ac <abort>

000d5d34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5d34:	4b18      	ldr	r3, [pc, #96]	; (d5d98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5d36:	681a      	ldr	r2, [r3, #0]
   d5d38:	07d1      	lsls	r1, r2, #31
   d5d3a:	bf5c      	itt	pl
   d5d3c:	2201      	movpl	r2, #1
   d5d3e:	601a      	strpl	r2, [r3, #0]
   d5d40:	4b16      	ldr	r3, [pc, #88]	; (d5d9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5d42:	681a      	ldr	r2, [r3, #0]
   d5d44:	07d2      	lsls	r2, r2, #31
   d5d46:	bf5c      	itt	pl
   d5d48:	2201      	movpl	r2, #1
   d5d4a:	601a      	strpl	r2, [r3, #0]
   d5d4c:	4b14      	ldr	r3, [pc, #80]	; (d5da0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5d4e:	681a      	ldr	r2, [r3, #0]
   d5d50:	07d0      	lsls	r0, r2, #31
   d5d52:	bf5c      	itt	pl
   d5d54:	2201      	movpl	r2, #1
   d5d56:	601a      	strpl	r2, [r3, #0]
   d5d58:	4b12      	ldr	r3, [pc, #72]	; (d5da4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5d5a:	681a      	ldr	r2, [r3, #0]
   d5d5c:	07d1      	lsls	r1, r2, #31
   d5d5e:	bf5c      	itt	pl
   d5d60:	2201      	movpl	r2, #1
   d5d62:	601a      	strpl	r2, [r3, #0]
   d5d64:	4b10      	ldr	r3, [pc, #64]	; (d5da8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5d66:	681a      	ldr	r2, [r3, #0]
   d5d68:	07d2      	lsls	r2, r2, #31
   d5d6a:	bf5c      	itt	pl
   d5d6c:	2201      	movpl	r2, #1
   d5d6e:	601a      	strpl	r2, [r3, #0]
   d5d70:	4b0e      	ldr	r3, [pc, #56]	; (d5dac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5d72:	681a      	ldr	r2, [r3, #0]
   d5d74:	07d0      	lsls	r0, r2, #31
   d5d76:	bf5c      	itt	pl
   d5d78:	2201      	movpl	r2, #1
   d5d7a:	601a      	strpl	r2, [r3, #0]
   d5d7c:	4b0c      	ldr	r3, [pc, #48]	; (d5db0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5d7e:	681a      	ldr	r2, [r3, #0]
   d5d80:	07d1      	lsls	r1, r2, #31
   d5d82:	bf5c      	itt	pl
   d5d84:	2201      	movpl	r2, #1
   d5d86:	601a      	strpl	r2, [r3, #0]
   d5d88:	4b0a      	ldr	r3, [pc, #40]	; (d5db4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5d8a:	681a      	ldr	r2, [r3, #0]
   d5d8c:	07d2      	lsls	r2, r2, #31
   d5d8e:	bf5c      	itt	pl
   d5d90:	2201      	movpl	r2, #1
   d5d92:	601a      	strpl	r2, [r3, #0]
   d5d94:	4770      	bx	lr
   d5d96:	bf00      	nop
   d5d98:	2003e76c 	.word	0x2003e76c
   d5d9c:	2003e768 	.word	0x2003e768
   d5da0:	2003e764 	.word	0x2003e764
   d5da4:	2003e760 	.word	0x2003e760
   d5da8:	2003e75c 	.word	0x2003e75c
   d5dac:	2003e758 	.word	0x2003e758
   d5db0:	2003e754 	.word	0x2003e754
   d5db4:	2003e750 	.word	0x2003e750

000d5db8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5db8:	4b24      	ldr	r3, [pc, #144]	; (d5e4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5dba:	681a      	ldr	r2, [r3, #0]
   d5dbc:	07d0      	lsls	r0, r2, #31
   d5dbe:	bf5c      	itt	pl
   d5dc0:	2201      	movpl	r2, #1
   d5dc2:	601a      	strpl	r2, [r3, #0]
   d5dc4:	4b22      	ldr	r3, [pc, #136]	; (d5e50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5dc6:	681a      	ldr	r2, [r3, #0]
   d5dc8:	07d1      	lsls	r1, r2, #31
   d5dca:	bf5c      	itt	pl
   d5dcc:	2201      	movpl	r2, #1
   d5dce:	601a      	strpl	r2, [r3, #0]
   d5dd0:	4b20      	ldr	r3, [pc, #128]	; (d5e54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5dd2:	681a      	ldr	r2, [r3, #0]
   d5dd4:	07d2      	lsls	r2, r2, #31
   d5dd6:	bf5c      	itt	pl
   d5dd8:	2201      	movpl	r2, #1
   d5dda:	601a      	strpl	r2, [r3, #0]
   d5ddc:	4b1e      	ldr	r3, [pc, #120]	; (d5e58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5dde:	681a      	ldr	r2, [r3, #0]
   d5de0:	07d0      	lsls	r0, r2, #31
   d5de2:	bf5c      	itt	pl
   d5de4:	2201      	movpl	r2, #1
   d5de6:	601a      	strpl	r2, [r3, #0]
   d5de8:	4b1c      	ldr	r3, [pc, #112]	; (d5e5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5dea:	681a      	ldr	r2, [r3, #0]
   d5dec:	07d1      	lsls	r1, r2, #31
   d5dee:	bf5c      	itt	pl
   d5df0:	2201      	movpl	r2, #1
   d5df2:	601a      	strpl	r2, [r3, #0]
   d5df4:	4b1a      	ldr	r3, [pc, #104]	; (d5e60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5df6:	681a      	ldr	r2, [r3, #0]
   d5df8:	07d2      	lsls	r2, r2, #31
   d5dfa:	bf5c      	itt	pl
   d5dfc:	2201      	movpl	r2, #1
   d5dfe:	601a      	strpl	r2, [r3, #0]
   d5e00:	4b18      	ldr	r3, [pc, #96]	; (d5e64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5e02:	681a      	ldr	r2, [r3, #0]
   d5e04:	07d0      	lsls	r0, r2, #31
   d5e06:	bf5c      	itt	pl
   d5e08:	2201      	movpl	r2, #1
   d5e0a:	601a      	strpl	r2, [r3, #0]
   d5e0c:	4b16      	ldr	r3, [pc, #88]	; (d5e68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5e0e:	681a      	ldr	r2, [r3, #0]
   d5e10:	07d1      	lsls	r1, r2, #31
   d5e12:	bf5c      	itt	pl
   d5e14:	2201      	movpl	r2, #1
   d5e16:	601a      	strpl	r2, [r3, #0]
   d5e18:	4b14      	ldr	r3, [pc, #80]	; (d5e6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5e1a:	681a      	ldr	r2, [r3, #0]
   d5e1c:	07d2      	lsls	r2, r2, #31
   d5e1e:	bf5c      	itt	pl
   d5e20:	2201      	movpl	r2, #1
   d5e22:	601a      	strpl	r2, [r3, #0]
   d5e24:	4b12      	ldr	r3, [pc, #72]	; (d5e70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5e26:	681a      	ldr	r2, [r3, #0]
   d5e28:	07d0      	lsls	r0, r2, #31
   d5e2a:	bf5c      	itt	pl
   d5e2c:	2201      	movpl	r2, #1
   d5e2e:	601a      	strpl	r2, [r3, #0]
   d5e30:	4b10      	ldr	r3, [pc, #64]	; (d5e74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5e32:	681a      	ldr	r2, [r3, #0]
   d5e34:	07d1      	lsls	r1, r2, #31
   d5e36:	bf5c      	itt	pl
   d5e38:	2201      	movpl	r2, #1
   d5e3a:	601a      	strpl	r2, [r3, #0]
   d5e3c:	4b0e      	ldr	r3, [pc, #56]	; (d5e78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5e3e:	681a      	ldr	r2, [r3, #0]
   d5e40:	07d2      	lsls	r2, r2, #31
   d5e42:	bf5c      	itt	pl
   d5e44:	2201      	movpl	r2, #1
   d5e46:	601a      	strpl	r2, [r3, #0]
   d5e48:	4770      	bx	lr
   d5e4a:	bf00      	nop
   d5e4c:	2003e79c 	.word	0x2003e79c
   d5e50:	2003e798 	.word	0x2003e798
   d5e54:	2003e794 	.word	0x2003e794
   d5e58:	2003e790 	.word	0x2003e790
   d5e5c:	2003e78c 	.word	0x2003e78c
   d5e60:	2003e788 	.word	0x2003e788
   d5e64:	2003e784 	.word	0x2003e784
   d5e68:	2003e780 	.word	0x2003e780
   d5e6c:	2003e77c 	.word	0x2003e77c
   d5e70:	2003e778 	.word	0x2003e778
   d5e74:	2003e774 	.word	0x2003e774
   d5e78:	2003e770 	.word	0x2003e770

000d5e7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5e7c:	4b24      	ldr	r3, [pc, #144]	; (d5f10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5e7e:	681a      	ldr	r2, [r3, #0]
   d5e80:	07d0      	lsls	r0, r2, #31
   d5e82:	bf5c      	itt	pl
   d5e84:	2201      	movpl	r2, #1
   d5e86:	601a      	strpl	r2, [r3, #0]
   d5e88:	4b22      	ldr	r3, [pc, #136]	; (d5f14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5e8a:	681a      	ldr	r2, [r3, #0]
   d5e8c:	07d1      	lsls	r1, r2, #31
   d5e8e:	bf5c      	itt	pl
   d5e90:	2201      	movpl	r2, #1
   d5e92:	601a      	strpl	r2, [r3, #0]
   d5e94:	4b20      	ldr	r3, [pc, #128]	; (d5f18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5e96:	681a      	ldr	r2, [r3, #0]
   d5e98:	07d2      	lsls	r2, r2, #31
   d5e9a:	bf5c      	itt	pl
   d5e9c:	2201      	movpl	r2, #1
   d5e9e:	601a      	strpl	r2, [r3, #0]
   d5ea0:	4b1e      	ldr	r3, [pc, #120]	; (d5f1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5ea2:	681a      	ldr	r2, [r3, #0]
   d5ea4:	07d0      	lsls	r0, r2, #31
   d5ea6:	bf5c      	itt	pl
   d5ea8:	2201      	movpl	r2, #1
   d5eaa:	601a      	strpl	r2, [r3, #0]
   d5eac:	4b1c      	ldr	r3, [pc, #112]	; (d5f20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5eae:	681a      	ldr	r2, [r3, #0]
   d5eb0:	07d1      	lsls	r1, r2, #31
   d5eb2:	bf5c      	itt	pl
   d5eb4:	2201      	movpl	r2, #1
   d5eb6:	601a      	strpl	r2, [r3, #0]
   d5eb8:	4b1a      	ldr	r3, [pc, #104]	; (d5f24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5eba:	681a      	ldr	r2, [r3, #0]
   d5ebc:	07d2      	lsls	r2, r2, #31
   d5ebe:	bf5c      	itt	pl
   d5ec0:	2201      	movpl	r2, #1
   d5ec2:	601a      	strpl	r2, [r3, #0]
   d5ec4:	4b18      	ldr	r3, [pc, #96]	; (d5f28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5ec6:	681a      	ldr	r2, [r3, #0]
   d5ec8:	07d0      	lsls	r0, r2, #31
   d5eca:	bf5c      	itt	pl
   d5ecc:	2201      	movpl	r2, #1
   d5ece:	601a      	strpl	r2, [r3, #0]
   d5ed0:	4b16      	ldr	r3, [pc, #88]	; (d5f2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5ed2:	681a      	ldr	r2, [r3, #0]
   d5ed4:	07d1      	lsls	r1, r2, #31
   d5ed6:	bf5c      	itt	pl
   d5ed8:	2201      	movpl	r2, #1
   d5eda:	601a      	strpl	r2, [r3, #0]
   d5edc:	4b14      	ldr	r3, [pc, #80]	; (d5f30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5ede:	681a      	ldr	r2, [r3, #0]
   d5ee0:	07d2      	lsls	r2, r2, #31
   d5ee2:	bf5c      	itt	pl
   d5ee4:	2201      	movpl	r2, #1
   d5ee6:	601a      	strpl	r2, [r3, #0]
   d5ee8:	4b12      	ldr	r3, [pc, #72]	; (d5f34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5eea:	681a      	ldr	r2, [r3, #0]
   d5eec:	07d0      	lsls	r0, r2, #31
   d5eee:	bf5c      	itt	pl
   d5ef0:	2201      	movpl	r2, #1
   d5ef2:	601a      	strpl	r2, [r3, #0]
   d5ef4:	4b10      	ldr	r3, [pc, #64]	; (d5f38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5ef6:	681a      	ldr	r2, [r3, #0]
   d5ef8:	07d1      	lsls	r1, r2, #31
   d5efa:	bf5c      	itt	pl
   d5efc:	2201      	movpl	r2, #1
   d5efe:	601a      	strpl	r2, [r3, #0]
   d5f00:	4b0e      	ldr	r3, [pc, #56]	; (d5f3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5f02:	681a      	ldr	r2, [r3, #0]
   d5f04:	07d2      	lsls	r2, r2, #31
   d5f06:	bf5c      	itt	pl
   d5f08:	2201      	movpl	r2, #1
   d5f0a:	601a      	strpl	r2, [r3, #0]
   d5f0c:	4770      	bx	lr
   d5f0e:	bf00      	nop
   d5f10:	2003e7cc 	.word	0x2003e7cc
   d5f14:	2003e7c8 	.word	0x2003e7c8
   d5f18:	2003e7c4 	.word	0x2003e7c4
   d5f1c:	2003e7c0 	.word	0x2003e7c0
   d5f20:	2003e7bc 	.word	0x2003e7bc
   d5f24:	2003e7b8 	.word	0x2003e7b8
   d5f28:	2003e7b4 	.word	0x2003e7b4
   d5f2c:	2003e7b0 	.word	0x2003e7b0
   d5f30:	2003e7ac 	.word	0x2003e7ac
   d5f34:	2003e7a8 	.word	0x2003e7a8
   d5f38:	2003e7a4 	.word	0x2003e7a4
   d5f3c:	2003e7a0 	.word	0x2003e7a0

000d5f40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5f40:	4b18      	ldr	r3, [pc, #96]	; (d5fa4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5f42:	681a      	ldr	r2, [r3, #0]
   d5f44:	07d1      	lsls	r1, r2, #31
   d5f46:	bf5c      	itt	pl
   d5f48:	2201      	movpl	r2, #1
   d5f4a:	601a      	strpl	r2, [r3, #0]
   d5f4c:	4b16      	ldr	r3, [pc, #88]	; (d5fa8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5f4e:	681a      	ldr	r2, [r3, #0]
   d5f50:	07d2      	lsls	r2, r2, #31
   d5f52:	bf5c      	itt	pl
   d5f54:	2201      	movpl	r2, #1
   d5f56:	601a      	strpl	r2, [r3, #0]
   d5f58:	4b14      	ldr	r3, [pc, #80]	; (d5fac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5f5a:	681a      	ldr	r2, [r3, #0]
   d5f5c:	07d0      	lsls	r0, r2, #31
   d5f5e:	bf5c      	itt	pl
   d5f60:	2201      	movpl	r2, #1
   d5f62:	601a      	strpl	r2, [r3, #0]
   d5f64:	4b12      	ldr	r3, [pc, #72]	; (d5fb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5f66:	681a      	ldr	r2, [r3, #0]
   d5f68:	07d1      	lsls	r1, r2, #31
   d5f6a:	bf5c      	itt	pl
   d5f6c:	2201      	movpl	r2, #1
   d5f6e:	601a      	strpl	r2, [r3, #0]
   d5f70:	4b10      	ldr	r3, [pc, #64]	; (d5fb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5f72:	681a      	ldr	r2, [r3, #0]
   d5f74:	07d2      	lsls	r2, r2, #31
   d5f76:	bf5c      	itt	pl
   d5f78:	2201      	movpl	r2, #1
   d5f7a:	601a      	strpl	r2, [r3, #0]
   d5f7c:	4b0e      	ldr	r3, [pc, #56]	; (d5fb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5f7e:	681a      	ldr	r2, [r3, #0]
   d5f80:	07d0      	lsls	r0, r2, #31
   d5f82:	bf5c      	itt	pl
   d5f84:	2201      	movpl	r2, #1
   d5f86:	601a      	strpl	r2, [r3, #0]
   d5f88:	4b0c      	ldr	r3, [pc, #48]	; (d5fbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5f8a:	681a      	ldr	r2, [r3, #0]
   d5f8c:	07d1      	lsls	r1, r2, #31
   d5f8e:	bf5c      	itt	pl
   d5f90:	2201      	movpl	r2, #1
   d5f92:	601a      	strpl	r2, [r3, #0]
   d5f94:	4b0a      	ldr	r3, [pc, #40]	; (d5fc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5f96:	681a      	ldr	r2, [r3, #0]
   d5f98:	07d2      	lsls	r2, r2, #31
   d5f9a:	bf5c      	itt	pl
   d5f9c:	2201      	movpl	r2, #1
   d5f9e:	601a      	strpl	r2, [r3, #0]
   d5fa0:	4770      	bx	lr
   d5fa2:	bf00      	nop
   d5fa4:	2003e7ec 	.word	0x2003e7ec
   d5fa8:	2003e7e8 	.word	0x2003e7e8
   d5fac:	2003e7e4 	.word	0x2003e7e4
   d5fb0:	2003e7e0 	.word	0x2003e7e0
   d5fb4:	2003e7dc 	.word	0x2003e7dc
   d5fb8:	2003e7d8 	.word	0x2003e7d8
   d5fbc:	2003e7d4 	.word	0x2003e7d4
   d5fc0:	2003e7d0 	.word	0x2003e7d0

000d5fc4 <__aeabi_drsub>:
   d5fc4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d5fc8:	e002      	b.n	d5fd0 <__adddf3>
   d5fca:	bf00      	nop

000d5fcc <__aeabi_dsub>:
   d5fcc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5fd0 <__adddf3>:
   d5fd0:	b530      	push	{r4, r5, lr}
   d5fd2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d5fd6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d5fda:	ea94 0f05 	teq	r4, r5
   d5fde:	bf08      	it	eq
   d5fe0:	ea90 0f02 	teqeq	r0, r2
   d5fe4:	bf1f      	itttt	ne
   d5fe6:	ea54 0c00 	orrsne.w	ip, r4, r0
   d5fea:	ea55 0c02 	orrsne.w	ip, r5, r2
   d5fee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5ff2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5ff6:	f000 80e2 	beq.w	d61be <__adddf3+0x1ee>
   d5ffa:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5ffe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d6002:	bfb8      	it	lt
   d6004:	426d      	neglt	r5, r5
   d6006:	dd0c      	ble.n	d6022 <__adddf3+0x52>
   d6008:	442c      	add	r4, r5
   d600a:	ea80 0202 	eor.w	r2, r0, r2
   d600e:	ea81 0303 	eor.w	r3, r1, r3
   d6012:	ea82 0000 	eor.w	r0, r2, r0
   d6016:	ea83 0101 	eor.w	r1, r3, r1
   d601a:	ea80 0202 	eor.w	r2, r0, r2
   d601e:	ea81 0303 	eor.w	r3, r1, r3
   d6022:	2d36      	cmp	r5, #54	; 0x36
   d6024:	bf88      	it	hi
   d6026:	bd30      	pophi	{r4, r5, pc}
   d6028:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d602c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6030:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6034:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6038:	d002      	beq.n	d6040 <__adddf3+0x70>
   d603a:	4240      	negs	r0, r0
   d603c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6040:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6044:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6048:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d604c:	d002      	beq.n	d6054 <__adddf3+0x84>
   d604e:	4252      	negs	r2, r2
   d6050:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6054:	ea94 0f05 	teq	r4, r5
   d6058:	f000 80a7 	beq.w	d61aa <__adddf3+0x1da>
   d605c:	f1a4 0401 	sub.w	r4, r4, #1
   d6060:	f1d5 0e20 	rsbs	lr, r5, #32
   d6064:	db0d      	blt.n	d6082 <__adddf3+0xb2>
   d6066:	fa02 fc0e 	lsl.w	ip, r2, lr
   d606a:	fa22 f205 	lsr.w	r2, r2, r5
   d606e:	1880      	adds	r0, r0, r2
   d6070:	f141 0100 	adc.w	r1, r1, #0
   d6074:	fa03 f20e 	lsl.w	r2, r3, lr
   d6078:	1880      	adds	r0, r0, r2
   d607a:	fa43 f305 	asr.w	r3, r3, r5
   d607e:	4159      	adcs	r1, r3
   d6080:	e00e      	b.n	d60a0 <__adddf3+0xd0>
   d6082:	f1a5 0520 	sub.w	r5, r5, #32
   d6086:	f10e 0e20 	add.w	lr, lr, #32
   d608a:	2a01      	cmp	r2, #1
   d608c:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6090:	bf28      	it	cs
   d6092:	f04c 0c02 	orrcs.w	ip, ip, #2
   d6096:	fa43 f305 	asr.w	r3, r3, r5
   d609a:	18c0      	adds	r0, r0, r3
   d609c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d60a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d60a4:	d507      	bpl.n	d60b6 <__adddf3+0xe6>
   d60a6:	f04f 0e00 	mov.w	lr, #0
   d60aa:	f1dc 0c00 	rsbs	ip, ip, #0
   d60ae:	eb7e 0000 	sbcs.w	r0, lr, r0
   d60b2:	eb6e 0101 	sbc.w	r1, lr, r1
   d60b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d60ba:	d31b      	bcc.n	d60f4 <__adddf3+0x124>
   d60bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d60c0:	d30c      	bcc.n	d60dc <__adddf3+0x10c>
   d60c2:	0849      	lsrs	r1, r1, #1
   d60c4:	ea5f 0030 	movs.w	r0, r0, rrx
   d60c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d60cc:	f104 0401 	add.w	r4, r4, #1
   d60d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d60d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d60d8:	f080 809a 	bcs.w	d6210 <__adddf3+0x240>
   d60dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d60e0:	bf08      	it	eq
   d60e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d60e6:	f150 0000 	adcs.w	r0, r0, #0
   d60ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d60ee:	ea41 0105 	orr.w	r1, r1, r5
   d60f2:	bd30      	pop	{r4, r5, pc}
   d60f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d60f8:	4140      	adcs	r0, r0
   d60fa:	eb41 0101 	adc.w	r1, r1, r1
   d60fe:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6102:	f1a4 0401 	sub.w	r4, r4, #1
   d6106:	d1e9      	bne.n	d60dc <__adddf3+0x10c>
   d6108:	f091 0f00 	teq	r1, #0
   d610c:	bf04      	itt	eq
   d610e:	4601      	moveq	r1, r0
   d6110:	2000      	moveq	r0, #0
   d6112:	fab1 f381 	clz	r3, r1
   d6116:	bf08      	it	eq
   d6118:	3320      	addeq	r3, #32
   d611a:	f1a3 030b 	sub.w	r3, r3, #11
   d611e:	f1b3 0220 	subs.w	r2, r3, #32
   d6122:	da0c      	bge.n	d613e <__adddf3+0x16e>
   d6124:	320c      	adds	r2, #12
   d6126:	dd08      	ble.n	d613a <__adddf3+0x16a>
   d6128:	f102 0c14 	add.w	ip, r2, #20
   d612c:	f1c2 020c 	rsb	r2, r2, #12
   d6130:	fa01 f00c 	lsl.w	r0, r1, ip
   d6134:	fa21 f102 	lsr.w	r1, r1, r2
   d6138:	e00c      	b.n	d6154 <__adddf3+0x184>
   d613a:	f102 0214 	add.w	r2, r2, #20
   d613e:	bfd8      	it	le
   d6140:	f1c2 0c20 	rsble	ip, r2, #32
   d6144:	fa01 f102 	lsl.w	r1, r1, r2
   d6148:	fa20 fc0c 	lsr.w	ip, r0, ip
   d614c:	bfdc      	itt	le
   d614e:	ea41 010c 	orrle.w	r1, r1, ip
   d6152:	4090      	lslle	r0, r2
   d6154:	1ae4      	subs	r4, r4, r3
   d6156:	bfa2      	ittt	ge
   d6158:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d615c:	4329      	orrge	r1, r5
   d615e:	bd30      	popge	{r4, r5, pc}
   d6160:	ea6f 0404 	mvn.w	r4, r4
   d6164:	3c1f      	subs	r4, #31
   d6166:	da1c      	bge.n	d61a2 <__adddf3+0x1d2>
   d6168:	340c      	adds	r4, #12
   d616a:	dc0e      	bgt.n	d618a <__adddf3+0x1ba>
   d616c:	f104 0414 	add.w	r4, r4, #20
   d6170:	f1c4 0220 	rsb	r2, r4, #32
   d6174:	fa20 f004 	lsr.w	r0, r0, r4
   d6178:	fa01 f302 	lsl.w	r3, r1, r2
   d617c:	ea40 0003 	orr.w	r0, r0, r3
   d6180:	fa21 f304 	lsr.w	r3, r1, r4
   d6184:	ea45 0103 	orr.w	r1, r5, r3
   d6188:	bd30      	pop	{r4, r5, pc}
   d618a:	f1c4 040c 	rsb	r4, r4, #12
   d618e:	f1c4 0220 	rsb	r2, r4, #32
   d6192:	fa20 f002 	lsr.w	r0, r0, r2
   d6196:	fa01 f304 	lsl.w	r3, r1, r4
   d619a:	ea40 0003 	orr.w	r0, r0, r3
   d619e:	4629      	mov	r1, r5
   d61a0:	bd30      	pop	{r4, r5, pc}
   d61a2:	fa21 f004 	lsr.w	r0, r1, r4
   d61a6:	4629      	mov	r1, r5
   d61a8:	bd30      	pop	{r4, r5, pc}
   d61aa:	f094 0f00 	teq	r4, #0
   d61ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d61b2:	bf06      	itte	eq
   d61b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d61b8:	3401      	addeq	r4, #1
   d61ba:	3d01      	subne	r5, #1
   d61bc:	e74e      	b.n	d605c <__adddf3+0x8c>
   d61be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d61c2:	bf18      	it	ne
   d61c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d61c8:	d029      	beq.n	d621e <__adddf3+0x24e>
   d61ca:	ea94 0f05 	teq	r4, r5
   d61ce:	bf08      	it	eq
   d61d0:	ea90 0f02 	teqeq	r0, r2
   d61d4:	d005      	beq.n	d61e2 <__adddf3+0x212>
   d61d6:	ea54 0c00 	orrs.w	ip, r4, r0
   d61da:	bf04      	itt	eq
   d61dc:	4619      	moveq	r1, r3
   d61de:	4610      	moveq	r0, r2
   d61e0:	bd30      	pop	{r4, r5, pc}
   d61e2:	ea91 0f03 	teq	r1, r3
   d61e6:	bf1e      	ittt	ne
   d61e8:	2100      	movne	r1, #0
   d61ea:	2000      	movne	r0, #0
   d61ec:	bd30      	popne	{r4, r5, pc}
   d61ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d61f2:	d105      	bne.n	d6200 <__adddf3+0x230>
   d61f4:	0040      	lsls	r0, r0, #1
   d61f6:	4149      	adcs	r1, r1
   d61f8:	bf28      	it	cs
   d61fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d61fe:	bd30      	pop	{r4, r5, pc}
   d6200:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6204:	bf3c      	itt	cc
   d6206:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d620a:	bd30      	popcc	{r4, r5, pc}
   d620c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6210:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6214:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6218:	f04f 0000 	mov.w	r0, #0
   d621c:	bd30      	pop	{r4, r5, pc}
   d621e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6222:	bf1a      	itte	ne
   d6224:	4619      	movne	r1, r3
   d6226:	4610      	movne	r0, r2
   d6228:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d622c:	bf1c      	itt	ne
   d622e:	460b      	movne	r3, r1
   d6230:	4602      	movne	r2, r0
   d6232:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6236:	bf06      	itte	eq
   d6238:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d623c:	ea91 0f03 	teqeq	r1, r3
   d6240:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6244:	bd30      	pop	{r4, r5, pc}
   d6246:	bf00      	nop

000d6248 <__aeabi_ui2d>:
   d6248:	f090 0f00 	teq	r0, #0
   d624c:	bf04      	itt	eq
   d624e:	2100      	moveq	r1, #0
   d6250:	4770      	bxeq	lr
   d6252:	b530      	push	{r4, r5, lr}
   d6254:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6258:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d625c:	f04f 0500 	mov.w	r5, #0
   d6260:	f04f 0100 	mov.w	r1, #0
   d6264:	e750      	b.n	d6108 <__adddf3+0x138>
   d6266:	bf00      	nop

000d6268 <__aeabi_i2d>:
   d6268:	f090 0f00 	teq	r0, #0
   d626c:	bf04      	itt	eq
   d626e:	2100      	moveq	r1, #0
   d6270:	4770      	bxeq	lr
   d6272:	b530      	push	{r4, r5, lr}
   d6274:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6278:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d627c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6280:	bf48      	it	mi
   d6282:	4240      	negmi	r0, r0
   d6284:	f04f 0100 	mov.w	r1, #0
   d6288:	e73e      	b.n	d6108 <__adddf3+0x138>
   d628a:	bf00      	nop

000d628c <__aeabi_f2d>:
   d628c:	0042      	lsls	r2, r0, #1
   d628e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d6292:	ea4f 0131 	mov.w	r1, r1, rrx
   d6296:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d629a:	bf1f      	itttt	ne
   d629c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d62a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d62a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d62a8:	4770      	bxne	lr
   d62aa:	f092 0f00 	teq	r2, #0
   d62ae:	bf14      	ite	ne
   d62b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d62b4:	4770      	bxeq	lr
   d62b6:	b530      	push	{r4, r5, lr}
   d62b8:	f44f 7460 	mov.w	r4, #896	; 0x380
   d62bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d62c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d62c4:	e720      	b.n	d6108 <__adddf3+0x138>
   d62c6:	bf00      	nop

000d62c8 <__aeabi_ul2d>:
   d62c8:	ea50 0201 	orrs.w	r2, r0, r1
   d62cc:	bf08      	it	eq
   d62ce:	4770      	bxeq	lr
   d62d0:	b530      	push	{r4, r5, lr}
   d62d2:	f04f 0500 	mov.w	r5, #0
   d62d6:	e00a      	b.n	d62ee <__aeabi_l2d+0x16>

000d62d8 <__aeabi_l2d>:
   d62d8:	ea50 0201 	orrs.w	r2, r0, r1
   d62dc:	bf08      	it	eq
   d62de:	4770      	bxeq	lr
   d62e0:	b530      	push	{r4, r5, lr}
   d62e2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d62e6:	d502      	bpl.n	d62ee <__aeabi_l2d+0x16>
   d62e8:	4240      	negs	r0, r0
   d62ea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d62ee:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d62f2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d62f6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d62fa:	f43f aedc 	beq.w	d60b6 <__adddf3+0xe6>
   d62fe:	f04f 0203 	mov.w	r2, #3
   d6302:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6306:	bf18      	it	ne
   d6308:	3203      	addne	r2, #3
   d630a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d630e:	bf18      	it	ne
   d6310:	3203      	addne	r2, #3
   d6312:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6316:	f1c2 0320 	rsb	r3, r2, #32
   d631a:	fa00 fc03 	lsl.w	ip, r0, r3
   d631e:	fa20 f002 	lsr.w	r0, r0, r2
   d6322:	fa01 fe03 	lsl.w	lr, r1, r3
   d6326:	ea40 000e 	orr.w	r0, r0, lr
   d632a:	fa21 f102 	lsr.w	r1, r1, r2
   d632e:	4414      	add	r4, r2
   d6330:	e6c1      	b.n	d60b6 <__adddf3+0xe6>
   d6332:	bf00      	nop

000d6334 <__aeabi_dmul>:
   d6334:	b570      	push	{r4, r5, r6, lr}
   d6336:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d633a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d633e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6342:	bf1d      	ittte	ne
   d6344:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6348:	ea94 0f0c 	teqne	r4, ip
   d634c:	ea95 0f0c 	teqne	r5, ip
   d6350:	f000 f8de 	bleq	d6510 <__aeabi_dmul+0x1dc>
   d6354:	442c      	add	r4, r5
   d6356:	ea81 0603 	eor.w	r6, r1, r3
   d635a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d635e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6362:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d6366:	bf18      	it	ne
   d6368:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d636c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6370:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6374:	d038      	beq.n	d63e8 <__aeabi_dmul+0xb4>
   d6376:	fba0 ce02 	umull	ip, lr, r0, r2
   d637a:	f04f 0500 	mov.w	r5, #0
   d637e:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6382:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6386:	fbe0 e503 	umlal	lr, r5, r0, r3
   d638a:	f04f 0600 	mov.w	r6, #0
   d638e:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6392:	f09c 0f00 	teq	ip, #0
   d6396:	bf18      	it	ne
   d6398:	f04e 0e01 	orrne.w	lr, lr, #1
   d639c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d63a0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d63a4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d63a8:	d204      	bcs.n	d63b4 <__aeabi_dmul+0x80>
   d63aa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d63ae:	416d      	adcs	r5, r5
   d63b0:	eb46 0606 	adc.w	r6, r6, r6
   d63b4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d63b8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d63bc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d63c0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d63c4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d63c8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d63cc:	bf88      	it	hi
   d63ce:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d63d2:	d81e      	bhi.n	d6412 <__aeabi_dmul+0xde>
   d63d4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d63d8:	bf08      	it	eq
   d63da:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d63de:	f150 0000 	adcs.w	r0, r0, #0
   d63e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d63e6:	bd70      	pop	{r4, r5, r6, pc}
   d63e8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d63ec:	ea46 0101 	orr.w	r1, r6, r1
   d63f0:	ea40 0002 	orr.w	r0, r0, r2
   d63f4:	ea81 0103 	eor.w	r1, r1, r3
   d63f8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d63fc:	bfc2      	ittt	gt
   d63fe:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6402:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6406:	bd70      	popgt	{r4, r5, r6, pc}
   d6408:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d640c:	f04f 0e00 	mov.w	lr, #0
   d6410:	3c01      	subs	r4, #1
   d6412:	f300 80ab 	bgt.w	d656c <__aeabi_dmul+0x238>
   d6416:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d641a:	bfde      	ittt	le
   d641c:	2000      	movle	r0, #0
   d641e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6422:	bd70      	pople	{r4, r5, r6, pc}
   d6424:	f1c4 0400 	rsb	r4, r4, #0
   d6428:	3c20      	subs	r4, #32
   d642a:	da35      	bge.n	d6498 <__aeabi_dmul+0x164>
   d642c:	340c      	adds	r4, #12
   d642e:	dc1b      	bgt.n	d6468 <__aeabi_dmul+0x134>
   d6430:	f104 0414 	add.w	r4, r4, #20
   d6434:	f1c4 0520 	rsb	r5, r4, #32
   d6438:	fa00 f305 	lsl.w	r3, r0, r5
   d643c:	fa20 f004 	lsr.w	r0, r0, r4
   d6440:	fa01 f205 	lsl.w	r2, r1, r5
   d6444:	ea40 0002 	orr.w	r0, r0, r2
   d6448:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d644c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6450:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6454:	fa21 f604 	lsr.w	r6, r1, r4
   d6458:	eb42 0106 	adc.w	r1, r2, r6
   d645c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6460:	bf08      	it	eq
   d6462:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6466:	bd70      	pop	{r4, r5, r6, pc}
   d6468:	f1c4 040c 	rsb	r4, r4, #12
   d646c:	f1c4 0520 	rsb	r5, r4, #32
   d6470:	fa00 f304 	lsl.w	r3, r0, r4
   d6474:	fa20 f005 	lsr.w	r0, r0, r5
   d6478:	fa01 f204 	lsl.w	r2, r1, r4
   d647c:	ea40 0002 	orr.w	r0, r0, r2
   d6480:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6484:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6488:	f141 0100 	adc.w	r1, r1, #0
   d648c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6490:	bf08      	it	eq
   d6492:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6496:	bd70      	pop	{r4, r5, r6, pc}
   d6498:	f1c4 0520 	rsb	r5, r4, #32
   d649c:	fa00 f205 	lsl.w	r2, r0, r5
   d64a0:	ea4e 0e02 	orr.w	lr, lr, r2
   d64a4:	fa20 f304 	lsr.w	r3, r0, r4
   d64a8:	fa01 f205 	lsl.w	r2, r1, r5
   d64ac:	ea43 0302 	orr.w	r3, r3, r2
   d64b0:	fa21 f004 	lsr.w	r0, r1, r4
   d64b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d64b8:	fa21 f204 	lsr.w	r2, r1, r4
   d64bc:	ea20 0002 	bic.w	r0, r0, r2
   d64c0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d64c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d64c8:	bf08      	it	eq
   d64ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d64ce:	bd70      	pop	{r4, r5, r6, pc}
   d64d0:	f094 0f00 	teq	r4, #0
   d64d4:	d10f      	bne.n	d64f6 <__aeabi_dmul+0x1c2>
   d64d6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d64da:	0040      	lsls	r0, r0, #1
   d64dc:	eb41 0101 	adc.w	r1, r1, r1
   d64e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d64e4:	bf08      	it	eq
   d64e6:	3c01      	subeq	r4, #1
   d64e8:	d0f7      	beq.n	d64da <__aeabi_dmul+0x1a6>
   d64ea:	ea41 0106 	orr.w	r1, r1, r6
   d64ee:	f095 0f00 	teq	r5, #0
   d64f2:	bf18      	it	ne
   d64f4:	4770      	bxne	lr
   d64f6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d64fa:	0052      	lsls	r2, r2, #1
   d64fc:	eb43 0303 	adc.w	r3, r3, r3
   d6500:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6504:	bf08      	it	eq
   d6506:	3d01      	subeq	r5, #1
   d6508:	d0f7      	beq.n	d64fa <__aeabi_dmul+0x1c6>
   d650a:	ea43 0306 	orr.w	r3, r3, r6
   d650e:	4770      	bx	lr
   d6510:	ea94 0f0c 	teq	r4, ip
   d6514:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6518:	bf18      	it	ne
   d651a:	ea95 0f0c 	teqne	r5, ip
   d651e:	d00c      	beq.n	d653a <__aeabi_dmul+0x206>
   d6520:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6524:	bf18      	it	ne
   d6526:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d652a:	d1d1      	bne.n	d64d0 <__aeabi_dmul+0x19c>
   d652c:	ea81 0103 	eor.w	r1, r1, r3
   d6530:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6534:	f04f 0000 	mov.w	r0, #0
   d6538:	bd70      	pop	{r4, r5, r6, pc}
   d653a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d653e:	bf06      	itte	eq
   d6540:	4610      	moveq	r0, r2
   d6542:	4619      	moveq	r1, r3
   d6544:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6548:	d019      	beq.n	d657e <__aeabi_dmul+0x24a>
   d654a:	ea94 0f0c 	teq	r4, ip
   d654e:	d102      	bne.n	d6556 <__aeabi_dmul+0x222>
   d6550:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6554:	d113      	bne.n	d657e <__aeabi_dmul+0x24a>
   d6556:	ea95 0f0c 	teq	r5, ip
   d655a:	d105      	bne.n	d6568 <__aeabi_dmul+0x234>
   d655c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6560:	bf1c      	itt	ne
   d6562:	4610      	movne	r0, r2
   d6564:	4619      	movne	r1, r3
   d6566:	d10a      	bne.n	d657e <__aeabi_dmul+0x24a>
   d6568:	ea81 0103 	eor.w	r1, r1, r3
   d656c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6570:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6574:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6578:	f04f 0000 	mov.w	r0, #0
   d657c:	bd70      	pop	{r4, r5, r6, pc}
   d657e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6582:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d6586:	bd70      	pop	{r4, r5, r6, pc}

000d6588 <__aeabi_ddiv>:
   d6588:	b570      	push	{r4, r5, r6, lr}
   d658a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d658e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6596:	bf1d      	ittte	ne
   d6598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d659c:	ea94 0f0c 	teqne	r4, ip
   d65a0:	ea95 0f0c 	teqne	r5, ip
   d65a4:	f000 f8a7 	bleq	d66f6 <__aeabi_ddiv+0x16e>
   d65a8:	eba4 0405 	sub.w	r4, r4, r5
   d65ac:	ea81 0e03 	eor.w	lr, r1, r3
   d65b0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d65b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d65b8:	f000 8088 	beq.w	d66cc <__aeabi_ddiv+0x144>
   d65bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d65c0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d65c4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d65c8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d65cc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d65d0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d65d4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d65d8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d65dc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d65e0:	429d      	cmp	r5, r3
   d65e2:	bf08      	it	eq
   d65e4:	4296      	cmpeq	r6, r2
   d65e6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d65ea:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d65ee:	d202      	bcs.n	d65f6 <__aeabi_ddiv+0x6e>
   d65f0:	085b      	lsrs	r3, r3, #1
   d65f2:	ea4f 0232 	mov.w	r2, r2, rrx
   d65f6:	1ab6      	subs	r6, r6, r2
   d65f8:	eb65 0503 	sbc.w	r5, r5, r3
   d65fc:	085b      	lsrs	r3, r3, #1
   d65fe:	ea4f 0232 	mov.w	r2, r2, rrx
   d6602:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d6606:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d660a:	ebb6 0e02 	subs.w	lr, r6, r2
   d660e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6612:	bf22      	ittt	cs
   d6614:	1ab6      	subcs	r6, r6, r2
   d6616:	4675      	movcs	r5, lr
   d6618:	ea40 000c 	orrcs.w	r0, r0, ip
   d661c:	085b      	lsrs	r3, r3, #1
   d661e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6622:	ebb6 0e02 	subs.w	lr, r6, r2
   d6626:	eb75 0e03 	sbcs.w	lr, r5, r3
   d662a:	bf22      	ittt	cs
   d662c:	1ab6      	subcs	r6, r6, r2
   d662e:	4675      	movcs	r5, lr
   d6630:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6634:	085b      	lsrs	r3, r3, #1
   d6636:	ea4f 0232 	mov.w	r2, r2, rrx
   d663a:	ebb6 0e02 	subs.w	lr, r6, r2
   d663e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6642:	bf22      	ittt	cs
   d6644:	1ab6      	subcs	r6, r6, r2
   d6646:	4675      	movcs	r5, lr
   d6648:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d664c:	085b      	lsrs	r3, r3, #1
   d664e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6652:	ebb6 0e02 	subs.w	lr, r6, r2
   d6656:	eb75 0e03 	sbcs.w	lr, r5, r3
   d665a:	bf22      	ittt	cs
   d665c:	1ab6      	subcs	r6, r6, r2
   d665e:	4675      	movcs	r5, lr
   d6660:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6664:	ea55 0e06 	orrs.w	lr, r5, r6
   d6668:	d018      	beq.n	d669c <__aeabi_ddiv+0x114>
   d666a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d666e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6672:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6676:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d667a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d667e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d6682:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d6686:	d1c0      	bne.n	d660a <__aeabi_ddiv+0x82>
   d6688:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d668c:	d10b      	bne.n	d66a6 <__aeabi_ddiv+0x11e>
   d668e:	ea41 0100 	orr.w	r1, r1, r0
   d6692:	f04f 0000 	mov.w	r0, #0
   d6696:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d669a:	e7b6      	b.n	d660a <__aeabi_ddiv+0x82>
   d669c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d66a0:	bf04      	itt	eq
   d66a2:	4301      	orreq	r1, r0
   d66a4:	2000      	moveq	r0, #0
   d66a6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d66aa:	bf88      	it	hi
   d66ac:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d66b0:	f63f aeaf 	bhi.w	d6412 <__aeabi_dmul+0xde>
   d66b4:	ebb5 0c03 	subs.w	ip, r5, r3
   d66b8:	bf04      	itt	eq
   d66ba:	ebb6 0c02 	subseq.w	ip, r6, r2
   d66be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d66c2:	f150 0000 	adcs.w	r0, r0, #0
   d66c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d66ca:	bd70      	pop	{r4, r5, r6, pc}
   d66cc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d66d0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d66d4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d66d8:	bfc2      	ittt	gt
   d66da:	ebd4 050c 	rsbsgt	r5, r4, ip
   d66de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d66e2:	bd70      	popgt	{r4, r5, r6, pc}
   d66e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d66e8:	f04f 0e00 	mov.w	lr, #0
   d66ec:	3c01      	subs	r4, #1
   d66ee:	e690      	b.n	d6412 <__aeabi_dmul+0xde>
   d66f0:	ea45 0e06 	orr.w	lr, r5, r6
   d66f4:	e68d      	b.n	d6412 <__aeabi_dmul+0xde>
   d66f6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d66fa:	ea94 0f0c 	teq	r4, ip
   d66fe:	bf08      	it	eq
   d6700:	ea95 0f0c 	teqeq	r5, ip
   d6704:	f43f af3b 	beq.w	d657e <__aeabi_dmul+0x24a>
   d6708:	ea94 0f0c 	teq	r4, ip
   d670c:	d10a      	bne.n	d6724 <__aeabi_ddiv+0x19c>
   d670e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6712:	f47f af34 	bne.w	d657e <__aeabi_dmul+0x24a>
   d6716:	ea95 0f0c 	teq	r5, ip
   d671a:	f47f af25 	bne.w	d6568 <__aeabi_dmul+0x234>
   d671e:	4610      	mov	r0, r2
   d6720:	4619      	mov	r1, r3
   d6722:	e72c      	b.n	d657e <__aeabi_dmul+0x24a>
   d6724:	ea95 0f0c 	teq	r5, ip
   d6728:	d106      	bne.n	d6738 <__aeabi_ddiv+0x1b0>
   d672a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d672e:	f43f aefd 	beq.w	d652c <__aeabi_dmul+0x1f8>
   d6732:	4610      	mov	r0, r2
   d6734:	4619      	mov	r1, r3
   d6736:	e722      	b.n	d657e <__aeabi_dmul+0x24a>
   d6738:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d673c:	bf18      	it	ne
   d673e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6742:	f47f aec5 	bne.w	d64d0 <__aeabi_dmul+0x19c>
   d6746:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d674a:	f47f af0d 	bne.w	d6568 <__aeabi_dmul+0x234>
   d674e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6752:	f47f aeeb 	bne.w	d652c <__aeabi_dmul+0x1f8>
   d6756:	e712      	b.n	d657e <__aeabi_dmul+0x24a>

000d6758 <__gedf2>:
   d6758:	f04f 3cff 	mov.w	ip, #4294967295
   d675c:	e006      	b.n	d676c <__cmpdf2+0x4>
   d675e:	bf00      	nop

000d6760 <__ledf2>:
   d6760:	f04f 0c01 	mov.w	ip, #1
   d6764:	e002      	b.n	d676c <__cmpdf2+0x4>
   d6766:	bf00      	nop

000d6768 <__cmpdf2>:
   d6768:	f04f 0c01 	mov.w	ip, #1
   d676c:	f84d cd04 	str.w	ip, [sp, #-4]!
   d6770:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6774:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6778:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d677c:	bf18      	it	ne
   d677e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d6782:	d01b      	beq.n	d67bc <__cmpdf2+0x54>
   d6784:	b001      	add	sp, #4
   d6786:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d678a:	bf0c      	ite	eq
   d678c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d6790:	ea91 0f03 	teqne	r1, r3
   d6794:	bf02      	ittt	eq
   d6796:	ea90 0f02 	teqeq	r0, r2
   d679a:	2000      	moveq	r0, #0
   d679c:	4770      	bxeq	lr
   d679e:	f110 0f00 	cmn.w	r0, #0
   d67a2:	ea91 0f03 	teq	r1, r3
   d67a6:	bf58      	it	pl
   d67a8:	4299      	cmppl	r1, r3
   d67aa:	bf08      	it	eq
   d67ac:	4290      	cmpeq	r0, r2
   d67ae:	bf2c      	ite	cs
   d67b0:	17d8      	asrcs	r0, r3, #31
   d67b2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d67b6:	f040 0001 	orr.w	r0, r0, #1
   d67ba:	4770      	bx	lr
   d67bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d67c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d67c4:	d102      	bne.n	d67cc <__cmpdf2+0x64>
   d67c6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d67ca:	d107      	bne.n	d67dc <__cmpdf2+0x74>
   d67cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d67d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d67d4:	d1d6      	bne.n	d6784 <__cmpdf2+0x1c>
   d67d6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d67da:	d0d3      	beq.n	d6784 <__cmpdf2+0x1c>
   d67dc:	f85d 0b04 	ldr.w	r0, [sp], #4
   d67e0:	4770      	bx	lr
   d67e2:	bf00      	nop

000d67e4 <__aeabi_cdrcmple>:
   d67e4:	4684      	mov	ip, r0
   d67e6:	4610      	mov	r0, r2
   d67e8:	4662      	mov	r2, ip
   d67ea:	468c      	mov	ip, r1
   d67ec:	4619      	mov	r1, r3
   d67ee:	4663      	mov	r3, ip
   d67f0:	e000      	b.n	d67f4 <__aeabi_cdcmpeq>
   d67f2:	bf00      	nop

000d67f4 <__aeabi_cdcmpeq>:
   d67f4:	b501      	push	{r0, lr}
   d67f6:	f7ff ffb7 	bl	d6768 <__cmpdf2>
   d67fa:	2800      	cmp	r0, #0
   d67fc:	bf48      	it	mi
   d67fe:	f110 0f00 	cmnmi.w	r0, #0
   d6802:	bd01      	pop	{r0, pc}

000d6804 <__aeabi_dcmpeq>:
   d6804:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6808:	f7ff fff4 	bl	d67f4 <__aeabi_cdcmpeq>
   d680c:	bf0c      	ite	eq
   d680e:	2001      	moveq	r0, #1
   d6810:	2000      	movne	r0, #0
   d6812:	f85d fb08 	ldr.w	pc, [sp], #8
   d6816:	bf00      	nop

000d6818 <__aeabi_dcmplt>:
   d6818:	f84d ed08 	str.w	lr, [sp, #-8]!
   d681c:	f7ff ffea 	bl	d67f4 <__aeabi_cdcmpeq>
   d6820:	bf34      	ite	cc
   d6822:	2001      	movcc	r0, #1
   d6824:	2000      	movcs	r0, #0
   d6826:	f85d fb08 	ldr.w	pc, [sp], #8
   d682a:	bf00      	nop

000d682c <__aeabi_dcmple>:
   d682c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6830:	f7ff ffe0 	bl	d67f4 <__aeabi_cdcmpeq>
   d6834:	bf94      	ite	ls
   d6836:	2001      	movls	r0, #1
   d6838:	2000      	movhi	r0, #0
   d683a:	f85d fb08 	ldr.w	pc, [sp], #8
   d683e:	bf00      	nop

000d6840 <__aeabi_dcmpge>:
   d6840:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6844:	f7ff ffce 	bl	d67e4 <__aeabi_cdrcmple>
   d6848:	bf94      	ite	ls
   d684a:	2001      	movls	r0, #1
   d684c:	2000      	movhi	r0, #0
   d684e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6852:	bf00      	nop

000d6854 <__aeabi_dcmpgt>:
   d6854:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6858:	f7ff ffc4 	bl	d67e4 <__aeabi_cdrcmple>
   d685c:	bf34      	ite	cc
   d685e:	2001      	movcc	r0, #1
   d6860:	2000      	movcs	r0, #0
   d6862:	f85d fb08 	ldr.w	pc, [sp], #8
   d6866:	bf00      	nop

000d6868 <__aeabi_dcmpun>:
   d6868:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d686c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6870:	d102      	bne.n	d6878 <__aeabi_dcmpun+0x10>
   d6872:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6876:	d10a      	bne.n	d688e <__aeabi_dcmpun+0x26>
   d6878:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d687c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6880:	d102      	bne.n	d6888 <__aeabi_dcmpun+0x20>
   d6882:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6886:	d102      	bne.n	d688e <__aeabi_dcmpun+0x26>
   d6888:	f04f 0000 	mov.w	r0, #0
   d688c:	4770      	bx	lr
   d688e:	f04f 0001 	mov.w	r0, #1
   d6892:	4770      	bx	lr

000d6894 <__aeabi_d2iz>:
   d6894:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6898:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d689c:	d215      	bcs.n	d68ca <__aeabi_d2iz+0x36>
   d689e:	d511      	bpl.n	d68c4 <__aeabi_d2iz+0x30>
   d68a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d68a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d68a8:	d912      	bls.n	d68d0 <__aeabi_d2iz+0x3c>
   d68aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d68ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d68b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d68b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d68ba:	fa23 f002 	lsr.w	r0, r3, r2
   d68be:	bf18      	it	ne
   d68c0:	4240      	negne	r0, r0
   d68c2:	4770      	bx	lr
   d68c4:	f04f 0000 	mov.w	r0, #0
   d68c8:	4770      	bx	lr
   d68ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d68ce:	d105      	bne.n	d68dc <__aeabi_d2iz+0x48>
   d68d0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d68d4:	bf08      	it	eq
   d68d6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d68da:	4770      	bx	lr
   d68dc:	f04f 0000 	mov.w	r0, #0
   d68e0:	4770      	bx	lr
   d68e2:	bf00      	nop

000d68e4 <__aeabi_d2uiz>:
   d68e4:	004a      	lsls	r2, r1, #1
   d68e6:	d211      	bcs.n	d690c <__aeabi_d2uiz+0x28>
   d68e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d68ec:	d211      	bcs.n	d6912 <__aeabi_d2uiz+0x2e>
   d68ee:	d50d      	bpl.n	d690c <__aeabi_d2uiz+0x28>
   d68f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d68f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d68f8:	d40e      	bmi.n	d6918 <__aeabi_d2uiz+0x34>
   d68fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d68fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6902:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6906:	fa23 f002 	lsr.w	r0, r3, r2
   d690a:	4770      	bx	lr
   d690c:	f04f 0000 	mov.w	r0, #0
   d6910:	4770      	bx	lr
   d6912:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6916:	d102      	bne.n	d691e <__aeabi_d2uiz+0x3a>
   d6918:	f04f 30ff 	mov.w	r0, #4294967295
   d691c:	4770      	bx	lr
   d691e:	f04f 0000 	mov.w	r0, #0
   d6922:	4770      	bx	lr

000d6924 <__cxa_atexit>:
   d6924:	b510      	push	{r4, lr}
   d6926:	4c05      	ldr	r4, [pc, #20]	; (d693c <__cxa_atexit+0x18>)
   d6928:	4613      	mov	r3, r2
   d692a:	b12c      	cbz	r4, d6938 <__cxa_atexit+0x14>
   d692c:	460a      	mov	r2, r1
   d692e:	4601      	mov	r1, r0
   d6930:	2002      	movs	r0, #2
   d6932:	f3af 8000 	nop.w
   d6936:	bd10      	pop	{r4, pc}
   d6938:	4620      	mov	r0, r4
   d693a:	bd10      	pop	{r4, pc}
   d693c:	00000000 	.word	0x00000000

000d6940 <memcpy>:
   d6940:	b510      	push	{r4, lr}
   d6942:	1e43      	subs	r3, r0, #1
   d6944:	440a      	add	r2, r1
   d6946:	4291      	cmp	r1, r2
   d6948:	d004      	beq.n	d6954 <memcpy+0x14>
   d694a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d694e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6952:	e7f8      	b.n	d6946 <memcpy+0x6>
   d6954:	bd10      	pop	{r4, pc}

000d6956 <memset>:
   d6956:	4402      	add	r2, r0
   d6958:	4603      	mov	r3, r0
   d695a:	4293      	cmp	r3, r2
   d695c:	d002      	beq.n	d6964 <memset+0xe>
   d695e:	f803 1b01 	strb.w	r1, [r3], #1
   d6962:	e7fa      	b.n	d695a <memset+0x4>
   d6964:	4770      	bx	lr
	...

000d6968 <srand>:
   d6968:	b538      	push	{r3, r4, r5, lr}
   d696a:	4b12      	ldr	r3, [pc, #72]	; (d69b4 <srand+0x4c>)
   d696c:	681c      	ldr	r4, [r3, #0]
   d696e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6970:	4605      	mov	r5, r0
   d6972:	b9d3      	cbnz	r3, d69aa <srand+0x42>
   d6974:	2018      	movs	r0, #24
   d6976:	f7fd ff81 	bl	d487c <malloc>
   d697a:	f243 330e 	movw	r3, #13070	; 0x330e
   d697e:	63a0      	str	r0, [r4, #56]	; 0x38
   d6980:	8003      	strh	r3, [r0, #0]
   d6982:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6986:	8043      	strh	r3, [r0, #2]
   d6988:	f241 2334 	movw	r3, #4660	; 0x1234
   d698c:	8083      	strh	r3, [r0, #4]
   d698e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d6992:	80c3      	strh	r3, [r0, #6]
   d6994:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6998:	8103      	strh	r3, [r0, #8]
   d699a:	2305      	movs	r3, #5
   d699c:	8143      	strh	r3, [r0, #10]
   d699e:	230b      	movs	r3, #11
   d69a0:	8183      	strh	r3, [r0, #12]
   d69a2:	2201      	movs	r2, #1
   d69a4:	2300      	movs	r3, #0
   d69a6:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d69aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d69ac:	2200      	movs	r2, #0
   d69ae:	611d      	str	r5, [r3, #16]
   d69b0:	615a      	str	r2, [r3, #20]
   d69b2:	bd38      	pop	{r3, r4, r5, pc}
   d69b4:	2003e33c 	.word	0x2003e33c

000d69b8 <rand>:
   d69b8:	4b19      	ldr	r3, [pc, #100]	; (d6a20 <rand+0x68>)
   d69ba:	b510      	push	{r4, lr}
   d69bc:	681c      	ldr	r4, [r3, #0]
   d69be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d69c0:	b9d3      	cbnz	r3, d69f8 <rand+0x40>
   d69c2:	2018      	movs	r0, #24
   d69c4:	f7fd ff5a 	bl	d487c <malloc>
   d69c8:	f243 330e 	movw	r3, #13070	; 0x330e
   d69cc:	63a0      	str	r0, [r4, #56]	; 0x38
   d69ce:	8003      	strh	r3, [r0, #0]
   d69d0:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d69d4:	8043      	strh	r3, [r0, #2]
   d69d6:	f241 2334 	movw	r3, #4660	; 0x1234
   d69da:	8083      	strh	r3, [r0, #4]
   d69dc:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d69e0:	80c3      	strh	r3, [r0, #6]
   d69e2:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d69e6:	8103      	strh	r3, [r0, #8]
   d69e8:	2305      	movs	r3, #5
   d69ea:	8143      	strh	r3, [r0, #10]
   d69ec:	230b      	movs	r3, #11
   d69ee:	8183      	strh	r3, [r0, #12]
   d69f0:	2201      	movs	r2, #1
   d69f2:	2300      	movs	r3, #0
   d69f4:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d69f8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d69fa:	4c0a      	ldr	r4, [pc, #40]	; (d6a24 <rand+0x6c>)
   d69fc:	690b      	ldr	r3, [r1, #16]
   d69fe:	6948      	ldr	r0, [r1, #20]
   d6a00:	4a09      	ldr	r2, [pc, #36]	; (d6a28 <rand+0x70>)
   d6a02:	435c      	muls	r4, r3
   d6a04:	fb02 4000 	mla	r0, r2, r0, r4
   d6a08:	fba3 2302 	umull	r2, r3, r3, r2
   d6a0c:	3201      	adds	r2, #1
   d6a0e:	4403      	add	r3, r0
   d6a10:	f143 0300 	adc.w	r3, r3, #0
   d6a14:	e9c1 2304 	strd	r2, r3, [r1, #16]
   d6a18:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d6a1c:	bd10      	pop	{r4, pc}
   d6a1e:	bf00      	nop
   d6a20:	2003e33c 	.word	0x2003e33c
   d6a24:	5851f42d 	.word	0x5851f42d
   d6a28:	4c957f2d 	.word	0x4c957f2d

000d6a2c <strdup>:
   d6a2c:	4b02      	ldr	r3, [pc, #8]	; (d6a38 <strdup+0xc>)
   d6a2e:	4601      	mov	r1, r0
   d6a30:	6818      	ldr	r0, [r3, #0]
   d6a32:	f000 b803 	b.w	d6a3c <_strdup_r>
   d6a36:	bf00      	nop
   d6a38:	2003e33c 	.word	0x2003e33c

000d6a3c <_strdup_r>:
   d6a3c:	b570      	push	{r4, r5, r6, lr}
   d6a3e:	4606      	mov	r6, r0
   d6a40:	4608      	mov	r0, r1
   d6a42:	460c      	mov	r4, r1
   d6a44:	f000 f80d 	bl	d6a62 <strlen>
   d6a48:	1c45      	adds	r5, r0, #1
   d6a4a:	4629      	mov	r1, r5
   d6a4c:	4630      	mov	r0, r6
   d6a4e:	f7fd ff35 	bl	d48bc <_malloc_r>
   d6a52:	4606      	mov	r6, r0
   d6a54:	b118      	cbz	r0, d6a5e <_strdup_r+0x22>
   d6a56:	462a      	mov	r2, r5
   d6a58:	4621      	mov	r1, r4
   d6a5a:	f7ff ff71 	bl	d6940 <memcpy>
   d6a5e:	4630      	mov	r0, r6
   d6a60:	bd70      	pop	{r4, r5, r6, pc}

000d6a62 <strlen>:
   d6a62:	4603      	mov	r3, r0
   d6a64:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6a68:	2a00      	cmp	r2, #0
   d6a6a:	d1fb      	bne.n	d6a64 <strlen+0x2>
   d6a6c:	1a18      	subs	r0, r3, r0
   d6a6e:	3801      	subs	r0, #1
   d6a70:	4770      	bx	lr

000d6a72 <link_code_end>:
	...

000d6a74 <dynalib_user>:
   d6a74:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d6a84:	0000 0000 7774 6c69 6f69 735f 736d 5300     ....twilio_sms.S
   d6a94:	6e65 6964 676e 654d 7373 6761 0065 6854     endingMessage.Th
   d6aa4:	2065 6863 6c69 2064 7661 7265 6761 2065     e child average 
   d6ab4:	7369 203a 0020 6863 6c69 2064 6e69 6320     is:  .child in c
   d6ac4:	7261 7400 6568 7520 6273 6120 7272 7961     ar.the usb array
   d6ad4:	6920 3a73 2020 5300 6e65 6964 676e 6d20      is:  .Sending m
   d6ae4:	7365 6173 6567 6220 6365 7561 6573 6320     essage because c
   d6af4:	7261 7420 7275 656e 2064 666f 2066 6e61     ar turned off an
   d6b04:	2064 6863 6c69 2064 7369 6920 206e 6874     d child is in th
   d6b14:	2065 6163 0072 6854 2065 6574 706d 7265     e car.The temper
   d6b24:	7461 7275 2065 7369 7220 7369 6e69 2067     ature is rising 
   d6b34:	6f74 206f 6166 7473 5400 6568 7420 6d65     too fast.The tem
   d6b44:	2070 7661 7265 6761 2065 7369 203a 0020     p average is:  .
   d6b54:	6553 646e 6e69 2067 656d 7373 6761 2065     Sending message 
   d6b64:	6562 6163 7375 2065 6574 706d 7265 7461     because temperat
   d6b74:	7275 2065 7369 7420 6f6f 6820 746f 5300     ure is too hot.S
   d6b84:	6e65 6964 676e 6d20 7365 6173 6567 6220     ending message b
   d6b94:	6365 7561 6573 7420 6d65 2070 7369 6320     ecause temp is c
   d6ba4:	6972 6974 6163 006c 6f59 7275 6320 6968     ritical.Your chi
   d6bb4:	646c 6920 2073 6e69 7420 6568 6320 7261     ld is in the car
   d6bc4:	0000 0000                                   ....

000d6bc8 <_ZTVN5spark13EthernetClassE>:
	...
   d6bd0:	492b 000d 4921 000d 4917 000d 490d 000d     +I..!I...I...I..
   d6be0:	4901 000d 48f5 000d 48e9 000d 48e1 000d     .I...H...H...H..
   d6bf0:	48d7 000d 48cd 000d 5ad5 000d               .H...H...Z..

000d6bfc <_ZTV8SPIClass>:
	...
   d6c04:	4949 000d 494b 000d 616e 006e 766f 0066     II..KI..nan.ovf.
   d6c14:	002e 6e69 0066 6162 6475 5300 7265 6169     ..inf.baud.Seria
   d6c24:	006c 6553 6972 6c61 0031 7974 6570 7000     l.Serial1.type.p
   d6c34:	7261 6d61 6300 646d 6900 0064 6e68 0064     aram.cmd.id.hnd.
   d6c44:	7473 6d72 6600 6c69 0074 766c 006c 6461     strm.filt.lvl.ad
   d6c54:	4864 6e61 6c64 7265 7200 6d65 766f 4865     dHandler.removeH
   d6c64:	6e61 6c64 7265 6500 756e 486d 6e61 6c64     andler.enumHandl
   d6c74:	7265 0073 534a 4e4f 7453 6572 6d61 6f4c     ers.JSONStreamLo
   d6c84:	4867 6e61 6c64 7265 6100 7070 2500 3130     gHandler.app.%01
   d6c94:	7530 0020 205d 2500 0064 202c 2800 3a29     0u .] .%d., .():
   d6ca4:	0020 5b20 6300 646f 2065 203d 2500 0069      . [.code = .%i.
   d6cb4:	6564 6174 6c69 2073 203d 0d00 000a 6e6c     details = ....ln
   d6cc4:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
   d6cd4:	6f6e 656e 7400 6172 6563 6900 666e 006f     none.trace.info.
   d6ce4:	6177 6e72 6500 7272 726f 7000 6e61 6369     warn.error.panic
   d6cf4:	6100 6c6c 5a00 2500 302b 6433 253a 3230     .all.Z.%+03d:%02
   d6d04:	0075 5925 252d 2d6d 6425 2554 3a48 4d25     u.%Y-%m-%dT%H:%M
   d6d14:	253a 2553 007a 7361 7463 6d69 0065 0000     :%S%z.asctime...

000d6d24 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d6d2c:	4f2d 000d 4f33 000d 4f77 000d 4f41 000d     -O..3O..wO..AO..
   d6d3c:	4f2f 000d                                   /O..

000d6d40 <_ZTV9IPAddress>:
	...
   d6d48:	54c5 000d 54b5 000d 54b7 000d               .T...T...T..

000d6d54 <_ZTV9USBSerial>:
	...
   d6d5c:	559d 000d 55ed 000d 55fb 000d 4b01 000d     .U...U...U...K..
   d6d6c:	55d9 000d 559f 000d 55b5 000d 55e7 000d     .U...U...U...U..
   d6d7c:	55cb 000d 5599 000d                         .U...U..

000d6d84 <_ZTVN5spark13CellularClassE>:
	...
   d6d8c:	5707 000d 56fd 000d 56f3 000d 56a9 000d     .W...V...V...V..
   d6d9c:	56e7 000d 56db 000d 56cf 000d 56c7 000d     .V...V...V...V..
   d6dac:	56bd 000d 56b3 000d 5ad5 000d               .V...V...Z..

000d6db8 <_ZTV11USARTSerial>:
	...
   d6dc0:	5741 000d 5791 000d 579f 000d 4b01 000d     AW...W...W...K..
   d6dd0:	5755 000d 5777 000d 5763 000d 578b 000d     UW..wW..cW...W..
   d6de0:	5743 000d 5747 000d                         CW..GW..

000d6de8 <_ZTV7TwoWire>:
	...
   d6df0:	586d 000d 58b7 000d 588f 000d 586f 000d     mX...X...X..oX..
   d6e00:	5897 000d 589f 000d 58a7 000d 58af 000d     .X...X...X...X..

000d6e10 <_ZTVN5spark9MeshClassE>:
	...
   d6e18:	594f 000d 5945 000d 593b 000d 5931 000d     OY..EY..;Y..1Y..
   d6e28:	5925 000d 5919 000d 590d 000d 5905 000d     %Y...Y...Y...Y..
   d6e38:	58fb 000d 58f1 000d 5ad5 000d               .X...X...Z..

000d6e44 <_ZTVN5spark12NetworkClassE>:
	...
   d6e4c:	5a6d 000d 5a77 000d 5a81 000d 5a8b 000d     mZ..wZ...Z...Z..
   d6e5c:	5a95 000d 5aa1 000d 5aad 000d 5ab9 000d     .Z...Z...Z...Z..
   d6e6c:	5ac1 000d 5acb 000d 5ad5 000d               .Z...Z...Z..

000d6e78 <_ZSt7nothrow>:
   d6e78:	0000 0000                                   ....

000d6e7c <__sf_fake_stdin>:
	...

000d6e9c <__sf_fake_stdout>:
	...

000d6ebc <__sf_fake_stderr>:
	...
   d6edc:	0043                                        C.

000d6ede <link_const_variable_data_end>:
	...

000d6ee0 <link_constructors_location>:
   d6ee0:	000d44bd 	.word	0x000d44bd
   d6ee4:	000d4935 	.word	0x000d4935
   d6ee8:	000d4999 	.word	0x000d4999
   d6eec:	000d4ad9 	.word	0x000d4ad9
   d6ef0:	000d4d99 	.word	0x000d4d99
   d6ef4:	000d4da9 	.word	0x000d4da9
   d6ef8:	000d4e01 	.word	0x000d4e01
   d6efc:	000d5711 	.word	0x000d5711
   d6f00:	000d5a1d 	.word	0x000d5a1d
   d6f04:	000d5ba1 	.word	0x000d5ba1
   d6f08:	000d5d35 	.word	0x000d5d35
   d6f0c:	000d5db9 	.word	0x000d5db9
   d6f10:	000d5e7d 	.word	0x000d5e7d
   d6f14:	000d5f41 	.word	0x000d5f41

000d6f18 <link_constructors_end>:
	...
