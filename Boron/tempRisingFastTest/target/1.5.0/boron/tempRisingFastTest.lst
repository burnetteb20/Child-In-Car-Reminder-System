
c:/Users/BryceBurnette/Documents/ParticleProjects/tempRisingFastTest/target/1.5.0/boron/tempRisingFastTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000029a4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d69c0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000090  2003e310  000d69c4  0001e310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000450  2003e3a0  2003e3a0  0002e3a0  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d6a54  000d6a54  00026a54  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6a7c  000d6a7c  00026a7c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000c4343  00000000  00000000  00026a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000e70d  00000000  00000000  000eadc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001cbc8  00000000  00000000  000f94d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000020f8  00000000  00000000  00116098  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004298  00000000  00000000  00118190  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003091c  00000000  00000000  0011c428  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002256e  00000000  00000000  0014cd44  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00103ab2  00000000  00000000  0016f2b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c534  00000000  00000000  00272d64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fa2f 	bl	d6490 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fa34 	bl	d64a6 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e310 	.word	0x2003e310
   d4048:	000d69c4 	.word	0x000d69c4
   d404c:	2003e3a0 	.word	0x2003e3a0
   d4050:	2003e3a0 	.word	0x2003e3a0
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f000 fddf 	bl	d4c1c <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d69bc 	.word	0x000d69bc
   d4080:	000d6984 	.word	0x000d6984

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b815 	b.w	d40b2 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f845 	bl	d4118 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f000 bd85 	b.w	d4ba0 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 baad 	b.w	d45f4 <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 bab3 	b.w	d4604 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bab1 	b.w	d4604 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <setup>:
float temp[tempReadings] = {50, 55, 60, 65, 70};
//worked

// setup() runs once, when the device is first turned on.
void setup() 
{
   d40b2:	b508      	push	{r3, lr}
  Serial.begin(9600);
   d40b4:	f001 f976 	bl	d53a4 <_Z16_fetch_usbserialv>
   d40b8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
}
   d40bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
//worked

// setup() runs once, when the device is first turned on.
void setup() 
{
  Serial.begin(9600);
   d40c0:	f001 b964 	b.w	d538c <_ZN9USBSerial5beginEl>

000d40c4 <_Z11sendMessageRK6String>:
  }
  delay(2000);
}

void sendMessage(const String& body)            //function that triggers twilio webhook
{
   d40c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d40c6:	4b11      	ldr	r3, [pc, #68]	; (d410c <_Z11sendMessageRK6String+0x48>)
   d40c8:	6802      	ldr	r2, [r0, #0]
   d40ca:	781b      	ldrb	r3, [r3, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40cc:	f88d 3000 	strb.w	r3, [sp]
   d40d0:	490f      	ldr	r1, [pc, #60]	; (d4110 <_Z11sendMessageRK6String+0x4c>)
   d40d2:	233c      	movs	r3, #60	; 0x3c
   d40d4:	a802      	add	r0, sp, #8
   d40d6:	f000 ff0f 	bl	d4ef8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d40da:	9c03      	ldr	r4, [sp, #12]
   d40dc:	b17c      	cbz	r4, d40fe <_Z11sendMessageRK6String+0x3a>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d40de:	6863      	ldr	r3, [r4, #4]
   d40e0:	3b01      	subs	r3, #1
   d40e2:	6063      	str	r3, [r4, #4]
   d40e4:	b95b      	cbnz	r3, d40fe <_Z11sendMessageRK6String+0x3a>
        {
          _M_dispose();
   d40e6:	6823      	ldr	r3, [r4, #0]
   d40e8:	4620      	mov	r0, r4
   d40ea:	689b      	ldr	r3, [r3, #8]
   d40ec:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d40ee:	68a3      	ldr	r3, [r4, #8]
   d40f0:	3b01      	subs	r3, #1
   d40f2:	60a3      	str	r3, [r4, #8]
   d40f4:	b91b      	cbnz	r3, d40fe <_Z11sendMessageRK6String+0x3a>
            _M_destroy();
   d40f6:	6823      	ldr	r3, [r4, #0]
   d40f8:	4620      	mov	r0, r4
   d40fa:	68db      	ldr	r3, [r3, #12]
   d40fc:	4798      	blx	r3
  Particle.publish("twilio_sms", body, PRIVATE);
  Serial.println("SendingMessage");
   d40fe:	f001 f951 	bl	d53a4 <_Z16_fetch_usbserialv>
   d4102:	4904      	ldr	r1, [pc, #16]	; (d4114 <_Z11sendMessageRK6String+0x50>)
   d4104:	f000 fbd9 	bl	d48ba <_ZN5Print7printlnEPKc>
   d4108:	b004      	add	sp, #16
   d410a:	bd10      	pop	{r4, pc}
   d410c:	2003e3bc 	.word	0x2003e3bc
   d4110:	000d6564 	.word	0x000d6564
   d4114:	000d656f 	.word	0x000d656f

000d4118 <loop>:
  Serial.begin(9600);
}

// loop() runs over and over again, as quickly as it can execute.
void loop() 
{
   d4118:	b510      	push	{r4, lr}
   d411a:	4b63      	ldr	r3, [pc, #396]	; (d42a8 <loop+0x190>)
   d411c:	eddf 7a63 	vldr	s15, [pc, #396]	; d42ac <loop+0x194>
   d4120:	ed2d 8b02 	vpush	{d8}
   d4124:	f103 0214 	add.w	r2, r3, #20
  childTotal = 0;
  for (int thisReading = 0; thisReading <= childReadings - 1; thisReading++) 
  {
    childTotal = childTotal + child[thisReading];
   d4128:	ecb3 7a01 	vldmia	r3!, {s14}

// loop() runs over and over again, as quickly as it can execute.
void loop() 
{
  childTotal = 0;
  for (int thisReading = 0; thisReading <= childReadings - 1; thisReading++) 
   d412c:	4293      	cmp	r3, r2
  {
    childTotal = childTotal + child[thisReading];
   d412e:	ee77 7a87 	vadd.f32	s15, s15, s14

// loop() runs over and over again, as quickly as it can execute.
void loop() 
{
  childTotal = 0;
  for (int thisReading = 0; thisReading <= childReadings - 1; thisReading++) 
   d4132:	d1f9      	bne.n	d4128 <loop+0x10>
  {
    childTotal = childTotal + child[thisReading];
  }
  childAverage = childTotal / childReadings;    //running average
   d4134:	eeb1 8a04 	vmov.f32	s16, #20	; 0x40a00000  5.0
   d4138:	ee87 7a88 	vdiv.f32	s14, s15, s16
   d413c:	4b5c      	ldr	r3, [pc, #368]	; (d42b0 <loop+0x198>)
   d413e:	4c5d      	ldr	r4, [pc, #372]	; (d42b4 <loop+0x19c>)
   d4140:	edc3 7a00 	vstr	s15, [r3]
   d4144:	ed84 7a00 	vstr	s14, [r4]

  Serial.print("The child is in the car if the average < 3:  ");
   d4148:	f001 f92c 	bl	d53a4 <_Z16_fetch_usbserialv>
   d414c:	495a      	ldr	r1, [pc, #360]	; (d42b8 <loop+0x1a0>)
   d414e:	f000 fba1 	bl	d4894 <_ZN5Print5printEPKc>
  Serial.println(childAverage);
   d4152:	f001 f927 	bl	d53a4 <_Z16_fetch_usbserialv>
   d4156:	2102      	movs	r1, #2
   d4158:	ed94 0a00 	vldr	s0, [r4]
   d415c:	f000 fcb0 	bl	d4ac0 <_ZN5Print7printlnEfi>

  if (childAverage < 3)                         //if the child is in the seat
   d4160:	ed94 7a00 	vldr	s14, [r4]
   d4164:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
   d4168:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d416c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4170:	f140 8092 	bpl.w	d4298 <loop+0x180>
  {
    Serial.println("child in car");
   d4174:	f001 f916 	bl	d53a4 <_Z16_fetch_usbserialv>
   d4178:	4950      	ldr	r1, [pc, #320]	; (d42bc <loop+0x1a4>)
   d417a:	f000 fb9e 	bl	d48ba <_ZN5Print7printlnEPKc>

    // Serial.print("the usb array is:  ");
    // Serial.print(usb[0]);
    // Serial.println(usb[1]);

    if (usb[0] == 1 && usb[1] == 0)   //check to see if the car went from on to off
   d417e:	4b50      	ldr	r3, [pc, #320]	; (d42c0 <loop+0x1a8>)
   d4180:	ed93 7a00 	vldr	s14, [r3]
   d4184:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   d4188:	eeb4 7a67 	vcmp.f32	s14, s15
   d418c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4190:	d10e      	bne.n	d41b0 <loop+0x98>
   d4192:	edd3 7a01 	vldr	s15, [r3, #4]
   d4196:	eef5 7a40 	vcmp.f32	s15, #0.0
   d419a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d419e:	d107      	bne.n	d41b0 <loop+0x98>
    {
      sendMessage(body);
   d41a0:	4848      	ldr	r0, [pc, #288]	; (d42c4 <loop+0x1ac>)
   d41a2:	f7ff ff8f 	bl	d40c4 <_Z11sendMessageRK6String>
      Serial.println("Sending message because car turned off and child is in the car");
   d41a6:	f001 f8fd 	bl	d53a4 <_Z16_fetch_usbserialv>
   d41aa:	4947      	ldr	r1, [pc, #284]	; (d42c8 <loop+0x1b0>)
   d41ac:	f000 fb85 	bl	d48ba <_ZN5Print7printlnEPKc>
    }

    //check if the temperature is too hot or rising too fast

    if (temp[tempReadings - 1] - temp[0] >= 10)     //if temperature is rising too fast
   d41b0:	4c46      	ldr	r4, [pc, #280]	; (d42cc <loop+0x1b4>)
   d41b2:	ed94 7a00 	vldr	s14, [r4]
   d41b6:	edd4 7a04 	vldr	s15, [r4, #16]
   d41ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
   d41be:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d41c2:	eef4 7ac7 	vcmpe.f32	s15, s14
   d41c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d41ca:	db17      	blt.n	d41fc <loop+0xe4>
    {
      sendMessage(body);
   d41cc:	483d      	ldr	r0, [pc, #244]	; (d42c4 <loop+0x1ac>)
   d41ce:	f7ff ff79 	bl	d40c4 <_Z11sendMessageRK6String>
      Serial.print("The temperature is rising too fast:  ");
   d41d2:	f001 f8e7 	bl	d53a4 <_Z16_fetch_usbserialv>
   d41d6:	493e      	ldr	r1, [pc, #248]	; (d42d0 <loop+0x1b8>)
   d41d8:	f000 fb5c 	bl	d4894 <_ZN5Print5printEPKc>
      Serial.print(temp[tempReadings - 1] - temp[0]);
   d41dc:	f001 f8e2 	bl	d53a4 <_Z16_fetch_usbserialv>
   d41e0:	edd4 7a00 	vldr	s15, [r4]
   d41e4:	ed94 0a04 	vldr	s0, [r4, #16]
   d41e8:	2102      	movs	r1, #2
   d41ea:	ee30 0a67 	vsub.f32	s0, s0, s15
   d41ee:	f000 fc4d 	bl	d4a8c <_ZN5Print5printEfi>
      Serial.println(" in the last 60 seconds");
   d41f2:	f001 f8d7 	bl	d53a4 <_Z16_fetch_usbserialv>
   d41f6:	4937      	ldr	r1, [pc, #220]	; (d42d4 <loop+0x1bc>)
   d41f8:	f000 fb5f 	bl	d48ba <_ZN5Print7printlnEPKc>
   d41fc:	4b33      	ldr	r3, [pc, #204]	; (d42cc <loop+0x1b4>)
  Serial.begin(9600);
}

// loop() runs over and over again, as quickly as it can execute.
void loop() 
{
   d41fe:	eddf 7a2b 	vldr	s15, [pc, #172]	; d42ac <loop+0x194>
   d4202:	f103 0214 	add.w	r2, r3, #20

    //average for tester examples
    tempTotal = 0;
    for (int thisReading = 0; thisReading <= tempReadings - 1; thisReading++) 
    {
      tempTotal = tempTotal + temp[thisReading];
   d4206:	ecb3 7a01 	vldmia	r3!, {s14}
      Serial.println(" in the last 60 seconds");
    }

    //average for tester examples
    tempTotal = 0;
    for (int thisReading = 0; thisReading <= tempReadings - 1; thisReading++) 
   d420a:	429a      	cmp	r2, r3
    {
      tempTotal = tempTotal + temp[thisReading];
   d420c:	ee77 7a87 	vadd.f32	s15, s15, s14
      Serial.println(" in the last 60 seconds");
    }

    //average for tester examples
    tempTotal = 0;
    for (int thisReading = 0; thisReading <= tempReadings - 1; thisReading++) 
   d4210:	d1f9      	bne.n	d4206 <loop+0xee>
    {
      tempTotal = tempTotal + temp[thisReading];
    }
    tempAverage = tempTotal / tempReadings;       //calculate running average
   d4212:	ee87 7a88 	vdiv.f32	s14, s15, s16
   d4216:	4b30      	ldr	r3, [pc, #192]	; (d42d8 <loop+0x1c0>)
   d4218:	4c30      	ldr	r4, [pc, #192]	; (d42dc <loop+0x1c4>)
   d421a:	edc3 7a00 	vstr	s15, [r3]
    
    // Serial.print("The temp average is:  ");
    // Serial.println(tempAverage);

    if (tempAverage >= 80 && tempAverage < 90)  //if the temp is too hot
   d421e:	eddf 7a30 	vldr	s15, [pc, #192]	; d42e0 <loop+0x1c8>
    tempTotal = 0;
    for (int thisReading = 0; thisReading <= tempReadings - 1; thisReading++) 
    {
      tempTotal = tempTotal + temp[thisReading];
    }
    tempAverage = tempTotal / tempReadings;       //calculate running average
   d4222:	ed84 7a00 	vstr	s14, [r4]
    
    // Serial.print("The temp average is:  ");
    // Serial.println(tempAverage);

    if (tempAverage >= 80 && tempAverage < 90)  //if the temp is too hot
   d4226:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d422a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d422e:	ed9f 8a2d 	vldr	s16, [pc, #180]	; d42e4 <loop+0x1cc>
   d4232:	db0c      	blt.n	d424e <loop+0x136>
   d4234:	eeb4 7ac8 	vcmpe.f32	s14, s16
   d4238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d423c:	d507      	bpl.n	d424e <loop+0x136>
    {
      sendMessage(body);
   d423e:	4821      	ldr	r0, [pc, #132]	; (d42c4 <loop+0x1ac>)
   d4240:	f7ff ff40 	bl	d40c4 <_Z11sendMessageRK6String>
      Serial.println("Sending message because temperature is too hot");
   d4244:	f001 f8ae 	bl	d53a4 <_Z16_fetch_usbserialv>
   d4248:	4927      	ldr	r1, [pc, #156]	; (d42e8 <loop+0x1d0>)
   d424a:	f000 fb36 	bl	d48ba <_ZN5Print7printlnEPKc>
    }

    if (tempAverage >= 90 && tempAverage < 100) //if the temp is way too hot
   d424e:	edd4 7a00 	vldr	s15, [r4]
   d4252:	eef4 7ac8 	vcmpe.f32	s15, s16
   d4256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d425a:	ed9f 8a24 	vldr	s16, [pc, #144]	; d42ec <loop+0x1d4>
   d425e:	db0c      	blt.n	d427a <loop+0x162>
   d4260:	eef4 7ac8 	vcmpe.f32	s15, s16
   d4264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4268:	d507      	bpl.n	d427a <loop+0x162>
    {
      sendMessage(body);
   d426a:	4816      	ldr	r0, [pc, #88]	; (d42c4 <loop+0x1ac>)
   d426c:	f7ff ff2a 	bl	d40c4 <_Z11sendMessageRK6String>
      Serial.println("Sending message because temp is critical");
   d4270:	f001 f898 	bl	d53a4 <_Z16_fetch_usbserialv>
   d4274:	491e      	ldr	r1, [pc, #120]	; (d42f0 <loop+0x1d8>)
   d4276:	f000 fb20 	bl	d48ba <_ZN5Print7printlnEPKc>
    }

    if (tempAverage >= 100)
   d427a:	edd4 7a00 	vldr	s15, [r4]
   d427e:	eef4 7ac8 	vcmpe.f32	s15, s16
   d4282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4286:	db07      	blt.n	d4298 <loop+0x180>
    {
      sendMessage(body);
   d4288:	480e      	ldr	r0, [pc, #56]	; (d42c4 <loop+0x1ac>)
   d428a:	f7ff ff1b 	bl	d40c4 <_Z11sendMessageRK6String>
      Serial.println("Sending message because temp is critical");
   d428e:	f001 f889 	bl	d53a4 <_Z16_fetch_usbserialv>
   d4292:	4917      	ldr	r1, [pc, #92]	; (d42f0 <loop+0x1d8>)
   d4294:	f000 fb11 	bl	d48ba <_ZN5Print7printlnEPKc>
    }
  }
  delay(2000);
}
   d4298:	ecbd 8b02 	vpop	{d8}
    {
      sendMessage(body);
      Serial.println("Sending message because temp is critical");
    }
  }
  delay(2000);
   d429c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
}
   d42a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      sendMessage(body);
      Serial.println("Sending message because temp is critical");
    }
  }
  delay(2000);
   d42a4:	f000 bc2e 	b.w	d4b04 <delay>
   d42a8:	2003e310 	.word	0x2003e310
   d42ac:	00000000 	.word	0x00000000
   d42b0:	2003e3b4 	.word	0x2003e3b4
   d42b4:	2003e3cc 	.word	0x2003e3cc
   d42b8:	000d657e 	.word	0x000d657e
   d42bc:	000d65ac 	.word	0x000d65ac
   d42c0:	2003e3c4 	.word	0x2003e3c4
   d42c4:	2003e3a4 	.word	0x2003e3a4
   d42c8:	000d65b9 	.word	0x000d65b9
   d42cc:	2003e324 	.word	0x2003e324
   d42d0:	000d65f8 	.word	0x000d65f8
   d42d4:	000d661e 	.word	0x000d661e
   d42d8:	2003e3b8 	.word	0x2003e3b8
   d42dc:	2003e3c0 	.word	0x2003e3c0
   d42e0:	42a00000 	.word	0x42a00000
   d42e4:	42b40000 	.word	0x42b40000
   d42e8:	000d6636 	.word	0x000d6636
   d42ec:	42c80000 	.word	0x42c80000
   d42f0:	000d6665 	.word	0x000d6665

000d42f4 <_GLOBAL__sub_I_body>:

void sendMessage(const String& body)            //function that triggers twilio webhook
{
  Particle.publish("twilio_sms", body, PRIVATE);
  Serial.println("SendingMessage");
   d42f4:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d42f6:	4b08      	ldr	r3, [pc, #32]	; (d4318 <_GLOBAL__sub_I_body+0x24>)
 * Description:
 * Author:
 * Date:
*/

String body = "Your child is in the car";  //body of SMS message to send
   d42f8:	4c08      	ldr	r4, [pc, #32]	; (d431c <_GLOBAL__sub_I_body+0x28>)
   d42fa:	2201      	movs	r2, #1
   d42fc:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d42fe:	f000 f825 	bl	d434c <HAL_Pin_Map>
   d4302:	4907      	ldr	r1, [pc, #28]	; (d4320 <_GLOBAL__sub_I_body+0x2c>)
   d4304:	4620      	mov	r0, r4
   d4306:	f000 fa4c 	bl	d47a2 <_ZN6StringC1EPK19__FlashStringHelper>
   d430a:	4620      	mov	r0, r4
   d430c:	4a05      	ldr	r2, [pc, #20]	; (d4324 <_GLOBAL__sub_I_body+0x30>)
   d430e:	4906      	ldr	r1, [pc, #24]	; (d4328 <_GLOBAL__sub_I_body+0x34>)

void sendMessage(const String& body)            //function that triggers twilio webhook
{
  Particle.publish("twilio_sms", body, PRIVATE);
  Serial.println("SendingMessage");
   d4310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 * Description:
 * Author:
 * Date:
*/

String body = "Your child is in the car";  //body of SMS message to send
   d4314:	f001 baac 	b.w	d5870 <__aeabi_atexit>
   d4318:	2003e3bc 	.word	0x2003e3bc
   d431c:	2003e3a4 	.word	0x2003e3a4
   d4320:	000d668e 	.word	0x000d668e
   d4324:	2003e3a0 	.word	0x2003e3a0
   d4328:	000d4715 	.word	0x000d4715

000d432c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d432c:	b508      	push	{r3, lr}
   d432e:	4b02      	ldr	r3, [pc, #8]	; (d4338 <netdb_freeaddrinfo+0xc>)
   d4330:	681b      	ldr	r3, [r3, #0]
   d4332:	689b      	ldr	r3, [r3, #8]
   d4334:	9301      	str	r3, [sp, #4]
   d4336:	bd08      	pop	{r3, pc}
   d4338:	00030268 	.word	0x00030268

000d433c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d433c:	b508      	push	{r3, lr}
   d433e:	4b02      	ldr	r3, [pc, #8]	; (d4348 <netdb_getaddrinfo+0xc>)
   d4340:	681b      	ldr	r3, [r3, #0]
   d4342:	68db      	ldr	r3, [r3, #12]
   d4344:	9301      	str	r3, [sp, #4]
   d4346:	bd08      	pop	{r3, pc}
   d4348:	00030268 	.word	0x00030268

000d434c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d434c:	b508      	push	{r3, lr}
   d434e:	4b02      	ldr	r3, [pc, #8]	; (d4358 <HAL_Pin_Map+0xc>)
   d4350:	681b      	ldr	r3, [r3, #0]
   d4352:	681b      	ldr	r3, [r3, #0]
   d4354:	9301      	str	r3, [sp, #4]
   d4356:	bd08      	pop	{r3, pc}
   d4358:	0003022c 	.word	0x0003022c

000d435c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d435c:	b508      	push	{r3, lr}
   d435e:	4b02      	ldr	r3, [pc, #8]	; (d4368 <HAL_RNG_GetRandomNumber+0xc>)
   d4360:	681b      	ldr	r3, [r3, #0]
   d4362:	685b      	ldr	r3, [r3, #4]
   d4364:	9301      	str	r3, [sp, #4]
   d4366:	bd08      	pop	{r3, pc}
   d4368:	00030218 	.word	0x00030218

000d436c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d436c:	b508      	push	{r3, lr}
   d436e:	4b02      	ldr	r3, [pc, #8]	; (d4378 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4370:	681b      	ldr	r3, [r3, #0]
   d4372:	695b      	ldr	r3, [r3, #20]
   d4374:	9301      	str	r3, [sp, #4]
   d4376:	bd08      	pop	{r3, pc}
   d4378:	00030218 	.word	0x00030218

000d437c <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d437c:	b508      	push	{r3, lr}
   d437e:	4b02      	ldr	r3, [pc, #8]	; (d4388 <os_thread_is_current+0xc>)
   d4380:	681b      	ldr	r3, [r3, #0]
   d4382:	689b      	ldr	r3, [r3, #8]
   d4384:	9301      	str	r3, [sp, #4]
   d4386:	bd08      	pop	{r3, pc}
   d4388:	00030248 	.word	0x00030248

000d438c <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d438c:	b508      	push	{r3, lr}
   d438e:	4b02      	ldr	r3, [pc, #8]	; (d4398 <os_thread_join+0xc>)
   d4390:	681b      	ldr	r3, [r3, #0]
   d4392:	691b      	ldr	r3, [r3, #16]
   d4394:	9301      	str	r3, [sp, #4]
   d4396:	bd08      	pop	{r3, pc}
   d4398:	00030248 	.word	0x00030248

000d439c <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d439c:	b508      	push	{r3, lr}
   d439e:	4b02      	ldr	r3, [pc, #8]	; (d43a8 <os_thread_cleanup+0xc>)
   d43a0:	681b      	ldr	r3, [r3, #0]
   d43a2:	695b      	ldr	r3, [r3, #20]
   d43a4:	9301      	str	r3, [sp, #4]
   d43a6:	bd08      	pop	{r3, pc}
   d43a8:	00030248 	.word	0x00030248

000d43ac <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d43ac:	b508      	push	{r3, lr}
   d43ae:	4b02      	ldr	r3, [pc, #8]	; (d43b8 <os_mutex_recursive_create+0xc>)
   d43b0:	681b      	ldr	r3, [r3, #0]
   d43b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d43b4:	9301      	str	r3, [sp, #4]
   d43b6:	bd08      	pop	{r3, pc}
   d43b8:	00030248 	.word	0x00030248

000d43bc <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d43bc:	b508      	push	{r3, lr}
   d43be:	4b02      	ldr	r3, [pc, #8]	; (d43c8 <os_mutex_recursive_destroy+0xc>)
   d43c0:	681b      	ldr	r3, [r3, #0]
   d43c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d43c4:	9301      	str	r3, [sp, #4]
   d43c6:	bd08      	pop	{r3, pc}
   d43c8:	00030248 	.word	0x00030248

000d43cc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d43cc:	b508      	push	{r3, lr}
   d43ce:	4b02      	ldr	r3, [pc, #8]	; (d43d8 <inet_inet_ntop+0xc>)
   d43d0:	681b      	ldr	r3, [r3, #0]
   d43d2:	695b      	ldr	r3, [r3, #20]
   d43d4:	9301      	str	r3, [sp, #4]
   d43d6:	bd08      	pop	{r3, pc}
   d43d8:	00030264 	.word	0x00030264

000d43dc <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d43dc:	b508      	push	{r3, lr}
   d43de:	4b02      	ldr	r3, [pc, #8]	; (d43e8 <HAL_USART_Init+0xc>)
   d43e0:	681b      	ldr	r3, [r3, #0]
   d43e2:	681b      	ldr	r3, [r3, #0]
   d43e4:	9301      	str	r3, [sp, #4]
   d43e6:	bd08      	pop	{r3, pc}
   d43e8:	0003023c 	.word	0x0003023c

000d43ec <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d43ec:	b508      	push	{r3, lr}
   d43ee:	4b02      	ldr	r3, [pc, #8]	; (d43f8 <HAL_USART_Write_Data+0xc>)
   d43f0:	681b      	ldr	r3, [r3, #0]
   d43f2:	68db      	ldr	r3, [r3, #12]
   d43f4:	9301      	str	r3, [sp, #4]
   d43f6:	bd08      	pop	{r3, pc}
   d43f8:	0003023c 	.word	0x0003023c

000d43fc <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d43fc:	b508      	push	{r3, lr}
   d43fe:	4b02      	ldr	r3, [pc, #8]	; (d4408 <HAL_USART_Available_Data+0xc>)
   d4400:	681b      	ldr	r3, [r3, #0]
   d4402:	691b      	ldr	r3, [r3, #16]
   d4404:	9301      	str	r3, [sp, #4]
   d4406:	bd08      	pop	{r3, pc}
   d4408:	0003023c 	.word	0x0003023c

000d440c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d440c:	b508      	push	{r3, lr}
   d440e:	4b02      	ldr	r3, [pc, #8]	; (d4418 <HAL_USART_Read_Data+0xc>)
   d4410:	681b      	ldr	r3, [r3, #0]
   d4412:	695b      	ldr	r3, [r3, #20]
   d4414:	9301      	str	r3, [sp, #4]
   d4416:	bd08      	pop	{r3, pc}
   d4418:	0003023c 	.word	0x0003023c

000d441c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d441c:	b508      	push	{r3, lr}
   d441e:	4b02      	ldr	r3, [pc, #8]	; (d4428 <HAL_USART_Peek_Data+0xc>)
   d4420:	681b      	ldr	r3, [r3, #0]
   d4422:	699b      	ldr	r3, [r3, #24]
   d4424:	9301      	str	r3, [sp, #4]
   d4426:	bd08      	pop	{r3, pc}
   d4428:	0003023c 	.word	0x0003023c

000d442c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d442c:	b508      	push	{r3, lr}
   d442e:	4b02      	ldr	r3, [pc, #8]	; (d4438 <HAL_USART_Flush_Data+0xc>)
   d4430:	681b      	ldr	r3, [r3, #0]
   d4432:	69db      	ldr	r3, [r3, #28]
   d4434:	9301      	str	r3, [sp, #4]
   d4436:	bd08      	pop	{r3, pc}
   d4438:	0003023c 	.word	0x0003023c

000d443c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d443c:	b508      	push	{r3, lr}
   d443e:	4b02      	ldr	r3, [pc, #8]	; (d4448 <HAL_USART_Available_Data_For_Write+0xc>)
   d4440:	681b      	ldr	r3, [r3, #0]
   d4442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4444:	9301      	str	r3, [sp, #4]
   d4446:	bd08      	pop	{r3, pc}
   d4448:	0003023c 	.word	0x0003023c

000d444c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d444c:	b508      	push	{r3, lr}
   d444e:	4b02      	ldr	r3, [pc, #8]	; (d4458 <HAL_USB_USART_Init+0xc>)
   d4450:	681b      	ldr	r3, [r3, #0]
   d4452:	681b      	ldr	r3, [r3, #0]
   d4454:	9301      	str	r3, [sp, #4]
   d4456:	bd08      	pop	{r3, pc}
   d4458:	0003024c 	.word	0x0003024c

000d445c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d445c:	b508      	push	{r3, lr}
   d445e:	4b02      	ldr	r3, [pc, #8]	; (d4468 <HAL_USB_USART_Begin+0xc>)
   d4460:	681b      	ldr	r3, [r3, #0]
   d4462:	685b      	ldr	r3, [r3, #4]
   d4464:	9301      	str	r3, [sp, #4]
   d4466:	bd08      	pop	{r3, pc}
   d4468:	0003024c 	.word	0x0003024c

000d446c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d446c:	b508      	push	{r3, lr}
   d446e:	4b02      	ldr	r3, [pc, #8]	; (d4478 <HAL_USB_USART_Available_Data+0xc>)
   d4470:	681b      	ldr	r3, [r3, #0]
   d4472:	691b      	ldr	r3, [r3, #16]
   d4474:	9301      	str	r3, [sp, #4]
   d4476:	bd08      	pop	{r3, pc}
   d4478:	0003024c 	.word	0x0003024c

000d447c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d447c:	b508      	push	{r3, lr}
   d447e:	4b02      	ldr	r3, [pc, #8]	; (d4488 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4480:	681b      	ldr	r3, [r3, #0]
   d4482:	695b      	ldr	r3, [r3, #20]
   d4484:	9301      	str	r3, [sp, #4]
   d4486:	bd08      	pop	{r3, pc}
   d4488:	0003024c 	.word	0x0003024c

000d448c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d448c:	b508      	push	{r3, lr}
   d448e:	4b02      	ldr	r3, [pc, #8]	; (d4498 <HAL_USB_USART_Receive_Data+0xc>)
   d4490:	681b      	ldr	r3, [r3, #0]
   d4492:	699b      	ldr	r3, [r3, #24]
   d4494:	9301      	str	r3, [sp, #4]
   d4496:	bd08      	pop	{r3, pc}
   d4498:	0003024c 	.word	0x0003024c

000d449c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d449c:	b508      	push	{r3, lr}
   d449e:	4b02      	ldr	r3, [pc, #8]	; (d44a8 <HAL_USB_USART_Send_Data+0xc>)
   d44a0:	681b      	ldr	r3, [r3, #0]
   d44a2:	69db      	ldr	r3, [r3, #28]
   d44a4:	9301      	str	r3, [sp, #4]
   d44a6:	bd08      	pop	{r3, pc}
   d44a8:	0003024c 	.word	0x0003024c

000d44ac <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d44ac:	b508      	push	{r3, lr}
   d44ae:	4b02      	ldr	r3, [pc, #8]	; (d44b8 <HAL_USB_USART_Flush_Data+0xc>)
   d44b0:	681b      	ldr	r3, [r3, #0]
   d44b2:	6a1b      	ldr	r3, [r3, #32]
   d44b4:	9301      	str	r3, [sp, #4]
   d44b6:	bd08      	pop	{r3, pc}
   d44b8:	0003024c 	.word	0x0003024c

000d44bc <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d44bc:	b508      	push	{r3, lr}
   d44be:	4b02      	ldr	r3, [pc, #8]	; (d44c8 <set_system_mode+0xc>)
   d44c0:	681b      	ldr	r3, [r3, #0]
   d44c2:	685b      	ldr	r3, [r3, #4]
   d44c4:	9301      	str	r3, [sp, #4]
   d44c6:	bd08      	pop	{r3, pc}
   d44c8:	00030220 	.word	0x00030220

000d44cc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d44cc:	b508      	push	{r3, lr}
   d44ce:	4b02      	ldr	r3, [pc, #8]	; (d44d8 <system_delay_ms+0xc>)
   d44d0:	681b      	ldr	r3, [r3, #0]
   d44d2:	695b      	ldr	r3, [r3, #20]
   d44d4:	9301      	str	r3, [sp, #4]
   d44d6:	bd08      	pop	{r3, pc}
   d44d8:	00030220 	.word	0x00030220

000d44dc <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d44dc:	b508      	push	{r3, lr}
   d44de:	4b02      	ldr	r3, [pc, #8]	; (d44e8 <application_thread_current+0xc>)
   d44e0:	681b      	ldr	r3, [r3, #0]
   d44e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d44e4:	9301      	str	r3, [sp, #4]
   d44e6:	bd08      	pop	{r3, pc}
   d44e8:	00030220 	.word	0x00030220

000d44ec <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d44ec:	b508      	push	{r3, lr}
   d44ee:	4b02      	ldr	r3, [pc, #8]	; (d44f8 <application_thread_invoke+0xc>)
   d44f0:	681b      	ldr	r3, [r3, #0]
   d44f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d44f4:	9301      	str	r3, [sp, #4]
   d44f6:	bd08      	pop	{r3, pc}
   d44f8:	00030220 	.word	0x00030220

000d44fc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d44fc:	b508      	push	{r3, lr}
   d44fe:	4b03      	ldr	r3, [pc, #12]	; (d450c <system_ctrl_set_app_request_handler+0x10>)
   d4500:	681b      	ldr	r3, [r3, #0]
   d4502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4506:	9301      	str	r3, [sp, #4]
   d4508:	bd08      	pop	{r3, pc}
   d450a:	0000      	.short	0x0000
   d450c:	00030220 	.word	0x00030220

000d4510 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4510:	b508      	push	{r3, lr}
   d4512:	4b03      	ldr	r3, [pc, #12]	; (d4520 <system_ctrl_set_result+0x10>)
   d4514:	681b      	ldr	r3, [r3, #0]
   d4516:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d451a:	9301      	str	r3, [sp, #4]
   d451c:	bd08      	pop	{r3, pc}
   d451e:	0000      	.short	0x0000
   d4520:	00030220 	.word	0x00030220

000d4524 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4524:	b508      	push	{r3, lr}
   d4526:	4b02      	ldr	r3, [pc, #8]	; (d4530 <network_connect+0xc>)
   d4528:	681b      	ldr	r3, [r3, #0]
   d452a:	685b      	ldr	r3, [r3, #4]
   d452c:	9301      	str	r3, [sp, #4]
   d452e:	bd08      	pop	{r3, pc}
   d4530:	00030240 	.word	0x00030240

000d4534 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4534:	b508      	push	{r3, lr}
   d4536:	4b02      	ldr	r3, [pc, #8]	; (d4540 <network_connecting+0xc>)
   d4538:	681b      	ldr	r3, [r3, #0]
   d453a:	689b      	ldr	r3, [r3, #8]
   d453c:	9301      	str	r3, [sp, #4]
   d453e:	bd08      	pop	{r3, pc}
   d4540:	00030240 	.word	0x00030240

000d4544 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4544:	b508      	push	{r3, lr}
   d4546:	4b02      	ldr	r3, [pc, #8]	; (d4550 <network_disconnect+0xc>)
   d4548:	681b      	ldr	r3, [r3, #0]
   d454a:	68db      	ldr	r3, [r3, #12]
   d454c:	9301      	str	r3, [sp, #4]
   d454e:	bd08      	pop	{r3, pc}
   d4550:	00030240 	.word	0x00030240

000d4554 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4554:	b508      	push	{r3, lr}
   d4556:	4b02      	ldr	r3, [pc, #8]	; (d4560 <network_ready+0xc>)
   d4558:	681b      	ldr	r3, [r3, #0]
   d455a:	691b      	ldr	r3, [r3, #16]
   d455c:	9301      	str	r3, [sp, #4]
   d455e:	bd08      	pop	{r3, pc}
   d4560:	00030240 	.word	0x00030240

000d4564 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4564:	b508      	push	{r3, lr}
   d4566:	4b02      	ldr	r3, [pc, #8]	; (d4570 <network_on+0xc>)
   d4568:	681b      	ldr	r3, [r3, #0]
   d456a:	695b      	ldr	r3, [r3, #20]
   d456c:	9301      	str	r3, [sp, #4]
   d456e:	bd08      	pop	{r3, pc}
   d4570:	00030240 	.word	0x00030240

000d4574 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4574:	b508      	push	{r3, lr}
   d4576:	4b02      	ldr	r3, [pc, #8]	; (d4580 <network_off+0xc>)
   d4578:	681b      	ldr	r3, [r3, #0]
   d457a:	699b      	ldr	r3, [r3, #24]
   d457c:	9301      	str	r3, [sp, #4]
   d457e:	bd08      	pop	{r3, pc}
   d4580:	00030240 	.word	0x00030240

000d4584 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4584:	b508      	push	{r3, lr}
   d4586:	4b02      	ldr	r3, [pc, #8]	; (d4590 <network_listen+0xc>)
   d4588:	681b      	ldr	r3, [r3, #0]
   d458a:	69db      	ldr	r3, [r3, #28]
   d458c:	9301      	str	r3, [sp, #4]
   d458e:	bd08      	pop	{r3, pc}
   d4590:	00030240 	.word	0x00030240

000d4594 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4594:	b508      	push	{r3, lr}
   d4596:	4b02      	ldr	r3, [pc, #8]	; (d45a0 <network_listening+0xc>)
   d4598:	681b      	ldr	r3, [r3, #0]
   d459a:	6a1b      	ldr	r3, [r3, #32]
   d459c:	9301      	str	r3, [sp, #4]
   d459e:	bd08      	pop	{r3, pc}
   d45a0:	00030240 	.word	0x00030240

000d45a4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d45a4:	b508      	push	{r3, lr}
   d45a6:	4b02      	ldr	r3, [pc, #8]	; (d45b0 <network_set_listen_timeout+0xc>)
   d45a8:	681b      	ldr	r3, [r3, #0]
   d45aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d45ac:	9301      	str	r3, [sp, #4]
   d45ae:	bd08      	pop	{r3, pc}
   d45b0:	00030240 	.word	0x00030240

000d45b4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d45b4:	b508      	push	{r3, lr}
   d45b6:	4b02      	ldr	r3, [pc, #8]	; (d45c0 <network_get_listen_timeout+0xc>)
   d45b8:	681b      	ldr	r3, [r3, #0]
   d45ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d45bc:	9301      	str	r3, [sp, #4]
   d45be:	bd08      	pop	{r3, pc}
   d45c0:	00030240 	.word	0x00030240

000d45c4 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d45c4:	b508      	push	{r3, lr}
   d45c6:	4b02      	ldr	r3, [pc, #8]	; (d45d0 <spark_cloud_flag_connected+0xc>)
   d45c8:	681b      	ldr	r3, [r3, #0]
   d45ca:	695b      	ldr	r3, [r3, #20]
   d45cc:	9301      	str	r3, [sp, #4]
   d45ce:	bd08      	pop	{r3, pc}
   d45d0:	00030244 	.word	0x00030244

000d45d4 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d45d4:	b508      	push	{r3, lr}
   d45d6:	4b02      	ldr	r3, [pc, #8]	; (d45e0 <spark_send_event+0xc>)
   d45d8:	681b      	ldr	r3, [r3, #0]
   d45da:	6a1b      	ldr	r3, [r3, #32]
   d45dc:	9301      	str	r3, [sp, #4]
   d45de:	bd08      	pop	{r3, pc}
   d45e0:	00030244 	.word	0x00030244

000d45e4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d45e4:	b508      	push	{r3, lr}
   d45e6:	4b02      	ldr	r3, [pc, #8]	; (d45f0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d45e8:	681b      	ldr	r3, [r3, #0]
   d45ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d45ec:	9301      	str	r3, [sp, #4]
   d45ee:	bd08      	pop	{r3, pc}
   d45f0:	00030244 	.word	0x00030244

000d45f4 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d45f4:	b508      	push	{r3, lr}
   d45f6:	4b02      	ldr	r3, [pc, #8]	; (d4600 <malloc+0xc>)
   d45f8:	681b      	ldr	r3, [r3, #0]
   d45fa:	681b      	ldr	r3, [r3, #0]
   d45fc:	9301      	str	r3, [sp, #4]
   d45fe:	bd08      	pop	{r3, pc}
   d4600:	0003021c 	.word	0x0003021c

000d4604 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4604:	b508      	push	{r3, lr}
   d4606:	4b02      	ldr	r3, [pc, #8]	; (d4610 <free+0xc>)
   d4608:	681b      	ldr	r3, [r3, #0]
   d460a:	685b      	ldr	r3, [r3, #4]
   d460c:	9301      	str	r3, [sp, #4]
   d460e:	bd08      	pop	{r3, pc}
   d4610:	0003021c 	.word	0x0003021c

000d4614 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4614:	b508      	push	{r3, lr}
   d4616:	4b02      	ldr	r3, [pc, #8]	; (d4620 <realloc+0xc>)
   d4618:	681b      	ldr	r3, [r3, #0]
   d461a:	689b      	ldr	r3, [r3, #8]
   d461c:	9301      	str	r3, [sp, #4]
   d461e:	bd08      	pop	{r3, pc}
   d4620:	0003021c 	.word	0x0003021c

000d4624 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4624:	b508      	push	{r3, lr}
   d4626:	4b02      	ldr	r3, [pc, #8]	; (d4630 <abort+0xc>)
   d4628:	681b      	ldr	r3, [r3, #0]
   d462a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d462c:	9301      	str	r3, [sp, #4]
   d462e:	bd08      	pop	{r3, pc}
   d4630:	0003021c 	.word	0x0003021c

000d4634 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4634:	b508      	push	{r3, lr}
   d4636:	4b02      	ldr	r3, [pc, #8]	; (d4640 <_malloc_r+0xc>)
   d4638:	681b      	ldr	r3, [r3, #0]
   d463a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d463c:	9301      	str	r3, [sp, #4]
   d463e:	bd08      	pop	{r3, pc}
   d4640:	0003021c 	.word	0x0003021c

000d4644 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4644:	2200      	movs	r2, #0
   d4646:	4611      	mov	r1, r2
   d4648:	6840      	ldr	r0, [r0, #4]
   d464a:	f7ff bfa3 	b.w	d4594 <network_listening>

000d464e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d464e:	2200      	movs	r2, #0
   d4650:	4611      	mov	r1, r2
   d4652:	6840      	ldr	r0, [r0, #4]
   d4654:	f7ff bfae 	b.w	d45b4 <network_get_listen_timeout>

000d4658 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4658:	2200      	movs	r2, #0
   d465a:	6840      	ldr	r0, [r0, #4]
   d465c:	f7ff bfa2 	b.w	d45a4 <network_set_listen_timeout>

000d4660 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4660:	2200      	movs	r2, #0
   d4662:	f081 0101 	eor.w	r1, r1, #1
   d4666:	6840      	ldr	r0, [r0, #4]
   d4668:	f7ff bf8c 	b.w	d4584 <network_listen>

000d466c <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d466c:	2300      	movs	r3, #0
   d466e:	461a      	mov	r2, r3
   d4670:	4619      	mov	r1, r3
   d4672:	6840      	ldr	r0, [r0, #4]
   d4674:	f7ff bf7e 	b.w	d4574 <network_off>

000d4678 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4678:	2300      	movs	r3, #0
   d467a:	461a      	mov	r2, r3
   d467c:	4619      	mov	r1, r3
   d467e:	6840      	ldr	r0, [r0, #4]
   d4680:	f7ff bf70 	b.w	d4564 <network_on>

000d4684 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4684:	2200      	movs	r2, #0
   d4686:	4611      	mov	r1, r2
   d4688:	6840      	ldr	r0, [r0, #4]
   d468a:	f7ff bf63 	b.w	d4554 <network_ready>

000d468e <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d468e:	2200      	movs	r2, #0
   d4690:	4611      	mov	r1, r2
   d4692:	6840      	ldr	r0, [r0, #4]
   d4694:	f7ff bf4e 	b.w	d4534 <network_connecting>

000d4698 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4698:	2200      	movs	r2, #0
   d469a:	2102      	movs	r1, #2
   d469c:	6840      	ldr	r0, [r0, #4]
   d469e:	f7ff bf51 	b.w	d4544 <network_disconnect>

000d46a2 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d46a2:	2300      	movs	r3, #0
   d46a4:	461a      	mov	r2, r3
   d46a6:	6840      	ldr	r0, [r0, #4]
   d46a8:	f7ff bf3c 	b.w	d4524 <network_connect>

000d46ac <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d46ac:	4b02      	ldr	r3, [pc, #8]	; (d46b8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d46ae:	2203      	movs	r2, #3
   d46b0:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d46b2:	4a02      	ldr	r2, [pc, #8]	; (d46bc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d46b4:	601a      	str	r2, [r3, #0]
   d46b6:	4770      	bx	lr
   d46b8:	2003e3d0 	.word	0x2003e3d0
   d46bc:	000d66b0 	.word	0x000d66b0

000d46c0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d46c0:	b510      	push	{r4, lr}
   d46c2:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d46c4:	6800      	ldr	r0, [r0, #0]
   d46c6:	b118      	cbz	r0, d46d0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d46c8:	f7ff ff9c 	bl	d4604 <free>
            wakeupSource_ = nullptr;
   d46cc:	2300      	movs	r3, #0
   d46ce:	6023      	str	r3, [r4, #0]
   d46d0:	bd10      	pop	{r4, pc}

000d46d2 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d46d2:	b510      	push	{r4, lr}
   d46d4:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d46d6:	f7ff fff3 	bl	d46c0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d46da:	4620      	mov	r0, r4
   d46dc:	bd10      	pop	{r4, pc}
	...

000d46e0 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d46e0:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d46e2:	4c09      	ldr	r4, [pc, #36]	; (d4708 <_GLOBAL__sub_I_System+0x28>)
   d46e4:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d46e6:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d46ea:	6020      	str	r0, [r4, #0]
   d46ec:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d46ee:	71a0      	strb	r0, [r4, #6]
   d46f0:	8120      	strh	r0, [r4, #8]
   d46f2:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d46f4:	f7ff fee2 	bl	d44bc <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d46f8:	4620      	mov	r0, r4
   d46fa:	4a04      	ldr	r2, [pc, #16]	; (d470c <_GLOBAL__sub_I_System+0x2c>)
   d46fc:	4904      	ldr	r1, [pc, #16]	; (d4710 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d46fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4702:	f001 b8b5 	b.w	d5870 <__aeabi_atexit>
   d4706:	bf00      	nop
   d4708:	2003e3d8 	.word	0x2003e3d8
   d470c:	2003e3a0 	.word	0x2003e3a0
   d4710:	000d46d3 	.word	0x000d46d3

000d4714 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4714:	b510      	push	{r4, lr}
   d4716:	4604      	mov	r4, r0
{
	free(buffer);
   d4718:	6800      	ldr	r0, [r0, #0]
   d471a:	f7ff ff73 	bl	d4604 <free>
}
   d471e:	4620      	mov	r0, r4
   d4720:	bd10      	pop	{r4, pc}

000d4722 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4722:	b510      	push	{r4, lr}
   d4724:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4726:	6800      	ldr	r0, [r0, #0]
   d4728:	b108      	cbz	r0, d472e <_ZN6String10invalidateEv+0xc>
   d472a:	f7ff ff6b 	bl	d4604 <free>
	buffer = NULL;
   d472e:	2300      	movs	r3, #0
   d4730:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d4732:	60a3      	str	r3, [r4, #8]
   d4734:	6063      	str	r3, [r4, #4]
   d4736:	bd10      	pop	{r4, pc}

000d4738 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4738:	b538      	push	{r3, r4, r5, lr}
   d473a:	4604      	mov	r4, r0
   d473c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d473e:	6800      	ldr	r0, [r0, #0]
   d4740:	3101      	adds	r1, #1
   d4742:	f7ff ff67 	bl	d4614 <realloc>
	if (newbuffer) {
   d4746:	b110      	cbz	r0, d474e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4748:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d474c:	2001      	movs	r0, #1
	}
	return 0;
}
   d474e:	bd38      	pop	{r3, r4, r5, pc}

000d4750 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4750:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4752:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4754:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4756:	b113      	cbz	r3, d475e <_ZN6String7reserveEj+0xe>
   d4758:	6843      	ldr	r3, [r0, #4]
   d475a:	428b      	cmp	r3, r1
   d475c:	d207      	bcs.n	d476e <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d475e:	4620      	mov	r0, r4
   d4760:	f7ff ffea 	bl	d4738 <_ZN6String12changeBufferEj>
   d4764:	b120      	cbz	r0, d4770 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d4766:	68a3      	ldr	r3, [r4, #8]
   d4768:	b90b      	cbnz	r3, d476e <_ZN6String7reserveEj+0x1e>
   d476a:	6822      	ldr	r2, [r4, #0]
   d476c:	7013      	strb	r3, [r2, #0]
   d476e:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d4770:	bd10      	pop	{r4, pc}

000d4772 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4772:	b570      	push	{r4, r5, r6, lr}
   d4774:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d4776:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4778:	4604      	mov	r4, r0
   d477a:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d477c:	f7ff ffe8 	bl	d4750 <_ZN6String7reserveEj>
   d4780:	b918      	cbnz	r0, d478a <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d4782:	4620      	mov	r0, r4
   d4784:	f7ff ffcd 	bl	d4722 <_ZN6String10invalidateEv>
		return *this;
   d4788:	e009      	b.n	d479e <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d478a:	462a      	mov	r2, r5
   d478c:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d478e:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d4790:	6820      	ldr	r0, [r4, #0]
   d4792:	f001 fe7d 	bl	d6490 <memcpy>
	buffer[len] = 0;
   d4796:	6822      	ldr	r2, [r4, #0]
   d4798:	68a3      	ldr	r3, [r4, #8]
   d479a:	2100      	movs	r1, #0
   d479c:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d479e:	4620      	mov	r0, r4
   d47a0:	bd70      	pop	{r4, r5, r6, pc}

000d47a2 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d47a2:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d47a4:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d47a6:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d47a8:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d47aa:	6043      	str	r3, [r0, #4]
	len = 0;
   d47ac:	6083      	str	r3, [r0, #8]
	flags = 0;
   d47ae:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d47b0:	460d      	mov	r5, r1
   d47b2:	b139      	cbz	r1, d47c4 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d47b4:	4608      	mov	r0, r1
   d47b6:	f001 fec2 	bl	d653e <strlen>
   d47ba:	4629      	mov	r1, r5
   d47bc:	4602      	mov	r2, r0
   d47be:	4620      	mov	r0, r4
   d47c0:	f7ff ffd7 	bl	d4772 <_ZN6String4copyEPKcj>
}
   d47c4:	4620      	mov	r0, r4
   d47c6:	bd38      	pop	{r3, r4, r5, pc}

000d47c8 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d47c8:	b510      	push	{r4, lr}
   d47ca:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d47cc:	6800      	ldr	r0, [r0, #0]
   d47ce:	b108      	cbz	r0, d47d4 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d47d0:	f7ff fdf4 	bl	d43bc <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d47d4:	4620      	mov	r0, r4
   d47d6:	bd10      	pop	{r4, pc}

000d47d8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d47d8:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d47da:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d47dc:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d47de:	689b      	ldr	r3, [r3, #8]
   d47e0:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d47e2:	68a3      	ldr	r3, [r4, #8]
   d47e4:	3b01      	subs	r3, #1
   d47e6:	60a3      	str	r3, [r4, #8]
   d47e8:	b92b      	cbnz	r3, d47f6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d47ea:	6823      	ldr	r3, [r4, #0]
   d47ec:	4620      	mov	r0, r4
   d47ee:	68db      	ldr	r3, [r3, #12]
        }
    }
   d47f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d47f4:	4718      	bx	r3
   d47f6:	bd10      	pop	{r4, pc}

000d47f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d47f8:	680b      	ldr	r3, [r1, #0]
   d47fa:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d47fc:	b113      	cbz	r3, d4804 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d47fe:	685a      	ldr	r2, [r3, #4]
   d4800:	3201      	adds	r2, #1
   d4802:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d4804:	4770      	bx	lr

000d4806 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4806:	b510      	push	{r4, lr}
   d4808:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d480a:	6800      	ldr	r0, [r0, #0]
   d480c:	b128      	cbz	r0, d481a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d480e:	6843      	ldr	r3, [r0, #4]
   d4810:	3b01      	subs	r3, #1
   d4812:	6043      	str	r3, [r0, #4]
   d4814:	b90b      	cbnz	r3, d481a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d4816:	f7ff ffdf 	bl	d47d8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d481a:	4620      	mov	r0, r4
   d481c:	bd10      	pop	{r4, pc}
	...

000d4820 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4820:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4822:	4c06      	ldr	r4, [pc, #24]	; (d483c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4824:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d4826:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4828:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d482a:	f7ff fdbf 	bl	d43ac <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d482e:	4620      	mov	r0, r4
   d4830:	4a03      	ldr	r2, [pc, #12]	; (d4840 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4832:	4904      	ldr	r1, [pc, #16]	; (d4844 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4838:	f001 b81a 	b.w	d5870 <__aeabi_atexit>
   d483c:	2003e3e4 	.word	0x2003e3e4
   d4840:	2003e3a0 	.word	0x2003e3a0
   d4844:	000d47c9 	.word	0x000d47c9

000d4848 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d484a:	4606      	mov	r6, r0
   d484c:	460d      	mov	r5, r1
   d484e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4850:	2400      	movs	r4, #0
  while (size--) {
   d4852:	42bd      	cmp	r5, r7
   d4854:	d00c      	beq.n	d4870 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4856:	6833      	ldr	r3, [r6, #0]
   d4858:	f815 1b01 	ldrb.w	r1, [r5], #1
   d485c:	689b      	ldr	r3, [r3, #8]
   d485e:	4630      	mov	r0, r6
   d4860:	4798      	blx	r3
     if (chunk>=0)
   d4862:	2800      	cmp	r0, #0
   d4864:	db01      	blt.n	d486a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4866:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4868:	e7f3      	b.n	d4852 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d486a:	2c00      	cmp	r4, #0
   d486c:	bf08      	it	eq
   d486e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4870:	4620      	mov	r0, r4
   d4872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4874 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4874:	b570      	push	{r4, r5, r6, lr}
   d4876:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4878:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d487a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d487c:	b149      	cbz	r1, d4892 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d487e:	f001 fe5e 	bl	d653e <strlen>
   d4882:	682b      	ldr	r3, [r5, #0]
   d4884:	4602      	mov	r2, r0
   d4886:	4621      	mov	r1, r4
   d4888:	4628      	mov	r0, r5
   d488a:	68db      	ldr	r3, [r3, #12]
    }
   d488c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4890:	4718      	bx	r3
    }
   d4892:	bd70      	pop	{r4, r5, r6, pc}

000d4894 <_ZN5Print5printEPKc>:
   d4894:	b508      	push	{r3, lr}
   d4896:	f7ff ffed 	bl	d4874 <_ZN5Print5writeEPKc>
   d489a:	bd08      	pop	{r3, pc}

000d489c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d489c:	6803      	ldr	r3, [r0, #0]
   d489e:	689b      	ldr	r3, [r3, #8]
   d48a0:	4718      	bx	r3

000d48a2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d48a2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d48a4:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d48a6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d48a8:	f7ff fff8 	bl	d489c <_ZN5Print5printEc>
  n += print('\n');
   d48ac:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d48ae:	4604      	mov	r4, r0
  n += print('\n');
   d48b0:	4628      	mov	r0, r5
   d48b2:	f7ff fff3 	bl	d489c <_ZN5Print5printEc>
  return n;
}
   d48b6:	4420      	add	r0, r4
   d48b8:	bd38      	pop	{r3, r4, r5, pc}

000d48ba <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d48ba:	b538      	push	{r3, r4, r5, lr}
   d48bc:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d48be:	f7ff ffd9 	bl	d4874 <_ZN5Print5writeEPKc>
   d48c2:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d48c4:	4628      	mov	r0, r5
   d48c6:	f7ff ffec 	bl	d48a2 <_ZN5Print7printlnEv>
  return n;
}
   d48ca:	4420      	add	r0, r4
   d48cc:	bd38      	pop	{r3, r4, r5, pc}

000d48ce <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d48ce:	b530      	push	{r4, r5, lr}
   d48d0:	b08b      	sub	sp, #44	; 0x2c
   d48d2:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d48d4:	2100      	movs	r1, #0
   d48d6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d48da:	2a01      	cmp	r2, #1
   d48dc:	bf98      	it	ls
   d48de:	220a      	movls	r2, #10
   d48e0:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d48e4:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d48e8:	fb05 3312 	mls	r3, r5, r2, r3
   d48ec:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d48f0:	2b09      	cmp	r3, #9
   d48f2:	bf94      	ite	ls
   d48f4:	3330      	addls	r3, #48	; 0x30
   d48f6:	3337      	addhi	r3, #55	; 0x37
   d48f8:	b2db      	uxtb	r3, r3
   d48fa:	4621      	mov	r1, r4
   d48fc:	f804 3901 	strb.w	r3, [r4], #-1
   d4900:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4902:	2d00      	cmp	r5, #0
   d4904:	d1ee      	bne.n	d48e4 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4906:	f7ff ffb5 	bl	d4874 <_ZN5Print5writeEPKc>
}
   d490a:	b00b      	add	sp, #44	; 0x2c
   d490c:	bd30      	pop	{r4, r5, pc}
	...

000d4910 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d4910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4914:	ec57 6b10 	vmov	r6, r7, d0
   d4918:	4682      	mov	sl, r0
   d491a:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d491c:	ee10 2a10 	vmov	r2, s0
   d4920:	463b      	mov	r3, r7
   d4922:	ee10 0a10 	vmov	r0, s0
   d4926:	4639      	mov	r1, r7
   d4928:	f001 fd46 	bl	d63b8 <__aeabi_dcmpun>
   d492c:	b108      	cbz	r0, d4932 <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d492e:	494e      	ldr	r1, [pc, #312]	; (d4a68 <_ZN5Print10printFloatEdh+0x158>)
   d4930:	e012      	b.n	d4958 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d4932:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d4936:	f04f 32ff 	mov.w	r2, #4294967295
   d493a:	4b4c      	ldr	r3, [pc, #304]	; (d4a6c <_ZN5Print10printFloatEdh+0x15c>)
   d493c:	4630      	mov	r0, r6
   d493e:	4649      	mov	r1, r9
   d4940:	f001 fd3a 	bl	d63b8 <__aeabi_dcmpun>
   d4944:	b968      	cbnz	r0, d4962 <_ZN5Print10printFloatEdh+0x52>
   d4946:	f04f 32ff 	mov.w	r2, #4294967295
   d494a:	4b48      	ldr	r3, [pc, #288]	; (d4a6c <_ZN5Print10printFloatEdh+0x15c>)
   d494c:	4630      	mov	r0, r6
   d494e:	4649      	mov	r1, r9
   d4950:	f001 fd14 	bl	d637c <__aeabi_dcmple>
   d4954:	b928      	cbnz	r0, d4962 <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4956:	4946      	ldr	r1, [pc, #280]	; (d4a70 <_ZN5Print10printFloatEdh+0x160>)
   d4958:	4650      	mov	r0, sl
   d495a:	f7ff ff8b 	bl	d4874 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d495e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d4962:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d4966:	4b43      	ldr	r3, [pc, #268]	; (d4a74 <_ZN5Print10printFloatEdh+0x164>)
   d4968:	4630      	mov	r0, r6
   d496a:	4639      	mov	r1, r7
   d496c:	f001 fd1a 	bl	d63a4 <__aeabi_dcmpgt>
   d4970:	b108      	cbz	r0, d4976 <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4972:	4941      	ldr	r1, [pc, #260]	; (d4a78 <_ZN5Print10printFloatEdh+0x168>)
   d4974:	e7f0      	b.n	d4958 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d4976:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d497a:	4b40      	ldr	r3, [pc, #256]	; (d4a7c <_ZN5Print10printFloatEdh+0x16c>)
   d497c:	4630      	mov	r0, r6
   d497e:	4639      	mov	r1, r7
   d4980:	f001 fcf2 	bl	d6368 <__aeabi_dcmplt>
   d4984:	2800      	cmp	r0, #0
   d4986:	d1f4      	bne.n	d4972 <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d4988:	2200      	movs	r2, #0
   d498a:	2300      	movs	r3, #0
   d498c:	4630      	mov	r0, r6
   d498e:	4639      	mov	r1, r7
   d4990:	f001 fcea 	bl	d6368 <__aeabi_dcmplt>
   d4994:	b140      	cbz	r0, d49a8 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d4996:	212d      	movs	r1, #45	; 0x2d
   d4998:	4650      	mov	r0, sl
   d499a:	f7ff ff7f 	bl	d489c <_ZN5Print5printEc>
     number = -number;
   d499e:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d49a2:	4604      	mov	r4, r0
     number = -number;
   d49a4:	461f      	mov	r7, r3
   d49a6:	e000      	b.n	d49aa <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d49a8:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d49aa:	4935      	ldr	r1, [pc, #212]	; (d4a80 <_ZN5Print10printFloatEdh+0x170>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d49ac:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d49b0:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d49b2:	fa5f f388 	uxtb.w	r3, r8
   d49b6:	429d      	cmp	r5, r3
   d49b8:	d906      	bls.n	d49c8 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d49ba:	2200      	movs	r2, #0
   d49bc:	4b31      	ldr	r3, [pc, #196]	; (d4a84 <_ZN5Print10printFloatEdh+0x174>)
   d49be:	f001 fb8b 	bl	d60d8 <__aeabi_ddiv>
   d49c2:	f108 0801 	add.w	r8, r8, #1
   d49c6:	e7f4      	b.n	d49b2 <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d49c8:	4632      	mov	r2, r6
   d49ca:	463b      	mov	r3, r7
   d49cc:	f001 f8a8 	bl	d5b20 <__adddf3>
   d49d0:	460f      	mov	r7, r1
   d49d2:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d49d4:	f001 fd2e 	bl	d6434 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d49d8:	220a      	movs	r2, #10
   d49da:	4601      	mov	r1, r0
   d49dc:	4680      	mov	r8, r0
   d49de:	4650      	mov	r0, sl
   d49e0:	f7ff ff75 	bl	d48ce <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
   d49e4:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d49e6:	b3e5      	cbz	r5, d4a62 <_ZN5Print10printFloatEdh+0x152>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d49e8:	4640      	mov	r0, r8
   d49ea:	f001 f9d5 	bl	d5d98 <__aeabi_ui2d>
   d49ee:	4602      	mov	r2, r0
   d49f0:	460b      	mov	r3, r1
   d49f2:	4630      	mov	r0, r6
   d49f4:	4639      	mov	r1, r7
   d49f6:	f001 f891 	bl	d5b1c <__aeabi_dsub>
   d49fa:	4606      	mov	r6, r0
   d49fc:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d49fe:	4650      	mov	r0, sl
   d4a00:	4921      	ldr	r1, [pc, #132]	; (d4a88 <_ZN5Print10printFloatEdh+0x178>)
   d4a02:	f7ff ff37 	bl	d4874 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d4a06:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d4a08:	2200      	movs	r2, #0
   d4a0a:	4b1e      	ldr	r3, [pc, #120]	; (d4a84 <_ZN5Print10printFloatEdh+0x174>)
   d4a0c:	4630      	mov	r0, r6
   d4a0e:	4639      	mov	r1, r7
   d4a10:	f001 fa38 	bl	d5e84 <__aeabi_dmul>
   d4a14:	4606      	mov	r6, r0
   d4a16:	460f      	mov	r7, r1
    int toPrint = int(remainder);
   d4a18:	f001 fce4 	bl	d63e4 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d4a1c:	f1b0 0900 	subs.w	r9, r0, #0
   d4a20:	da07      	bge.n	d4a32 <_ZN5Print10printFloatEdh+0x122>
            t = print('-');
   d4a22:	212d      	movs	r1, #45	; 0x2d
   d4a24:	4650      	mov	r0, sl
   d4a26:	f7ff ff39 	bl	d489c <_ZN5Print5printEc>
            val = -n;
   d4a2a:	f1c9 0100 	rsb	r1, r9, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d4a2e:	4680      	mov	r8, r0
   d4a30:	e002      	b.n	d4a38 <_ZN5Print10printFloatEdh+0x128>
            val = -n;
        } else {
            val = n;
   d4a32:	4649      	mov	r1, r9
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d4a34:	f04f 0800 	mov.w	r8, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4a38:	220a      	movs	r2, #10
   d4a3a:	4650      	mov	r0, sl
   d4a3c:	f7ff ff47 	bl	d48ce <_ZN5Print11printNumberEmh>
    n += print(toPrint);
   d4a40:	4440      	add	r0, r8
   d4a42:	4404      	add	r4, r0
    remainder -= toPrint;
   d4a44:	4648      	mov	r0, r9
   d4a46:	f001 f9b7 	bl	d5db8 <__aeabi_i2d>
   d4a4a:	4602      	mov	r2, r0
   d4a4c:	460b      	mov	r3, r1
   d4a4e:	4630      	mov	r0, r6
   d4a50:	4639      	mov	r1, r7
   d4a52:	f001 f863 	bl	d5b1c <__aeabi_dsub>
   d4a56:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d4a58:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d4a5c:	4606      	mov	r6, r0
   d4a5e:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d4a60:	d1d2      	bne.n	d4a08 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d4a62:	4620      	mov	r0, r4
   d4a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4a68:	000d66dc 	.word	0x000d66dc
   d4a6c:	7fefffff 	.word	0x7fefffff
   d4a70:	000d66e6 	.word	0x000d66e6
   d4a74:	41efffff 	.word	0x41efffff
   d4a78:	000d66e0 	.word	0x000d66e0
   d4a7c:	c1efffff 	.word	0xc1efffff
   d4a80:	3fe00000 	.word	0x3fe00000
   d4a84:	40240000 	.word	0x40240000
   d4a88:	000d66e4 	.word	0x000d66e4

000d4a8c <_ZN5Print5printEfi>:
{
  return write(c);
}

size_t Print::print(float n, int digits)
{
   d4a8c:	b538      	push	{r3, r4, r5, lr}
   d4a8e:	4604      	mov	r4, r0
  return printFloat((double)n, digits);
   d4a90:	ee10 0a10 	vmov	r0, s0
   d4a94:	b2cd      	uxtb	r5, r1
   d4a96:	f001 f9a1 	bl	d5ddc <__aeabi_f2d>
   d4a9a:	ec41 0b10 	vmov	d0, r0, r1
   d4a9e:	4629      	mov	r1, r5
   d4aa0:	4620      	mov	r0, r4
}
   d4aa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return write(c);
}

size_t Print::print(float n, int digits)
{
  return printFloat((double)n, digits);
   d4aa6:	f7ff bf33 	b.w	d4910 <_ZN5Print10printFloatEdh>

000d4aaa <_ZN5Print7printlnEdi>:
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d4aaa:	b538      	push	{r3, r4, r5, lr}
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d4aac:	b2c9      	uxtb	r1, r1
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d4aae:	4605      	mov	r5, r0
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d4ab0:	f7ff ff2e 	bl	d4910 <_ZN5Print10printFloatEdh>
   d4ab4:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d4ab6:	4628      	mov	r0, r5
   d4ab8:	f7ff fef3 	bl	d48a2 <_ZN5Print7printlnEv>
  return n;
}
   d4abc:	4420      	add	r0, r4
   d4abe:	bd38      	pop	{r3, r4, r5, pc}

000d4ac0 <_ZN5Print7printlnEfi>:
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d4ac0:	b538      	push	{r3, r4, r5, lr}
   d4ac2:	4604      	mov	r4, r0
    return println((double)num, digits);
   d4ac4:	ee10 0a10 	vmov	r0, s0
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d4ac8:	460d      	mov	r5, r1
    return println((double)num, digits);
   d4aca:	f001 f987 	bl	d5ddc <__aeabi_f2d>
   d4ace:	ec41 0b10 	vmov	d0, r0, r1
   d4ad2:	4629      	mov	r1, r5
   d4ad4:	4620      	mov	r0, r4
}
   d4ad6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return n;
}

size_t Print::println(float num, int digits)
{
    return println((double)num, digits);
   d4ada:	f7ff bfe6 	b.w	d4aaa <_ZN5Print7printlnEdi>
	...

000d4ae0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4ae0:	4b01      	ldr	r3, [pc, #4]	; (d4ae8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4ae2:	4a02      	ldr	r2, [pc, #8]	; (d4aec <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4ae4:	601a      	str	r2, [r3, #0]
   d4ae6:	4770      	bx	lr
   d4ae8:	2003e3e8 	.word	0x2003e3e8
   d4aec:	000d675d 	.word	0x000d675d

000d4af0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4af0:	4b02      	ldr	r3, [pc, #8]	; (d4afc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4af2:	681a      	ldr	r2, [r3, #0]
   d4af4:	4b02      	ldr	r3, [pc, #8]	; (d4b00 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4af6:	601a      	str	r2, [r3, #0]
   d4af8:	4770      	bx	lr
   d4afa:	bf00      	nop
   d4afc:	2003e338 	.word	0x2003e338
   d4b00:	2003e3ec 	.word	0x2003e3ec

000d4b04 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4b04:	2100      	movs	r1, #0
   d4b06:	f7ff bce1 	b.w	d44cc <system_delay_ms>

000d4b0a <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4b0a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4b0c:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4b0e:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4b10:	b113      	cbz	r3, d4b18 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4b12:	2203      	movs	r2, #3
   d4b14:	4601      	mov	r1, r0
   d4b16:	4798      	blx	r3
    }
   d4b18:	4620      	mov	r0, r4
   d4b1a:	bd10      	pop	{r4, pc}

000d4b1c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4b1c:	b510      	push	{r4, lr}
   d4b1e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4b20:	f7ff fff3 	bl	d4b0a <_ZNSt14_Function_baseD1Ev>
   d4b24:	4620      	mov	r0, r4
   d4b26:	bd10      	pop	{r4, pc}

000d4b28 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d4b28:	b513      	push	{r0, r1, r4, lr}
   d4b2a:	460b      	mov	r3, r1
   d4b2c:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4b2e:	c803      	ldmia	r0, {r0, r1}
   d4b30:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4b34:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4b38:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4b3c:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d4b40:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4b44:	b002      	add	sp, #8
   d4b46:	bd10      	pop	{r4, pc}

000d4b48 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4b48:	4803      	ldr	r0, [pc, #12]	; (d4b58 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4b4a:	4a04      	ldr	r2, [pc, #16]	; (d4b5c <_GLOBAL__sub_I_RGB+0x14>)
   d4b4c:	4904      	ldr	r1, [pc, #16]	; (d4b60 <_GLOBAL__sub_I_RGB+0x18>)
   d4b4e:	2300      	movs	r3, #0
   d4b50:	6083      	str	r3, [r0, #8]
   d4b52:	f000 be8d 	b.w	d5870 <__aeabi_atexit>
   d4b56:	bf00      	nop
   d4b58:	2003e3f0 	.word	0x2003e3f0
   d4b5c:	2003e3a0 	.word	0x2003e3a0
   d4b60:	000d4b1d 	.word	0x000d4b1d

000d4b64 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d4b64:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4b66:	4b0c      	ldr	r3, [pc, #48]	; (d4b98 <serialEventRun+0x34>)
   d4b68:	b133      	cbz	r3, d4b78 <serialEventRun+0x14>
   d4b6a:	f000 fc1b 	bl	d53a4 <_Z16_fetch_usbserialv>
   d4b6e:	6803      	ldr	r3, [r0, #0]
   d4b70:	691b      	ldr	r3, [r3, #16]
   d4b72:	4798      	blx	r3
   d4b74:	2800      	cmp	r0, #0
   d4b76:	dc09      	bgt.n	d4b8c <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d4b78:	4b08      	ldr	r3, [pc, #32]	; (d4b9c <serialEventRun+0x38>)
   d4b7a:	b163      	cbz	r3, d4b96 <serialEventRun+0x32>
   d4b7c:	f000 fcdc 	bl	d5538 <_Z22__fetch_global_Serial1v>
   d4b80:	6803      	ldr	r3, [r0, #0]
   d4b82:	691b      	ldr	r3, [r3, #16]
   d4b84:	4798      	blx	r3
   d4b86:	2800      	cmp	r0, #0
   d4b88:	dc03      	bgt.n	d4b92 <serialEventRun+0x2e>
   d4b8a:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d4b8c:	f3af 8000 	nop.w
   d4b90:	e7f2      	b.n	d4b78 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d4b92:	f3af 8000 	nop.w
   d4b96:	bd08      	pop	{r3, pc}
	...

000d4ba0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d4ba0:	b508      	push	{r3, lr}
	serialEventRun();
   d4ba2:	f7ff ffdf 	bl	d4b64 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4ba6:	f7ff fbe1 	bl	d436c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4baa:	4b01      	ldr	r3, [pc, #4]	; (d4bb0 <_post_loop+0x10>)
   d4bac:	6018      	str	r0, [r3, #0]
   d4bae:	bd08      	pop	{r3, pc}
   d4bb0:	2003e74c 	.word	0x2003e74c

000d4bb4 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4bb4:	4802      	ldr	r0, [pc, #8]	; (d4bc0 <_Z33system_initialize_user_backup_ramv+0xc>)
   d4bb6:	4a03      	ldr	r2, [pc, #12]	; (d4bc4 <_Z33system_initialize_user_backup_ramv+0x10>)
   d4bb8:	4903      	ldr	r1, [pc, #12]	; (d4bc8 <_Z33system_initialize_user_backup_ramv+0x14>)
   d4bba:	1a12      	subs	r2, r2, r0
   d4bbc:	f001 bc68 	b.w	d6490 <memcpy>
   d4bc0:	2003f400 	.word	0x2003f400
   d4bc4:	2003f404 	.word	0x2003f404
   d4bc8:	000d69c0 	.word	0x000d69c0

000d4bcc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4bcc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4bce:	2300      	movs	r3, #0
   d4bd0:	9300      	str	r3, [sp, #0]
   d4bd2:	461a      	mov	r2, r3
   d4bd4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4bd8:	f7ff fc9a 	bl	d4510 <system_ctrl_set_result>
}
   d4bdc:	b003      	add	sp, #12
   d4bde:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4be4 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d4be4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4be6:	8843      	ldrh	r3, [r0, #2]
   d4be8:	2b0a      	cmp	r3, #10
   d4bea:	d008      	beq.n	d4bfe <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4bec:	2b50      	cmp	r3, #80	; 0x50
   d4bee:	d109      	bne.n	d4c04 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d4bf0:	4b09      	ldr	r3, [pc, #36]	; (d4c18 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4bf2:	681b      	ldr	r3, [r3, #0]
   d4bf4:	b13b      	cbz	r3, d4c06 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d4bf6:	b003      	add	sp, #12
   d4bf8:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d4bfc:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d4bfe:	f7ff ffe5 	bl	d4bcc <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d4c02:	e006      	b.n	d4c12 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4c04:	2300      	movs	r3, #0
   d4c06:	9300      	str	r3, [sp, #0]
   d4c08:	461a      	mov	r2, r3
   d4c0a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4c0e:	f7ff fc7f 	bl	d4510 <system_ctrl_set_result>
        break;
    }
}
   d4c12:	b003      	add	sp, #12
   d4c14:	f85d fb04 	ldr.w	pc, [sp], #4
   d4c18:	2003e400 	.word	0x2003e400

000d4c1c <module_user_init_hook>:

void module_user_init_hook()
{
   d4c1c:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4c1e:	4c10      	ldr	r4, [pc, #64]	; (d4c60 <module_user_init_hook+0x44>)
   d4c20:	4d10      	ldr	r5, [pc, #64]	; (d4c64 <module_user_init_hook+0x48>)
   d4c22:	6823      	ldr	r3, [r4, #0]
   d4c24:	42ab      	cmp	r3, r5
   d4c26:	4b10      	ldr	r3, [pc, #64]	; (d4c68 <module_user_init_hook+0x4c>)
   d4c28:	bf0c      	ite	eq
   d4c2a:	2201      	moveq	r2, #1
   d4c2c:	2200      	movne	r2, #0
   d4c2e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d4c30:	d002      	beq.n	d4c38 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d4c32:	f7ff ffbf 	bl	d4bb4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d4c36:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4c38:	f7ff fb90 	bl	d435c <HAL_RNG_GetRandomNumber>
   d4c3c:	4604      	mov	r4, r0
    srand(seed);
   d4c3e:	f001 fc3b 	bl	d64b8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4c42:	4b0a      	ldr	r3, [pc, #40]	; (d4c6c <module_user_init_hook+0x50>)
   d4c44:	b113      	cbz	r3, d4c4c <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d4c46:	4620      	mov	r0, r4
   d4c48:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4c4c:	2100      	movs	r1, #0
   d4c4e:	4807      	ldr	r0, [pc, #28]	; (d4c6c <module_user_init_hook+0x50>)
   d4c50:	f7ff fcc8 	bl	d45e4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4c54:	2100      	movs	r1, #0
   d4c56:	4806      	ldr	r0, [pc, #24]	; (d4c70 <module_user_init_hook+0x54>)
}
   d4c58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4c5c:	f7ff bc4e 	b.w	d44fc <system_ctrl_set_app_request_handler>
   d4c60:	2003f400 	.word	0x2003f400
   d4c64:	9a271c1e 	.word	0x9a271c1e
   d4c68:	2003e404 	.word	0x2003e404
   d4c6c:	00000000 	.word	0x00000000
   d4c70:	000d4be5 	.word	0x000d4be5

000d4c74 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4c74:	4770      	bx	lr

000d4c76 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d4c76:	2000      	movs	r0, #0
   d4c78:	4770      	bx	lr

000d4c7a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4c7a:	b510      	push	{r4, lr}
   d4c7c:	2110      	movs	r1, #16
   d4c7e:	4604      	mov	r4, r0
   d4c80:	f000 fdfb 	bl	d587a <_ZdlPvj>
   d4c84:	4620      	mov	r0, r4
   d4c86:	bd10      	pop	{r4, pc}

000d4c88 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d4c88:	b508      	push	{r3, lr}
      { delete this; }
   d4c8a:	b108      	cbz	r0, d4c90 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d4c8c:	f7ff fff5 	bl	d4c7a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4c90:	bd08      	pop	{r3, pc}

000d4c92 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4c92:	2200      	movs	r2, #0
   d4c94:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d4c96:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4c98:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d4c9c:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4c9e:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d4ca2:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d4ca4:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4ca6:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4ca8:	680c      	ldr	r4, [r1, #0]
   d4caa:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d4cac:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d4cae:	bd10      	pop	{r4, pc}

000d4cb0 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d4cb0:	b510      	push	{r4, lr}
   d4cb2:	4604      	mov	r4, r0
    free((void*)msg_);
   d4cb4:	6800      	ldr	r0, [r0, #0]
   d4cb6:	f7ff fca5 	bl	d4604 <free>
}
   d4cba:	4620      	mov	r0, r4
   d4cbc:	bd10      	pop	{r4, pc}

000d4cbe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d4cbe:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4cc0:	68c4      	ldr	r4, [r0, #12]
   d4cc2:	b1f4      	cbz	r4, d4d02 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d4cc4:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4cc6:	2b02      	cmp	r3, #2
   d4cc8:	d103      	bne.n	d4cd2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d4cca:	f104 000c 	add.w	r0, r4, #12
   d4cce:	f7ff ffef 	bl	d4cb0 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d4cd2:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d4cd4:	b135      	cbz	r5, d4ce4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4cd6:	4628      	mov	r0, r5
   d4cd8:	f7ff ff17 	bl	d4b0a <_ZNSt14_Function_baseD1Ev>
   d4cdc:	2110      	movs	r1, #16
   d4cde:	4628      	mov	r0, r5
   d4ce0:	f000 fdcb 	bl	d587a <_ZdlPvj>
   d4ce4:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d4ce6:	b135      	cbz	r5, d4cf6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d4ce8:	4628      	mov	r0, r5
   d4cea:	f7ff ff0e 	bl	d4b0a <_ZNSt14_Function_baseD1Ev>
   d4cee:	2110      	movs	r1, #16
   d4cf0:	4628      	mov	r0, r5
   d4cf2:	f000 fdc2 	bl	d587a <_ZdlPvj>
   d4cf6:	4620      	mov	r0, r4
   d4cf8:	2114      	movs	r1, #20
   d4cfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4cfe:	f000 bdbc 	b.w	d587a <_ZdlPvj>
   d4d02:	bd38      	pop	{r3, r4, r5, pc}

000d4d04 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d4d04:	b513      	push	{r0, r1, r4, lr}
   d4d06:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4d08:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d4d0c:	2300      	movs	r3, #0
   d4d0e:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4d10:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4d12:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d4d14:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4d16:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d4d18:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4d1a:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4d1c:	f7ff fd73 	bl	d4806 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4d20:	4620      	mov	r0, r4
   d4d22:	b002      	add	sp, #8
   d4d24:	bd10      	pop	{r4, pc}

000d4d26 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d4d26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4d28:	460c      	mov	r4, r1
   d4d2a:	ad02      	add	r5, sp, #8
   d4d2c:	f854 3b04 	ldr.w	r3, [r4], #4
   d4d30:	f845 3d08 	str.w	r3, [r5, #-8]!
   d4d34:	4606      	mov	r6, r0
   d4d36:	460f      	mov	r7, r1
   d4d38:	a801      	add	r0, sp, #4
   d4d3a:	4621      	mov	r1, r4
   d4d3c:	f7ff fd5c 	bl	d47f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d4d40:	4629      	mov	r1, r5
   d4d42:	4630      	mov	r0, r6
   d4d44:	f7ff ffde 	bl	d4d04 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4d48:	a801      	add	r0, sp, #4
   d4d4a:	f7ff fd5c 	bl	d4806 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4d4e:	4620      	mov	r0, r4
   d4d50:	f7ff fd59 	bl	d4806 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d4d54:	4638      	mov	r0, r7
   d4d56:	2108      	movs	r1, #8
   d4d58:	f000 fd8f 	bl	d587a <_ZdlPvj>
        return p;
    }
   d4d5c:	4630      	mov	r0, r6
   d4d5e:	b003      	add	sp, #12
   d4d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d4d64 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4d64:	b538      	push	{r3, r4, r5, lr}
   d4d66:	2300      	movs	r3, #0
   d4d68:	4604      	mov	r4, r0
   d4d6a:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4d6c:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4d6e:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4d70:	f7ff f991 	bl	d4096 <_Znwj>
   d4d74:	b128      	cbz	r0, d4d82 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d4d76:	2301      	movs	r3, #1
   d4d78:	6043      	str	r3, [r0, #4]
   d4d7a:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d4d7c:	4b02      	ldr	r3, [pc, #8]	; (d4d88 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d4d7e:	6003      	str	r3, [r0, #0]
   d4d80:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4d82:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d4d84:	4620      	mov	r0, r4
   d4d86:	bd38      	pop	{r3, r4, r5, pc}
   d4d88:	000d67fc 	.word	0x000d67fc

000d4d8c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4d8c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4d8e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4d90:	b90a      	cbnz	r2, d4d96 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d4d92:	f000 fd74 	bl	d587e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4d96:	68c3      	ldr	r3, [r0, #12]
    }
   d4d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4d9c:	4718      	bx	r3

000d4d9e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4d9e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4da0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4da2:	f100 0110 	add.w	r1, r0, #16
   d4da6:	f7ff fff1 	bl	d4d8c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4daa:	bd08      	pop	{r3, pc}

000d4dac <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4dac:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4dae:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4db0:	b90a      	cbnz	r2, d4db6 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d4db2:	f000 fd64 	bl	d587e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4db6:	68c3      	ldr	r3, [r0, #12]
    }
   d4db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4dbc:	4718      	bx	r3

000d4dbe <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4dbe:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4dc0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4dc2:	f100 0110 	add.w	r1, r0, #16
   d4dc6:	f7ff fff1 	bl	d4dac <_ZNKSt8functionIFvRKbEEclES1_>
   d4dca:	bd08      	pop	{r3, pc}

000d4dcc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4dcc:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4dce:	2300      	movs	r3, #0
   d4dd0:	6083      	str	r3, [r0, #8]
   d4dd2:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4dd4:	4604      	mov	r4, r0
   d4dd6:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4dd8:	b12b      	cbz	r3, d4de6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4dda:	2202      	movs	r2, #2
   d4ddc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4dde:	68eb      	ldr	r3, [r5, #12]
   d4de0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4de2:	68ab      	ldr	r3, [r5, #8]
   d4de4:	60a3      	str	r3, [r4, #8]
	}
    }
   d4de6:	4620      	mov	r0, r4
   d4de8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4dec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d4dec:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4dee:	b089      	sub	sp, #36	; 0x24
   d4df0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d4df2:	4668      	mov	r0, sp
   d4df4:	f7ff ff4d 	bl	d4c92 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d4df8:	2300      	movs	r3, #0
   d4dfa:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d4dfe:	f04f 0202 	mov.w	r2, #2
   d4e02:	e8d4 3f4f 	ldrexb	r3, [r4]
   d4e06:	2b00      	cmp	r3, #0
   d4e08:	d103      	bne.n	d4e12 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d4e0a:	e8c4 2f41 	strexb	r1, r2, [r4]
   d4e0e:	2900      	cmp	r1, #0
   d4e10:	d1f7      	bne.n	d4e02 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d4e12:	d002      	beq.n	d4e1a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d4e14:	f88d 3008 	strb.w	r3, [sp, #8]
   d4e18:	e063      	b.n	d4ee2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d4e1a:	f114 050c 	adds.w	r5, r4, #12
   d4e1e:	d003      	beq.n	d4e28 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d4e20:	4669      	mov	r1, sp
   d4e22:	4628      	mov	r0, r5
   d4e24:	f7ff ff35 	bl	d4c92 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4e28:	f3bf 8f5f 	dmb	sy
   d4e2c:	2301      	movs	r3, #1
   d4e2e:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4e30:	2000      	movs	r0, #0
   d4e32:	f104 0308 	add.w	r3, r4, #8
   d4e36:	f3bf 8f5f 	dmb	sy
   d4e3a:	e853 6f00 	ldrex	r6, [r3]
   d4e3e:	e843 0200 	strex	r2, r0, [r3]
   d4e42:	2a00      	cmp	r2, #0
   d4e44:	d1f9      	bne.n	d4e3a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d4e46:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d4e4a:	2e00      	cmp	r6, #0
   d4e4c:	d049      	beq.n	d4ee2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4e4e:	f7ff fb45 	bl	d44dc <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d4e52:	b120      	cbz	r0, d4e5e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4e54:	4629      	mov	r1, r5
   d4e56:	4630      	mov	r0, r6
   d4e58:	f7ff ff98 	bl	d4d8c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4e5c:	e03a      	b.n	d4ed4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4e5e:	4631      	mov	r1, r6
   d4e60:	a802      	add	r0, sp, #8
   d4e62:	f7ff ffb3 	bl	d4dcc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4e66:	68e0      	ldr	r0, [r4, #12]
   d4e68:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4e6c:	b108      	cbz	r0, d4e72 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d4e6e:	f001 fb4b 	bl	d6508 <strdup>
   d4e72:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4e74:	2010      	movs	r0, #16
   d4e76:	f8ad 501c 	strh.w	r5, [sp, #28]
   d4e7a:	f7ff f90c 	bl	d4096 <_Znwj>
   d4e7e:	4605      	mov	r5, r0
   d4e80:	b1e8      	cbz	r0, d4ebe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4e82:	2700      	movs	r7, #0
   d4e84:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4e86:	2018      	movs	r0, #24
   d4e88:	f7ff f905 	bl	d4096 <_Znwj>
   d4e8c:	4604      	mov	r4, r0
   d4e8e:	b188      	cbz	r0, d4eb4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4e90:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4e92:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4e94:	a802      	add	r0, sp, #8
   d4e96:	f7ff fe47 	bl	d4b28 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4e9a:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d4e9c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4e9e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4ea0:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d4ea2:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4ea4:	a906      	add	r1, sp, #24
   d4ea6:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4ea8:	60e3      	str	r3, [r4, #12]
   d4eaa:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4eae:	9205      	str	r2, [sp, #20]
   d4eb0:	f7ff feef 	bl	d4c92 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4eb4:	4b0d      	ldr	r3, [pc, #52]	; (d4eec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d4eb6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4eb8:	4b0d      	ldr	r3, [pc, #52]	; (d4ef0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4eba:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4ebc:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d4ebe:	a806      	add	r0, sp, #24
   d4ec0:	f7ff fef6 	bl	d4cb0 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4ec4:	a802      	add	r0, sp, #8
   d4ec6:	f7ff fe20 	bl	d4b0a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4eca:	2200      	movs	r2, #0
   d4ecc:	4629      	mov	r1, r5
   d4ece:	4809      	ldr	r0, [pc, #36]	; (d4ef4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d4ed0:	f7ff fb0c 	bl	d44ec <application_thread_invoke>
   d4ed4:	4630      	mov	r0, r6
   d4ed6:	f7ff fe18 	bl	d4b0a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d4eda:	2110      	movs	r1, #16
   d4edc:	4630      	mov	r0, r6
   d4ede:	f000 fccc 	bl	d587a <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d4ee2:	4668      	mov	r0, sp
   d4ee4:	f7ff fee4 	bl	d4cb0 <_ZN8particle5ErrorD1Ev>
    }
   d4ee8:	b009      	add	sp, #36	; 0x24
   d4eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4eec:	000d4d9f 	.word	0x000d4d9f
   d4ef0:	000d5015 	.word	0x000d5015
   d4ef4:	000d5585 	.word	0x000d5585

000d4ef8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4efc:	b08b      	sub	sp, #44	; 0x2c
   d4efe:	4606      	mov	r6, r0
   d4f00:	460f      	mov	r7, r1
   d4f02:	4690      	mov	r8, r2
   d4f04:	4699      	mov	r9, r3
   d4f06:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4f0a:	f7ff fb5b 	bl	d45c4 <spark_cloud_flag_connected>
   d4f0e:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d4f10:	4683      	mov	fp, r0
   d4f12:	bb30      	cbnz	r0, d4f62 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4f14:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d4f18:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4f1a:	a905      	add	r1, sp, #20
   d4f1c:	4628      	mov	r0, r5
   d4f1e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4f22:	f7ff feb6 	bl	d4c92 <_ZN8particle5ErrorC1EOS0_>
   d4f26:	2014      	movs	r0, #20
   d4f28:	f7ff f8b5 	bl	d4096 <_Znwj>
   d4f2c:	4604      	mov	r4, r0
   d4f2e:	b158      	cbz	r0, d4f48 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d4f30:	2302      	movs	r3, #2
   d4f32:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4f34:	2301      	movs	r3, #1
   d4f36:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4f38:	f8c0 b004 	str.w	fp, [r0, #4]
   d4f3c:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d4f40:	4629      	mov	r1, r5
   d4f42:	300c      	adds	r0, #12
   d4f44:	f7ff fea5 	bl	d4c92 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d4f48:	4630      	mov	r0, r6
   d4f4a:	4621      	mov	r1, r4
   d4f4c:	f840 4b04 	str.w	r4, [r0], #4
   d4f50:	f7ff ff08 	bl	d4d64 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4f54:	4628      	mov	r0, r5
   d4f56:	f7ff feab 	bl	d4cb0 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d4f5a:	a805      	add	r0, sp, #20
   d4f5c:	f7ff fea8 	bl	d4cb0 <_ZN8particle5ErrorD1Ev>
   d4f60:	e052      	b.n	d5008 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4f62:	2400      	movs	r4, #0
   d4f64:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d4f66:	2014      	movs	r0, #20
   d4f68:	606c      	str	r4, [r5, #4]
   d4f6a:	60ac      	str	r4, [r5, #8]
   d4f6c:	9307      	str	r3, [sp, #28]
   d4f6e:	f7ff f892 	bl	d4096 <_Znwj>
   d4f72:	4601      	mov	r1, r0
   d4f74:	b118      	cbz	r0, d4f7e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d4f76:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4f78:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4f7a:	6044      	str	r4, [r0, #4]
   d4f7c:	6084      	str	r4, [r0, #8]
   d4f7e:	a804      	add	r0, sp, #16
   d4f80:	9103      	str	r1, [sp, #12]
   d4f82:	f7ff feef 	bl	d4d64 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d4f86:	4b22      	ldr	r3, [pc, #136]	; (d5010 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d4f88:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d4f8a:	2008      	movs	r0, #8
   d4f8c:	f7ff f883 	bl	d4096 <_Znwj>
   d4f90:	4604      	mov	r4, r0
   d4f92:	b128      	cbz	r0, d4fa0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4f94:	9b03      	ldr	r3, [sp, #12]
   d4f96:	f840 3b04 	str.w	r3, [r0], #4
   d4f9a:	a904      	add	r1, sp, #16
   d4f9c:	f7ff fc2c 	bl	d47f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4fa0:	9500      	str	r5, [sp, #0]
   d4fa2:	fa5f f38a 	uxtb.w	r3, sl
   d4fa6:	464a      	mov	r2, r9
   d4fa8:	4641      	mov	r1, r8
   d4faa:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d4fac:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4fae:	f7ff fb11 	bl	d45d4 <spark_send_event>
   d4fb2:	b920      	cbnz	r0, d4fbe <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d4fb4:	9b03      	ldr	r3, [sp, #12]
   d4fb6:	785b      	ldrb	r3, [r3, #1]
   d4fb8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d4fbc:	b183      	cbz	r3, d4fe0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d4fbe:	9b03      	ldr	r3, [sp, #12]
   d4fc0:	9305      	str	r3, [sp, #20]
   d4fc2:	a904      	add	r1, sp, #16
   d4fc4:	a806      	add	r0, sp, #24
   d4fc6:	f7ff fc17 	bl	d47f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d4fca:	a905      	add	r1, sp, #20
   d4fcc:	4630      	mov	r0, r6
   d4fce:	f7ff fe99 	bl	d4d04 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4fd2:	a806      	add	r0, sp, #24
   d4fd4:	f7ff fc17 	bl	d4806 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4fd8:	a804      	add	r0, sp, #16
   d4fda:	f7ff fc14 	bl	d4806 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4fde:	e013      	b.n	d5008 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d4fe0:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d4fe4:	a905      	add	r1, sp, #20
   d4fe6:	a803      	add	r0, sp, #12
   d4fe8:	9205      	str	r2, [sp, #20]
   d4fea:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4fee:	f7ff fefd 	bl	d4dec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d4ff2:	a805      	add	r0, sp, #20
   d4ff4:	f7ff fe5c 	bl	d4cb0 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d4ff8:	a805      	add	r0, sp, #20
   d4ffa:	9909      	ldr	r1, [sp, #36]	; 0x24
   d4ffc:	f7ff fe93 	bl	d4d26 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d5000:	a806      	add	r0, sp, #24
   d5002:	f7ff fc00 	bl	d4806 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5006:	e7da      	b.n	d4fbe <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d5008:	4630      	mov	r0, r6
   d500a:	b00b      	add	sp, #44	; 0x2c
   d500c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5010:	000d5185 	.word	0x000d5185

000d5014 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5014:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5016:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5018:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d501a:	d006      	beq.n	d502a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d501c:	2a03      	cmp	r2, #3
   d501e:	d017      	beq.n	d5050 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d5020:	2a01      	cmp	r2, #1
   d5022:	d122      	bne.n	d506a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5024:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5026:	6003      	str	r3, [r0, #0]
	      break;
   d5028:	e01f      	b.n	d506a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d502a:	2018      	movs	r0, #24
   d502c:	680e      	ldr	r6, [r1, #0]
   d502e:	f7ff f832 	bl	d4096 <_Znwj>
   d5032:	4605      	mov	r5, r0
   d5034:	b150      	cbz	r0, d504c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5036:	4631      	mov	r1, r6
   d5038:	f7ff fec8 	bl	d4dcc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d503c:	6930      	ldr	r0, [r6, #16]
   d503e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5042:	b108      	cbz	r0, d5048 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d5044:	f001 fa60 	bl	d6508 <strdup>
   d5048:	6128      	str	r0, [r5, #16]
   d504a:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d504c:	6025      	str	r5, [r4, #0]
   d504e:	e00c      	b.n	d506a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5050:	6804      	ldr	r4, [r0, #0]
   d5052:	b154      	cbz	r4, d506a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d5054:	f104 0010 	add.w	r0, r4, #16
   d5058:	f7ff fe2a 	bl	d4cb0 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d505c:	4620      	mov	r0, r4
   d505e:	f7ff fd54 	bl	d4b0a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5062:	2118      	movs	r1, #24
   d5064:	4620      	mov	r0, r4
   d5066:	f000 fc08 	bl	d587a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d506a:	2000      	movs	r0, #0
   d506c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d506e <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d506e:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5070:	2300      	movs	r3, #0
   d5072:	6083      	str	r3, [r0, #8]
   d5074:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5076:	4604      	mov	r4, r0
   d5078:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d507a:	b12b      	cbz	r3, d5088 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d507c:	2202      	movs	r2, #2
   d507e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5080:	68eb      	ldr	r3, [r5, #12]
   d5082:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5084:	68ab      	ldr	r3, [r5, #8]
   d5086:	60a3      	str	r3, [r4, #8]
	}
    }
   d5088:	4620      	mov	r0, r4
   d508a:	bd38      	pop	{r3, r4, r5, pc}

000d508c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d508c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d508e:	b570      	push	{r4, r5, r6, lr}
   d5090:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5092:	d006      	beq.n	d50a2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d5094:	2a03      	cmp	r2, #3
   d5096:	d011      	beq.n	d50bc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d5098:	2a01      	cmp	r2, #1
   d509a:	d118      	bne.n	d50ce <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d509c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d509e:	6003      	str	r3, [r0, #0]
	      break;
   d50a0:	e015      	b.n	d50ce <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d50a2:	2014      	movs	r0, #20
   d50a4:	680e      	ldr	r6, [r1, #0]
   d50a6:	f7fe fff6 	bl	d4096 <_Znwj>
   d50aa:	4605      	mov	r5, r0
   d50ac:	b120      	cbz	r0, d50b8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d50ae:	4631      	mov	r1, r6
   d50b0:	f7ff ffdd 	bl	d506e <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d50b4:	7c33      	ldrb	r3, [r6, #16]
   d50b6:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d50b8:	6025      	str	r5, [r4, #0]
   d50ba:	e008      	b.n	d50ce <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d50bc:	6804      	ldr	r4, [r0, #0]
   d50be:	b134      	cbz	r4, d50ce <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d50c0:	4620      	mov	r0, r4
   d50c2:	f7ff fd22 	bl	d4b0a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d50c6:	2114      	movs	r1, #20
   d50c8:	4620      	mov	r0, r4
   d50ca:	f000 fbd6 	bl	d587a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d50ce:	2000      	movs	r0, #0
   d50d0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d50d4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d50d4:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d50d6:	2300      	movs	r3, #0
   d50d8:	b087      	sub	sp, #28
   d50da:	460c      	mov	r4, r1
   d50dc:	f3bf 8f5f 	dmb	sy
   d50e0:	e850 6f00 	ldrex	r6, [r0]
   d50e4:	e840 3200 	strex	r2, r3, [r0]
   d50e8:	2a00      	cmp	r2, #0
   d50ea:	d1f9      	bne.n	d50e0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d50ec:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d50f0:	2e00      	cmp	r6, #0
   d50f2:	d03f      	beq.n	d5174 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d50f4:	4618      	mov	r0, r3
   d50f6:	f7ff f9f1 	bl	d44dc <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d50fa:	4607      	mov	r7, r0
   d50fc:	b120      	cbz	r0, d5108 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d50fe:	4621      	mov	r1, r4
   d5100:	4630      	mov	r0, r6
   d5102:	f7ff fe53 	bl	d4dac <_ZNKSt8functionIFvRKbEEclES1_>
   d5106:	e02e      	b.n	d5166 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5108:	4631      	mov	r1, r6
   d510a:	a801      	add	r0, sp, #4
   d510c:	f7ff ffaf 	bl	d506e <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5110:	7823      	ldrb	r3, [r4, #0]
   d5112:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5116:	2010      	movs	r0, #16
   d5118:	f7fe ffbd 	bl	d4096 <_Znwj>
   d511c:	4605      	mov	r5, r0
   d511e:	b1d0      	cbz	r0, d5156 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5120:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5122:	2014      	movs	r0, #20
   d5124:	f7fe ffb7 	bl	d4096 <_Znwj>
   d5128:	4604      	mov	r4, r0
   d512a:	b178      	cbz	r0, d514c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d512c:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d512e:	4601      	mov	r1, r0
   d5130:	a801      	add	r0, sp, #4
   d5132:	f7ff fcf9 	bl	d4b28 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5136:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5138:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d513a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d513c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d513e:	9203      	str	r2, [sp, #12]
   d5140:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5142:	60e3      	str	r3, [r4, #12]
   d5144:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5148:	9204      	str	r2, [sp, #16]
   d514a:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d514c:	4b0a      	ldr	r3, [pc, #40]	; (d5178 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d514e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5150:	4b0a      	ldr	r3, [pc, #40]	; (d517c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5152:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5154:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5156:	a801      	add	r0, sp, #4
   d5158:	f7ff fcd7 	bl	d4b0a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d515c:	2200      	movs	r2, #0
   d515e:	4629      	mov	r1, r5
   d5160:	4807      	ldr	r0, [pc, #28]	; (d5180 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d5162:	f7ff f9c3 	bl	d44ec <application_thread_invoke>
   d5166:	4630      	mov	r0, r6
   d5168:	f7ff fccf 	bl	d4b0a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d516c:	2110      	movs	r1, #16
   d516e:	4630      	mov	r0, r6
   d5170:	f000 fb83 	bl	d587a <_ZdlPvj>
        }
    }
   d5174:	b007      	add	sp, #28
   d5176:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5178:	000d4dbf 	.word	0x000d4dbf
   d517c:	000d508d 	.word	0x000d508d
   d5180:	000d5585 	.word	0x000d5585

000d5184 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5184:	b530      	push	{r4, r5, lr}
   d5186:	b085      	sub	sp, #20
   d5188:	4604      	mov	r4, r0
   d518a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d518c:	4668      	mov	r0, sp
   d518e:	4611      	mov	r1, r2
   d5190:	f7ff fdc9 	bl	d4d26 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5194:	b17c      	cbz	r4, d51b6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d5196:	b224      	sxth	r4, r4
   d5198:	4628      	mov	r0, r5
   d519a:	b10d      	cbz	r5, d51a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d519c:	f001 f9b4 	bl	d6508 <strdup>
   d51a0:	9002      	str	r0, [sp, #8]
   d51a2:	a902      	add	r1, sp, #8
   d51a4:	4668      	mov	r0, sp
   d51a6:	f8ad 400c 	strh.w	r4, [sp, #12]
   d51aa:	f7ff fe1f 	bl	d4dec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d51ae:	a802      	add	r0, sp, #8
   d51b0:	f7ff fd7e 	bl	d4cb0 <_ZN8particle5ErrorD1Ev>
   d51b4:	e01d      	b.n	d51f2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d51b6:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d51b8:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d51bc:	f04f 0201 	mov.w	r2, #1
   d51c0:	e8d0 3f4f 	ldrexb	r3, [r0]
   d51c4:	42a3      	cmp	r3, r4
   d51c6:	d103      	bne.n	d51d0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d51c8:	e8c0 2f41 	strexb	r1, r2, [r0]
   d51cc:	2900      	cmp	r1, #0
   d51ce:	d1f7      	bne.n	d51c0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d51d0:	d002      	beq.n	d51d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d51d2:	f88d 3008 	strb.w	r3, [sp, #8]
   d51d6:	e00c      	b.n	d51f2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d51d8:	f110 010c 	adds.w	r1, r0, #12
   d51dc:	f04f 0301 	mov.w	r3, #1
   d51e0:	bf18      	it	ne
   d51e2:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d51e4:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d51e8:	3004      	adds	r0, #4
   d51ea:	f800 3c03 	strb.w	r3, [r0, #-3]
   d51ee:	f7ff ff71 	bl	d50d4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d51f2:	a801      	add	r0, sp, #4
   d51f4:	f7ff fb07 	bl	d4806 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d51f8:	b005      	add	sp, #20
   d51fa:	bd30      	pop	{r4, r5, pc}

000d51fc <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d51fc:	4770      	bx	lr

000d51fe <_ZN9IPAddressD0Ev>:
   d51fe:	b510      	push	{r4, lr}
   d5200:	2118      	movs	r1, #24
   d5202:	4604      	mov	r4, r0
   d5204:	f000 fb39 	bl	d587a <_ZdlPvj>
   d5208:	4620      	mov	r0, r4
   d520a:	bd10      	pop	{r4, pc}

000d520c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d520c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d520e:	7d03      	ldrb	r3, [r0, #20]
   d5210:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5212:	b08d      	sub	sp, #52	; 0x34
   d5214:	460e      	mov	r6, r1
   d5216:	f100 0704 	add.w	r7, r0, #4
   d521a:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d521e:	d002      	beq.n	d5226 <_ZNK9IPAddress7printToER5Print+0x1a>
   d5220:	f100 0508 	add.w	r5, r0, #8
   d5224:	e018      	b.n	d5258 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5226:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5228:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d522a:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d522e:	232f      	movs	r3, #47	; 0x2f
   d5230:	462a      	mov	r2, r5
   d5232:	200a      	movs	r0, #10
   d5234:	f7ff f8ca 	bl	d43cc <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5238:	4628      	mov	r0, r5
   d523a:	f001 f980 	bl	d653e <strlen>
   d523e:	6833      	ldr	r3, [r6, #0]
   d5240:	4602      	mov	r2, r0
   d5242:	68db      	ldr	r3, [r3, #12]
   d5244:	4629      	mov	r1, r5
   d5246:	4630      	mov	r0, r6
   d5248:	4798      	blx	r3
   d524a:	e00f      	b.n	d526c <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d524c:	b124      	cbz	r4, d5258 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d524e:	212e      	movs	r1, #46	; 0x2e
   d5250:	4630      	mov	r0, r6
   d5252:	f7ff fb23 	bl	d489c <_ZN5Print5printEc>
   d5256:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5258:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d525c:	220a      	movs	r2, #10
   d525e:	4630      	mov	r0, r6
   d5260:	f7ff fb35 	bl	d48ce <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5264:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5266:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5268:	d1f0      	bne.n	d524c <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d526a:	4620      	mov	r0, r4
    }
    return n;
}
   d526c:	b00d      	add	sp, #52	; 0x34
   d526e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5270 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5270:	b510      	push	{r4, lr}
   d5272:	4b05      	ldr	r3, [pc, #20]	; (d5288 <_ZN9IPAddressC1Ev+0x18>)
   d5274:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5276:	2211      	movs	r2, #17
   d5278:	f840 3b04 	str.w	r3, [r0], #4
   d527c:	2100      	movs	r1, #0
   d527e:	f001 f912 	bl	d64a6 <memset>
{
    clear();
}
   d5282:	4620      	mov	r0, r4
   d5284:	bd10      	pop	{r4, pc}
   d5286:	bf00      	nop
   d5288:	000d6818 	.word	0x000d6818

000d528c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d528c:	4603      	mov	r3, r0
   d528e:	4a07      	ldr	r2, [pc, #28]	; (d52ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5290:	b510      	push	{r4, lr}
   d5292:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5296:	f101 0210 	add.w	r2, r1, #16
   d529a:	f851 4b04 	ldr.w	r4, [r1], #4
   d529e:	f843 4b04 	str.w	r4, [r3], #4
   d52a2:	4291      	cmp	r1, r2
   d52a4:	d1f9      	bne.n	d529a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d52a6:	780a      	ldrb	r2, [r1, #0]
   d52a8:	701a      	strb	r2, [r3, #0]
}
   d52aa:	bd10      	pop	{r4, pc}
   d52ac:	000d6818 	.word	0x000d6818

000d52b0 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d52b0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d52b2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d52b6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d52ba:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d52be:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d52c2:	2304      	movs	r3, #4
   d52c4:	6041      	str	r1, [r0, #4]
   d52c6:	7503      	strb	r3, [r0, #20]
   d52c8:	bd10      	pop	{r4, pc}

000d52ca <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d52ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d52cc:	780d      	ldrb	r5, [r1, #0]
   d52ce:	788b      	ldrb	r3, [r1, #2]
   d52d0:	784a      	ldrb	r2, [r1, #1]
   d52d2:	78c9      	ldrb	r1, [r1, #3]
   d52d4:	9100      	str	r1, [sp, #0]
   d52d6:	4629      	mov	r1, r5
   d52d8:	f7ff ffea 	bl	d52b0 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d52dc:	b003      	add	sp, #12
   d52de:	bd30      	pop	{r4, r5, pc}

000d52e0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d52e0:	7441      	strb	r1, [r0, #17]
   d52e2:	4770      	bx	lr

000d52e4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d52e4:	4770      	bx	lr

000d52e6 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d52e6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d52e8:	2100      	movs	r1, #0
   d52ea:	7c00      	ldrb	r0, [r0, #16]
   d52ec:	f7ff f8ce 	bl	d448c <HAL_USB_USART_Receive_Data>
}
   d52f0:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d52f4:	bf28      	it	cs
   d52f6:	f04f 30ff 	movcs.w	r0, #4294967295
   d52fa:	bd08      	pop	{r3, pc}

000d52fc <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d52fc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d52fe:	2101      	movs	r1, #1
   d5300:	7c00      	ldrb	r0, [r0, #16]
   d5302:	f7ff f8c3 	bl	d448c <HAL_USB_USART_Receive_Data>
}
   d5306:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d530a:	bf28      	it	cs
   d530c:	f04f 30ff 	movcs.w	r0, #4294967295
   d5310:	bd08      	pop	{r3, pc}

000d5312 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5312:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5314:	7c00      	ldrb	r0, [r0, #16]
   d5316:	f7ff f8b1 	bl	d447c <HAL_USB_USART_Available_Data_For_Write>
}
   d531a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d531e:	bd08      	pop	{r3, pc}

000d5320 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5320:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5322:	7c00      	ldrb	r0, [r0, #16]
   d5324:	f7ff f8a2 	bl	d446c <HAL_USB_USART_Available_Data>
}
   d5328:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d532c:	bd08      	pop	{r3, pc}

000d532e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d532e:	7c00      	ldrb	r0, [r0, #16]
   d5330:	f7ff b8bc 	b.w	d44ac <HAL_USB_USART_Flush_Data>

000d5334 <_ZN9USBSerialD0Ev>:
   d5334:	b510      	push	{r4, lr}
   d5336:	2114      	movs	r1, #20
   d5338:	4604      	mov	r4, r0
   d533a:	f000 fa9e 	bl	d587a <_ZdlPvj>
   d533e:	4620      	mov	r0, r4
   d5340:	bd10      	pop	{r4, pc}

000d5342 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5342:	b538      	push	{r3, r4, r5, lr}
   d5344:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5346:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5348:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d534a:	f7ff f897 	bl	d447c <HAL_USB_USART_Available_Data_For_Write>
   d534e:	2800      	cmp	r0, #0
   d5350:	dc01      	bgt.n	d5356 <_ZN9USBSerial5writeEh+0x14>
   d5352:	7c60      	ldrb	r0, [r4, #17]
   d5354:	b128      	cbz	r0, d5362 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5356:	4629      	mov	r1, r5
   d5358:	7c20      	ldrb	r0, [r4, #16]
   d535a:	f7ff f89f 	bl	d449c <HAL_USB_USART_Send_Data>
   d535e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5362:	bd38      	pop	{r3, r4, r5, pc}

000d5364 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5364:	b510      	push	{r4, lr}
   d5366:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5368:	2300      	movs	r3, #0
   d536a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d536c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5370:	60a3      	str	r3, [r4, #8]
   d5372:	4b05      	ldr	r3, [pc, #20]	; (d5388 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5374:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5376:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5378:	4608      	mov	r0, r1
{
  _serial = serial;
   d537a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d537c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d537e:	4611      	mov	r1, r2
   d5380:	f7ff f864 	bl	d444c <HAL_USB_USART_Init>
}
   d5384:	4620      	mov	r0, r4
   d5386:	bd10      	pop	{r4, pc}
   d5388:	000d682c 	.word	0x000d682c

000d538c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d538c:	2200      	movs	r2, #0
   d538e:	7c00      	ldrb	r0, [r0, #16]
   d5390:	f7ff b864 	b.w	d445c <HAL_USB_USART_Begin>

000d5394 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5394:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5396:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5398:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d539a:	2100      	movs	r1, #0
   d539c:	f001 f883 	bl	d64a6 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d53a0:	4620      	mov	r0, r4
   d53a2:	bd10      	pop	{r4, pc}

000d53a4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d53a4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d53a6:	4d0e      	ldr	r5, [pc, #56]	; (d53e0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d53a8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d53aa:	a801      	add	r0, sp, #4
   d53ac:	f7ff fff2 	bl	d5394 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d53b0:	6829      	ldr	r1, [r5, #0]
   d53b2:	f011 0401 	ands.w	r4, r1, #1
   d53b6:	d110      	bne.n	d53da <_Z16_fetch_usbserialv+0x36>
   d53b8:	4628      	mov	r0, r5
   d53ba:	f7fe fe72 	bl	d40a2 <__cxa_guard_acquire>
   d53be:	b160      	cbz	r0, d53da <_Z16_fetch_usbserialv+0x36>
   d53c0:	aa01      	add	r2, sp, #4
   d53c2:	4621      	mov	r1, r4
   d53c4:	4807      	ldr	r0, [pc, #28]	; (d53e4 <_Z16_fetch_usbserialv+0x40>)
   d53c6:	f7ff ffcd 	bl	d5364 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d53ca:	4628      	mov	r0, r5
   d53cc:	f7fe fe6e 	bl	d40ac <__cxa_guard_release>
   d53d0:	4a05      	ldr	r2, [pc, #20]	; (d53e8 <_Z16_fetch_usbserialv+0x44>)
   d53d2:	4906      	ldr	r1, [pc, #24]	; (d53ec <_Z16_fetch_usbserialv+0x48>)
   d53d4:	4803      	ldr	r0, [pc, #12]	; (d53e4 <_Z16_fetch_usbserialv+0x40>)
   d53d6:	f000 fa4b 	bl	d5870 <__aeabi_atexit>
	return _usbserial;
}
   d53da:	4802      	ldr	r0, [pc, #8]	; (d53e4 <_Z16_fetch_usbserialv+0x40>)
   d53dc:	b007      	add	sp, #28
   d53de:	bd30      	pop	{r4, r5, pc}
   d53e0:	2003e408 	.word	0x2003e408
   d53e4:	2003e40c 	.word	0x2003e40c
   d53e8:	2003e3a0 	.word	0x2003e3a0
   d53ec:	000d52e5 	.word	0x000d52e5

000d53f0 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d53f0:	2200      	movs	r2, #0
   d53f2:	4611      	mov	r1, r2
   d53f4:	6840      	ldr	r0, [r0, #4]
   d53f6:	f7ff b8ad 	b.w	d4554 <network_ready>

000d53fa <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d53fa:	2200      	movs	r2, #0
   d53fc:	4611      	mov	r1, r2
   d53fe:	6840      	ldr	r0, [r0, #4]
   d5400:	f7ff b8c8 	b.w	d4594 <network_listening>

000d5404 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5404:	2200      	movs	r2, #0
   d5406:	4611      	mov	r1, r2
   d5408:	6840      	ldr	r0, [r0, #4]
   d540a:	f7ff b8d3 	b.w	d45b4 <network_get_listen_timeout>

000d540e <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d540e:	2200      	movs	r2, #0
   d5410:	6840      	ldr	r0, [r0, #4]
   d5412:	f7ff b8c7 	b.w	d45a4 <network_set_listen_timeout>

000d5416 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5416:	2200      	movs	r2, #0
   d5418:	f081 0101 	eor.w	r1, r1, #1
   d541c:	6840      	ldr	r0, [r0, #4]
   d541e:	f7ff b8b1 	b.w	d4584 <network_listen>

000d5422 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d5422:	2300      	movs	r3, #0
   d5424:	461a      	mov	r2, r3
   d5426:	4619      	mov	r1, r3
   d5428:	6840      	ldr	r0, [r0, #4]
   d542a:	f7ff b8a3 	b.w	d4574 <network_off>

000d542e <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d542e:	2300      	movs	r3, #0
   d5430:	461a      	mov	r2, r3
   d5432:	4619      	mov	r1, r3
   d5434:	6840      	ldr	r0, [r0, #4]
   d5436:	f7ff b895 	b.w	d4564 <network_on>

000d543a <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d543a:	2200      	movs	r2, #0
   d543c:	4611      	mov	r1, r2
   d543e:	6840      	ldr	r0, [r0, #4]
   d5440:	f7ff b878 	b.w	d4534 <network_connecting>

000d5444 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5444:	2200      	movs	r2, #0
   d5446:	2102      	movs	r1, #2
   d5448:	6840      	ldr	r0, [r0, #4]
   d544a:	f7ff b87b 	b.w	d4544 <network_disconnect>

000d544e <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d544e:	2300      	movs	r3, #0
   d5450:	461a      	mov	r2, r3
   d5452:	6840      	ldr	r0, [r0, #4]
   d5454:	f7ff b866 	b.w	d4524 <network_connect>

000d5458 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d5458:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d545a:	4c08      	ldr	r4, [pc, #32]	; (d547c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d545c:	2528      	movs	r5, #40	; 0x28
   d545e:	462a      	mov	r2, r5
   d5460:	2100      	movs	r1, #0
   d5462:	4620      	mov	r0, r4
   d5464:	f001 f81f 	bl	d64a6 <memset>
        cid = -1;
   d5468:	f04f 33ff 	mov.w	r3, #4294967295
   d546c:	6063      	str	r3, [r4, #4]
   d546e:	4b04      	ldr	r3, [pc, #16]	; (d5480 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d5470:	8025      	strh	r5, [r4, #0]
   d5472:	2204      	movs	r2, #4
   d5474:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d5476:	4a03      	ldr	r2, [pc, #12]	; (d5484 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d5478:	601a      	str	r2, [r3, #0]
   d547a:	bd38      	pop	{r3, r4, r5, pc}
   d547c:	2003e428 	.word	0x2003e428
   d5480:	2003e420 	.word	0x2003e420
   d5484:	000d685c 	.word	0x000d685c

000d5488 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5488:	4770      	bx	lr

000d548a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d548a:	7441      	strb	r1, [r0, #17]
   d548c:	4770      	bx	lr

000d548e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d548e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5490:	7c00      	ldrb	r0, [r0, #16]
   d5492:	f7fe ffd3 	bl	d443c <HAL_USART_Available_Data_For_Write>
}
   d5496:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d549a:	bd08      	pop	{r3, pc}

000d549c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d549c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d549e:	7c00      	ldrb	r0, [r0, #16]
   d54a0:	f7fe ffac 	bl	d43fc <HAL_USART_Available_Data>
}
   d54a4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d54a8:	bd08      	pop	{r3, pc}

000d54aa <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d54aa:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d54ac:	7c00      	ldrb	r0, [r0, #16]
   d54ae:	f7fe ffb5 	bl	d441c <HAL_USART_Peek_Data>
}
   d54b2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d54b6:	bf28      	it	cs
   d54b8:	f04f 30ff 	movcs.w	r0, #4294967295
   d54bc:	bd08      	pop	{r3, pc}

000d54be <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d54be:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d54c0:	7c00      	ldrb	r0, [r0, #16]
   d54c2:	f7fe ffa3 	bl	d440c <HAL_USART_Read_Data>
}
   d54c6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d54ca:	bf28      	it	cs
   d54cc:	f04f 30ff 	movcs.w	r0, #4294967295
   d54d0:	bd08      	pop	{r3, pc}

000d54d2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d54d2:	7c00      	ldrb	r0, [r0, #16]
   d54d4:	f7fe bfaa 	b.w	d442c <HAL_USART_Flush_Data>

000d54d8 <_ZN11USARTSerialD0Ev>:
   d54d8:	b510      	push	{r4, lr}
   d54da:	2114      	movs	r1, #20
   d54dc:	4604      	mov	r4, r0
   d54de:	f000 f9cc 	bl	d587a <_ZdlPvj>
   d54e2:	4620      	mov	r0, r4
   d54e4:	bd10      	pop	{r4, pc}

000d54e6 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d54e6:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d54e8:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d54ea:	4604      	mov	r4, r0
   d54ec:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d54ee:	b925      	cbnz	r5, d54fa <_ZN11USARTSerial5writeEh+0x14>
   d54f0:	7c00      	ldrb	r0, [r0, #16]
   d54f2:	f7fe ffa3 	bl	d443c <HAL_USART_Available_Data_For_Write>
   d54f6:	2800      	cmp	r0, #0
   d54f8:	dd05      	ble.n	d5506 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d54fa:	4631      	mov	r1, r6
   d54fc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d54fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5502:	f7fe bf73 	b.w	d43ec <HAL_USART_Write_Data>
  }
  return 0;
}
   d5506:	4628      	mov	r0, r5
   d5508:	bd70      	pop	{r4, r5, r6, pc}
	...

000d550c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d550c:	b510      	push	{r4, lr}
   d550e:	4604      	mov	r4, r0
   d5510:	4608      	mov	r0, r1
   d5512:	4611      	mov	r1, r2
   d5514:	2200      	movs	r2, #0
   d5516:	6062      	str	r2, [r4, #4]
   d5518:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d551c:	60a2      	str	r2, [r4, #8]
   d551e:	4a05      	ldr	r2, [pc, #20]	; (d5534 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5520:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5522:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5524:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5526:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5528:	461a      	mov	r2, r3
   d552a:	f7fe ff57 	bl	d43dc <HAL_USART_Init>
}
   d552e:	4620      	mov	r0, r4
   d5530:	bd10      	pop	{r4, pc}
   d5532:	bf00      	nop
   d5534:	000d6890 	.word	0x000d6890

000d5538 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5538:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d553a:	4d0c      	ldr	r5, [pc, #48]	; (d556c <_Z22__fetch_global_Serial1v+0x34>)
   d553c:	6829      	ldr	r1, [r5, #0]
   d553e:	f011 0401 	ands.w	r4, r1, #1
   d5542:	d111      	bne.n	d5568 <_Z22__fetch_global_Serial1v+0x30>
   d5544:	4628      	mov	r0, r5
   d5546:	f7fe fdac 	bl	d40a2 <__cxa_guard_acquire>
   d554a:	b168      	cbz	r0, d5568 <_Z22__fetch_global_Serial1v+0x30>
   d554c:	4a08      	ldr	r2, [pc, #32]	; (d5570 <_Z22__fetch_global_Serial1v+0x38>)
   d554e:	4b09      	ldr	r3, [pc, #36]	; (d5574 <_Z22__fetch_global_Serial1v+0x3c>)
   d5550:	4809      	ldr	r0, [pc, #36]	; (d5578 <_Z22__fetch_global_Serial1v+0x40>)
   d5552:	4621      	mov	r1, r4
   d5554:	f7ff ffda 	bl	d550c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5558:	4628      	mov	r0, r5
   d555a:	f7fe fda7 	bl	d40ac <__cxa_guard_release>
   d555e:	4a07      	ldr	r2, [pc, #28]	; (d557c <_Z22__fetch_global_Serial1v+0x44>)
   d5560:	4907      	ldr	r1, [pc, #28]	; (d5580 <_Z22__fetch_global_Serial1v+0x48>)
   d5562:	4805      	ldr	r0, [pc, #20]	; (d5578 <_Z22__fetch_global_Serial1v+0x40>)
   d5564:	f000 f984 	bl	d5870 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5568:	4803      	ldr	r0, [pc, #12]	; (d5578 <_Z22__fetch_global_Serial1v+0x40>)
   d556a:	bd38      	pop	{r3, r4, r5, pc}
   d556c:	2003e4e8 	.word	0x2003e4e8
   d5570:	2003e4ec 	.word	0x2003e4ec
   d5574:	2003e464 	.word	0x2003e464
   d5578:	2003e450 	.word	0x2003e450
   d557c:	2003e3a0 	.word	0x2003e3a0
   d5580:	000d5489 	.word	0x000d5489

000d5584 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5584:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5586:	6883      	ldr	r3, [r0, #8]
   d5588:	4604      	mov	r4, r0
   d558a:	b90b      	cbnz	r3, d5590 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d558c:	f000 f977 	bl	d587e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5590:	68c3      	ldr	r3, [r0, #12]
   d5592:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5594:	68a3      	ldr	r3, [r4, #8]
   d5596:	b11b      	cbz	r3, d55a0 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5598:	2203      	movs	r2, #3
   d559a:	4621      	mov	r1, r4
   d559c:	4620      	mov	r0, r4
   d559e:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d55a0:	4620      	mov	r0, r4
   d55a2:	2110      	movs	r1, #16
}
   d55a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d55a8:	f000 b967 	b.w	d587a <_ZdlPvj>

000d55ac <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d55ac:	2200      	movs	r2, #0
   d55ae:	4611      	mov	r1, r2
   d55b0:	6840      	ldr	r0, [r0, #4]
   d55b2:	f7fe bfef 	b.w	d4594 <network_listening>

000d55b6 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d55b6:	2200      	movs	r2, #0
   d55b8:	4611      	mov	r1, r2
   d55ba:	6840      	ldr	r0, [r0, #4]
   d55bc:	f7fe bffa 	b.w	d45b4 <network_get_listen_timeout>

000d55c0 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d55c0:	2200      	movs	r2, #0
   d55c2:	6840      	ldr	r0, [r0, #4]
   d55c4:	f7fe bfee 	b.w	d45a4 <network_set_listen_timeout>

000d55c8 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d55c8:	2200      	movs	r2, #0
   d55ca:	f081 0101 	eor.w	r1, r1, #1
   d55ce:	6840      	ldr	r0, [r0, #4]
   d55d0:	f7fe bfd8 	b.w	d4584 <network_listen>

000d55d4 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d55d4:	2300      	movs	r3, #0
   d55d6:	461a      	mov	r2, r3
   d55d8:	2101      	movs	r1, #1
   d55da:	6840      	ldr	r0, [r0, #4]
   d55dc:	f7fe bfca 	b.w	d4574 <network_off>

000d55e0 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d55e0:	2300      	movs	r3, #0
   d55e2:	461a      	mov	r2, r3
   d55e4:	4619      	mov	r1, r3
   d55e6:	6840      	ldr	r0, [r0, #4]
   d55e8:	f7fe bfbc 	b.w	d4564 <network_on>

000d55ec <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d55ec:	2200      	movs	r2, #0
   d55ee:	4611      	mov	r1, r2
   d55f0:	6840      	ldr	r0, [r0, #4]
   d55f2:	f7fe bfaf 	b.w	d4554 <network_ready>

000d55f6 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d55f6:	2200      	movs	r2, #0
   d55f8:	4611      	mov	r1, r2
   d55fa:	6840      	ldr	r0, [r0, #4]
   d55fc:	f7fe bf9a 	b.w	d4534 <network_connecting>

000d5600 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5600:	2200      	movs	r2, #0
   d5602:	2102      	movs	r1, #2
   d5604:	6840      	ldr	r0, [r0, #4]
   d5606:	f7fe bf9d 	b.w	d4544 <network_disconnect>

000d560a <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d560a:	2300      	movs	r3, #0
   d560c:	461a      	mov	r2, r3
   d560e:	6840      	ldr	r0, [r0, #4]
   d5610:	f7fe bf88 	b.w	d4524 <network_connect>

000d5614 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5614:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5616:	4605      	mov	r5, r0
   d5618:	b188      	cbz	r0, d563e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d561a:	6804      	ldr	r4, [r0, #0]
   d561c:	b14c      	cbz	r4, d5632 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d561e:	68a3      	ldr	r3, [r4, #8]
   d5620:	b11b      	cbz	r3, d562a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5622:	2203      	movs	r2, #3
   d5624:	4621      	mov	r1, r4
   d5626:	4620      	mov	r0, r4
   d5628:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d562a:	2110      	movs	r1, #16
   d562c:	4620      	mov	r0, r4
   d562e:	f000 f924 	bl	d587a <_ZdlPvj>
   d5632:	4628      	mov	r0, r5
   d5634:	2114      	movs	r1, #20
      }
   d5636:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d563a:	f000 b91e 	b.w	d587a <_ZdlPvj>
   d563e:	bd38      	pop	{r3, r4, r5, pc}

000d5640 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d5640:	b110      	cbz	r0, d5648 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d5642:	6803      	ldr	r3, [r0, #0]
   d5644:	685b      	ldr	r3, [r3, #4]
   d5646:	4718      	bx	r3
   d5648:	4770      	bx	lr

000d564a <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d564a:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d564c:	6803      	ldr	r3, [r0, #0]
   d564e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5650:	b1bb      	cbz	r3, d5682 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5652:	6858      	ldr	r0, [r3, #4]
   d5654:	f7fe fe92 	bl	d437c <os_thread_is_current>
   d5658:	b978      	cbnz	r0, d567a <_ZN6ThreadD1Ev+0x30>
   d565a:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d565c:	7c5a      	ldrb	r2, [r3, #17]
   d565e:	b912      	cbnz	r2, d5666 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5660:	6858      	ldr	r0, [r3, #4]
   d5662:	f7fe fe93 	bl	d438c <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5666:	6823      	ldr	r3, [r4, #0]
   d5668:	6858      	ldr	r0, [r3, #4]
   d566a:	f7fe fe97 	bl	d439c <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d566e:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5670:	2300      	movs	r3, #0
   d5672:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5674:	b128      	cbz	r0, d5682 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5676:	f7ff ffcd 	bl	d5614 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d567a:	6820      	ldr	r0, [r4, #0]
   d567c:	b108      	cbz	r0, d5682 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d567e:	f7ff ffc9 	bl	d5614 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d5682:	4620      	mov	r0, r4
   d5684:	bd10      	pop	{r4, pc}

000d5686 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d5686:	b538      	push	{r3, r4, r5, lr}
   d5688:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d568a:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d568e:	b108      	cbz	r0, d5694 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5690:	f7fe fd05 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5694:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d5698:	b108      	cbz	r0, d569e <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d569a:	f7fe fe8f 	bl	d43bc <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d569e:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d56a2:	b135      	cbz	r5, d56b2 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d56a4:	4628      	mov	r0, r5
   d56a6:	f7ff ffd0 	bl	d564a <_ZN6ThreadD1Ev>
   d56aa:	2104      	movs	r1, #4
   d56ac:	4628      	mov	r0, r5
   d56ae:	f000 f8e4 	bl	d587a <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d56b2:	6820      	ldr	r0, [r4, #0]
   d56b4:	b108      	cbz	r0, d56ba <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d56b6:	f7ff ffc3 	bl	d5640 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d56ba:	4620      	mov	r0, r4
   d56bc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d56c0 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d56c0:	b510      	push	{r4, lr}
   d56c2:	4b04      	ldr	r3, [pc, #16]	; (d56d4 <_ZN5spark9MeshClassD1Ev+0x14>)
   d56c4:	4604      	mov	r4, r0
   d56c6:	f840 3b08 	str.w	r3, [r0], #8
   d56ca:	f7ff ffdc 	bl	d5686 <_ZN5spark11MeshPublishD1Ev>
   d56ce:	4620      	mov	r0, r4
   d56d0:	bd10      	pop	{r4, pc}
   d56d2:	bf00      	nop
   d56d4:	000d68c0 	.word	0x000d68c0

000d56d8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d56d8:	b538      	push	{r3, r4, r5, lr}
   d56da:	4c0e      	ldr	r4, [pc, #56]	; (d5714 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d56dc:	4b0e      	ldr	r3, [pc, #56]	; (d5718 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d56de:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d56e0:	2500      	movs	r5, #0
   d56e2:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d56e4:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d56e8:	6063      	str	r3, [r4, #4]
   d56ea:	60a5      	str	r5, [r4, #8]
   d56ec:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d56f0:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d56f4:	f7fe fe5a 	bl	d43ac <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d56f8:	4b08      	ldr	r3, [pc, #32]	; (d571c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d56fa:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d56fe:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d5702:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5704:	4620      	mov	r0, r4
   d5706:	4a06      	ldr	r2, [pc, #24]	; (d5720 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5708:	4906      	ldr	r1, [pc, #24]	; (d5724 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d570a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d570e:	f000 b8af 	b.w	d5870 <__aeabi_atexit>
   d5712:	bf00      	nop
   d5714:	2003e570 	.word	0x2003e570
   d5718:	000d68f4 	.word	0x000d68f4
   d571c:	000d68c0 	.word	0x000d68c0
   d5720:	2003e3a0 	.word	0x2003e3a0
   d5724:	000d56c1 	.word	0x000d56c1

000d5728 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5728:	2300      	movs	r3, #0
   d572a:	461a      	mov	r2, r3
   d572c:	6840      	ldr	r0, [r0, #4]
   d572e:	f7fe bef9 	b.w	d4524 <network_connect>

000d5732 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5732:	2200      	movs	r2, #0
   d5734:	2102      	movs	r1, #2
   d5736:	6840      	ldr	r0, [r0, #4]
   d5738:	f7fe bf04 	b.w	d4544 <network_disconnect>

000d573c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d573c:	2200      	movs	r2, #0
   d573e:	4611      	mov	r1, r2
   d5740:	6840      	ldr	r0, [r0, #4]
   d5742:	f7fe bef7 	b.w	d4534 <network_connecting>

000d5746 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5746:	2200      	movs	r2, #0
   d5748:	4611      	mov	r1, r2
   d574a:	6840      	ldr	r0, [r0, #4]
   d574c:	f7fe bf02 	b.w	d4554 <network_ready>

000d5750 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5750:	2300      	movs	r3, #0
   d5752:	461a      	mov	r2, r3
   d5754:	4619      	mov	r1, r3
   d5756:	6840      	ldr	r0, [r0, #4]
   d5758:	f7fe bf04 	b.w	d4564 <network_on>

000d575c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d575c:	2300      	movs	r3, #0
   d575e:	461a      	mov	r2, r3
   d5760:	4619      	mov	r1, r3
   d5762:	6840      	ldr	r0, [r0, #4]
   d5764:	f7fe bf06 	b.w	d4574 <network_off>

000d5768 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5768:	2200      	movs	r2, #0
   d576a:	f081 0101 	eor.w	r1, r1, #1
   d576e:	6840      	ldr	r0, [r0, #4]
   d5770:	f7fe bf08 	b.w	d4584 <network_listen>

000d5774 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5774:	2200      	movs	r2, #0
   d5776:	6840      	ldr	r0, [r0, #4]
   d5778:	f7fe bf14 	b.w	d45a4 <network_set_listen_timeout>

000d577c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d577c:	2200      	movs	r2, #0
   d577e:	4611      	mov	r1, r2
   d5780:	6840      	ldr	r0, [r0, #4]
   d5782:	f7fe bf17 	b.w	d45b4 <network_get_listen_timeout>

000d5786 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5786:	2200      	movs	r2, #0
   d5788:	4611      	mov	r1, r2
   d578a:	6840      	ldr	r0, [r0, #4]
   d578c:	f7fe bf02 	b.w	d4594 <network_listening>

000d5790 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5790:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5794:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5796:	b095      	sub	sp, #84	; 0x54
   d5798:	4616      	mov	r6, r2
   d579a:	460d      	mov	r5, r1
   d579c:	4607      	mov	r7, r0
    IPAddress addr;
   d579e:	f7ff fd67 	bl	d5270 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d57a2:	4621      	mov	r1, r4
   d57a4:	2220      	movs	r2, #32
   d57a6:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d57a8:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d57aa:	f000 fe7c 	bl	d64a6 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d57ae:	2340      	movs	r3, #64	; 0x40
   d57b0:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d57b2:	4621      	mov	r1, r4
   d57b4:	466b      	mov	r3, sp
   d57b6:	aa0c      	add	r2, sp, #48	; 0x30
   d57b8:	4630      	mov	r0, r6
   d57ba:	f7fe fdbf 	bl	d433c <netdb_getaddrinfo>
    if (!r) {
   d57be:	4604      	mov	r4, r0
   d57c0:	2800      	cmp	r0, #0
   d57c2:	d144      	bne.n	d584e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d57c4:	4602      	mov	r2, r0
   d57c6:	2101      	movs	r1, #1
   d57c8:	6868      	ldr	r0, [r5, #4]
   d57ca:	f7fe fec3 	bl	d4554 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d57ce:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d57d0:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d57d2:	4622      	mov	r2, r4
   d57d4:	6868      	ldr	r0, [r5, #4]
   d57d6:	f7fe febd 	bl	d4554 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d57da:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d57dc:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d57de:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d57e0:	2e00      	cmp	r6, #0
   d57e2:	d034      	beq.n	d584e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d57e4:	2900      	cmp	r1, #0
   d57e6:	d132      	bne.n	d584e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d57e8:	6873      	ldr	r3, [r6, #4]
   d57ea:	2b02      	cmp	r3, #2
   d57ec:	d002      	beq.n	d57f4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d57ee:	2b0a      	cmp	r3, #10
   d57f0:	d009      	beq.n	d5806 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d57f2:	e02a      	b.n	d584a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d57f4:	f1b8 0f00 	cmp.w	r8, #0
   d57f8:	d027      	beq.n	d584a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d57fa:	6971      	ldr	r1, [r6, #20]
   d57fc:	4638      	mov	r0, r7
   d57fe:	3104      	adds	r1, #4
   d5800:	f7ff fd63 	bl	d52ca <_ZN9IPAddressaSEPKh>
   d5804:	e020      	b.n	d5848 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5806:	f1b9 0f00 	cmp.w	r9, #0
   d580a:	d01e      	beq.n	d584a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d580c:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d580e:	2211      	movs	r2, #17
   d5810:	a801      	add	r0, sp, #4
   d5812:	f000 fe48 	bl	d64a6 <memset>
                    a.v = 6;
   d5816:	2306      	movs	r3, #6
   d5818:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d581c:	ad01      	add	r5, sp, #4
   d581e:	f104 0308 	add.w	r3, r4, #8
   d5822:	3418      	adds	r4, #24
   d5824:	6818      	ldr	r0, [r3, #0]
   d5826:	6859      	ldr	r1, [r3, #4]
   d5828:	462a      	mov	r2, r5
   d582a:	c203      	stmia	r2!, {r0, r1}
   d582c:	3308      	adds	r3, #8
   d582e:	42a3      	cmp	r3, r4
   d5830:	4615      	mov	r5, r2
   d5832:	d1f7      	bne.n	d5824 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5834:	a901      	add	r1, sp, #4
   d5836:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5838:	ad07      	add	r5, sp, #28
   d583a:	f7ff fd27 	bl	d528c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d583e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5840:	1d3c      	adds	r4, r7, #4
   d5842:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5844:	682b      	ldr	r3, [r5, #0]
   d5846:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5848:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d584a:	69f6      	ldr	r6, [r6, #28]
   d584c:	e7c8      	b.n	d57e0 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d584e:	9800      	ldr	r0, [sp, #0]
   d5850:	f7fe fd6c 	bl	d432c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5854:	4638      	mov	r0, r7
   d5856:	b015      	add	sp, #84	; 0x54
   d5858:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d585c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d585c:	4b02      	ldr	r3, [pc, #8]	; (d5868 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d585e:	4a03      	ldr	r2, [pc, #12]	; (d586c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5860:	601a      	str	r2, [r3, #0]
   d5862:	2200      	movs	r2, #0
   d5864:	605a      	str	r2, [r3, #4]
   d5866:	4770      	bx	lr
   d5868:	2003e744 	.word	0x2003e744
   d586c:	000d68f4 	.word	0x000d68f4

000d5870 <__aeabi_atexit>:
   d5870:	460b      	mov	r3, r1
   d5872:	4601      	mov	r1, r0
   d5874:	4618      	mov	r0, r3
   d5876:	f000 bdfd 	b.w	d6474 <__cxa_atexit>

000d587a <_ZdlPvj>:
   d587a:	f7fe bc0e 	b.w	d409a <_ZdlPv>

000d587e <_ZSt25__throw_bad_function_callv>:
   d587e:	b508      	push	{r3, lr}
   d5880:	f7fe fed0 	bl	d4624 <abort>

000d5884 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5884:	4b18      	ldr	r3, [pc, #96]	; (d58e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5886:	681a      	ldr	r2, [r3, #0]
   d5888:	07d1      	lsls	r1, r2, #31
   d588a:	bf5c      	itt	pl
   d588c:	2201      	movpl	r2, #1
   d588e:	601a      	strpl	r2, [r3, #0]
   d5890:	4b16      	ldr	r3, [pc, #88]	; (d58ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5892:	681a      	ldr	r2, [r3, #0]
   d5894:	07d2      	lsls	r2, r2, #31
   d5896:	bf5c      	itt	pl
   d5898:	2201      	movpl	r2, #1
   d589a:	601a      	strpl	r2, [r3, #0]
   d589c:	4b14      	ldr	r3, [pc, #80]	; (d58f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d589e:	681a      	ldr	r2, [r3, #0]
   d58a0:	07d0      	lsls	r0, r2, #31
   d58a2:	bf5c      	itt	pl
   d58a4:	2201      	movpl	r2, #1
   d58a6:	601a      	strpl	r2, [r3, #0]
   d58a8:	4b12      	ldr	r3, [pc, #72]	; (d58f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d58aa:	681a      	ldr	r2, [r3, #0]
   d58ac:	07d1      	lsls	r1, r2, #31
   d58ae:	bf5c      	itt	pl
   d58b0:	2201      	movpl	r2, #1
   d58b2:	601a      	strpl	r2, [r3, #0]
   d58b4:	4b10      	ldr	r3, [pc, #64]	; (d58f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d58b6:	681a      	ldr	r2, [r3, #0]
   d58b8:	07d2      	lsls	r2, r2, #31
   d58ba:	bf5c      	itt	pl
   d58bc:	2201      	movpl	r2, #1
   d58be:	601a      	strpl	r2, [r3, #0]
   d58c0:	4b0e      	ldr	r3, [pc, #56]	; (d58fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d58c2:	681a      	ldr	r2, [r3, #0]
   d58c4:	07d0      	lsls	r0, r2, #31
   d58c6:	bf5c      	itt	pl
   d58c8:	2201      	movpl	r2, #1
   d58ca:	601a      	strpl	r2, [r3, #0]
   d58cc:	4b0c      	ldr	r3, [pc, #48]	; (d5900 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d58ce:	681a      	ldr	r2, [r3, #0]
   d58d0:	07d1      	lsls	r1, r2, #31
   d58d2:	bf5c      	itt	pl
   d58d4:	2201      	movpl	r2, #1
   d58d6:	601a      	strpl	r2, [r3, #0]
   d58d8:	4b0a      	ldr	r3, [pc, #40]	; (d5904 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d58da:	681a      	ldr	r2, [r3, #0]
   d58dc:	07d2      	lsls	r2, r2, #31
   d58de:	bf5c      	itt	pl
   d58e0:	2201      	movpl	r2, #1
   d58e2:	601a      	strpl	r2, [r3, #0]
   d58e4:	4770      	bx	lr
   d58e6:	bf00      	nop
   d58e8:	2003e76c 	.word	0x2003e76c
   d58ec:	2003e768 	.word	0x2003e768
   d58f0:	2003e764 	.word	0x2003e764
   d58f4:	2003e760 	.word	0x2003e760
   d58f8:	2003e75c 	.word	0x2003e75c
   d58fc:	2003e758 	.word	0x2003e758
   d5900:	2003e754 	.word	0x2003e754
   d5904:	2003e750 	.word	0x2003e750

000d5908 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5908:	4b24      	ldr	r3, [pc, #144]	; (d599c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d590a:	681a      	ldr	r2, [r3, #0]
   d590c:	07d0      	lsls	r0, r2, #31
   d590e:	bf5c      	itt	pl
   d5910:	2201      	movpl	r2, #1
   d5912:	601a      	strpl	r2, [r3, #0]
   d5914:	4b22      	ldr	r3, [pc, #136]	; (d59a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5916:	681a      	ldr	r2, [r3, #0]
   d5918:	07d1      	lsls	r1, r2, #31
   d591a:	bf5c      	itt	pl
   d591c:	2201      	movpl	r2, #1
   d591e:	601a      	strpl	r2, [r3, #0]
   d5920:	4b20      	ldr	r3, [pc, #128]	; (d59a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5922:	681a      	ldr	r2, [r3, #0]
   d5924:	07d2      	lsls	r2, r2, #31
   d5926:	bf5c      	itt	pl
   d5928:	2201      	movpl	r2, #1
   d592a:	601a      	strpl	r2, [r3, #0]
   d592c:	4b1e      	ldr	r3, [pc, #120]	; (d59a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d592e:	681a      	ldr	r2, [r3, #0]
   d5930:	07d0      	lsls	r0, r2, #31
   d5932:	bf5c      	itt	pl
   d5934:	2201      	movpl	r2, #1
   d5936:	601a      	strpl	r2, [r3, #0]
   d5938:	4b1c      	ldr	r3, [pc, #112]	; (d59ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d593a:	681a      	ldr	r2, [r3, #0]
   d593c:	07d1      	lsls	r1, r2, #31
   d593e:	bf5c      	itt	pl
   d5940:	2201      	movpl	r2, #1
   d5942:	601a      	strpl	r2, [r3, #0]
   d5944:	4b1a      	ldr	r3, [pc, #104]	; (d59b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5946:	681a      	ldr	r2, [r3, #0]
   d5948:	07d2      	lsls	r2, r2, #31
   d594a:	bf5c      	itt	pl
   d594c:	2201      	movpl	r2, #1
   d594e:	601a      	strpl	r2, [r3, #0]
   d5950:	4b18      	ldr	r3, [pc, #96]	; (d59b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5952:	681a      	ldr	r2, [r3, #0]
   d5954:	07d0      	lsls	r0, r2, #31
   d5956:	bf5c      	itt	pl
   d5958:	2201      	movpl	r2, #1
   d595a:	601a      	strpl	r2, [r3, #0]
   d595c:	4b16      	ldr	r3, [pc, #88]	; (d59b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d595e:	681a      	ldr	r2, [r3, #0]
   d5960:	07d1      	lsls	r1, r2, #31
   d5962:	bf5c      	itt	pl
   d5964:	2201      	movpl	r2, #1
   d5966:	601a      	strpl	r2, [r3, #0]
   d5968:	4b14      	ldr	r3, [pc, #80]	; (d59bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d596a:	681a      	ldr	r2, [r3, #0]
   d596c:	07d2      	lsls	r2, r2, #31
   d596e:	bf5c      	itt	pl
   d5970:	2201      	movpl	r2, #1
   d5972:	601a      	strpl	r2, [r3, #0]
   d5974:	4b12      	ldr	r3, [pc, #72]	; (d59c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5976:	681a      	ldr	r2, [r3, #0]
   d5978:	07d0      	lsls	r0, r2, #31
   d597a:	bf5c      	itt	pl
   d597c:	2201      	movpl	r2, #1
   d597e:	601a      	strpl	r2, [r3, #0]
   d5980:	4b10      	ldr	r3, [pc, #64]	; (d59c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5982:	681a      	ldr	r2, [r3, #0]
   d5984:	07d1      	lsls	r1, r2, #31
   d5986:	bf5c      	itt	pl
   d5988:	2201      	movpl	r2, #1
   d598a:	601a      	strpl	r2, [r3, #0]
   d598c:	4b0e      	ldr	r3, [pc, #56]	; (d59c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d598e:	681a      	ldr	r2, [r3, #0]
   d5990:	07d2      	lsls	r2, r2, #31
   d5992:	bf5c      	itt	pl
   d5994:	2201      	movpl	r2, #1
   d5996:	601a      	strpl	r2, [r3, #0]
   d5998:	4770      	bx	lr
   d599a:	bf00      	nop
   d599c:	2003e79c 	.word	0x2003e79c
   d59a0:	2003e798 	.word	0x2003e798
   d59a4:	2003e794 	.word	0x2003e794
   d59a8:	2003e790 	.word	0x2003e790
   d59ac:	2003e78c 	.word	0x2003e78c
   d59b0:	2003e788 	.word	0x2003e788
   d59b4:	2003e784 	.word	0x2003e784
   d59b8:	2003e780 	.word	0x2003e780
   d59bc:	2003e77c 	.word	0x2003e77c
   d59c0:	2003e778 	.word	0x2003e778
   d59c4:	2003e774 	.word	0x2003e774
   d59c8:	2003e770 	.word	0x2003e770

000d59cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d59cc:	4b24      	ldr	r3, [pc, #144]	; (d5a60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d59ce:	681a      	ldr	r2, [r3, #0]
   d59d0:	07d0      	lsls	r0, r2, #31
   d59d2:	bf5c      	itt	pl
   d59d4:	2201      	movpl	r2, #1
   d59d6:	601a      	strpl	r2, [r3, #0]
   d59d8:	4b22      	ldr	r3, [pc, #136]	; (d5a64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d59da:	681a      	ldr	r2, [r3, #0]
   d59dc:	07d1      	lsls	r1, r2, #31
   d59de:	bf5c      	itt	pl
   d59e0:	2201      	movpl	r2, #1
   d59e2:	601a      	strpl	r2, [r3, #0]
   d59e4:	4b20      	ldr	r3, [pc, #128]	; (d5a68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d59e6:	681a      	ldr	r2, [r3, #0]
   d59e8:	07d2      	lsls	r2, r2, #31
   d59ea:	bf5c      	itt	pl
   d59ec:	2201      	movpl	r2, #1
   d59ee:	601a      	strpl	r2, [r3, #0]
   d59f0:	4b1e      	ldr	r3, [pc, #120]	; (d5a6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d59f2:	681a      	ldr	r2, [r3, #0]
   d59f4:	07d0      	lsls	r0, r2, #31
   d59f6:	bf5c      	itt	pl
   d59f8:	2201      	movpl	r2, #1
   d59fa:	601a      	strpl	r2, [r3, #0]
   d59fc:	4b1c      	ldr	r3, [pc, #112]	; (d5a70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d59fe:	681a      	ldr	r2, [r3, #0]
   d5a00:	07d1      	lsls	r1, r2, #31
   d5a02:	bf5c      	itt	pl
   d5a04:	2201      	movpl	r2, #1
   d5a06:	601a      	strpl	r2, [r3, #0]
   d5a08:	4b1a      	ldr	r3, [pc, #104]	; (d5a74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5a0a:	681a      	ldr	r2, [r3, #0]
   d5a0c:	07d2      	lsls	r2, r2, #31
   d5a0e:	bf5c      	itt	pl
   d5a10:	2201      	movpl	r2, #1
   d5a12:	601a      	strpl	r2, [r3, #0]
   d5a14:	4b18      	ldr	r3, [pc, #96]	; (d5a78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5a16:	681a      	ldr	r2, [r3, #0]
   d5a18:	07d0      	lsls	r0, r2, #31
   d5a1a:	bf5c      	itt	pl
   d5a1c:	2201      	movpl	r2, #1
   d5a1e:	601a      	strpl	r2, [r3, #0]
   d5a20:	4b16      	ldr	r3, [pc, #88]	; (d5a7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5a22:	681a      	ldr	r2, [r3, #0]
   d5a24:	07d1      	lsls	r1, r2, #31
   d5a26:	bf5c      	itt	pl
   d5a28:	2201      	movpl	r2, #1
   d5a2a:	601a      	strpl	r2, [r3, #0]
   d5a2c:	4b14      	ldr	r3, [pc, #80]	; (d5a80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5a2e:	681a      	ldr	r2, [r3, #0]
   d5a30:	07d2      	lsls	r2, r2, #31
   d5a32:	bf5c      	itt	pl
   d5a34:	2201      	movpl	r2, #1
   d5a36:	601a      	strpl	r2, [r3, #0]
   d5a38:	4b12      	ldr	r3, [pc, #72]	; (d5a84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5a3a:	681a      	ldr	r2, [r3, #0]
   d5a3c:	07d0      	lsls	r0, r2, #31
   d5a3e:	bf5c      	itt	pl
   d5a40:	2201      	movpl	r2, #1
   d5a42:	601a      	strpl	r2, [r3, #0]
   d5a44:	4b10      	ldr	r3, [pc, #64]	; (d5a88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5a46:	681a      	ldr	r2, [r3, #0]
   d5a48:	07d1      	lsls	r1, r2, #31
   d5a4a:	bf5c      	itt	pl
   d5a4c:	2201      	movpl	r2, #1
   d5a4e:	601a      	strpl	r2, [r3, #0]
   d5a50:	4b0e      	ldr	r3, [pc, #56]	; (d5a8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5a52:	681a      	ldr	r2, [r3, #0]
   d5a54:	07d2      	lsls	r2, r2, #31
   d5a56:	bf5c      	itt	pl
   d5a58:	2201      	movpl	r2, #1
   d5a5a:	601a      	strpl	r2, [r3, #0]
   d5a5c:	4770      	bx	lr
   d5a5e:	bf00      	nop
   d5a60:	2003e7cc 	.word	0x2003e7cc
   d5a64:	2003e7c8 	.word	0x2003e7c8
   d5a68:	2003e7c4 	.word	0x2003e7c4
   d5a6c:	2003e7c0 	.word	0x2003e7c0
   d5a70:	2003e7bc 	.word	0x2003e7bc
   d5a74:	2003e7b8 	.word	0x2003e7b8
   d5a78:	2003e7b4 	.word	0x2003e7b4
   d5a7c:	2003e7b0 	.word	0x2003e7b0
   d5a80:	2003e7ac 	.word	0x2003e7ac
   d5a84:	2003e7a8 	.word	0x2003e7a8
   d5a88:	2003e7a4 	.word	0x2003e7a4
   d5a8c:	2003e7a0 	.word	0x2003e7a0

000d5a90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5a90:	4b18      	ldr	r3, [pc, #96]	; (d5af4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5a92:	681a      	ldr	r2, [r3, #0]
   d5a94:	07d1      	lsls	r1, r2, #31
   d5a96:	bf5c      	itt	pl
   d5a98:	2201      	movpl	r2, #1
   d5a9a:	601a      	strpl	r2, [r3, #0]
   d5a9c:	4b16      	ldr	r3, [pc, #88]	; (d5af8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5a9e:	681a      	ldr	r2, [r3, #0]
   d5aa0:	07d2      	lsls	r2, r2, #31
   d5aa2:	bf5c      	itt	pl
   d5aa4:	2201      	movpl	r2, #1
   d5aa6:	601a      	strpl	r2, [r3, #0]
   d5aa8:	4b14      	ldr	r3, [pc, #80]	; (d5afc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5aaa:	681a      	ldr	r2, [r3, #0]
   d5aac:	07d0      	lsls	r0, r2, #31
   d5aae:	bf5c      	itt	pl
   d5ab0:	2201      	movpl	r2, #1
   d5ab2:	601a      	strpl	r2, [r3, #0]
   d5ab4:	4b12      	ldr	r3, [pc, #72]	; (d5b00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5ab6:	681a      	ldr	r2, [r3, #0]
   d5ab8:	07d1      	lsls	r1, r2, #31
   d5aba:	bf5c      	itt	pl
   d5abc:	2201      	movpl	r2, #1
   d5abe:	601a      	strpl	r2, [r3, #0]
   d5ac0:	4b10      	ldr	r3, [pc, #64]	; (d5b04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5ac2:	681a      	ldr	r2, [r3, #0]
   d5ac4:	07d2      	lsls	r2, r2, #31
   d5ac6:	bf5c      	itt	pl
   d5ac8:	2201      	movpl	r2, #1
   d5aca:	601a      	strpl	r2, [r3, #0]
   d5acc:	4b0e      	ldr	r3, [pc, #56]	; (d5b08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5ace:	681a      	ldr	r2, [r3, #0]
   d5ad0:	07d0      	lsls	r0, r2, #31
   d5ad2:	bf5c      	itt	pl
   d5ad4:	2201      	movpl	r2, #1
   d5ad6:	601a      	strpl	r2, [r3, #0]
   d5ad8:	4b0c      	ldr	r3, [pc, #48]	; (d5b0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5ada:	681a      	ldr	r2, [r3, #0]
   d5adc:	07d1      	lsls	r1, r2, #31
   d5ade:	bf5c      	itt	pl
   d5ae0:	2201      	movpl	r2, #1
   d5ae2:	601a      	strpl	r2, [r3, #0]
   d5ae4:	4b0a      	ldr	r3, [pc, #40]	; (d5b10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5ae6:	681a      	ldr	r2, [r3, #0]
   d5ae8:	07d2      	lsls	r2, r2, #31
   d5aea:	bf5c      	itt	pl
   d5aec:	2201      	movpl	r2, #1
   d5aee:	601a      	strpl	r2, [r3, #0]
   d5af0:	4770      	bx	lr
   d5af2:	bf00      	nop
   d5af4:	2003e7ec 	.word	0x2003e7ec
   d5af8:	2003e7e8 	.word	0x2003e7e8
   d5afc:	2003e7e4 	.word	0x2003e7e4
   d5b00:	2003e7e0 	.word	0x2003e7e0
   d5b04:	2003e7dc 	.word	0x2003e7dc
   d5b08:	2003e7d8 	.word	0x2003e7d8
   d5b0c:	2003e7d4 	.word	0x2003e7d4
   d5b10:	2003e7d0 	.word	0x2003e7d0

000d5b14 <__aeabi_drsub>:
   d5b14:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d5b18:	e002      	b.n	d5b20 <__adddf3>
   d5b1a:	bf00      	nop

000d5b1c <__aeabi_dsub>:
   d5b1c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5b20 <__adddf3>:
   d5b20:	b530      	push	{r4, r5, lr}
   d5b22:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d5b26:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d5b2a:	ea94 0f05 	teq	r4, r5
   d5b2e:	bf08      	it	eq
   d5b30:	ea90 0f02 	teqeq	r0, r2
   d5b34:	bf1f      	itttt	ne
   d5b36:	ea54 0c00 	orrsne.w	ip, r4, r0
   d5b3a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d5b3e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5b42:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5b46:	f000 80e2 	beq.w	d5d0e <__adddf3+0x1ee>
   d5b4a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5b4e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5b52:	bfb8      	it	lt
   d5b54:	426d      	neglt	r5, r5
   d5b56:	dd0c      	ble.n	d5b72 <__adddf3+0x52>
   d5b58:	442c      	add	r4, r5
   d5b5a:	ea80 0202 	eor.w	r2, r0, r2
   d5b5e:	ea81 0303 	eor.w	r3, r1, r3
   d5b62:	ea82 0000 	eor.w	r0, r2, r0
   d5b66:	ea83 0101 	eor.w	r1, r3, r1
   d5b6a:	ea80 0202 	eor.w	r2, r0, r2
   d5b6e:	ea81 0303 	eor.w	r3, r1, r3
   d5b72:	2d36      	cmp	r5, #54	; 0x36
   d5b74:	bf88      	it	hi
   d5b76:	bd30      	pophi	{r4, r5, pc}
   d5b78:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5b7c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5b80:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d5b84:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d5b88:	d002      	beq.n	d5b90 <__adddf3+0x70>
   d5b8a:	4240      	negs	r0, r0
   d5b8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5b90:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d5b94:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5b98:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d5b9c:	d002      	beq.n	d5ba4 <__adddf3+0x84>
   d5b9e:	4252      	negs	r2, r2
   d5ba0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d5ba4:	ea94 0f05 	teq	r4, r5
   d5ba8:	f000 80a7 	beq.w	d5cfa <__adddf3+0x1da>
   d5bac:	f1a4 0401 	sub.w	r4, r4, #1
   d5bb0:	f1d5 0e20 	rsbs	lr, r5, #32
   d5bb4:	db0d      	blt.n	d5bd2 <__adddf3+0xb2>
   d5bb6:	fa02 fc0e 	lsl.w	ip, r2, lr
   d5bba:	fa22 f205 	lsr.w	r2, r2, r5
   d5bbe:	1880      	adds	r0, r0, r2
   d5bc0:	f141 0100 	adc.w	r1, r1, #0
   d5bc4:	fa03 f20e 	lsl.w	r2, r3, lr
   d5bc8:	1880      	adds	r0, r0, r2
   d5bca:	fa43 f305 	asr.w	r3, r3, r5
   d5bce:	4159      	adcs	r1, r3
   d5bd0:	e00e      	b.n	d5bf0 <__adddf3+0xd0>
   d5bd2:	f1a5 0520 	sub.w	r5, r5, #32
   d5bd6:	f10e 0e20 	add.w	lr, lr, #32
   d5bda:	2a01      	cmp	r2, #1
   d5bdc:	fa03 fc0e 	lsl.w	ip, r3, lr
   d5be0:	bf28      	it	cs
   d5be2:	f04c 0c02 	orrcs.w	ip, ip, #2
   d5be6:	fa43 f305 	asr.w	r3, r3, r5
   d5bea:	18c0      	adds	r0, r0, r3
   d5bec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d5bf0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5bf4:	d507      	bpl.n	d5c06 <__adddf3+0xe6>
   d5bf6:	f04f 0e00 	mov.w	lr, #0
   d5bfa:	f1dc 0c00 	rsbs	ip, ip, #0
   d5bfe:	eb7e 0000 	sbcs.w	r0, lr, r0
   d5c02:	eb6e 0101 	sbc.w	r1, lr, r1
   d5c06:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d5c0a:	d31b      	bcc.n	d5c44 <__adddf3+0x124>
   d5c0c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d5c10:	d30c      	bcc.n	d5c2c <__adddf3+0x10c>
   d5c12:	0849      	lsrs	r1, r1, #1
   d5c14:	ea5f 0030 	movs.w	r0, r0, rrx
   d5c18:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d5c1c:	f104 0401 	add.w	r4, r4, #1
   d5c20:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d5c24:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d5c28:	f080 809a 	bcs.w	d5d60 <__adddf3+0x240>
   d5c2c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d5c30:	bf08      	it	eq
   d5c32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5c36:	f150 0000 	adcs.w	r0, r0, #0
   d5c3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5c3e:	ea41 0105 	orr.w	r1, r1, r5
   d5c42:	bd30      	pop	{r4, r5, pc}
   d5c44:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d5c48:	4140      	adcs	r0, r0
   d5c4a:	eb41 0101 	adc.w	r1, r1, r1
   d5c4e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5c52:	f1a4 0401 	sub.w	r4, r4, #1
   d5c56:	d1e9      	bne.n	d5c2c <__adddf3+0x10c>
   d5c58:	f091 0f00 	teq	r1, #0
   d5c5c:	bf04      	itt	eq
   d5c5e:	4601      	moveq	r1, r0
   d5c60:	2000      	moveq	r0, #0
   d5c62:	fab1 f381 	clz	r3, r1
   d5c66:	bf08      	it	eq
   d5c68:	3320      	addeq	r3, #32
   d5c6a:	f1a3 030b 	sub.w	r3, r3, #11
   d5c6e:	f1b3 0220 	subs.w	r2, r3, #32
   d5c72:	da0c      	bge.n	d5c8e <__adddf3+0x16e>
   d5c74:	320c      	adds	r2, #12
   d5c76:	dd08      	ble.n	d5c8a <__adddf3+0x16a>
   d5c78:	f102 0c14 	add.w	ip, r2, #20
   d5c7c:	f1c2 020c 	rsb	r2, r2, #12
   d5c80:	fa01 f00c 	lsl.w	r0, r1, ip
   d5c84:	fa21 f102 	lsr.w	r1, r1, r2
   d5c88:	e00c      	b.n	d5ca4 <__adddf3+0x184>
   d5c8a:	f102 0214 	add.w	r2, r2, #20
   d5c8e:	bfd8      	it	le
   d5c90:	f1c2 0c20 	rsble	ip, r2, #32
   d5c94:	fa01 f102 	lsl.w	r1, r1, r2
   d5c98:	fa20 fc0c 	lsr.w	ip, r0, ip
   d5c9c:	bfdc      	itt	le
   d5c9e:	ea41 010c 	orrle.w	r1, r1, ip
   d5ca2:	4090      	lslle	r0, r2
   d5ca4:	1ae4      	subs	r4, r4, r3
   d5ca6:	bfa2      	ittt	ge
   d5ca8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d5cac:	4329      	orrge	r1, r5
   d5cae:	bd30      	popge	{r4, r5, pc}
   d5cb0:	ea6f 0404 	mvn.w	r4, r4
   d5cb4:	3c1f      	subs	r4, #31
   d5cb6:	da1c      	bge.n	d5cf2 <__adddf3+0x1d2>
   d5cb8:	340c      	adds	r4, #12
   d5cba:	dc0e      	bgt.n	d5cda <__adddf3+0x1ba>
   d5cbc:	f104 0414 	add.w	r4, r4, #20
   d5cc0:	f1c4 0220 	rsb	r2, r4, #32
   d5cc4:	fa20 f004 	lsr.w	r0, r0, r4
   d5cc8:	fa01 f302 	lsl.w	r3, r1, r2
   d5ccc:	ea40 0003 	orr.w	r0, r0, r3
   d5cd0:	fa21 f304 	lsr.w	r3, r1, r4
   d5cd4:	ea45 0103 	orr.w	r1, r5, r3
   d5cd8:	bd30      	pop	{r4, r5, pc}
   d5cda:	f1c4 040c 	rsb	r4, r4, #12
   d5cde:	f1c4 0220 	rsb	r2, r4, #32
   d5ce2:	fa20 f002 	lsr.w	r0, r0, r2
   d5ce6:	fa01 f304 	lsl.w	r3, r1, r4
   d5cea:	ea40 0003 	orr.w	r0, r0, r3
   d5cee:	4629      	mov	r1, r5
   d5cf0:	bd30      	pop	{r4, r5, pc}
   d5cf2:	fa21 f004 	lsr.w	r0, r1, r4
   d5cf6:	4629      	mov	r1, r5
   d5cf8:	bd30      	pop	{r4, r5, pc}
   d5cfa:	f094 0f00 	teq	r4, #0
   d5cfe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d5d02:	bf06      	itte	eq
   d5d04:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d5d08:	3401      	addeq	r4, #1
   d5d0a:	3d01      	subne	r5, #1
   d5d0c:	e74e      	b.n	d5bac <__adddf3+0x8c>
   d5d0e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5d12:	bf18      	it	ne
   d5d14:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5d18:	d029      	beq.n	d5d6e <__adddf3+0x24e>
   d5d1a:	ea94 0f05 	teq	r4, r5
   d5d1e:	bf08      	it	eq
   d5d20:	ea90 0f02 	teqeq	r0, r2
   d5d24:	d005      	beq.n	d5d32 <__adddf3+0x212>
   d5d26:	ea54 0c00 	orrs.w	ip, r4, r0
   d5d2a:	bf04      	itt	eq
   d5d2c:	4619      	moveq	r1, r3
   d5d2e:	4610      	moveq	r0, r2
   d5d30:	bd30      	pop	{r4, r5, pc}
   d5d32:	ea91 0f03 	teq	r1, r3
   d5d36:	bf1e      	ittt	ne
   d5d38:	2100      	movne	r1, #0
   d5d3a:	2000      	movne	r0, #0
   d5d3c:	bd30      	popne	{r4, r5, pc}
   d5d3e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d5d42:	d105      	bne.n	d5d50 <__adddf3+0x230>
   d5d44:	0040      	lsls	r0, r0, #1
   d5d46:	4149      	adcs	r1, r1
   d5d48:	bf28      	it	cs
   d5d4a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d5d4e:	bd30      	pop	{r4, r5, pc}
   d5d50:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d5d54:	bf3c      	itt	cc
   d5d56:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d5d5a:	bd30      	popcc	{r4, r5, pc}
   d5d5c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5d60:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d5d64:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5d68:	f04f 0000 	mov.w	r0, #0
   d5d6c:	bd30      	pop	{r4, r5, pc}
   d5d6e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5d72:	bf1a      	itte	ne
   d5d74:	4619      	movne	r1, r3
   d5d76:	4610      	movne	r0, r2
   d5d78:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d5d7c:	bf1c      	itt	ne
   d5d7e:	460b      	movne	r3, r1
   d5d80:	4602      	movne	r2, r0
   d5d82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5d86:	bf06      	itte	eq
   d5d88:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d5d8c:	ea91 0f03 	teqeq	r1, r3
   d5d90:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d5d94:	bd30      	pop	{r4, r5, pc}
   d5d96:	bf00      	nop

000d5d98 <__aeabi_ui2d>:
   d5d98:	f090 0f00 	teq	r0, #0
   d5d9c:	bf04      	itt	eq
   d5d9e:	2100      	moveq	r1, #0
   d5da0:	4770      	bxeq	lr
   d5da2:	b530      	push	{r4, r5, lr}
   d5da4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5da8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5dac:	f04f 0500 	mov.w	r5, #0
   d5db0:	f04f 0100 	mov.w	r1, #0
   d5db4:	e750      	b.n	d5c58 <__adddf3+0x138>
   d5db6:	bf00      	nop

000d5db8 <__aeabi_i2d>:
   d5db8:	f090 0f00 	teq	r0, #0
   d5dbc:	bf04      	itt	eq
   d5dbe:	2100      	moveq	r1, #0
   d5dc0:	4770      	bxeq	lr
   d5dc2:	b530      	push	{r4, r5, lr}
   d5dc4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5dc8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5dcc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d5dd0:	bf48      	it	mi
   d5dd2:	4240      	negmi	r0, r0
   d5dd4:	f04f 0100 	mov.w	r1, #0
   d5dd8:	e73e      	b.n	d5c58 <__adddf3+0x138>
   d5dda:	bf00      	nop

000d5ddc <__aeabi_f2d>:
   d5ddc:	0042      	lsls	r2, r0, #1
   d5dde:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d5de2:	ea4f 0131 	mov.w	r1, r1, rrx
   d5de6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d5dea:	bf1f      	itttt	ne
   d5dec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d5df0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5df4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d5df8:	4770      	bxne	lr
   d5dfa:	f092 0f00 	teq	r2, #0
   d5dfe:	bf14      	ite	ne
   d5e00:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5e04:	4770      	bxeq	lr
   d5e06:	b530      	push	{r4, r5, lr}
   d5e08:	f44f 7460 	mov.w	r4, #896	; 0x380
   d5e0c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5e10:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5e14:	e720      	b.n	d5c58 <__adddf3+0x138>
   d5e16:	bf00      	nop

000d5e18 <__aeabi_ul2d>:
   d5e18:	ea50 0201 	orrs.w	r2, r0, r1
   d5e1c:	bf08      	it	eq
   d5e1e:	4770      	bxeq	lr
   d5e20:	b530      	push	{r4, r5, lr}
   d5e22:	f04f 0500 	mov.w	r5, #0
   d5e26:	e00a      	b.n	d5e3e <__aeabi_l2d+0x16>

000d5e28 <__aeabi_l2d>:
   d5e28:	ea50 0201 	orrs.w	r2, r0, r1
   d5e2c:	bf08      	it	eq
   d5e2e:	4770      	bxeq	lr
   d5e30:	b530      	push	{r4, r5, lr}
   d5e32:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d5e36:	d502      	bpl.n	d5e3e <__aeabi_l2d+0x16>
   d5e38:	4240      	negs	r0, r0
   d5e3a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5e3e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5e42:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5e46:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d5e4a:	f43f aedc 	beq.w	d5c06 <__adddf3+0xe6>
   d5e4e:	f04f 0203 	mov.w	r2, #3
   d5e52:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5e56:	bf18      	it	ne
   d5e58:	3203      	addne	r2, #3
   d5e5a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5e5e:	bf18      	it	ne
   d5e60:	3203      	addne	r2, #3
   d5e62:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d5e66:	f1c2 0320 	rsb	r3, r2, #32
   d5e6a:	fa00 fc03 	lsl.w	ip, r0, r3
   d5e6e:	fa20 f002 	lsr.w	r0, r0, r2
   d5e72:	fa01 fe03 	lsl.w	lr, r1, r3
   d5e76:	ea40 000e 	orr.w	r0, r0, lr
   d5e7a:	fa21 f102 	lsr.w	r1, r1, r2
   d5e7e:	4414      	add	r4, r2
   d5e80:	e6c1      	b.n	d5c06 <__adddf3+0xe6>
   d5e82:	bf00      	nop

000d5e84 <__aeabi_dmul>:
   d5e84:	b570      	push	{r4, r5, r6, lr}
   d5e86:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5e8a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5e8e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5e92:	bf1d      	ittte	ne
   d5e94:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5e98:	ea94 0f0c 	teqne	r4, ip
   d5e9c:	ea95 0f0c 	teqne	r5, ip
   d5ea0:	f000 f8de 	bleq	d6060 <__aeabi_dmul+0x1dc>
   d5ea4:	442c      	add	r4, r5
   d5ea6:	ea81 0603 	eor.w	r6, r1, r3
   d5eaa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d5eae:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d5eb2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d5eb6:	bf18      	it	ne
   d5eb8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d5ebc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5ec0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d5ec4:	d038      	beq.n	d5f38 <__aeabi_dmul+0xb4>
   d5ec6:	fba0 ce02 	umull	ip, lr, r0, r2
   d5eca:	f04f 0500 	mov.w	r5, #0
   d5ece:	fbe1 e502 	umlal	lr, r5, r1, r2
   d5ed2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d5ed6:	fbe0 e503 	umlal	lr, r5, r0, r3
   d5eda:	f04f 0600 	mov.w	r6, #0
   d5ede:	fbe1 5603 	umlal	r5, r6, r1, r3
   d5ee2:	f09c 0f00 	teq	ip, #0
   d5ee6:	bf18      	it	ne
   d5ee8:	f04e 0e01 	orrne.w	lr, lr, #1
   d5eec:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d5ef0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5ef4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d5ef8:	d204      	bcs.n	d5f04 <__aeabi_dmul+0x80>
   d5efa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d5efe:	416d      	adcs	r5, r5
   d5f00:	eb46 0606 	adc.w	r6, r6, r6
   d5f04:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d5f08:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d5f0c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d5f10:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d5f14:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d5f18:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5f1c:	bf88      	it	hi
   d5f1e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5f22:	d81e      	bhi.n	d5f62 <__aeabi_dmul+0xde>
   d5f24:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d5f28:	bf08      	it	eq
   d5f2a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d5f2e:	f150 0000 	adcs.w	r0, r0, #0
   d5f32:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5f36:	bd70      	pop	{r4, r5, r6, pc}
   d5f38:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d5f3c:	ea46 0101 	orr.w	r1, r6, r1
   d5f40:	ea40 0002 	orr.w	r0, r0, r2
   d5f44:	ea81 0103 	eor.w	r1, r1, r3
   d5f48:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d5f4c:	bfc2      	ittt	gt
   d5f4e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5f52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5f56:	bd70      	popgt	{r4, r5, r6, pc}
   d5f58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5f5c:	f04f 0e00 	mov.w	lr, #0
   d5f60:	3c01      	subs	r4, #1
   d5f62:	f300 80ab 	bgt.w	d60bc <__aeabi_dmul+0x238>
   d5f66:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d5f6a:	bfde      	ittt	le
   d5f6c:	2000      	movle	r0, #0
   d5f6e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d5f72:	bd70      	pople	{r4, r5, r6, pc}
   d5f74:	f1c4 0400 	rsb	r4, r4, #0
   d5f78:	3c20      	subs	r4, #32
   d5f7a:	da35      	bge.n	d5fe8 <__aeabi_dmul+0x164>
   d5f7c:	340c      	adds	r4, #12
   d5f7e:	dc1b      	bgt.n	d5fb8 <__aeabi_dmul+0x134>
   d5f80:	f104 0414 	add.w	r4, r4, #20
   d5f84:	f1c4 0520 	rsb	r5, r4, #32
   d5f88:	fa00 f305 	lsl.w	r3, r0, r5
   d5f8c:	fa20 f004 	lsr.w	r0, r0, r4
   d5f90:	fa01 f205 	lsl.w	r2, r1, r5
   d5f94:	ea40 0002 	orr.w	r0, r0, r2
   d5f98:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d5f9c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5fa0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5fa4:	fa21 f604 	lsr.w	r6, r1, r4
   d5fa8:	eb42 0106 	adc.w	r1, r2, r6
   d5fac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5fb0:	bf08      	it	eq
   d5fb2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5fb6:	bd70      	pop	{r4, r5, r6, pc}
   d5fb8:	f1c4 040c 	rsb	r4, r4, #12
   d5fbc:	f1c4 0520 	rsb	r5, r4, #32
   d5fc0:	fa00 f304 	lsl.w	r3, r0, r4
   d5fc4:	fa20 f005 	lsr.w	r0, r0, r5
   d5fc8:	fa01 f204 	lsl.w	r2, r1, r4
   d5fcc:	ea40 0002 	orr.w	r0, r0, r2
   d5fd0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5fd4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5fd8:	f141 0100 	adc.w	r1, r1, #0
   d5fdc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5fe0:	bf08      	it	eq
   d5fe2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5fe6:	bd70      	pop	{r4, r5, r6, pc}
   d5fe8:	f1c4 0520 	rsb	r5, r4, #32
   d5fec:	fa00 f205 	lsl.w	r2, r0, r5
   d5ff0:	ea4e 0e02 	orr.w	lr, lr, r2
   d5ff4:	fa20 f304 	lsr.w	r3, r0, r4
   d5ff8:	fa01 f205 	lsl.w	r2, r1, r5
   d5ffc:	ea43 0302 	orr.w	r3, r3, r2
   d6000:	fa21 f004 	lsr.w	r0, r1, r4
   d6004:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6008:	fa21 f204 	lsr.w	r2, r1, r4
   d600c:	ea20 0002 	bic.w	r0, r0, r2
   d6010:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6014:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6018:	bf08      	it	eq
   d601a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d601e:	bd70      	pop	{r4, r5, r6, pc}
   d6020:	f094 0f00 	teq	r4, #0
   d6024:	d10f      	bne.n	d6046 <__aeabi_dmul+0x1c2>
   d6026:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d602a:	0040      	lsls	r0, r0, #1
   d602c:	eb41 0101 	adc.w	r1, r1, r1
   d6030:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6034:	bf08      	it	eq
   d6036:	3c01      	subeq	r4, #1
   d6038:	d0f7      	beq.n	d602a <__aeabi_dmul+0x1a6>
   d603a:	ea41 0106 	orr.w	r1, r1, r6
   d603e:	f095 0f00 	teq	r5, #0
   d6042:	bf18      	it	ne
   d6044:	4770      	bxne	lr
   d6046:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d604a:	0052      	lsls	r2, r2, #1
   d604c:	eb43 0303 	adc.w	r3, r3, r3
   d6050:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6054:	bf08      	it	eq
   d6056:	3d01      	subeq	r5, #1
   d6058:	d0f7      	beq.n	d604a <__aeabi_dmul+0x1c6>
   d605a:	ea43 0306 	orr.w	r3, r3, r6
   d605e:	4770      	bx	lr
   d6060:	ea94 0f0c 	teq	r4, ip
   d6064:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6068:	bf18      	it	ne
   d606a:	ea95 0f0c 	teqne	r5, ip
   d606e:	d00c      	beq.n	d608a <__aeabi_dmul+0x206>
   d6070:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6074:	bf18      	it	ne
   d6076:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d607a:	d1d1      	bne.n	d6020 <__aeabi_dmul+0x19c>
   d607c:	ea81 0103 	eor.w	r1, r1, r3
   d6080:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6084:	f04f 0000 	mov.w	r0, #0
   d6088:	bd70      	pop	{r4, r5, r6, pc}
   d608a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d608e:	bf06      	itte	eq
   d6090:	4610      	moveq	r0, r2
   d6092:	4619      	moveq	r1, r3
   d6094:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6098:	d019      	beq.n	d60ce <__aeabi_dmul+0x24a>
   d609a:	ea94 0f0c 	teq	r4, ip
   d609e:	d102      	bne.n	d60a6 <__aeabi_dmul+0x222>
   d60a0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d60a4:	d113      	bne.n	d60ce <__aeabi_dmul+0x24a>
   d60a6:	ea95 0f0c 	teq	r5, ip
   d60aa:	d105      	bne.n	d60b8 <__aeabi_dmul+0x234>
   d60ac:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d60b0:	bf1c      	itt	ne
   d60b2:	4610      	movne	r0, r2
   d60b4:	4619      	movne	r1, r3
   d60b6:	d10a      	bne.n	d60ce <__aeabi_dmul+0x24a>
   d60b8:	ea81 0103 	eor.w	r1, r1, r3
   d60bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d60c0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d60c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d60c8:	f04f 0000 	mov.w	r0, #0
   d60cc:	bd70      	pop	{r4, r5, r6, pc}
   d60ce:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d60d2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d60d6:	bd70      	pop	{r4, r5, r6, pc}

000d60d8 <__aeabi_ddiv>:
   d60d8:	b570      	push	{r4, r5, r6, lr}
   d60da:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d60de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d60e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d60e6:	bf1d      	ittte	ne
   d60e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d60ec:	ea94 0f0c 	teqne	r4, ip
   d60f0:	ea95 0f0c 	teqne	r5, ip
   d60f4:	f000 f8a7 	bleq	d6246 <__aeabi_ddiv+0x16e>
   d60f8:	eba4 0405 	sub.w	r4, r4, r5
   d60fc:	ea81 0e03 	eor.w	lr, r1, r3
   d6100:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6104:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6108:	f000 8088 	beq.w	d621c <__aeabi_ddiv+0x144>
   d610c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6110:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6114:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6118:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d611c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6120:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6124:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6128:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d612c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6130:	429d      	cmp	r5, r3
   d6132:	bf08      	it	eq
   d6134:	4296      	cmpeq	r6, r2
   d6136:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d613a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d613e:	d202      	bcs.n	d6146 <__aeabi_ddiv+0x6e>
   d6140:	085b      	lsrs	r3, r3, #1
   d6142:	ea4f 0232 	mov.w	r2, r2, rrx
   d6146:	1ab6      	subs	r6, r6, r2
   d6148:	eb65 0503 	sbc.w	r5, r5, r3
   d614c:	085b      	lsrs	r3, r3, #1
   d614e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6152:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d6156:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d615a:	ebb6 0e02 	subs.w	lr, r6, r2
   d615e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6162:	bf22      	ittt	cs
   d6164:	1ab6      	subcs	r6, r6, r2
   d6166:	4675      	movcs	r5, lr
   d6168:	ea40 000c 	orrcs.w	r0, r0, ip
   d616c:	085b      	lsrs	r3, r3, #1
   d616e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6172:	ebb6 0e02 	subs.w	lr, r6, r2
   d6176:	eb75 0e03 	sbcs.w	lr, r5, r3
   d617a:	bf22      	ittt	cs
   d617c:	1ab6      	subcs	r6, r6, r2
   d617e:	4675      	movcs	r5, lr
   d6180:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6184:	085b      	lsrs	r3, r3, #1
   d6186:	ea4f 0232 	mov.w	r2, r2, rrx
   d618a:	ebb6 0e02 	subs.w	lr, r6, r2
   d618e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6192:	bf22      	ittt	cs
   d6194:	1ab6      	subcs	r6, r6, r2
   d6196:	4675      	movcs	r5, lr
   d6198:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d619c:	085b      	lsrs	r3, r3, #1
   d619e:	ea4f 0232 	mov.w	r2, r2, rrx
   d61a2:	ebb6 0e02 	subs.w	lr, r6, r2
   d61a6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d61aa:	bf22      	ittt	cs
   d61ac:	1ab6      	subcs	r6, r6, r2
   d61ae:	4675      	movcs	r5, lr
   d61b0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d61b4:	ea55 0e06 	orrs.w	lr, r5, r6
   d61b8:	d018      	beq.n	d61ec <__aeabi_ddiv+0x114>
   d61ba:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d61be:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d61c2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d61c6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d61ca:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d61ce:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d61d2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d61d6:	d1c0      	bne.n	d615a <__aeabi_ddiv+0x82>
   d61d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d61dc:	d10b      	bne.n	d61f6 <__aeabi_ddiv+0x11e>
   d61de:	ea41 0100 	orr.w	r1, r1, r0
   d61e2:	f04f 0000 	mov.w	r0, #0
   d61e6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d61ea:	e7b6      	b.n	d615a <__aeabi_ddiv+0x82>
   d61ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d61f0:	bf04      	itt	eq
   d61f2:	4301      	orreq	r1, r0
   d61f4:	2000      	moveq	r0, #0
   d61f6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d61fa:	bf88      	it	hi
   d61fc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6200:	f63f aeaf 	bhi.w	d5f62 <__aeabi_dmul+0xde>
   d6204:	ebb5 0c03 	subs.w	ip, r5, r3
   d6208:	bf04      	itt	eq
   d620a:	ebb6 0c02 	subseq.w	ip, r6, r2
   d620e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6212:	f150 0000 	adcs.w	r0, r0, #0
   d6216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d621a:	bd70      	pop	{r4, r5, r6, pc}
   d621c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6220:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6224:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6228:	bfc2      	ittt	gt
   d622a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d622e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6232:	bd70      	popgt	{r4, r5, r6, pc}
   d6234:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6238:	f04f 0e00 	mov.w	lr, #0
   d623c:	3c01      	subs	r4, #1
   d623e:	e690      	b.n	d5f62 <__aeabi_dmul+0xde>
   d6240:	ea45 0e06 	orr.w	lr, r5, r6
   d6244:	e68d      	b.n	d5f62 <__aeabi_dmul+0xde>
   d6246:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d624a:	ea94 0f0c 	teq	r4, ip
   d624e:	bf08      	it	eq
   d6250:	ea95 0f0c 	teqeq	r5, ip
   d6254:	f43f af3b 	beq.w	d60ce <__aeabi_dmul+0x24a>
   d6258:	ea94 0f0c 	teq	r4, ip
   d625c:	d10a      	bne.n	d6274 <__aeabi_ddiv+0x19c>
   d625e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6262:	f47f af34 	bne.w	d60ce <__aeabi_dmul+0x24a>
   d6266:	ea95 0f0c 	teq	r5, ip
   d626a:	f47f af25 	bne.w	d60b8 <__aeabi_dmul+0x234>
   d626e:	4610      	mov	r0, r2
   d6270:	4619      	mov	r1, r3
   d6272:	e72c      	b.n	d60ce <__aeabi_dmul+0x24a>
   d6274:	ea95 0f0c 	teq	r5, ip
   d6278:	d106      	bne.n	d6288 <__aeabi_ddiv+0x1b0>
   d627a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d627e:	f43f aefd 	beq.w	d607c <__aeabi_dmul+0x1f8>
   d6282:	4610      	mov	r0, r2
   d6284:	4619      	mov	r1, r3
   d6286:	e722      	b.n	d60ce <__aeabi_dmul+0x24a>
   d6288:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d628c:	bf18      	it	ne
   d628e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6292:	f47f aec5 	bne.w	d6020 <__aeabi_dmul+0x19c>
   d6296:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d629a:	f47f af0d 	bne.w	d60b8 <__aeabi_dmul+0x234>
   d629e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d62a2:	f47f aeeb 	bne.w	d607c <__aeabi_dmul+0x1f8>
   d62a6:	e712      	b.n	d60ce <__aeabi_dmul+0x24a>

000d62a8 <__gedf2>:
   d62a8:	f04f 3cff 	mov.w	ip, #4294967295
   d62ac:	e006      	b.n	d62bc <__cmpdf2+0x4>
   d62ae:	bf00      	nop

000d62b0 <__ledf2>:
   d62b0:	f04f 0c01 	mov.w	ip, #1
   d62b4:	e002      	b.n	d62bc <__cmpdf2+0x4>
   d62b6:	bf00      	nop

000d62b8 <__cmpdf2>:
   d62b8:	f04f 0c01 	mov.w	ip, #1
   d62bc:	f84d cd04 	str.w	ip, [sp, #-4]!
   d62c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d62c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d62c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d62cc:	bf18      	it	ne
   d62ce:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d62d2:	d01b      	beq.n	d630c <__cmpdf2+0x54>
   d62d4:	b001      	add	sp, #4
   d62d6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d62da:	bf0c      	ite	eq
   d62dc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d62e0:	ea91 0f03 	teqne	r1, r3
   d62e4:	bf02      	ittt	eq
   d62e6:	ea90 0f02 	teqeq	r0, r2
   d62ea:	2000      	moveq	r0, #0
   d62ec:	4770      	bxeq	lr
   d62ee:	f110 0f00 	cmn.w	r0, #0
   d62f2:	ea91 0f03 	teq	r1, r3
   d62f6:	bf58      	it	pl
   d62f8:	4299      	cmppl	r1, r3
   d62fa:	bf08      	it	eq
   d62fc:	4290      	cmpeq	r0, r2
   d62fe:	bf2c      	ite	cs
   d6300:	17d8      	asrcs	r0, r3, #31
   d6302:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d6306:	f040 0001 	orr.w	r0, r0, #1
   d630a:	4770      	bx	lr
   d630c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6310:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6314:	d102      	bne.n	d631c <__cmpdf2+0x64>
   d6316:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d631a:	d107      	bne.n	d632c <__cmpdf2+0x74>
   d631c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6320:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6324:	d1d6      	bne.n	d62d4 <__cmpdf2+0x1c>
   d6326:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d632a:	d0d3      	beq.n	d62d4 <__cmpdf2+0x1c>
   d632c:	f85d 0b04 	ldr.w	r0, [sp], #4
   d6330:	4770      	bx	lr
   d6332:	bf00      	nop

000d6334 <__aeabi_cdrcmple>:
   d6334:	4684      	mov	ip, r0
   d6336:	4610      	mov	r0, r2
   d6338:	4662      	mov	r2, ip
   d633a:	468c      	mov	ip, r1
   d633c:	4619      	mov	r1, r3
   d633e:	4663      	mov	r3, ip
   d6340:	e000      	b.n	d6344 <__aeabi_cdcmpeq>
   d6342:	bf00      	nop

000d6344 <__aeabi_cdcmpeq>:
   d6344:	b501      	push	{r0, lr}
   d6346:	f7ff ffb7 	bl	d62b8 <__cmpdf2>
   d634a:	2800      	cmp	r0, #0
   d634c:	bf48      	it	mi
   d634e:	f110 0f00 	cmnmi.w	r0, #0
   d6352:	bd01      	pop	{r0, pc}

000d6354 <__aeabi_dcmpeq>:
   d6354:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6358:	f7ff fff4 	bl	d6344 <__aeabi_cdcmpeq>
   d635c:	bf0c      	ite	eq
   d635e:	2001      	moveq	r0, #1
   d6360:	2000      	movne	r0, #0
   d6362:	f85d fb08 	ldr.w	pc, [sp], #8
   d6366:	bf00      	nop

000d6368 <__aeabi_dcmplt>:
   d6368:	f84d ed08 	str.w	lr, [sp, #-8]!
   d636c:	f7ff ffea 	bl	d6344 <__aeabi_cdcmpeq>
   d6370:	bf34      	ite	cc
   d6372:	2001      	movcc	r0, #1
   d6374:	2000      	movcs	r0, #0
   d6376:	f85d fb08 	ldr.w	pc, [sp], #8
   d637a:	bf00      	nop

000d637c <__aeabi_dcmple>:
   d637c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6380:	f7ff ffe0 	bl	d6344 <__aeabi_cdcmpeq>
   d6384:	bf94      	ite	ls
   d6386:	2001      	movls	r0, #1
   d6388:	2000      	movhi	r0, #0
   d638a:	f85d fb08 	ldr.w	pc, [sp], #8
   d638e:	bf00      	nop

000d6390 <__aeabi_dcmpge>:
   d6390:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6394:	f7ff ffce 	bl	d6334 <__aeabi_cdrcmple>
   d6398:	bf94      	ite	ls
   d639a:	2001      	movls	r0, #1
   d639c:	2000      	movhi	r0, #0
   d639e:	f85d fb08 	ldr.w	pc, [sp], #8
   d63a2:	bf00      	nop

000d63a4 <__aeabi_dcmpgt>:
   d63a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d63a8:	f7ff ffc4 	bl	d6334 <__aeabi_cdrcmple>
   d63ac:	bf34      	ite	cc
   d63ae:	2001      	movcc	r0, #1
   d63b0:	2000      	movcs	r0, #0
   d63b2:	f85d fb08 	ldr.w	pc, [sp], #8
   d63b6:	bf00      	nop

000d63b8 <__aeabi_dcmpun>:
   d63b8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d63bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d63c0:	d102      	bne.n	d63c8 <__aeabi_dcmpun+0x10>
   d63c2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d63c6:	d10a      	bne.n	d63de <__aeabi_dcmpun+0x26>
   d63c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d63cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d63d0:	d102      	bne.n	d63d8 <__aeabi_dcmpun+0x20>
   d63d2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d63d6:	d102      	bne.n	d63de <__aeabi_dcmpun+0x26>
   d63d8:	f04f 0000 	mov.w	r0, #0
   d63dc:	4770      	bx	lr
   d63de:	f04f 0001 	mov.w	r0, #1
   d63e2:	4770      	bx	lr

000d63e4 <__aeabi_d2iz>:
   d63e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d63e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d63ec:	d215      	bcs.n	d641a <__aeabi_d2iz+0x36>
   d63ee:	d511      	bpl.n	d6414 <__aeabi_d2iz+0x30>
   d63f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d63f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d63f8:	d912      	bls.n	d6420 <__aeabi_d2iz+0x3c>
   d63fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d63fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6402:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6406:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d640a:	fa23 f002 	lsr.w	r0, r3, r2
   d640e:	bf18      	it	ne
   d6410:	4240      	negne	r0, r0
   d6412:	4770      	bx	lr
   d6414:	f04f 0000 	mov.w	r0, #0
   d6418:	4770      	bx	lr
   d641a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d641e:	d105      	bne.n	d642c <__aeabi_d2iz+0x48>
   d6420:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d6424:	bf08      	it	eq
   d6426:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d642a:	4770      	bx	lr
   d642c:	f04f 0000 	mov.w	r0, #0
   d6430:	4770      	bx	lr
   d6432:	bf00      	nop

000d6434 <__aeabi_d2uiz>:
   d6434:	004a      	lsls	r2, r1, #1
   d6436:	d211      	bcs.n	d645c <__aeabi_d2uiz+0x28>
   d6438:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d643c:	d211      	bcs.n	d6462 <__aeabi_d2uiz+0x2e>
   d643e:	d50d      	bpl.n	d645c <__aeabi_d2uiz+0x28>
   d6440:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6444:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6448:	d40e      	bmi.n	d6468 <__aeabi_d2uiz+0x34>
   d644a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d644e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6452:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6456:	fa23 f002 	lsr.w	r0, r3, r2
   d645a:	4770      	bx	lr
   d645c:	f04f 0000 	mov.w	r0, #0
   d6460:	4770      	bx	lr
   d6462:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6466:	d102      	bne.n	d646e <__aeabi_d2uiz+0x3a>
   d6468:	f04f 30ff 	mov.w	r0, #4294967295
   d646c:	4770      	bx	lr
   d646e:	f04f 0000 	mov.w	r0, #0
   d6472:	4770      	bx	lr

000d6474 <__cxa_atexit>:
   d6474:	b510      	push	{r4, lr}
   d6476:	4c05      	ldr	r4, [pc, #20]	; (d648c <__cxa_atexit+0x18>)
   d6478:	4613      	mov	r3, r2
   d647a:	b12c      	cbz	r4, d6488 <__cxa_atexit+0x14>
   d647c:	460a      	mov	r2, r1
   d647e:	4601      	mov	r1, r0
   d6480:	2002      	movs	r0, #2
   d6482:	f3af 8000 	nop.w
   d6486:	bd10      	pop	{r4, pc}
   d6488:	4620      	mov	r0, r4
   d648a:	bd10      	pop	{r4, pc}
   d648c:	00000000 	.word	0x00000000

000d6490 <memcpy>:
   d6490:	b510      	push	{r4, lr}
   d6492:	1e43      	subs	r3, r0, #1
   d6494:	440a      	add	r2, r1
   d6496:	4291      	cmp	r1, r2
   d6498:	d004      	beq.n	d64a4 <memcpy+0x14>
   d649a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d649e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d64a2:	e7f8      	b.n	d6496 <memcpy+0x6>
   d64a4:	bd10      	pop	{r4, pc}

000d64a6 <memset>:
   d64a6:	4402      	add	r2, r0
   d64a8:	4603      	mov	r3, r0
   d64aa:	4293      	cmp	r3, r2
   d64ac:	d002      	beq.n	d64b4 <memset+0xe>
   d64ae:	f803 1b01 	strb.w	r1, [r3], #1
   d64b2:	e7fa      	b.n	d64aa <memset+0x4>
   d64b4:	4770      	bx	lr
	...

000d64b8 <srand>:
   d64b8:	b538      	push	{r3, r4, r5, lr}
   d64ba:	4b12      	ldr	r3, [pc, #72]	; (d6504 <srand+0x4c>)
   d64bc:	681c      	ldr	r4, [r3, #0]
   d64be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d64c0:	4605      	mov	r5, r0
   d64c2:	b9d3      	cbnz	r3, d64fa <srand+0x42>
   d64c4:	2018      	movs	r0, #24
   d64c6:	f7fe f895 	bl	d45f4 <malloc>
   d64ca:	f243 330e 	movw	r3, #13070	; 0x330e
   d64ce:	63a0      	str	r0, [r4, #56]	; 0x38
   d64d0:	8003      	strh	r3, [r0, #0]
   d64d2:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d64d6:	8043      	strh	r3, [r0, #2]
   d64d8:	f241 2334 	movw	r3, #4660	; 0x1234
   d64dc:	8083      	strh	r3, [r0, #4]
   d64de:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d64e2:	80c3      	strh	r3, [r0, #6]
   d64e4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d64e8:	8103      	strh	r3, [r0, #8]
   d64ea:	2305      	movs	r3, #5
   d64ec:	8143      	strh	r3, [r0, #10]
   d64ee:	230b      	movs	r3, #11
   d64f0:	8183      	strh	r3, [r0, #12]
   d64f2:	2201      	movs	r2, #1
   d64f4:	2300      	movs	r3, #0
   d64f6:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d64fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d64fc:	2200      	movs	r2, #0
   d64fe:	611d      	str	r5, [r3, #16]
   d6500:	615a      	str	r2, [r3, #20]
   d6502:	bd38      	pop	{r3, r4, r5, pc}
   d6504:	2003e39c 	.word	0x2003e39c

000d6508 <strdup>:
   d6508:	4b02      	ldr	r3, [pc, #8]	; (d6514 <strdup+0xc>)
   d650a:	4601      	mov	r1, r0
   d650c:	6818      	ldr	r0, [r3, #0]
   d650e:	f000 b803 	b.w	d6518 <_strdup_r>
   d6512:	bf00      	nop
   d6514:	2003e39c 	.word	0x2003e39c

000d6518 <_strdup_r>:
   d6518:	b570      	push	{r4, r5, r6, lr}
   d651a:	4606      	mov	r6, r0
   d651c:	4608      	mov	r0, r1
   d651e:	460c      	mov	r4, r1
   d6520:	f000 f80d 	bl	d653e <strlen>
   d6524:	1c45      	adds	r5, r0, #1
   d6526:	4629      	mov	r1, r5
   d6528:	4630      	mov	r0, r6
   d652a:	f7fe f883 	bl	d4634 <_malloc_r>
   d652e:	4606      	mov	r6, r0
   d6530:	b118      	cbz	r0, d653a <_strdup_r+0x22>
   d6532:	462a      	mov	r2, r5
   d6534:	4621      	mov	r1, r4
   d6536:	f7ff ffab 	bl	d6490 <memcpy>
   d653a:	4630      	mov	r0, r6
   d653c:	bd70      	pop	{r4, r5, r6, pc}

000d653e <strlen>:
   d653e:	4603      	mov	r3, r0
   d6540:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6544:	2a00      	cmp	r2, #0
   d6546:	d1fb      	bne.n	d6540 <strlen+0x2>
   d6548:	1a18      	subs	r0, r3, r0
   d654a:	3801      	subs	r0, #1
   d654c:	4770      	bx	lr

000d654e <link_code_end>:
	...

000d6550 <dynalib_user>:
   d6550:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d6560:	0000 0000 7774 6c69 6f69 735f 736d 5300     ....twilio_sms.S
   d6570:	6e65 6964 676e 654d 7373 6761 0065 6854     endingMessage.Th
   d6580:	2065 6863 6c69 2064 7369 6920 206e 6874     e child is in th
   d6590:	2065 6163 2072 6669 7420 6568 6120 6576     e car if the ave
   d65a0:	6172 6567 3c20 3320 203a 0020 6863 6c69     rage < 3:  .chil
   d65b0:	2064 6e69 6320 7261 5300 6e65 6964 676e     d in car.Sending
   d65c0:	6d20 7365 6173 6567 6220 6365 7561 6573      message because
   d65d0:	6320 7261 7420 7275 656e 2064 666f 2066      car turned off 
   d65e0:	6e61 2064 6863 6c69 2064 7369 6920 206e     and child is in 
   d65f0:	6874 2065 6163 0072 6854 2065 6574 706d     the car.The temp
   d6600:	7265 7461 7275 2065 7369 7220 7369 6e69     erature is risin
   d6610:	2067 6f74 206f 6166 7473 203a 0020 6920     g too fast:  . i
   d6620:	206e 6874 2065 616c 7473 3620 2030 6573     n the last 60 se
   d6630:	6f63 646e 0073 6553 646e 6e69 2067 656d     conds.Sending me
   d6640:	7373 6761 2065 6562 6163 7375 2065 6574     ssage because te
   d6650:	706d 7265 7461 7275 2065 7369 7420 6f6f     mperature is too
   d6660:	6820 746f 5300 6e65 6964 676e 6d20 7365      hot.Sending mes
   d6670:	6173 6567 6220 6365 7561 6573 7420 6d65     sage because tem
   d6680:	2070 7369 6320 6972 6974 6163 006c 6f59     p is critical.Yo
   d6690:	7275 6320 6968 646c 6920 2073 6e69 7420     ur child is in t
   d66a0:	6568 6320 7261 0000                         he car..

000d66a8 <_ZTVN5spark13EthernetClassE>:
	...
   d66b0:	46a3 000d 4699 000d 468f 000d 4685 000d     .F...F...F...F..
   d66c0:	4679 000d 466d 000d 4661 000d 4659 000d     yF..mF..aF..YF..
   d66d0:	464f 000d 4645 000d 5791 000d 616e 006e     OF..EF...W..nan.
   d66e0:	766f 0066 002e 6e69 0066 6162 6475 5300     ovf...inf.baud.S
   d66f0:	7265 6169 006c 6553 6972 6c61 0031 7974     erial.Serial1.ty
   d6700:	6570 7000 7261 6d61 6300 646d 6900 0064     pe.param.cmd.id.
   d6710:	6e68 0064 7473 6d72 6600 6c69 0074 766c     hnd.strm.filt.lv
   d6720:	006c 6461 4864 6e61 6c64 7265 7200 6d65     l.addHandler.rem
   d6730:	766f 4865 6e61 6c64 7265 6500 756e 486d     oveHandler.enumH
   d6740:	6e61 6c64 7265 0073 534a 4e4f 7453 6572     andlers.JSONStre
   d6750:	6d61 6f4c 4867 6e61 6c64 7265 6100 7070     amLogHandler.app
   d6760:	2500 3130 7530 0020 205d 2500 0064 202c     .%010u .] .%d., 
   d6770:	2800 3a29 0020 5b20 6300 646f 2065 203d     .(): . [.code = 
   d6780:	2500 0069 6564 6174 6c69 2073 203d 0d00     .%i.details = ..
   d6790:	000a 6e6c 6600 006e 6f63 6564 6400 7465     ..ln.fn.code.det
   d67a0:	6961 006c 6f6e 656e 7400 6172 6563 6900     ail.none.trace.i
   d67b0:	666e 006f 6177 6e72 6500 7272 726f 7000     nfo.warn.error.p
   d67c0:	6e61 6369 6100 6c6c 5a00 2500 302b 6433     anic.all.Z.%+03d
   d67d0:	253a 3230 0075 5925 252d 2d6d 6425 2554     :%02u.%Y-%m-%dT%
   d67e0:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   d67f0:	0065 0000                                   e...

000d67f4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d67fc:	4c75 000d 4c7b 000d 4cbf 000d 4c89 000d     uL..{L...L...L..
   d680c:	4c77 000d                                   wL..

000d6810 <_ZTV9IPAddress>:
	...
   d6818:	520d 000d 51fd 000d 51ff 000d               .R...Q...Q..

000d6824 <_ZTV9USBSerial>:
	...
   d682c:	52e5 000d 5335 000d 5343 000d 4849 000d     .R..5S..CS..IH..
   d683c:	5321 000d 52e7 000d 52fd 000d 532f 000d     !S...R...R../S..
   d684c:	5313 000d 52e1 000d                         .S...R..

000d6854 <_ZTVN5spark13CellularClassE>:
	...
   d685c:	544f 000d 5445 000d 543b 000d 53f1 000d     OT..ET..;T...S..
   d686c:	542f 000d 5423 000d 5417 000d 540f 000d     /T..#T...T...T..
   d687c:	5405 000d 53fb 000d 5791 000d               .T...S...W..

000d6888 <_ZTV11USARTSerial>:
	...
   d6890:	5489 000d 54d9 000d 54e7 000d 4849 000d     .T...T...T..IH..
   d68a0:	549d 000d 54bf 000d 54ab 000d 54d3 000d     .T...T...T...T..
   d68b0:	548b 000d 548f 000d                         .T...T..

000d68b8 <_ZTVN5spark9MeshClassE>:
	...
   d68c0:	560b 000d 5601 000d 55f7 000d 55ed 000d     .V...V...U...U..
   d68d0:	55e1 000d 55d5 000d 55c9 000d 55c1 000d     .U...U...U...U..
   d68e0:	55b7 000d 55ad 000d 5791 000d               .U...U...W..

000d68ec <_ZTVN5spark12NetworkClassE>:
	...
   d68f4:	5729 000d 5733 000d 573d 000d 5747 000d     )W..3W..=W..GW..
   d6904:	5751 000d 575d 000d 5769 000d 5775 000d     QW..]W..iW..uW..
   d6914:	577d 000d 5787 000d 5791 000d               }W...W...W..

000d6920 <__sf_fake_stdin>:
	...

000d6940 <__sf_fake_stdout>:
	...

000d6960 <__sf_fake_stderr>:
	...
   d6980:	0043                                        C.

000d6982 <link_const_variable_data_end>:
	...

000d6984 <link_constructors_location>:
   d6984:	000d42f5 	.word	0x000d42f5
   d6988:	000d46ad 	.word	0x000d46ad
   d698c:	000d46e1 	.word	0x000d46e1
   d6990:	000d4821 	.word	0x000d4821
   d6994:	000d4ae1 	.word	0x000d4ae1
   d6998:	000d4af1 	.word	0x000d4af1
   d699c:	000d4b49 	.word	0x000d4b49
   d69a0:	000d5459 	.word	0x000d5459
   d69a4:	000d56d9 	.word	0x000d56d9
   d69a8:	000d585d 	.word	0x000d585d
   d69ac:	000d5885 	.word	0x000d5885
   d69b0:	000d5909 	.word	0x000d5909
   d69b4:	000d59cd 	.word	0x000d59cd
   d69b8:	000d5a91 	.word	0x000d5a91

000d69bc <link_constructors_end>:
   d69bc:	00000000 	.word	0x00000000
