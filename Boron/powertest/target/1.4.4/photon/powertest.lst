
c:/Users/BryceBurnette/Documents/ParticleProjects/powertest/target/1.4.4/photon/powertest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000025d0  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a25f0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  20000000  080a25f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000005a8  20000068  20000068  00030068  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a265c  080a265c  0002265c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a2684  080a2684  00022684  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000b886c  00000000  00000000  00022688  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000108a8  00000000  00000000  000daef4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00013c6c  00000000  00000000  000eb79c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001f58  00000000  00000000  000ff408  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003218  00000000  00000000  00101360  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00026083  00000000  00000000  00104578  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00025c67  00000000  00000000  0012a5fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a568f  00000000  00000000  00150262  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000b964  00000000  00000000  001f58f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f002 f8f1 	bl	80a2218 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f002 f8f6 	bl	80a222e <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a25f4 	.word	0x080a25f4
 80a0050:	20000068 	.word	0x20000068
 80a0054:	20000068 	.word	0x20000068
 80a0058:	20000610 	.word	0x20000610
 80a005c:	20000610 	.word	0x20000610

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f000 fced 	bl	80a0a40 <module_user_init_hook>
 80a0066:	4b07      	ldr	r3, [pc, #28]	; (80a0084 <module_user_init+0x24>)
 80a0068:	4c07      	ldr	r4, [pc, #28]	; (80a0088 <module_user_init+0x28>)
 80a006a:	461e      	mov	r6, r3
 80a006c:	1ae4      	subs	r4, r4, r3
 80a006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0070:	2500      	movs	r5, #0
 80a0072:	42a5      	cmp	r5, r4
 80a0074:	d004      	beq.n	80a0080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f8      	b.n	80a0072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0080:	bd70      	pop	{r4, r5, r6, pc}
 80a0082:	bf00      	nop
 80a0084:	080a25b8 	.word	0x080a25b8
 80a0088:	080a25f0 	.word	0x080a25f0

080a008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a008c:	f000 b814 	b.w	80a00b8 <setup>

080a0090 <module_user_loop>:
}

void module_user_loop() {
 80a0090:	b508      	push	{r3, lr}
    loop();
 80a0092:	f000 f845 	bl	80a0120 <loop>
    _post_loop();
}
 80a0096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a009a:	f000 bc93 	b.w	80a09c4 <_post_loop>

080a009e <_Znwj>:
 80a009e:	f000 baf7 	b.w	80a0690 <malloc>

080a00a2 <_ZdlPv>:
 80a00a2:	f000 bafd 	b.w	80a06a0 <free>

080a00a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a6:	7800      	ldrb	r0, [r0, #0]
 80a00a8:	fab0 f080 	clz	r0, r0
 80a00ac:	0940      	lsrs	r0, r0, #5
 80a00ae:	4770      	bx	lr

080a00b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b0:	2301      	movs	r3, #1
 80a00b2:	7003      	strb	r3, [r0, #0]
 80a00b4:	4770      	bx	lr
	...

080a00b8 <setup>:
String body = "Your child is in the car!";

Adafruit_SHT31 sht31 = Adafruit_SHT31();

void setup() 
{
 80a00b8:	b508      	push	{r3, lr}
    sht31.begin(0x44);
 80a00ba:	2144      	movs	r1, #68	; 0x44
 80a00bc:	4805      	ldr	r0, [pc, #20]	; (80a00d4 <setup+0x1c>)
 80a00be:	f000 f88c 	bl	80a01da <_ZN14Adafruit_SHT315beginEh>
    Serial.begin(115200);
 80a00c2:	f001 f881 	bl	80a11c8 <_Z16_fetch_usbserialv>
}
 80a00c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
Adafruit_SHT31 sht31 = Adafruit_SHT31();

void setup() 
{
    sht31.begin(0x44);
    Serial.begin(115200);
 80a00ca:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80a00ce:	f001 b861 	b.w	80a1194 <_ZN9USBSerial5beginEl>
 80a00d2:	bf00      	nop
 80a00d4:	2000006c 	.word	0x2000006c

080a00d8 <_Z11sendMessageRK6String>:
    sendMessage(body);
    delay(1);
}

void sendMessage(const String& body)
{
 80a00d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a00da:	4b0f      	ldr	r3, [pc, #60]	; (80a0118 <_Z11sendMessageRK6String+0x40>)
 80a00dc:	6802      	ldr	r2, [r0, #0]
 80a00de:	781b      	ldrb	r3, [r3, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a00e0:	490e      	ldr	r1, [pc, #56]	; (80a011c <_Z11sendMessageRK6String+0x44>)
 80a00e2:	f88d 3000 	strb.w	r3, [sp]
 80a00e6:	a802      	add	r0, sp, #8
 80a00e8:	233c      	movs	r3, #60	; 0x3c
 80a00ea:	f000 fe17 	bl	80a0d1c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a00ee:	9c03      	ldr	r4, [sp, #12]
 80a00f0:	b17c      	cbz	r4, 80a0112 <_Z11sendMessageRK6String+0x3a>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a00f2:	6863      	ldr	r3, [r4, #4]
 80a00f4:	3b01      	subs	r3, #1
 80a00f6:	6063      	str	r3, [r4, #4]
 80a00f8:	b95b      	cbnz	r3, 80a0112 <_Z11sendMessageRK6String+0x3a>
        {
          _M_dispose();
 80a00fa:	6823      	ldr	r3, [r4, #0]
 80a00fc:	4620      	mov	r0, r4
 80a00fe:	689b      	ldr	r3, [r3, #8]
 80a0100:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0102:	68a3      	ldr	r3, [r4, #8]
 80a0104:	3b01      	subs	r3, #1
 80a0106:	60a3      	str	r3, [r4, #8]
 80a0108:	b91b      	cbnz	r3, 80a0112 <_Z11sendMessageRK6String+0x3a>
            _M_destroy();
 80a010a:	6823      	ldr	r3, [r4, #0]
 80a010c:	4620      	mov	r0, r4
 80a010e:	68db      	ldr	r3, [r3, #12]
 80a0110:	4798      	blx	r3
    Particle.publish("twilio_sms", body, PRIVATE);
 80a0112:	b004      	add	sp, #16
 80a0114:	bd10      	pop	{r4, pc}
 80a0116:	bf00      	nop
 80a0118:	20000088 	.word	0x20000088
 80a011c:	080a22ec 	.word	0x080a22ec

080a0120 <loop>:
    sht31.begin(0x44);
    Serial.begin(115200);
}

void loop() 
{
 80a0120:	b508      	push	{r3, lr}
    float temp = sht31.readTemperature();
 80a0122:	4807      	ldr	r0, [pc, #28]	; (80a0140 <loop+0x20>)
 80a0124:	f000 f8f0 	bl	80a0308 <_ZN14Adafruit_SHT3115readTemperatureEv>
    float pressure = analogRead(PRESSURE_PIN);
 80a0128:	200b      	movs	r0, #11
 80a012a:	f001 fa89 	bl	80a1640 <analogRead>
    sendMessage(body);
 80a012e:	4805      	ldr	r0, [pc, #20]	; (80a0144 <loop+0x24>)
 80a0130:	f7ff ffd2 	bl	80a00d8 <_Z11sendMessageRK6String>
    delay(1);
}
 80a0134:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void loop() 
{
    float temp = sht31.readTemperature();
    float pressure = analogRead(PRESSURE_PIN);
    sendMessage(body);
    delay(1);
 80a0138:	2001      	movs	r0, #1
 80a013a:	f000 bbe1 	b.w	80a0900 <delay>
 80a013e:	bf00      	nop
 80a0140:	2000006c 	.word	0x2000006c
 80a0144:	20000078 	.word	0x20000078

080a0148 <_GLOBAL__sub_I_body>:
}

void sendMessage(const String& body)
{
    Particle.publish("twilio_sms", body, PRIVATE);
 80a0148:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a014a:	4b0a      	ldr	r3, [pc, #40]	; (80a0174 <_GLOBAL__sub_I_body+0x2c>)
#include <adafruit-sht31.h>

#define DONEPIN  12
#define PRESSURE_PIN A1

String body = "Your child is in the car!";
 80a014c:	4c0a      	ldr	r4, [pc, #40]	; (80a0178 <_GLOBAL__sub_I_body+0x30>)
 80a014e:	2201      	movs	r2, #1
 80a0150:	701a      	strb	r2, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0152:	f000 f8e7 	bl	80a0324 <HAL_Pin_Map>
 80a0156:	4909      	ldr	r1, [pc, #36]	; (80a017c <_GLOBAL__sub_I_body+0x34>)
 80a0158:	4620      	mov	r0, r4
 80a015a:	f000 fb34 	bl	80a07c6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a015e:	4620      	mov	r0, r4
 80a0160:	4a07      	ldr	r2, [pc, #28]	; (80a0180 <_GLOBAL__sub_I_body+0x38>)
 80a0162:	4908      	ldr	r1, [pc, #32]	; (80a0184 <_GLOBAL__sub_I_body+0x3c>)
 80a0164:	f001 fade 	bl	80a1724 <__aeabi_atexit>
}

void sendMessage(const String& body)
{
    Particle.publish("twilio_sms", body, PRIVATE);
 80a0168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#define DONEPIN  12
#define PRESSURE_PIN A1

String body = "Your child is in the car!";

Adafruit_SHT31 sht31 = Adafruit_SHT31();
 80a016c:	4806      	ldr	r0, [pc, #24]	; (80a0188 <_GLOBAL__sub_I_body+0x40>)
 80a016e:	f000 b811 	b.w	80a0194 <_ZN14Adafruit_SHT31C1Ev>
 80a0172:	bf00      	nop
 80a0174:	20000088 	.word	0x20000088
 80a0178:	20000078 	.word	0x20000078
 80a017c:	080a22f7 	.word	0x080a22f7
 80a0180:	20000068 	.word	0x20000068
 80a0184:	080a0739 	.word	0x080a0739
 80a0188:	2000006c 	.word	0x2000006c

080a018c <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a018c:	6803      	ldr	r3, [r0, #0]
 80a018e:	b2c9      	uxtb	r1, r1
 80a0190:	689b      	ldr	r3, [r3, #8]
 80a0192:	4718      	bx	r3

080a0194 <_ZN14Adafruit_SHT31C1Ev>:
#include "application.h"
#include "math.h"
#include "adafruit-sht31.h"

Adafruit_SHT31::Adafruit_SHT31() {
}
 80a0194:	4770      	bx	lr

080a0196 <_ZN14Adafruit_SHT3112writeCommandEt>:
  humidity = shum;
  
  return true;
}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
 80a0196:	b538      	push	{r3, r4, r5, lr}
 80a0198:	4605      	mov	r5, r0
 80a019a:	460c      	mov	r4, r1
  Wire.beginTransmission(_i2caddr);
 80a019c:	f001 faa2 	bl	80a16e4 <_Z19__fetch_global_Wirev>
 80a01a0:	7829      	ldrb	r1, [r5, #0]
 80a01a2:	f001 f959 	bl	80a1458 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(cmd >> 8);
 80a01a6:	f001 fa9d 	bl	80a16e4 <_Z19__fetch_global_Wirev>
 80a01aa:	0a21      	lsrs	r1, r4, #8
 80a01ac:	f7ff ffee 	bl	80a018c <_ZN7TwoWire5writeEi>
  Wire.write(cmd & 0xFF);
 80a01b0:	f001 fa98 	bl	80a16e4 <_Z19__fetch_global_Wirev>
 80a01b4:	b2e1      	uxtb	r1, r4
 80a01b6:	f7ff ffe9 	bl	80a018c <_ZN7TwoWire5writeEi>
  Wire.endTransmission();  
 80a01ba:	f001 fa93 	bl	80a16e4 <_Z19__fetch_global_Wirev>
}
 80a01be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
  Wire.beginTransmission(_i2caddr);
  Wire.write(cmd >> 8);
  Wire.write(cmd & 0xFF);
  Wire.endTransmission();  
 80a01c2:	f001 b951 	b.w	80a1468 <_ZN7TwoWire15endTransmissionEv>

080a01c6 <_ZN14Adafruit_SHT315resetEv>:
  stat |= Wire.read();
  //Serial.println(stat, HEX);
  return stat;
}

void Adafruit_SHT31::reset(void) {
 80a01c6:	b508      	push	{r3, lr}
  writeCommand(SHT31_SOFTRESET);
 80a01c8:	f243 01a2 	movw	r1, #12450	; 0x30a2
 80a01cc:	f7ff ffe3 	bl	80a0196 <_ZN14Adafruit_SHT3112writeCommandEt>
  delay(10);
}
 80a01d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return stat;
}

void Adafruit_SHT31::reset(void) {
  writeCommand(SHT31_SOFTRESET);
  delay(10);
 80a01d4:	200a      	movs	r0, #10
 80a01d6:	f000 bb93 	b.w	80a0900 <delay>

080a01da <_ZN14Adafruit_SHT315beginEh>:

Adafruit_SHT31::Adafruit_SHT31() {
}


boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
 80a01da:	b538      	push	{r3, r4, r5, lr}
 80a01dc:	460d      	mov	r5, r1
 80a01de:	4604      	mov	r4, r0
  Wire.begin();
 80a01e0:	f001 fa80 	bl	80a16e4 <_Z19__fetch_global_Wirev>
 80a01e4:	f001 f926 	bl	80a1434 <_ZN7TwoWire5beginEv>
  _i2caddr = i2caddr;
  reset();
 80a01e8:	4620      	mov	r0, r4
}


boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
  Wire.begin();
  _i2caddr = i2caddr;
 80a01ea:	7025      	strb	r5, [r4, #0]
  reset();
 80a01ec:	f7ff ffeb 	bl	80a01c6 <_ZN14Adafruit_SHT315resetEv>
  //return (readStatus() == 0x40);
  return true;
}
 80a01f0:	2001      	movs	r0, #1
 80a01f2:	bd38      	pop	{r3, r4, r5, pc}

080a01f4 <_ZN14Adafruit_SHT314crc8EPKhi>:
  Wire.write(cmd & 0xFF);
  Wire.endTransmission();  
}

uint8_t Adafruit_SHT31::crc8(const uint8_t *data, int len)
{
 80a01f4:	440a      	add	r2, r1
 * Polynomial 0x31 (x8 + x5 +x4 +1)
 * Final XOR 0x00
 */

  const uint8_t POLYNOMIAL(0x31);
  uint8_t crc(0xFF);
 80a01f6:	20ff      	movs	r0, #255	; 0xff
  
  for ( int j = len; j; --j ) {
 80a01f8:	4291      	cmp	r1, r2
 80a01fa:	d00e      	beq.n	80a021a <_ZN14Adafruit_SHT314crc8EPKhi+0x26>
      crc ^= *data++;
 80a01fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a0200:	4058      	eors	r0, r3
 80a0202:	2308      	movs	r3, #8

      for ( int i = 8; i; --i ) {
	crc = ( crc & 0x80 )
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
 80a0204:	f010 0f80 	tst.w	r0, #128	; 0x80
 80a0208:	ea4f 0040 	mov.w	r0, r0, lsl #1
 80a020c:	bf18      	it	ne
 80a020e:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
      crc ^= *data++;

      for ( int i = 8; i; --i ) {
 80a0212:	3b01      	subs	r3, #1
	crc = ( crc & 0x80 )
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
 80a0214:	b2c0      	uxtb	r0, r0
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
      crc ^= *data++;

      for ( int i = 8; i; --i ) {
 80a0216:	d1f5      	bne.n	80a0204 <_ZN14Adafruit_SHT314crc8EPKhi+0x10>
 80a0218:	e7ee      	b.n	80a01f8 <_ZN14Adafruit_SHT314crc8EPKhi+0x4>
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
      }
  }
  return crc;
}
 80a021a:	4770      	bx	lr
 80a021c:	0000      	movs	r0, r0
	...

080a0220 <_ZN14Adafruit_SHT3111readTempHumEv>:

  return humidity;
}


boolean Adafruit_SHT31::readTempHum(void) {
 80a0220:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a0222:	4604      	mov	r4, r0
  uint8_t readbuffer[6];

  writeCommand(SHT31_MEAS_HIGHREP);
 80a0224:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 80a0228:	f7ff ffb5 	bl	80a0196 <_ZN14Adafruit_SHT3112writeCommandEt>
  
  delay(500);
 80a022c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a0230:	f000 fb66 	bl	80a0900 <delay>
  Wire.requestFrom(_i2caddr, (uint8_t)6);
 80a0234:	f001 fa56 	bl	80a16e4 <_Z19__fetch_global_Wirev>
 80a0238:	2206      	movs	r2, #6
 80a023a:	7821      	ldrb	r1, [r4, #0]
 80a023c:	f001 f909 	bl	80a1452 <_ZN7TwoWire11requestFromEhh>
  if (Wire.available() != 6) 
 80a0240:	f001 fa50 	bl	80a16e4 <_Z19__fetch_global_Wirev>
 80a0244:	6803      	ldr	r3, [r0, #0]
 80a0246:	691b      	ldr	r3, [r3, #16]
 80a0248:	4798      	blx	r3
 80a024a:	2806      	cmp	r0, #6
 80a024c:	d14a      	bne.n	80a02e4 <_ZN14Adafruit_SHT3111readTempHumEv+0xc4>
 80a024e:	2500      	movs	r5, #0
    return false;
  for (uint8_t i=0; i<6; i++) {
    readbuffer[i] = Wire.read();
 80a0250:	f001 fa48 	bl	80a16e4 <_Z19__fetch_global_Wirev>
 80a0254:	6803      	ldr	r3, [r0, #0]
 80a0256:	695b      	ldr	r3, [r3, #20]
 80a0258:	4798      	blx	r3
 80a025a:	f80d 0005 	strb.w	r0, [sp, r5]
 80a025e:	3501      	adds	r5, #1
  
  delay(500);
  Wire.requestFrom(_i2caddr, (uint8_t)6);
  if (Wire.available() != 6) 
    return false;
  for (uint8_t i=0; i<6; i++) {
 80a0260:	2d06      	cmp	r5, #6
 80a0262:	d1f5      	bne.n	80a0250 <_ZN14Adafruit_SHT3111readTempHumEv+0x30>
  uint16_t ST, SRH;
  ST = readbuffer[0];
  ST <<= 8;
  ST |= readbuffer[1];

  if (readbuffer[2] != crc8(readbuffer, 2)) return false;
 80a0264:	2202      	movs	r2, #2
 80a0266:	4669      	mov	r1, sp
 80a0268:	4620      	mov	r0, r4
 80a026a:	f7ff ffc3 	bl	80a01f4 <_ZN14Adafruit_SHT314crc8EPKhi>
 80a026e:	f89d 5002 	ldrb.w	r5, [sp, #2]
 80a0272:	4285      	cmp	r5, r0
 80a0274:	d136      	bne.n	80a02e4 <_ZN14Adafruit_SHT3111readTempHumEv+0xc4>

  SRH = readbuffer[3];
  SRH <<= 8;
  SRH |= readbuffer[4];

  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;
 80a0276:	2202      	movs	r2, #2
 80a0278:	f10d 0103 	add.w	r1, sp, #3
 80a027c:	4620      	mov	r0, r4
 80a027e:	f7ff ffb9 	bl	80a01f4 <_ZN14Adafruit_SHT314crc8EPKhi>
 80a0282:	f89d 5005 	ldrb.w	r5, [sp, #5]
 80a0286:	4285      	cmp	r5, r0
 80a0288:	d12c      	bne.n	80a02e4 <_ZN14Adafruit_SHT3111readTempHumEv+0xc4>

 // Serial.print("ST = "); Serial.println(ST);
  double stemp = ST;
 80a028a:	f8bd 0000 	ldrh.w	r0, [sp]
  ST <<= 8;
  ST |= readbuffer[1];

  if (readbuffer[2] != crc8(readbuffer, 2)) return false;

  SRH = readbuffer[3];
 80a028e:	f89d 6003 	ldrb.w	r6, [sp, #3]
  SRH |= readbuffer[4];

  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;

 // Serial.print("ST = "); Serial.println(ST);
  double stemp = ST;
 80a0292:	ba40      	rev16	r0, r0
 80a0294:	b280      	uxth	r0, r0
 80a0296:	f001 fcd9 	bl	80a1c4c <__aeabi_ui2d>
  stemp *= 175;
 80a029a:	a315      	add	r3, pc, #84	; (adr r3, 80a02f0 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
 80a029c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a02a0:	f001 fd4a 	bl	80a1d38 <__aeabi_dmul>
  stemp /= 0xffff;
 80a02a4:	a314      	add	r3, pc, #80	; (adr r3, 80a02f8 <_ZN14Adafruit_SHT3111readTempHumEv+0xd8>)
 80a02a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a02aa:	f001 fe6f 	bl	80a1f8c <__aeabi_ddiv>
  stemp = -45 + stemp;
  temp = stemp;
 80a02ae:	2200      	movs	r2, #0
 80a02b0:	4b13      	ldr	r3, [pc, #76]	; (80a0300 <_ZN14Adafruit_SHT3111readTempHumEv+0xe0>)
 80a02b2:	f001 fb8d 	bl	80a19d0 <__aeabi_dsub>
 80a02b6:	f001 ff51 	bl	80a215c <__aeabi_d2f>

  if (readbuffer[2] != crc8(readbuffer, 2)) return false;

  SRH = readbuffer[3];
  SRH <<= 8;
  SRH |= readbuffer[4];
 80a02ba:	f89d 5004 	ldrb.w	r5, [sp, #4]
 // Serial.print("ST = "); Serial.println(ST);
  double stemp = ST;
  stemp *= 175;
  stemp /= 0xffff;
  stemp = -45 + stemp;
  temp = stemp;
 80a02be:	60a0      	str	r0, [r4, #8]
  
//  Serial.print("SRH = "); Serial.println(SRH);
  double shum = SRH;
 80a02c0:	ea45 2006 	orr.w	r0, r5, r6, lsl #8
 80a02c4:	f001 fcc2 	bl	80a1c4c <__aeabi_ui2d>
  shum *= 100;
 80a02c8:	2200      	movs	r2, #0
 80a02ca:	4b0e      	ldr	r3, [pc, #56]	; (80a0304 <_ZN14Adafruit_SHT3111readTempHumEv+0xe4>)
 80a02cc:	f001 fd34 	bl	80a1d38 <__aeabi_dmul>
  shum /= 0xFFFF;
  
  humidity = shum;
 80a02d0:	a309      	add	r3, pc, #36	; (adr r3, 80a02f8 <_ZN14Adafruit_SHT3111readTempHumEv+0xd8>)
 80a02d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a02d6:	f001 fe59 	bl	80a1f8c <__aeabi_ddiv>
 80a02da:	f001 ff3f 	bl	80a215c <__aeabi_d2f>
 80a02de:	6060      	str	r0, [r4, #4]
  
  return true;
 80a02e0:	2001      	movs	r0, #1
 80a02e2:	e000      	b.n	80a02e6 <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
  writeCommand(SHT31_MEAS_HIGHREP);
  
  delay(500);
  Wire.requestFrom(_i2caddr, (uint8_t)6);
  if (Wire.available() != 6) 
    return false;
 80a02e4:	2000      	movs	r0, #0
  shum /= 0xFFFF;
  
  humidity = shum;
  
  return true;
}
 80a02e6:	b002      	add	sp, #8
 80a02e8:	bd70      	pop	{r4, r5, r6, pc}
 80a02ea:	bf00      	nop
 80a02ec:	f3af 8000 	nop.w
 80a02f0:	00000000 	.word	0x00000000
 80a02f4:	4065e000 	.word	0x4065e000
 80a02f8:	00000000 	.word	0x00000000
 80a02fc:	40efffe0 	.word	0x40efffe0
 80a0300:	40468000 	.word	0x40468000
 80a0304:	40590000 	.word	0x40590000

080a0308 <_ZN14Adafruit_SHT3115readTemperatureEv>:
  else
    writeCommand(SHT31_HEATERDIS);
}


float Adafruit_SHT31::readTemperature(void) {
 80a0308:	b510      	push	{r4, lr}
 80a030a:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
 80a030c:	f7ff ff88 	bl	80a0220 <_ZN14Adafruit_SHT3111readTempHumEv>
 80a0310:	b108      	cbz	r0, 80a0316 <_ZN14Adafruit_SHT3115readTemperatureEv+0xe>

  return temp;
 80a0312:	68a0      	ldr	r0, [r4, #8]
 80a0314:	bd10      	pop	{r4, pc}
    writeCommand(SHT31_HEATERDIS);
}


float Adafruit_SHT31::readTemperature(void) {
  if (! readTempHum()) return NAN;
 80a0316:	4801      	ldr	r0, [pc, #4]	; (80a031c <_ZN14Adafruit_SHT3115readTemperatureEv+0x14>)

  return temp;
}
 80a0318:	bd10      	pop	{r4, pc}
 80a031a:	bf00      	nop
 80a031c:	7fc00000 	.word	0x7fc00000

080a0320 <_GLOBAL__sub_I__ZN14Adafruit_SHT31C2Ev>:
 80a0320:	f000 b800 	b.w	80a0324 <HAL_Pin_Map>

080a0324 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a0324:	b508      	push	{r3, lr}
 80a0326:	4b02      	ldr	r3, [pc, #8]	; (80a0330 <HAL_Pin_Map+0xc>)
 80a0328:	681b      	ldr	r3, [r3, #0]
 80a032a:	681b      	ldr	r3, [r3, #0]
 80a032c:	9301      	str	r3, [sp, #4]
 80a032e:	bd08      	pop	{r3, pc}
 80a0330:	080601b0 	.word	0x080601b0

080a0334 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a0334:	b508      	push	{r3, lr}
 80a0336:	4b02      	ldr	r3, [pc, #8]	; (80a0340 <HAL_Validate_Pin_Function+0xc>)
 80a0338:	681b      	ldr	r3, [r3, #0]
 80a033a:	685b      	ldr	r3, [r3, #4]
 80a033c:	9301      	str	r3, [sp, #4]
 80a033e:	bd08      	pop	{r3, pc}
 80a0340:	080601b0 	.word	0x080601b0

080a0344 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 80a0344:	b508      	push	{r3, lr}
 80a0346:	4b02      	ldr	r3, [pc, #8]	; (80a0350 <HAL_ADC_Read+0xc>)
 80a0348:	681b      	ldr	r3, [r3, #0]
 80a034a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a034c:	9301      	str	r3, [sp, #4]
 80a034e:	bd08      	pop	{r3, pc}
 80a0350:	080601b0 	.word	0x080601b0

080a0354 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a0354:	b508      	push	{r3, lr}
 80a0356:	4b02      	ldr	r3, [pc, #8]	; (80a0360 <HAL_SPI_Init+0xc>)
 80a0358:	681b      	ldr	r3, [r3, #0]
 80a035a:	69db      	ldr	r3, [r3, #28]
 80a035c:	9301      	str	r3, [sp, #4]
 80a035e:	bd08      	pop	{r3, pc}
 80a0360:	080601b4 	.word	0x080601b4

080a0364 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a0364:	b508      	push	{r3, lr}
 80a0366:	4b02      	ldr	r3, [pc, #8]	; (80a0370 <HAL_SPI_Is_Enabled+0xc>)
 80a0368:	681b      	ldr	r3, [r3, #0]
 80a036a:	6a1b      	ldr	r3, [r3, #32]
 80a036c:	9301      	str	r3, [sp, #4]
 80a036e:	bd08      	pop	{r3, pc}
 80a0370:	080601b4 	.word	0x080601b4

080a0374 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0374:	b508      	push	{r3, lr}
 80a0376:	4b02      	ldr	r3, [pc, #8]	; (80a0380 <HAL_RNG_GetRandomNumber+0xc>)
 80a0378:	681b      	ldr	r3, [r3, #0]
 80a037a:	685b      	ldr	r3, [r3, #4]
 80a037c:	9301      	str	r3, [sp, #4]
 80a037e:	bd08      	pop	{r3, pc}
 80a0380:	0806019c 	.word	0x0806019c

080a0384 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0384:	b508      	push	{r3, lr}
 80a0386:	4b02      	ldr	r3, [pc, #8]	; (80a0390 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0388:	681b      	ldr	r3, [r3, #0]
 80a038a:	695b      	ldr	r3, [r3, #20]
 80a038c:	9301      	str	r3, [sp, #4]
 80a038e:	bd08      	pop	{r3, pc}
 80a0390:	0806019c 	.word	0x0806019c

080a0394 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a0394:	b508      	push	{r3, lr}
 80a0396:	4b02      	ldr	r3, [pc, #8]	; (80a03a0 <os_mutex_create+0xc>)
 80a0398:	681b      	ldr	r3, [r3, #0]
 80a039a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a039c:	9301      	str	r3, [sp, #4]
 80a039e:	bd08      	pop	{r3, pc}
 80a03a0:	080601d0 	.word	0x080601d0

080a03a4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a03a4:	b508      	push	{r3, lr}
 80a03a6:	4b02      	ldr	r3, [pc, #8]	; (80a03b0 <HAL_USART_Init+0xc>)
 80a03a8:	681b      	ldr	r3, [r3, #0]
 80a03aa:	699b      	ldr	r3, [r3, #24]
 80a03ac:	9301      	str	r3, [sp, #4]
 80a03ae:	bd08      	pop	{r3, pc}
 80a03b0:	080601c4 	.word	0x080601c4

080a03b4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a03b4:	b508      	push	{r3, lr}
 80a03b6:	4b02      	ldr	r3, [pc, #8]	; (80a03c0 <HAL_USART_Write_Data+0xc>)
 80a03b8:	681b      	ldr	r3, [r3, #0]
 80a03ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a03bc:	9301      	str	r3, [sp, #4]
 80a03be:	bd08      	pop	{r3, pc}
 80a03c0:	080601c4 	.word	0x080601c4

080a03c4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a03c4:	b508      	push	{r3, lr}
 80a03c6:	4b02      	ldr	r3, [pc, #8]	; (80a03d0 <HAL_USART_Available_Data+0xc>)
 80a03c8:	681b      	ldr	r3, [r3, #0]
 80a03ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a03cc:	9301      	str	r3, [sp, #4]
 80a03ce:	bd08      	pop	{r3, pc}
 80a03d0:	080601c4 	.word	0x080601c4

080a03d4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a03d4:	b508      	push	{r3, lr}
 80a03d6:	4b02      	ldr	r3, [pc, #8]	; (80a03e0 <HAL_USART_Read_Data+0xc>)
 80a03d8:	681b      	ldr	r3, [r3, #0]
 80a03da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a03dc:	9301      	str	r3, [sp, #4]
 80a03de:	bd08      	pop	{r3, pc}
 80a03e0:	080601c4 	.word	0x080601c4

080a03e4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a03e4:	b508      	push	{r3, lr}
 80a03e6:	4b02      	ldr	r3, [pc, #8]	; (80a03f0 <HAL_USART_Peek_Data+0xc>)
 80a03e8:	681b      	ldr	r3, [r3, #0]
 80a03ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a03ec:	9301      	str	r3, [sp, #4]
 80a03ee:	bd08      	pop	{r3, pc}
 80a03f0:	080601c4 	.word	0x080601c4

080a03f4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a03f4:	b508      	push	{r3, lr}
 80a03f6:	4b02      	ldr	r3, [pc, #8]	; (80a0400 <HAL_USART_Flush_Data+0xc>)
 80a03f8:	681b      	ldr	r3, [r3, #0]
 80a03fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a03fc:	9301      	str	r3, [sp, #4]
 80a03fe:	bd08      	pop	{r3, pc}
 80a0400:	080601c4 	.word	0x080601c4

080a0404 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a0404:	b508      	push	{r3, lr}
 80a0406:	4b02      	ldr	r3, [pc, #8]	; (80a0410 <HAL_USART_Is_Enabled+0xc>)
 80a0408:	681b      	ldr	r3, [r3, #0]
 80a040a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a040c:	9301      	str	r3, [sp, #4]
 80a040e:	bd08      	pop	{r3, pc}
 80a0410:	080601c4 	.word	0x080601c4

080a0414 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a0414:	b508      	push	{r3, lr}
 80a0416:	4b02      	ldr	r3, [pc, #8]	; (80a0420 <HAL_USART_Available_Data_For_Write+0xc>)
 80a0418:	681b      	ldr	r3, [r3, #0]
 80a041a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a041c:	9301      	str	r3, [sp, #4]
 80a041e:	bd08      	pop	{r3, pc}
 80a0420:	080601c4 	.word	0x080601c4

080a0424 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a0424:	b508      	push	{r3, lr}
 80a0426:	4b02      	ldr	r3, [pc, #8]	; (80a0430 <HAL_I2C_Begin+0xc>)
 80a0428:	681b      	ldr	r3, [r3, #0]
 80a042a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a042c:	9301      	str	r3, [sp, #4]
 80a042e:	bd08      	pop	{r3, pc}
 80a0430:	080601ac 	.word	0x080601ac

080a0434 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a0434:	b508      	push	{r3, lr}
 80a0436:	4b02      	ldr	r3, [pc, #8]	; (80a0440 <HAL_I2C_Request_Data+0xc>)
 80a0438:	681b      	ldr	r3, [r3, #0]
 80a043a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a043c:	9301      	str	r3, [sp, #4]
 80a043e:	bd08      	pop	{r3, pc}
 80a0440:	080601ac 	.word	0x080601ac

080a0444 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a0444:	b508      	push	{r3, lr}
 80a0446:	4b02      	ldr	r3, [pc, #8]	; (80a0450 <HAL_I2C_Begin_Transmission+0xc>)
 80a0448:	681b      	ldr	r3, [r3, #0]
 80a044a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a044c:	9301      	str	r3, [sp, #4]
 80a044e:	bd08      	pop	{r3, pc}
 80a0450:	080601ac 	.word	0x080601ac

080a0454 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a0454:	b508      	push	{r3, lr}
 80a0456:	4b02      	ldr	r3, [pc, #8]	; (80a0460 <HAL_I2C_End_Transmission+0xc>)
 80a0458:	681b      	ldr	r3, [r3, #0]
 80a045a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a045c:	9301      	str	r3, [sp, #4]
 80a045e:	bd08      	pop	{r3, pc}
 80a0460:	080601ac 	.word	0x080601ac

080a0464 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a0464:	b508      	push	{r3, lr}
 80a0466:	4b02      	ldr	r3, [pc, #8]	; (80a0470 <HAL_I2C_Write_Data+0xc>)
 80a0468:	681b      	ldr	r3, [r3, #0]
 80a046a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a046c:	9301      	str	r3, [sp, #4]
 80a046e:	bd08      	pop	{r3, pc}
 80a0470:	080601ac 	.word	0x080601ac

080a0474 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a0474:	b508      	push	{r3, lr}
 80a0476:	4b02      	ldr	r3, [pc, #8]	; (80a0480 <HAL_I2C_Available_Data+0xc>)
 80a0478:	681b      	ldr	r3, [r3, #0]
 80a047a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a047c:	9301      	str	r3, [sp, #4]
 80a047e:	bd08      	pop	{r3, pc}
 80a0480:	080601ac 	.word	0x080601ac

080a0484 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a0484:	b508      	push	{r3, lr}
 80a0486:	4b02      	ldr	r3, [pc, #8]	; (80a0490 <HAL_I2C_Read_Data+0xc>)
 80a0488:	681b      	ldr	r3, [r3, #0]
 80a048a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a048c:	9301      	str	r3, [sp, #4]
 80a048e:	bd08      	pop	{r3, pc}
 80a0490:	080601ac 	.word	0x080601ac

080a0494 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a0494:	b508      	push	{r3, lr}
 80a0496:	4b02      	ldr	r3, [pc, #8]	; (80a04a0 <HAL_I2C_Peek_Data+0xc>)
 80a0498:	681b      	ldr	r3, [r3, #0]
 80a049a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a049c:	9301      	str	r3, [sp, #4]
 80a049e:	bd08      	pop	{r3, pc}
 80a04a0:	080601ac 	.word	0x080601ac

080a04a4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a04a4:	b508      	push	{r3, lr}
 80a04a6:	4b02      	ldr	r3, [pc, #8]	; (80a04b0 <HAL_I2C_Flush_Data+0xc>)
 80a04a8:	681b      	ldr	r3, [r3, #0]
 80a04aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a04ac:	9301      	str	r3, [sp, #4]
 80a04ae:	bd08      	pop	{r3, pc}
 80a04b0:	080601ac 	.word	0x080601ac

080a04b4 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a04b4:	b508      	push	{r3, lr}
 80a04b6:	4b02      	ldr	r3, [pc, #8]	; (80a04c0 <HAL_I2C_Is_Enabled+0xc>)
 80a04b8:	681b      	ldr	r3, [r3, #0]
 80a04ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a04bc:	9301      	str	r3, [sp, #4]
 80a04be:	bd08      	pop	{r3, pc}
 80a04c0:	080601ac 	.word	0x080601ac

080a04c4 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a04c4:	b508      	push	{r3, lr}
 80a04c6:	4b03      	ldr	r3, [pc, #12]	; (80a04d4 <HAL_I2C_Init+0x10>)
 80a04c8:	681b      	ldr	r3, [r3, #0]
 80a04ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a04ce:	9301      	str	r3, [sp, #4]
 80a04d0:	bd08      	pop	{r3, pc}
 80a04d2:	0000      	.short	0x0000
 80a04d4:	080601ac 	.word	0x080601ac

080a04d8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a04d8:	b508      	push	{r3, lr}
 80a04da:	4b02      	ldr	r3, [pc, #8]	; (80a04e4 <HAL_USB_USART_Init+0xc>)
 80a04dc:	681b      	ldr	r3, [r3, #0]
 80a04de:	681b      	ldr	r3, [r3, #0]
 80a04e0:	9301      	str	r3, [sp, #4]
 80a04e2:	bd08      	pop	{r3, pc}
 80a04e4:	080601d8 	.word	0x080601d8

080a04e8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a04e8:	b508      	push	{r3, lr}
 80a04ea:	4b02      	ldr	r3, [pc, #8]	; (80a04f4 <HAL_USB_USART_Begin+0xc>)
 80a04ec:	681b      	ldr	r3, [r3, #0]
 80a04ee:	685b      	ldr	r3, [r3, #4]
 80a04f0:	9301      	str	r3, [sp, #4]
 80a04f2:	bd08      	pop	{r3, pc}
 80a04f4:	080601d8 	.word	0x080601d8

080a04f8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a04f8:	b508      	push	{r3, lr}
 80a04fa:	4b02      	ldr	r3, [pc, #8]	; (80a0504 <HAL_USB_USART_Available_Data+0xc>)
 80a04fc:	681b      	ldr	r3, [r3, #0]
 80a04fe:	691b      	ldr	r3, [r3, #16]
 80a0500:	9301      	str	r3, [sp, #4]
 80a0502:	bd08      	pop	{r3, pc}
 80a0504:	080601d8 	.word	0x080601d8

080a0508 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0508:	b508      	push	{r3, lr}
 80a050a:	4b02      	ldr	r3, [pc, #8]	; (80a0514 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a050c:	681b      	ldr	r3, [r3, #0]
 80a050e:	695b      	ldr	r3, [r3, #20]
 80a0510:	9301      	str	r3, [sp, #4]
 80a0512:	bd08      	pop	{r3, pc}
 80a0514:	080601d8 	.word	0x080601d8

080a0518 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0518:	b508      	push	{r3, lr}
 80a051a:	4b02      	ldr	r3, [pc, #8]	; (80a0524 <HAL_USB_USART_Receive_Data+0xc>)
 80a051c:	681b      	ldr	r3, [r3, #0]
 80a051e:	699b      	ldr	r3, [r3, #24]
 80a0520:	9301      	str	r3, [sp, #4]
 80a0522:	bd08      	pop	{r3, pc}
 80a0524:	080601d8 	.word	0x080601d8

080a0528 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0528:	b508      	push	{r3, lr}
 80a052a:	4b02      	ldr	r3, [pc, #8]	; (80a0534 <HAL_USB_USART_Send_Data+0xc>)
 80a052c:	681b      	ldr	r3, [r3, #0]
 80a052e:	69db      	ldr	r3, [r3, #28]
 80a0530:	9301      	str	r3, [sp, #4]
 80a0532:	bd08      	pop	{r3, pc}
 80a0534:	080601d8 	.word	0x080601d8

080a0538 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0538:	b508      	push	{r3, lr}
 80a053a:	4b02      	ldr	r3, [pc, #8]	; (80a0544 <HAL_USB_USART_Flush_Data+0xc>)
 80a053c:	681b      	ldr	r3, [r3, #0]
 80a053e:	6a1b      	ldr	r3, [r3, #32]
 80a0540:	9301      	str	r3, [sp, #4]
 80a0542:	bd08      	pop	{r3, pc}
 80a0544:	080601d8 	.word	0x080601d8

080a0548 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0548:	b508      	push	{r3, lr}
 80a054a:	4b02      	ldr	r3, [pc, #8]	; (80a0554 <inet_gethostbyname+0xc>)
 80a054c:	681b      	ldr	r3, [r3, #0]
 80a054e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0550:	9301      	str	r3, [sp, #4]
 80a0552:	bd08      	pop	{r3, pc}
 80a0554:	080601c0 	.word	0x080601c0

080a0558 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0558:	b508      	push	{r3, lr}
 80a055a:	4b02      	ldr	r3, [pc, #8]	; (80a0564 <set_system_mode+0xc>)
 80a055c:	681b      	ldr	r3, [r3, #0]
 80a055e:	685b      	ldr	r3, [r3, #4]
 80a0560:	9301      	str	r3, [sp, #4]
 80a0562:	bd08      	pop	{r3, pc}
 80a0564:	080601a4 	.word	0x080601a4

080a0568 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0568:	b508      	push	{r3, lr}
 80a056a:	4b02      	ldr	r3, [pc, #8]	; (80a0574 <system_delay_ms+0xc>)
 80a056c:	681b      	ldr	r3, [r3, #0]
 80a056e:	695b      	ldr	r3, [r3, #20]
 80a0570:	9301      	str	r3, [sp, #4]
 80a0572:	bd08      	pop	{r3, pc}
 80a0574:	080601a4 	.word	0x080601a4

080a0578 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a0578:	b508      	push	{r3, lr}
 80a057a:	4b02      	ldr	r3, [pc, #8]	; (80a0584 <application_thread_current+0xc>)
 80a057c:	681b      	ldr	r3, [r3, #0]
 80a057e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0580:	9301      	str	r3, [sp, #4]
 80a0582:	bd08      	pop	{r3, pc}
 80a0584:	080601a4 	.word	0x080601a4

080a0588 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a0588:	b508      	push	{r3, lr}
 80a058a:	4b02      	ldr	r3, [pc, #8]	; (80a0594 <application_thread_invoke+0xc>)
 80a058c:	681b      	ldr	r3, [r3, #0]
 80a058e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0590:	9301      	str	r3, [sp, #4]
 80a0592:	bd08      	pop	{r3, pc}
 80a0594:	080601a4 	.word	0x080601a4

080a0598 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0598:	b508      	push	{r3, lr}
 80a059a:	4b03      	ldr	r3, [pc, #12]	; (80a05a8 <system_ctrl_set_app_request_handler+0x10>)
 80a059c:	681b      	ldr	r3, [r3, #0]
 80a059e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a05a2:	9301      	str	r3, [sp, #4]
 80a05a4:	bd08      	pop	{r3, pc}
 80a05a6:	0000      	.short	0x0000
 80a05a8:	080601a4 	.word	0x080601a4

080a05ac <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a05ac:	b508      	push	{r3, lr}
 80a05ae:	4b03      	ldr	r3, [pc, #12]	; (80a05bc <system_ctrl_set_result+0x10>)
 80a05b0:	681b      	ldr	r3, [r3, #0]
 80a05b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a05b6:	9301      	str	r3, [sp, #4]
 80a05b8:	bd08      	pop	{r3, pc}
 80a05ba:	0000      	.short	0x0000
 80a05bc:	080601a4 	.word	0x080601a4

080a05c0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a05c0:	b508      	push	{r3, lr}
 80a05c2:	4b02      	ldr	r3, [pc, #8]	; (80a05cc <network_connect+0xc>)
 80a05c4:	681b      	ldr	r3, [r3, #0]
 80a05c6:	685b      	ldr	r3, [r3, #4]
 80a05c8:	9301      	str	r3, [sp, #4]
 80a05ca:	bd08      	pop	{r3, pc}
 80a05cc:	080601c8 	.word	0x080601c8

080a05d0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a05d0:	b508      	push	{r3, lr}
 80a05d2:	4b02      	ldr	r3, [pc, #8]	; (80a05dc <network_connecting+0xc>)
 80a05d4:	681b      	ldr	r3, [r3, #0]
 80a05d6:	689b      	ldr	r3, [r3, #8]
 80a05d8:	9301      	str	r3, [sp, #4]
 80a05da:	bd08      	pop	{r3, pc}
 80a05dc:	080601c8 	.word	0x080601c8

080a05e0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a05e0:	b508      	push	{r3, lr}
 80a05e2:	4b02      	ldr	r3, [pc, #8]	; (80a05ec <network_disconnect+0xc>)
 80a05e4:	681b      	ldr	r3, [r3, #0]
 80a05e6:	68db      	ldr	r3, [r3, #12]
 80a05e8:	9301      	str	r3, [sp, #4]
 80a05ea:	bd08      	pop	{r3, pc}
 80a05ec:	080601c8 	.word	0x080601c8

080a05f0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a05f0:	b508      	push	{r3, lr}
 80a05f2:	4b02      	ldr	r3, [pc, #8]	; (80a05fc <network_ready+0xc>)
 80a05f4:	681b      	ldr	r3, [r3, #0]
 80a05f6:	691b      	ldr	r3, [r3, #16]
 80a05f8:	9301      	str	r3, [sp, #4]
 80a05fa:	bd08      	pop	{r3, pc}
 80a05fc:	080601c8 	.word	0x080601c8

080a0600 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0600:	b508      	push	{r3, lr}
 80a0602:	4b02      	ldr	r3, [pc, #8]	; (80a060c <network_on+0xc>)
 80a0604:	681b      	ldr	r3, [r3, #0]
 80a0606:	695b      	ldr	r3, [r3, #20]
 80a0608:	9301      	str	r3, [sp, #4]
 80a060a:	bd08      	pop	{r3, pc}
 80a060c:	080601c8 	.word	0x080601c8

080a0610 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0610:	b508      	push	{r3, lr}
 80a0612:	4b02      	ldr	r3, [pc, #8]	; (80a061c <network_off+0xc>)
 80a0614:	681b      	ldr	r3, [r3, #0]
 80a0616:	699b      	ldr	r3, [r3, #24]
 80a0618:	9301      	str	r3, [sp, #4]
 80a061a:	bd08      	pop	{r3, pc}
 80a061c:	080601c8 	.word	0x080601c8

080a0620 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0620:	b508      	push	{r3, lr}
 80a0622:	4b02      	ldr	r3, [pc, #8]	; (80a062c <network_listen+0xc>)
 80a0624:	681b      	ldr	r3, [r3, #0]
 80a0626:	69db      	ldr	r3, [r3, #28]
 80a0628:	9301      	str	r3, [sp, #4]
 80a062a:	bd08      	pop	{r3, pc}
 80a062c:	080601c8 	.word	0x080601c8

080a0630 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0630:	b508      	push	{r3, lr}
 80a0632:	4b02      	ldr	r3, [pc, #8]	; (80a063c <network_listening+0xc>)
 80a0634:	681b      	ldr	r3, [r3, #0]
 80a0636:	6a1b      	ldr	r3, [r3, #32]
 80a0638:	9301      	str	r3, [sp, #4]
 80a063a:	bd08      	pop	{r3, pc}
 80a063c:	080601c8 	.word	0x080601c8

080a0640 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0640:	b508      	push	{r3, lr}
 80a0642:	4b02      	ldr	r3, [pc, #8]	; (80a064c <network_set_listen_timeout+0xc>)
 80a0644:	681b      	ldr	r3, [r3, #0]
 80a0646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0648:	9301      	str	r3, [sp, #4]
 80a064a:	bd08      	pop	{r3, pc}
 80a064c:	080601c8 	.word	0x080601c8

080a0650 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0650:	b508      	push	{r3, lr}
 80a0652:	4b02      	ldr	r3, [pc, #8]	; (80a065c <network_get_listen_timeout+0xc>)
 80a0654:	681b      	ldr	r3, [r3, #0]
 80a0656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0658:	9301      	str	r3, [sp, #4]
 80a065a:	bd08      	pop	{r3, pc}
 80a065c:	080601c8 	.word	0x080601c8

080a0660 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a0660:	b508      	push	{r3, lr}
 80a0662:	4b02      	ldr	r3, [pc, #8]	; (80a066c <spark_cloud_flag_connected+0xc>)
 80a0664:	681b      	ldr	r3, [r3, #0]
 80a0666:	695b      	ldr	r3, [r3, #20]
 80a0668:	9301      	str	r3, [sp, #4]
 80a066a:	bd08      	pop	{r3, pc}
 80a066c:	080601cc 	.word	0x080601cc

080a0670 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a0670:	b508      	push	{r3, lr}
 80a0672:	4b02      	ldr	r3, [pc, #8]	; (80a067c <spark_send_event+0xc>)
 80a0674:	681b      	ldr	r3, [r3, #0]
 80a0676:	6a1b      	ldr	r3, [r3, #32]
 80a0678:	9301      	str	r3, [sp, #4]
 80a067a:	bd08      	pop	{r3, pc}
 80a067c:	080601cc 	.word	0x080601cc

080a0680 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0680:	b508      	push	{r3, lr}
 80a0682:	4b02      	ldr	r3, [pc, #8]	; (80a068c <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0684:	681b      	ldr	r3, [r3, #0]
 80a0686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0688:	9301      	str	r3, [sp, #4]
 80a068a:	bd08      	pop	{r3, pc}
 80a068c:	080601cc 	.word	0x080601cc

080a0690 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0690:	b508      	push	{r3, lr}
 80a0692:	4b02      	ldr	r3, [pc, #8]	; (80a069c <malloc+0xc>)
 80a0694:	681b      	ldr	r3, [r3, #0]
 80a0696:	681b      	ldr	r3, [r3, #0]
 80a0698:	9301      	str	r3, [sp, #4]
 80a069a:	bd08      	pop	{r3, pc}
 80a069c:	080601a0 	.word	0x080601a0

080a06a0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a06a0:	b508      	push	{r3, lr}
 80a06a2:	4b02      	ldr	r3, [pc, #8]	; (80a06ac <free+0xc>)
 80a06a4:	681b      	ldr	r3, [r3, #0]
 80a06a6:	685b      	ldr	r3, [r3, #4]
 80a06a8:	9301      	str	r3, [sp, #4]
 80a06aa:	bd08      	pop	{r3, pc}
 80a06ac:	080601a0 	.word	0x080601a0

080a06b0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a06b0:	b508      	push	{r3, lr}
 80a06b2:	4b02      	ldr	r3, [pc, #8]	; (80a06bc <realloc+0xc>)
 80a06b4:	681b      	ldr	r3, [r3, #0]
 80a06b6:	689b      	ldr	r3, [r3, #8]
 80a06b8:	9301      	str	r3, [sp, #4]
 80a06ba:	bd08      	pop	{r3, pc}
 80a06bc:	080601a0 	.word	0x080601a0

080a06c0 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a06c0:	b508      	push	{r3, lr}
 80a06c2:	4b02      	ldr	r3, [pc, #8]	; (80a06cc <abort+0xc>)
 80a06c4:	681b      	ldr	r3, [r3, #0]
 80a06c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a06c8:	9301      	str	r3, [sp, #4]
 80a06ca:	bd08      	pop	{r3, pc}
 80a06cc:	080601a0 	.word	0x080601a0

080a06d0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a06d0:	b508      	push	{r3, lr}
 80a06d2:	4b02      	ldr	r3, [pc, #8]	; (80a06dc <_malloc_r+0xc>)
 80a06d4:	681b      	ldr	r3, [r3, #0]
 80a06d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a06d8:	9301      	str	r3, [sp, #4]
 80a06da:	bd08      	pop	{r3, pc}
 80a06dc:	080601a0 	.word	0x080601a0

080a06e0 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a06e0:	4770      	bx	lr

080a06e2 <_ZN8SPIClassD0Ev>:
 80a06e2:	b510      	push	{r4, lr}
 80a06e4:	4604      	mov	r4, r0
 80a06e6:	2110      	movs	r1, #16
 80a06e8:	f001 f821 	bl	80a172e <_ZdlPvj>
 80a06ec:	4620      	mov	r0, r4
 80a06ee:	bd10      	pop	{r4, pc}

080a06f0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a06f0:	b570      	push	{r4, r5, r6, lr}
 80a06f2:	4604      	mov	r4, r0
 80a06f4:	460e      	mov	r6, r1
 80a06f6:	4b07      	ldr	r3, [pc, #28]	; (80a0714 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a06f8:	2500      	movs	r5, #0
 80a06fa:	6003      	str	r3, [r0, #0]
 80a06fc:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a0700:	f7ff fe48 	bl	80a0394 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a0704:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a0706:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a0708:	f7ff fe24 	bl	80a0354 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a070c:	60a5      	str	r5, [r4, #8]
}
 80a070e:	4620      	mov	r0, r4
 80a0710:	bd70      	pop	{r4, r5, r6, pc}
 80a0712:	bf00      	nop
 80a0714:	080a231c 	.word	0x080a231c

080a0718 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a0718:	7900      	ldrb	r0, [r0, #4]
 80a071a:	f7ff be23 	b.w	80a0364 <HAL_SPI_Is_Enabled>
	...

080a0720 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0720:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a0724:	4b03      	ldr	r3, [pc, #12]	; (80a0734 <_GLOBAL__sub_I_System+0x14>)
 80a0726:	2000      	movs	r0, #0
 80a0728:	7018      	strb	r0, [r3, #0]
 80a072a:	8058      	strh	r0, [r3, #2]
 80a072c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a072e:	f7ff bf13 	b.w	80a0558 <set_system_mode>
 80a0732:	bf00      	nop
 80a0734:	2000008a 	.word	0x2000008a

080a0738 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a0738:	b510      	push	{r4, lr}
 80a073a:	4604      	mov	r4, r0
{
	free(buffer);
 80a073c:	6800      	ldr	r0, [r0, #0]
 80a073e:	f7ff ffaf 	bl	80a06a0 <free>
}
 80a0742:	4620      	mov	r0, r4
 80a0744:	bd10      	pop	{r4, pc}

080a0746 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a0746:	b510      	push	{r4, lr}
 80a0748:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a074a:	6800      	ldr	r0, [r0, #0]
 80a074c:	b108      	cbz	r0, 80a0752 <_ZN6String10invalidateEv+0xc>
 80a074e:	f7ff ffa7 	bl	80a06a0 <free>
	buffer = NULL;
 80a0752:	2300      	movs	r3, #0
 80a0754:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a0756:	60a3      	str	r3, [r4, #8]
 80a0758:	6063      	str	r3, [r4, #4]
 80a075a:	bd10      	pop	{r4, pc}

080a075c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a075c:	b538      	push	{r3, r4, r5, lr}
 80a075e:	4604      	mov	r4, r0
 80a0760:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a0762:	6800      	ldr	r0, [r0, #0]
 80a0764:	3101      	adds	r1, #1
 80a0766:	f7ff ffa3 	bl	80a06b0 <realloc>
	if (newbuffer) {
 80a076a:	b110      	cbz	r0, 80a0772 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a076c:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a0770:	2001      	movs	r0, #1
	}
	return 0;
}
 80a0772:	bd38      	pop	{r3, r4, r5, pc}

080a0774 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a0774:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a0776:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a0778:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a077a:	b113      	cbz	r3, 80a0782 <_ZN6String7reserveEj+0xe>
 80a077c:	6843      	ldr	r3, [r0, #4]
 80a077e:	428b      	cmp	r3, r1
 80a0780:	d207      	bcs.n	80a0792 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a0782:	4620      	mov	r0, r4
 80a0784:	f7ff ffea 	bl	80a075c <_ZN6String12changeBufferEj>
 80a0788:	b120      	cbz	r0, 80a0794 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a078a:	68a3      	ldr	r3, [r4, #8]
 80a078c:	b90b      	cbnz	r3, 80a0792 <_ZN6String7reserveEj+0x1e>
 80a078e:	6822      	ldr	r2, [r4, #0]
 80a0790:	7013      	strb	r3, [r2, #0]
 80a0792:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a0794:	bd10      	pop	{r4, pc}

080a0796 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0796:	b570      	push	{r4, r5, r6, lr}
 80a0798:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a079a:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a079c:	4604      	mov	r4, r0
 80a079e:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a07a0:	f7ff ffe8 	bl	80a0774 <_ZN6String7reserveEj>
 80a07a4:	b918      	cbnz	r0, 80a07ae <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a07a6:	4620      	mov	r0, r4
 80a07a8:	f7ff ffcd 	bl	80a0746 <_ZN6String10invalidateEv>
		return *this;
 80a07ac:	e009      	b.n	80a07c2 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a07ae:	462a      	mov	r2, r5
 80a07b0:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a07b2:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a07b4:	6820      	ldr	r0, [r4, #0]
 80a07b6:	f001 fd2f 	bl	80a2218 <memcpy>
	buffer[len] = 0;
 80a07ba:	6822      	ldr	r2, [r4, #0]
 80a07bc:	68a3      	ldr	r3, [r4, #8]
 80a07be:	2100      	movs	r1, #0
 80a07c0:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a07c2:	4620      	mov	r0, r4
 80a07c4:	bd70      	pop	{r4, r5, r6, pc}

080a07c6 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a07c6:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a07c8:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a07ca:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a07cc:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a07ce:	6043      	str	r3, [r0, #4]
	len = 0;
 80a07d0:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a07d2:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a07d4:	460d      	mov	r5, r1
 80a07d6:	b139      	cbz	r1, 80a07e8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a07d8:	4608      	mov	r0, r1
 80a07da:	f001 fd74 	bl	80a22c6 <strlen>
 80a07de:	4629      	mov	r1, r5
 80a07e0:	4602      	mov	r2, r0
 80a07e2:	4620      	mov	r0, r4
 80a07e4:	f7ff ffd7 	bl	80a0796 <_ZN6String4copyEPKcj>
}
 80a07e8:	4620      	mov	r0, r4
 80a07ea:	bd38      	pop	{r3, r4, r5, pc}

080a07ec <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a07ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a07ee:	4606      	mov	r6, r0
 80a07f0:	460d      	mov	r5, r1
 80a07f2:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a07f4:	2400      	movs	r4, #0
  while (size--) {
 80a07f6:	42bd      	cmp	r5, r7
 80a07f8:	d00c      	beq.n	80a0814 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a07fa:	6833      	ldr	r3, [r6, #0]
 80a07fc:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0800:	689b      	ldr	r3, [r3, #8]
 80a0802:	4630      	mov	r0, r6
 80a0804:	4798      	blx	r3
     if (chunk>=0)
 80a0806:	2800      	cmp	r0, #0
 80a0808:	db01      	blt.n	80a080e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a080a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a080c:	e7f3      	b.n	80a07f6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a080e:	2c00      	cmp	r4, #0
 80a0810:	bf08      	it	eq
 80a0812:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0814:	4620      	mov	r0, r4
 80a0816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0818 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0818:	b570      	push	{r4, r5, r6, lr}
 80a081a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a081c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a081e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a0820:	b149      	cbz	r1, 80a0836 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0822:	f001 fd50 	bl	80a22c6 <strlen>
 80a0826:	682b      	ldr	r3, [r5, #0]
 80a0828:	4602      	mov	r2, r0
 80a082a:	4621      	mov	r1, r4
 80a082c:	4628      	mov	r0, r5
    }
 80a082e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a0832:	68db      	ldr	r3, [r3, #12]
 80a0834:	4718      	bx	r3
    }
 80a0836:	bd70      	pop	{r4, r5, r6, pc}

080a0838 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0838:	6803      	ldr	r3, [r0, #0]
 80a083a:	689b      	ldr	r3, [r3, #8]
 80a083c:	4718      	bx	r3

080a083e <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a083e:	2a01      	cmp	r2, #1
 80a0840:	bf98      	it	ls
 80a0842:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0844:	b530      	push	{r4, r5, lr}
 80a0846:	460b      	mov	r3, r1
 80a0848:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a084a:	2100      	movs	r1, #0
 80a084c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a0850:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a0854:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a0858:	fb05 3312 	mls	r3, r5, r2, r3
 80a085c:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a085e:	2b09      	cmp	r3, #9
 80a0860:	bf94      	ite	ls
 80a0862:	3330      	addls	r3, #48	; 0x30
 80a0864:	3337      	addhi	r3, #55	; 0x37
 80a0866:	b2db      	uxtb	r3, r3
 80a0868:	4621      	mov	r1, r4
 80a086a:	f804 3901 	strb.w	r3, [r4], #-1
 80a086e:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a0870:	2d00      	cmp	r5, #0
 80a0872:	d1ef      	bne.n	80a0854 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a0874:	f7ff ffd0 	bl	80a0818 <_ZN5Print5writeEPKc>
}
 80a0878:	b00b      	add	sp, #44	; 0x2c
 80a087a:	bd30      	pop	{r4, r5, pc}

080a087c <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a087c:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a087e:	b922      	cbnz	r2, 80a088a <_ZN5Print5printEmi+0xe>
 80a0880:	6803      	ldr	r3, [r0, #0]
 80a0882:	b2c9      	uxtb	r1, r1
 80a0884:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a0886:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a0888:	4718      	bx	r3
  else return printNumber(n, base);
 80a088a:	b2d2      	uxtb	r2, r2
}
 80a088c:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a088e:	f7ff bfd6 	b.w	80a083e <_ZN5Print11printNumberEmh>

080a0892 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a0892:	f7ff bff3 	b.w	80a087c <_ZN5Print5printEmi>

080a0896 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a0896:	2300      	movs	r3, #0
 80a0898:	461a      	mov	r2, r3
 80a089a:	4619      	mov	r1, r3
 80a089c:	6840      	ldr	r0, [r0, #4]
 80a089e:	f7ff beaf 	b.w	80a0600 <network_on>

080a08a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a08a2:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a08a4:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a08a6:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a08a8:	b17c      	cbz	r4, 80a08ca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a08aa:	6863      	ldr	r3, [r4, #4]
 80a08ac:	3b01      	subs	r3, #1
 80a08ae:	6063      	str	r3, [r4, #4]
 80a08b0:	b95b      	cbnz	r3, 80a08ca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a08b2:	6823      	ldr	r3, [r4, #0]
 80a08b4:	4620      	mov	r0, r4
 80a08b6:	689b      	ldr	r3, [r3, #8]
 80a08b8:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a08ba:	68a3      	ldr	r3, [r4, #8]
 80a08bc:	3b01      	subs	r3, #1
 80a08be:	60a3      	str	r3, [r4, #8]
 80a08c0:	b91b      	cbnz	r3, 80a08ca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a08c2:	6823      	ldr	r3, [r4, #0]
 80a08c4:	4620      	mov	r0, r4
 80a08c6:	68db      	ldr	r3, [r3, #12]
 80a08c8:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a08ca:	4628      	mov	r0, r5
 80a08cc:	bd38      	pop	{r3, r4, r5, pc}

080a08ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a08ce:	680b      	ldr	r3, [r1, #0]
 80a08d0:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a08d2:	b113      	cbz	r3, 80a08da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a08d4:	685a      	ldr	r2, [r3, #4]
 80a08d6:	3201      	adds	r2, #1
 80a08d8:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a08da:	4770      	bx	lr

080a08dc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a08dc:	4a01      	ldr	r2, [pc, #4]	; (80a08e4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a08de:	4b02      	ldr	r3, [pc, #8]	; (80a08e8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a08e0:	601a      	str	r2, [r3, #0]
 80a08e2:	4770      	bx	lr
 80a08e4:	080a239a 	.word	0x080a239a
 80a08e8:	20000090 	.word	0x20000090

080a08ec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a08ec:	4b02      	ldr	r3, [pc, #8]	; (80a08f8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a08ee:	681a      	ldr	r2, [r3, #0]
 80a08f0:	4b02      	ldr	r3, [pc, #8]	; (80a08fc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a08f2:	601a      	str	r2, [r3, #0]
 80a08f4:	4770      	bx	lr
 80a08f6:	bf00      	nop
 80a08f8:	20000000 	.word	0x20000000
 80a08fc:	20000094 	.word	0x20000094

080a0900 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0900:	2100      	movs	r1, #0
 80a0902:	f7ff be31 	b.w	80a0568 <system_delay_ms>

080a0906 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0906:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0908:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a090a:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a090c:	b113      	cbz	r3, 80a0914 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a090e:	2203      	movs	r2, #3
 80a0910:	4601      	mov	r1, r0
 80a0912:	4798      	blx	r3
    }
 80a0914:	4620      	mov	r0, r4
 80a0916:	bd10      	pop	{r4, pc}

080a0918 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a0918:	b510      	push	{r4, lr}
 80a091a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a091c:	f7ff fff3 	bl	80a0906 <_ZNSt14_Function_baseD1Ev>
 80a0920:	4620      	mov	r0, r4
 80a0922:	bd10      	pop	{r4, pc}

080a0924 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a0924:	b513      	push	{r0, r1, r4, lr}
 80a0926:	460b      	mov	r3, r1
 80a0928:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a092a:	c803      	ldmia	r0, {r0, r1}
 80a092c:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a0930:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a0934:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a0938:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a093c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a0940:	b002      	add	sp, #8
 80a0942:	bd10      	pop	{r4, pc}

080a0944 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0944:	4803      	ldr	r0, [pc, #12]	; (80a0954 <_GLOBAL__sub_I_RGB+0x10>)
 80a0946:	2300      	movs	r3, #0
 80a0948:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a094a:	4a03      	ldr	r2, [pc, #12]	; (80a0958 <_GLOBAL__sub_I_RGB+0x14>)
 80a094c:	4903      	ldr	r1, [pc, #12]	; (80a095c <_GLOBAL__sub_I_RGB+0x18>)
 80a094e:	f000 bee9 	b.w	80a1724 <__aeabi_atexit>
 80a0952:	bf00      	nop
 80a0954:	20000098 	.word	0x20000098
 80a0958:	20000068 	.word	0x20000068
 80a095c:	080a0919 	.word	0x080a0919

080a0960 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a0960:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a0962:	4b14      	ldr	r3, [pc, #80]	; (80a09b4 <serialEventRun+0x54>)
 80a0964:	b133      	cbz	r3, 80a0974 <serialEventRun+0x14>
 80a0966:	f000 fc2f 	bl	80a11c8 <_Z16_fetch_usbserialv>
 80a096a:	6803      	ldr	r3, [r0, #0]
 80a096c:	691b      	ldr	r3, [r3, #16]
 80a096e:	4798      	blx	r3
 80a0970:	2800      	cmp	r0, #0
 80a0972:	dc16      	bgt.n	80a09a2 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a0974:	4b10      	ldr	r3, [pc, #64]	; (80a09b8 <serialEventRun+0x58>)
 80a0976:	b133      	cbz	r3, 80a0986 <serialEventRun+0x26>
 80a0978:	f000 fce4 	bl	80a1344 <_Z22__fetch_global_Serial1v>
 80a097c:	6803      	ldr	r3, [r0, #0]
 80a097e:	691b      	ldr	r3, [r3, #16]
 80a0980:	4798      	blx	r3
 80a0982:	2800      	cmp	r0, #0
 80a0984:	dc10      	bgt.n	80a09a8 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a0986:	4b0d      	ldr	r3, [pc, #52]	; (80a09bc <serialEventRun+0x5c>)
 80a0988:	b10b      	cbz	r3, 80a098e <serialEventRun+0x2e>
 80a098a:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a098e:	4b0c      	ldr	r3, [pc, #48]	; (80a09c0 <serialEventRun+0x60>)
 80a0990:	b17b      	cbz	r3, 80a09b2 <serialEventRun+0x52>
 80a0992:	f000 fc55 	bl	80a1240 <_Z17_fetch_usbserial1v>
 80a0996:	6803      	ldr	r3, [r0, #0]
 80a0998:	691b      	ldr	r3, [r3, #16]
 80a099a:	4798      	blx	r3
 80a099c:	2800      	cmp	r0, #0
 80a099e:	dc06      	bgt.n	80a09ae <serialEventRun+0x4e>
 80a09a0:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a09a2:	f3af 8000 	nop.w
 80a09a6:	e7e5      	b.n	80a0974 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a09a8:	f3af 8000 	nop.w
 80a09ac:	e7eb      	b.n	80a0986 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a09ae:	f3af 8000 	nop.w
 80a09b2:	bd08      	pop	{r3, pc}
	...

080a09c4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a09c4:	b508      	push	{r3, lr}
	serialEventRun();
 80a09c6:	f7ff ffcb 	bl	80a0960 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a09ca:	f7ff fcdb 	bl	80a0384 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a09ce:	4b01      	ldr	r3, [pc, #4]	; (80a09d4 <_post_loop+0x10>)
 80a09d0:	6018      	str	r0, [r3, #0]
 80a09d2:	bd08      	pop	{r3, pc}
 80a09d4:	2000053c 	.word	0x2000053c

080a09d8 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a09d8:	4802      	ldr	r0, [pc, #8]	; (80a09e4 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a09da:	4a03      	ldr	r2, [pc, #12]	; (80a09e8 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a09dc:	4903      	ldr	r1, [pc, #12]	; (80a09ec <_Z33system_initialize_user_backup_ramv+0x14>)
 80a09de:	1a12      	subs	r2, r2, r0
 80a09e0:	f001 bc1a 	b.w	80a2218 <memcpy>
 80a09e4:	40024000 	.word	0x40024000
 80a09e8:	40024004 	.word	0x40024004
 80a09ec:	080a25f0 	.word	0x080a25f0

080a09f0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a09f0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a09f2:	2300      	movs	r3, #0
 80a09f4:	9300      	str	r3, [sp, #0]
 80a09f6:	461a      	mov	r2, r3
 80a09f8:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a09fc:	f7ff fdd6 	bl	80a05ac <system_ctrl_set_result>
}
 80a0a00:	b003      	add	sp, #12
 80a0a02:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a0a08 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a0a08:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a0a0a:	8843      	ldrh	r3, [r0, #2]
 80a0a0c:	2b0a      	cmp	r3, #10
 80a0a0e:	d008      	beq.n	80a0a22 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a0a10:	2b50      	cmp	r3, #80	; 0x50
 80a0a12:	d109      	bne.n	80a0a28 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a0a14:	4b09      	ldr	r3, [pc, #36]	; (80a0a3c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a0a16:	681b      	ldr	r3, [r3, #0]
 80a0a18:	b13b      	cbz	r3, 80a0a2a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a0a1a:	b003      	add	sp, #12
 80a0a1c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a0a20:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a0a22:	f7ff ffe5 	bl	80a09f0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a0a26:	e006      	b.n	80a0a36 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0a28:	2300      	movs	r3, #0
 80a0a2a:	9300      	str	r3, [sp, #0]
 80a0a2c:	461a      	mov	r2, r3
 80a0a2e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0a32:	f7ff fdbb 	bl	80a05ac <system_ctrl_set_result>
        break;
    }
}
 80a0a36:	b003      	add	sp, #12
 80a0a38:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0a3c:	200000a8 	.word	0x200000a8

080a0a40 <module_user_init_hook>:

void module_user_init_hook()
{
 80a0a40:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a0a42:	4c10      	ldr	r4, [pc, #64]	; (80a0a84 <module_user_init_hook+0x44>)
 80a0a44:	4d10      	ldr	r5, [pc, #64]	; (80a0a88 <module_user_init_hook+0x48>)
 80a0a46:	6823      	ldr	r3, [r4, #0]
 80a0a48:	42ab      	cmp	r3, r5
 80a0a4a:	4b10      	ldr	r3, [pc, #64]	; (80a0a8c <module_user_init_hook+0x4c>)
 80a0a4c:	bf0c      	ite	eq
 80a0a4e:	2201      	moveq	r2, #1
 80a0a50:	2200      	movne	r2, #0
 80a0a52:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a0a54:	d002      	beq.n	80a0a5c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a0a56:	f7ff ffbf 	bl	80a09d8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a0a5a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a0a5c:	f7ff fc8a 	bl	80a0374 <HAL_RNG_GetRandomNumber>
 80a0a60:	4604      	mov	r4, r0
    srand(seed);
 80a0a62:	f001 fbed 	bl	80a2240 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a0a66:	4b0a      	ldr	r3, [pc, #40]	; (80a0a90 <module_user_init_hook+0x50>)
 80a0a68:	b113      	cbz	r3, 80a0a70 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a0a6a:	4620      	mov	r0, r4
 80a0a6c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a0a70:	2100      	movs	r1, #0
 80a0a72:	4807      	ldr	r0, [pc, #28]	; (80a0a90 <module_user_init_hook+0x50>)
 80a0a74:	f7ff fe04 	bl	80a0680 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a0a78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a0a7c:	2100      	movs	r1, #0
 80a0a7e:	4805      	ldr	r0, [pc, #20]	; (80a0a94 <module_user_init_hook+0x54>)
 80a0a80:	f7ff bd8a 	b.w	80a0598 <system_ctrl_set_app_request_handler>
 80a0a84:	40024000 	.word	0x40024000
 80a0a88:	9a271c1e 	.word	0x9a271c1e
 80a0a8c:	200000ac 	.word	0x200000ac
 80a0a90:	00000000 	.word	0x00000000
 80a0a94:	080a0a09 	.word	0x080a0a09

080a0a98 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a0a98:	4770      	bx	lr

080a0a9a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a0a9a:	2000      	movs	r0, #0
 80a0a9c:	4770      	bx	lr

080a0a9e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a0a9e:	b510      	push	{r4, lr}
 80a0aa0:	4604      	mov	r4, r0
 80a0aa2:	2110      	movs	r1, #16
 80a0aa4:	f000 fe43 	bl	80a172e <_ZdlPvj>
 80a0aa8:	4620      	mov	r0, r4
 80a0aaa:	bd10      	pop	{r4, pc}

080a0aac <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a0aac:	b508      	push	{r3, lr}
      { delete this; }
 80a0aae:	b108      	cbz	r0, 80a0ab4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a0ab0:	f7ff fff5 	bl	80a0a9e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a0ab4:	bd08      	pop	{r3, pc}

080a0ab6 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a0ab6:	2200      	movs	r2, #0
 80a0ab8:	6002      	str	r2, [r0, #0]
 80a0aba:	f64f 729c 	movw	r2, #65436	; 0xff9c
 80a0abe:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a0ac0:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0ac2:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 80a0ac6:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0ac8:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0aca:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a0acc:	680c      	ldr	r4, [r1, #0]
 80a0ace:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0ad0:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a0ad2:	bd10      	pop	{r4, pc}

080a0ad4 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a0ad4:	b510      	push	{r4, lr}
 80a0ad6:	4604      	mov	r4, r0
    free((void*)msg_);
 80a0ad8:	6800      	ldr	r0, [r0, #0]
 80a0ada:	f7ff fde1 	bl	80a06a0 <free>
}
 80a0ade:	4620      	mov	r0, r4
 80a0ae0:	bd10      	pop	{r4, pc}

080a0ae2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80a0ae2:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a0ae4:	68c4      	ldr	r4, [r0, #12]
 80a0ae6:	b1f4      	cbz	r4, 80a0b26 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a0ae8:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a0aea:	2b02      	cmp	r3, #2
 80a0aec:	d103      	bne.n	80a0af6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a0aee:	f104 000c 	add.w	r0, r4, #12
 80a0af2:	f7ff ffef 	bl	80a0ad4 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a0af6:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80a0af8:	b135      	cbz	r5, 80a0b08 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0afa:	4628      	mov	r0, r5
 80a0afc:	f7ff ff03 	bl	80a0906 <_ZNSt14_Function_baseD1Ev>
 80a0b00:	2110      	movs	r1, #16
 80a0b02:	4628      	mov	r0, r5
 80a0b04:	f000 fe13 	bl	80a172e <_ZdlPvj>
 80a0b08:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a0b0a:	b135      	cbz	r5, 80a0b1a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a0b0c:	4628      	mov	r0, r5
 80a0b0e:	f7ff fefa 	bl	80a0906 <_ZNSt14_Function_baseD1Ev>
 80a0b12:	2110      	movs	r1, #16
 80a0b14:	4628      	mov	r0, r5
 80a0b16:	f000 fe0a 	bl	80a172e <_ZdlPvj>
 80a0b1a:	4620      	mov	r0, r4
 80a0b1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a0b20:	2114      	movs	r1, #20
 80a0b22:	f000 be04 	b.w	80a172e <_ZdlPvj>
 80a0b26:	bd38      	pop	{r3, r4, r5, pc}

080a0b28 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80a0b28:	b513      	push	{r0, r1, r4, lr}
 80a0b2a:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a0b2c:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80a0b30:	2300      	movs	r3, #0
 80a0b32:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a0b34:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a0b36:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a0b38:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0b3a:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a0b3c:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a0b3e:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0b40:	f7ff feaf 	bl	80a08a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0b44:	4620      	mov	r0, r4
 80a0b46:	b002      	add	sp, #8
 80a0b48:	bd10      	pop	{r4, pc}

080a0b4a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a0b4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0b4c:	460c      	mov	r4, r1
 80a0b4e:	4606      	mov	r6, r0
 80a0b50:	460f      	mov	r7, r1
 80a0b52:	f854 3b04 	ldr.w	r3, [r4], #4
 80a0b56:	ad02      	add	r5, sp, #8
 80a0b58:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a0b5c:	4621      	mov	r1, r4
 80a0b5e:	a801      	add	r0, sp, #4
 80a0b60:	f7ff feb5 	bl	80a08ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a0b64:	4629      	mov	r1, r5
 80a0b66:	4630      	mov	r0, r6
 80a0b68:	f7ff ffde 	bl	80a0b28 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0b6c:	a801      	add	r0, sp, #4
 80a0b6e:	f7ff fe98 	bl	80a08a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0b72:	4620      	mov	r0, r4
 80a0b74:	f7ff fe95 	bl	80a08a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a0b78:	4638      	mov	r0, r7
 80a0b7a:	2108      	movs	r1, #8
 80a0b7c:	f000 fdd7 	bl	80a172e <_ZdlPvj>
        return p;
    }
 80a0b80:	4630      	mov	r0, r6
 80a0b82:	b003      	add	sp, #12
 80a0b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080a0b88 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a0b88:	b538      	push	{r3, r4, r5, lr}
 80a0b8a:	2300      	movs	r3, #0
 80a0b8c:	4604      	mov	r4, r0
 80a0b8e:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0b90:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a0b92:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0b94:	f7ff fa83 	bl	80a009e <_Znwj>
 80a0b98:	b128      	cbz	r0, 80a0ba6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a0b9a:	2301      	movs	r3, #1
 80a0b9c:	6043      	str	r3, [r0, #4]
 80a0b9e:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a0ba0:	4b02      	ldr	r3, [pc, #8]	; (80a0bac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a0ba2:	60c5      	str	r5, [r0, #12]
 80a0ba4:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0ba6:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 80a0ba8:	4620      	mov	r0, r4
 80a0baa:	bd38      	pop	{r3, r4, r5, pc}
 80a0bac:	080a243c 	.word	0x080a243c

080a0bb0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0bb0:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a0bb2:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0bb4:	b90a      	cbnz	r2, 80a0bba <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a0bb6:	f000 fdbc 	bl	80a1732 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0bba:	68c3      	ldr	r3, [r0, #12]
    }
 80a0bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0bc0:	4718      	bx	r3

080a0bc2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a0bc2:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0bc4:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a0bc6:	f100 0110 	add.w	r1, r0, #16
 80a0bca:	f7ff fff1 	bl	80a0bb0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a0bce:	bd08      	pop	{r3, pc}

080a0bd0 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0bd0:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a0bd2:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0bd4:	b90a      	cbnz	r2, 80a0bda <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a0bd6:	f000 fdac 	bl	80a1732 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0bda:	68c3      	ldr	r3, [r0, #12]
    }
 80a0bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0be0:	4718      	bx	r3

080a0be2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a0be2:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0be4:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a0be6:	f100 0110 	add.w	r1, r0, #16
 80a0bea:	f7ff fff1 	bl	80a0bd0 <_ZNKSt8functionIFvRKbEEclES1_>
 80a0bee:	bd08      	pop	{r3, pc}

080a0bf0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0bf0:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0bf2:	2300      	movs	r3, #0
 80a0bf4:	6083      	str	r3, [r0, #8]
 80a0bf6:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0bf8:	4604      	mov	r4, r0
 80a0bfa:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a0bfc:	b12b      	cbz	r3, 80a0c0a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a0bfe:	2202      	movs	r2, #2
 80a0c00:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a0c02:	68eb      	ldr	r3, [r5, #12]
 80a0c04:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a0c06:	68ab      	ldr	r3, [r5, #8]
 80a0c08:	60a3      	str	r3, [r4, #8]
	}
    }
 80a0c0a:	4620      	mov	r0, r4
 80a0c0c:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0c10 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80a0c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0c12:	b089      	sub	sp, #36	; 0x24
 80a0c14:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a0c16:	4668      	mov	r0, sp
 80a0c18:	f7ff ff4d 	bl	80a0ab6 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a0c1c:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a0c20:	2300      	movs	r3, #0
 80a0c22:	f88d 3008 	strb.w	r3, [sp, #8]
 80a0c26:	e8d4 3f4f 	ldrexb	r3, [r4]
 80a0c2a:	2b00      	cmp	r3, #0
 80a0c2c:	d103      	bne.n	80a0c36 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 80a0c2e:	e8c4 2f41 	strexb	r1, r2, [r4]
 80a0c32:	2900      	cmp	r1, #0
 80a0c34:	d1f7      	bne.n	80a0c26 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 80a0c36:	d002      	beq.n	80a0c3e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 80a0c38:	f88d 3008 	strb.w	r3, [sp, #8]
 80a0c3c:	e063      	b.n	80a0d06 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80a0c3e:	f114 050c 	adds.w	r5, r4, #12
 80a0c42:	d003      	beq.n	80a0c4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 80a0c44:	4669      	mov	r1, sp
 80a0c46:	4628      	mov	r0, r5
 80a0c48:	f7ff ff35 	bl	80a0ab6 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a0c4c:	f3bf 8f5f 	dmb	sy
 80a0c50:	2301      	movs	r3, #1
 80a0c52:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a0c54:	f3bf 8f5f 	dmb	sy
 80a0c58:	f104 0308 	add.w	r3, r4, #8
 80a0c5c:	2000      	movs	r0, #0
 80a0c5e:	e853 6f00 	ldrex	r6, [r3]
 80a0c62:	e843 0200 	strex	r2, r0, [r3]
 80a0c66:	2a00      	cmp	r2, #0
 80a0c68:	d1f9      	bne.n	80a0c5e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 80a0c6a:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a0c6e:	2e00      	cmp	r6, #0
 80a0c70:	d049      	beq.n	80a0d06 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a0c72:	f7ff fc81 	bl	80a0578 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a0c76:	b120      	cbz	r0, 80a0c82 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a0c78:	4629      	mov	r1, r5
 80a0c7a:	4630      	mov	r0, r6
 80a0c7c:	f7ff ff98 	bl	80a0bb0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a0c80:	e03a      	b.n	80a0cf8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a0c82:	4631      	mov	r1, r6
 80a0c84:	a802      	add	r0, sp, #8
 80a0c86:	f7ff ffb3 	bl	80a0bf0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a0c8a:	68e0      	ldr	r0, [r4, #12]
 80a0c8c:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a0c90:	b108      	cbz	r0, 80a0c96 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 80a0c92:	f001 fafd 	bl	80a2290 <strdup>
 80a0c96:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a0c98:	2010      	movs	r0, #16
 80a0c9a:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a0c9e:	f7ff f9fe 	bl	80a009e <_Znwj>
 80a0ca2:	4605      	mov	r5, r0
 80a0ca4:	b1e8      	cbz	r0, 80a0ce2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0ca6:	2700      	movs	r7, #0
 80a0ca8:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0caa:	2018      	movs	r0, #24
 80a0cac:	f7ff f9f7 	bl	80a009e <_Znwj>
 80a0cb0:	4604      	mov	r4, r0
 80a0cb2:	b188      	cbz	r0, 80a0cd8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a0cb4:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0cb6:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a0cb8:	a802      	add	r0, sp, #8
 80a0cba:	f7ff fe33 	bl	80a0924 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0cbe:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a0cc0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0cc2:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0cc4:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a0cc6:	9204      	str	r2, [sp, #16]
 80a0cc8:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a0cca:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a0ccc:	60e3      	str	r3, [r4, #12]
 80a0cce:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0cd2:	9205      	str	r2, [sp, #20]
 80a0cd4:	f7ff feef 	bl	80a0ab6 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0cd8:	4b0d      	ldr	r3, [pc, #52]	; (80a0d10 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0cda:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0cdc:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a0cde:	4b0d      	ldr	r3, [pc, #52]	; (80a0d14 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 80a0ce0:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 80a0ce2:	a806      	add	r0, sp, #24
 80a0ce4:	f7ff fef6 	bl	80a0ad4 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0ce8:	a802      	add	r0, sp, #8
 80a0cea:	f7ff fe0c 	bl	80a0906 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a0cee:	2200      	movs	r2, #0
 80a0cf0:	4629      	mov	r1, r5
 80a0cf2:	4809      	ldr	r0, [pc, #36]	; (80a0d18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 80a0cf4:	f7ff fc48 	bl	80a0588 <application_thread_invoke>
 80a0cf8:	4630      	mov	r0, r6
 80a0cfa:	f7ff fe04 	bl	80a0906 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a0cfe:	2110      	movs	r1, #16
 80a0d00:	4630      	mov	r0, r6
 80a0d02:	f000 fd14 	bl	80a172e <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 80a0d06:	4668      	mov	r0, sp
 80a0d08:	f7ff fee4 	bl	80a0ad4 <_ZN8particle5ErrorD1Ev>
    }
 80a0d0c:	b009      	add	sp, #36	; 0x24
 80a0d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0d10:	080a0bc3 	.word	0x080a0bc3
 80a0d14:	080a0e39 	.word	0x080a0e39
 80a0d18:	080a1391 	.word	0x080a1391

080a0d1c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a0d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0d20:	b08b      	sub	sp, #44	; 0x2c
 80a0d22:	4606      	mov	r6, r0
 80a0d24:	460f      	mov	r7, r1
 80a0d26:	4690      	mov	r8, r2
 80a0d28:	4699      	mov	r9, r3
 80a0d2a:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a0d2e:	f7ff fc97 	bl	80a0660 <spark_cloud_flag_connected>
 80a0d32:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
 80a0d34:	4683      	mov	fp, r0
 80a0d36:	bb30      	cbnz	r0, 80a0d86 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a0d38:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a0d3c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a0d3e:	a905      	add	r1, sp, #20
 80a0d40:	4628      	mov	r0, r5
 80a0d42:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a0d46:	f7ff feb6 	bl	80a0ab6 <_ZN8particle5ErrorC1EOS0_>
 80a0d4a:	2014      	movs	r0, #20
 80a0d4c:	f7ff f9a7 	bl	80a009e <_Znwj>
 80a0d50:	4604      	mov	r4, r0
 80a0d52:	b158      	cbz	r0, 80a0d6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a0d54:	2302      	movs	r3, #2
 80a0d56:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a0d58:	2301      	movs	r3, #1
 80a0d5a:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a0d5c:	f8c0 b004 	str.w	fp, [r0, #4]
 80a0d60:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 80a0d64:	4629      	mov	r1, r5
 80a0d66:	300c      	adds	r0, #12
 80a0d68:	f7ff fea5 	bl	80a0ab6 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a0d6c:	4630      	mov	r0, r6
 80a0d6e:	4621      	mov	r1, r4
 80a0d70:	f840 4b04 	str.w	r4, [r0], #4
 80a0d74:	f7ff ff08 	bl	80a0b88 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a0d78:	4628      	mov	r0, r5
 80a0d7a:	f7ff feab 	bl	80a0ad4 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a0d7e:	a805      	add	r0, sp, #20
 80a0d80:	f7ff fea8 	bl	80a0ad4 <_ZN8particle5ErrorD1Ev>
 80a0d84:	e052      	b.n	80a0e2c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a0d86:	2400      	movs	r4, #0
 80a0d88:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a0d8a:	2014      	movs	r0, #20
 80a0d8c:	606c      	str	r4, [r5, #4]
 80a0d8e:	60ac      	str	r4, [r5, #8]
 80a0d90:	9307      	str	r3, [sp, #28]
 80a0d92:	f7ff f984 	bl	80a009e <_Znwj>
 80a0d96:	4601      	mov	r1, r0
 80a0d98:	b118      	cbz	r0, 80a0da2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 80a0d9a:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a0d9c:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a0d9e:	6044      	str	r4, [r0, #4]
 80a0da0:	6084      	str	r4, [r0, #8]
 80a0da2:	a804      	add	r0, sp, #16
 80a0da4:	9103      	str	r1, [sp, #12]
 80a0da6:	f7ff feef 	bl	80a0b88 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80a0daa:	4b22      	ldr	r3, [pc, #136]	; (80a0e34 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a0dac:	2008      	movs	r0, #8
 80a0dae:	9308      	str	r3, [sp, #32]
 80a0db0:	f7ff f975 	bl	80a009e <_Znwj>
 80a0db4:	4604      	mov	r4, r0
 80a0db6:	b128      	cbz	r0, 80a0dc4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0db8:	9b03      	ldr	r3, [sp, #12]
 80a0dba:	a904      	add	r1, sp, #16
 80a0dbc:	f840 3b04 	str.w	r3, [r0], #4
 80a0dc0:	f7ff fd85 	bl	80a08ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a0dc4:	9500      	str	r5, [sp, #0]
 80a0dc6:	fa5f f38a 	uxtb.w	r3, sl
 80a0dca:	464a      	mov	r2, r9
 80a0dcc:	4641      	mov	r1, r8
 80a0dce:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80a0dd0:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a0dd2:	f7ff fc4d 	bl	80a0670 <spark_send_event>
 80a0dd6:	b920      	cbnz	r0, 80a0de2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a0dd8:	9b03      	ldr	r3, [sp, #12]
 80a0dda:	785b      	ldrb	r3, [r3, #1]
 80a0ddc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a0de0:	b183      	cbz	r3, 80a0e04 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 80a0de2:	9b03      	ldr	r3, [sp, #12]
 80a0de4:	a904      	add	r1, sp, #16
 80a0de6:	a806      	add	r0, sp, #24
 80a0de8:	9305      	str	r3, [sp, #20]
 80a0dea:	f7ff fd70 	bl	80a08ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a0dee:	a905      	add	r1, sp, #20
 80a0df0:	4630      	mov	r0, r6
 80a0df2:	f7ff fe99 	bl	80a0b28 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0df6:	a806      	add	r0, sp, #24
 80a0df8:	f7ff fd53 	bl	80a08a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0dfc:	a804      	add	r0, sp, #16
 80a0dfe:	f7ff fd50 	bl	80a08a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0e02:	e013      	b.n	80a0e2c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 80a0e04:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80a0e08:	a905      	add	r1, sp, #20
 80a0e0a:	a803      	add	r0, sp, #12
 80a0e0c:	9205      	str	r2, [sp, #20]
 80a0e0e:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a0e12:	f7ff fefd 	bl	80a0c10 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a0e16:	a805      	add	r0, sp, #20
 80a0e18:	f7ff fe5c 	bl	80a0ad4 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a0e1c:	a805      	add	r0, sp, #20
 80a0e1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a0e20:	f7ff fe93 	bl	80a0b4a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 80a0e24:	a806      	add	r0, sp, #24
 80a0e26:	f7ff fd3c 	bl	80a08a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0e2a:	e7da      	b.n	80a0de2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 80a0e2c:	4630      	mov	r0, r6
 80a0e2e:	b00b      	add	sp, #44	; 0x2c
 80a0e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0e34:	080a0fa9 	.word	0x080a0fa9

080a0e38 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0e38:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a0e3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0e3c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0e3e:	d006      	beq.n	80a0e4e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a0e40:	2a03      	cmp	r2, #3
 80a0e42:	d017      	beq.n	80a0e74 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80a0e44:	2a01      	cmp	r2, #1
 80a0e46:	d122      	bne.n	80a0e8e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0e48:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a0e4a:	6003      	str	r3, [r0, #0]
	      break;
 80a0e4c:	e01f      	b.n	80a0e8e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a0e4e:	2018      	movs	r0, #24
 80a0e50:	680e      	ldr	r6, [r1, #0]
 80a0e52:	f7ff f924 	bl	80a009e <_Znwj>
 80a0e56:	4605      	mov	r5, r0
 80a0e58:	b150      	cbz	r0, 80a0e70 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a0e5a:	4631      	mov	r1, r6
 80a0e5c:	f7ff fec8 	bl	80a0bf0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a0e60:	6930      	ldr	r0, [r6, #16]
 80a0e62:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a0e66:	b108      	cbz	r0, 80a0e6c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80a0e68:	f001 fa12 	bl	80a2290 <strdup>
 80a0e6c:	6128      	str	r0, [r5, #16]
 80a0e6e:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a0e70:	6025      	str	r5, [r4, #0]
 80a0e72:	e00c      	b.n	80a0e8e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a0e74:	6804      	ldr	r4, [r0, #0]
 80a0e76:	b154      	cbz	r4, 80a0e8e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 80a0e78:	f104 0010 	add.w	r0, r4, #16
 80a0e7c:	f7ff fe2a 	bl	80a0ad4 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0e80:	4620      	mov	r0, r4
 80a0e82:	f7ff fd40 	bl	80a0906 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a0e86:	2118      	movs	r1, #24
 80a0e88:	4620      	mov	r0, r4
 80a0e8a:	f000 fc50 	bl	80a172e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a0e8e:	2000      	movs	r0, #0
 80a0e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0e92 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0e92:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0e94:	2300      	movs	r3, #0
 80a0e96:	6083      	str	r3, [r0, #8]
 80a0e98:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0e9a:	4604      	mov	r4, r0
 80a0e9c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a0e9e:	b12b      	cbz	r3, 80a0eac <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a0ea0:	2202      	movs	r2, #2
 80a0ea2:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a0ea4:	68eb      	ldr	r3, [r5, #12]
 80a0ea6:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a0ea8:	68ab      	ldr	r3, [r5, #8]
 80a0eaa:	60a3      	str	r3, [r4, #8]
	}
    }
 80a0eac:	4620      	mov	r0, r4
 80a0eae:	bd38      	pop	{r3, r4, r5, pc}

080a0eb0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0eb0:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a0eb2:	b570      	push	{r4, r5, r6, lr}
 80a0eb4:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0eb6:	d006      	beq.n	80a0ec6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80a0eb8:	2a03      	cmp	r2, #3
 80a0eba:	d011      	beq.n	80a0ee0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80a0ebc:	2a01      	cmp	r2, #1
 80a0ebe:	d118      	bne.n	80a0ef2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0ec0:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a0ec2:	6003      	str	r3, [r0, #0]
	      break;
 80a0ec4:	e015      	b.n	80a0ef2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a0ec6:	2014      	movs	r0, #20
 80a0ec8:	680e      	ldr	r6, [r1, #0]
 80a0eca:	f7ff f8e8 	bl	80a009e <_Znwj>
 80a0ece:	4605      	mov	r5, r0
 80a0ed0:	b120      	cbz	r0, 80a0edc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a0ed2:	4631      	mov	r1, r6
 80a0ed4:	f7ff ffdd 	bl	80a0e92 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a0ed8:	7c33      	ldrb	r3, [r6, #16]
 80a0eda:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a0edc:	6025      	str	r5, [r4, #0]
 80a0ede:	e008      	b.n	80a0ef2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a0ee0:	6804      	ldr	r4, [r0, #0]
 80a0ee2:	b134      	cbz	r4, 80a0ef2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0ee4:	4620      	mov	r0, r4
 80a0ee6:	f7ff fd0e 	bl	80a0906 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a0eea:	2114      	movs	r1, #20
 80a0eec:	4620      	mov	r0, r4
 80a0eee:	f000 fc1e 	bl	80a172e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a0ef2:	2000      	movs	r0, #0
 80a0ef4:	bd70      	pop	{r4, r5, r6, pc}
	...

080a0ef8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a0ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0efa:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a0efc:	f3bf 8f5f 	dmb	sy
 80a0f00:	b087      	sub	sp, #28
 80a0f02:	2300      	movs	r3, #0
 80a0f04:	e850 6f00 	ldrex	r6, [r0]
 80a0f08:	e840 3200 	strex	r2, r3, [r0]
 80a0f0c:	2a00      	cmp	r2, #0
 80a0f0e:	d1f9      	bne.n	80a0f04 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a0f10:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a0f14:	2e00      	cmp	r6, #0
 80a0f16:	d03f      	beq.n	80a0f98 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a0f18:	4618      	mov	r0, r3
 80a0f1a:	f7ff fb2d 	bl	80a0578 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a0f1e:	4607      	mov	r7, r0
 80a0f20:	b120      	cbz	r0, 80a0f2c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a0f22:	4621      	mov	r1, r4
 80a0f24:	4630      	mov	r0, r6
 80a0f26:	f7ff fe53 	bl	80a0bd0 <_ZNKSt8functionIFvRKbEEclES1_>
 80a0f2a:	e02e      	b.n	80a0f8a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a0f2c:	4631      	mov	r1, r6
 80a0f2e:	a801      	add	r0, sp, #4
 80a0f30:	f7ff ffaf 	bl	80a0e92 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a0f34:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a0f36:	2010      	movs	r0, #16
 80a0f38:	f88d 3014 	strb.w	r3, [sp, #20]
 80a0f3c:	f7ff f8af 	bl	80a009e <_Znwj>
 80a0f40:	4605      	mov	r5, r0
 80a0f42:	b1d0      	cbz	r0, 80a0f7a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0f44:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0f46:	2014      	movs	r0, #20
 80a0f48:	f7ff f8a9 	bl	80a009e <_Znwj>
 80a0f4c:	4604      	mov	r4, r0
 80a0f4e:	b178      	cbz	r0, 80a0f70 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0f50:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a0f52:	4601      	mov	r1, r0
 80a0f54:	a801      	add	r0, sp, #4
 80a0f56:	f7ff fce5 	bl	80a0924 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0f5a:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a0f5c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0f5e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0f60:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a0f62:	9203      	str	r2, [sp, #12]
 80a0f64:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0f66:	60e3      	str	r3, [r4, #12]
 80a0f68:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0f6c:	9204      	str	r2, [sp, #16]
 80a0f6e:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0f70:	4b0a      	ldr	r3, [pc, #40]	; (80a0f9c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0f72:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0f74:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a0f76:	4b0a      	ldr	r3, [pc, #40]	; (80a0fa0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a0f78:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0f7a:	a801      	add	r0, sp, #4
 80a0f7c:	f7ff fcc3 	bl	80a0906 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a0f80:	2200      	movs	r2, #0
 80a0f82:	4629      	mov	r1, r5
 80a0f84:	4807      	ldr	r0, [pc, #28]	; (80a0fa4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a0f86:	f7ff faff 	bl	80a0588 <application_thread_invoke>
 80a0f8a:	4630      	mov	r0, r6
 80a0f8c:	f7ff fcbb 	bl	80a0906 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a0f90:	2110      	movs	r1, #16
 80a0f92:	4630      	mov	r0, r6
 80a0f94:	f000 fbcb 	bl	80a172e <_ZdlPvj>
        }
    }
 80a0f98:	b007      	add	sp, #28
 80a0f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0f9c:	080a0be3 	.word	0x080a0be3
 80a0fa0:	080a0eb1 	.word	0x080a0eb1
 80a0fa4:	080a1391 	.word	0x080a1391

080a0fa8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a0fa8:	b530      	push	{r4, r5, lr}
 80a0faa:	4604      	mov	r4, r0
 80a0fac:	b085      	sub	sp, #20
 80a0fae:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a0fb0:	4668      	mov	r0, sp
 80a0fb2:	4611      	mov	r1, r2
 80a0fb4:	f7ff fdc9 	bl	80a0b4a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a0fb8:	b17c      	cbz	r4, 80a0fda <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a0fba:	b224      	sxth	r4, r4
 80a0fbc:	4628      	mov	r0, r5
 80a0fbe:	b10d      	cbz	r5, 80a0fc4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80a0fc0:	f001 f966 	bl	80a2290 <strdup>
 80a0fc4:	9002      	str	r0, [sp, #8]
 80a0fc6:	a902      	add	r1, sp, #8
 80a0fc8:	4668      	mov	r0, sp
 80a0fca:	f8ad 400c 	strh.w	r4, [sp, #12]
 80a0fce:	f7ff fe1f 	bl	80a0c10 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a0fd2:	a802      	add	r0, sp, #8
 80a0fd4:	f7ff fd7e 	bl	80a0ad4 <_ZN8particle5ErrorD1Ev>
 80a0fd8:	e01d      	b.n	80a1016 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a0fda:	f04f 0201 	mov.w	r2, #1
 80a0fde:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a0fe0:	f88d 4008 	strb.w	r4, [sp, #8]
 80a0fe4:	e8d0 3f4f 	ldrexb	r3, [r0]
 80a0fe8:	42a3      	cmp	r3, r4
 80a0fea:	d103      	bne.n	80a0ff4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80a0fec:	e8c0 2f41 	strexb	r1, r2, [r0]
 80a0ff0:	2900      	cmp	r1, #0
 80a0ff2:	d1f7      	bne.n	80a0fe4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80a0ff4:	d002      	beq.n	80a0ffc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80a0ff6:	f88d 3008 	strb.w	r3, [sp, #8]
 80a0ffa:	e00c      	b.n	80a1016 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80a0ffc:	f110 010c 	adds.w	r1, r0, #12
 80a1000:	f04f 0301 	mov.w	r3, #1
 80a1004:	bf18      	it	ne
 80a1006:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a1008:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80a100c:	3004      	adds	r0, #4
 80a100e:	f800 3c03 	strb.w	r3, [r0, #-3]
 80a1012:	f7ff ff71 	bl	80a0ef8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a1016:	a801      	add	r0, sp, #4
 80a1018:	f7ff fc43 	bl	80a08a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80a101c:	b005      	add	sp, #20
 80a101e:	bd30      	pop	{r4, r5, pc}

080a1020 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1020:	4770      	bx	lr

080a1022 <_ZN9IPAddressD0Ev>:
 80a1022:	b510      	push	{r4, lr}
 80a1024:	4604      	mov	r4, r0
 80a1026:	2118      	movs	r1, #24
 80a1028:	f000 fb81 	bl	80a172e <_ZdlPvj>
 80a102c:	4620      	mov	r0, r4
 80a102e:	bd10      	pop	{r4, pc}

080a1030 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1032:	460f      	mov	r7, r1
 80a1034:	f100 0608 	add.w	r6, r0, #8
 80a1038:	1d05      	adds	r5, r0, #4
 80a103a:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a103c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a1040:	220a      	movs	r2, #10
 80a1042:	4638      	mov	r0, r7
 80a1044:	f7ff fc25 	bl	80a0892 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1048:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a104a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a104c:	d007      	beq.n	80a105e <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a104e:	2c00      	cmp	r4, #0
 80a1050:	d0f4      	beq.n	80a103c <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1052:	212e      	movs	r1, #46	; 0x2e
 80a1054:	4638      	mov	r0, r7
 80a1056:	f7ff fbef 	bl	80a0838 <_ZN5Print5printEc>
 80a105a:	4404      	add	r4, r0
 80a105c:	e7ee      	b.n	80a103c <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a105e:	4620      	mov	r0, r4
 80a1060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a1064 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a1064:	b510      	push	{r4, lr}
 80a1066:	4604      	mov	r4, r0
 80a1068:	4b04      	ldr	r3, [pc, #16]	; (80a107c <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a106a:	2211      	movs	r2, #17
 80a106c:	f840 3b04 	str.w	r3, [r0], #4
 80a1070:	2100      	movs	r1, #0
 80a1072:	f001 f8dc 	bl	80a222e <memset>
{
    clear();
}
 80a1076:	4620      	mov	r0, r4
 80a1078:	bd10      	pop	{r4, pc}
 80a107a:	bf00      	nop
 80a107c:	080a2458 	.word	0x080a2458

080a1080 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1080:	4603      	mov	r3, r0
 80a1082:	4a07      	ldr	r2, [pc, #28]	; (80a10a0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a1084:	b510      	push	{r4, lr}
 80a1086:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a108a:	f101 0210 	add.w	r2, r1, #16
 80a108e:	f851 4b04 	ldr.w	r4, [r1], #4
 80a1092:	4291      	cmp	r1, r2
 80a1094:	f843 4b04 	str.w	r4, [r3], #4
 80a1098:	d1f9      	bne.n	80a108e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a109a:	780a      	ldrb	r2, [r1, #0]
 80a109c:	701a      	strb	r2, [r3, #0]
}
 80a109e:	bd10      	pop	{r4, pc}
 80a10a0:	080a2458 	.word	0x080a2458

080a10a4 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a10a4:	4a02      	ldr	r2, [pc, #8]	; (80a10b0 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a10a6:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a10a8:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a10aa:	2204      	movs	r2, #4
 80a10ac:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a10ae:	4770      	bx	lr
 80a10b0:	080a2458 	.word	0x080a2458

080a10b4 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a10b4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a10b6:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a10ba:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a10be:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a10c2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a10c6:	2304      	movs	r3, #4
 80a10c8:	6041      	str	r1, [r0, #4]
 80a10ca:	7503      	strb	r3, [r0, #20]
 80a10cc:	bd10      	pop	{r4, pc}
	...

080a10d0 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a10d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a10d2:	4d04      	ldr	r5, [pc, #16]	; (80a10e4 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a10d4:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a10d6:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a10da:	9500      	str	r5, [sp, #0]
 80a10dc:	f7ff ffea 	bl	80a10b4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a10e0:	b003      	add	sp, #12
 80a10e2:	bd30      	pop	{r4, r5, pc}
 80a10e4:	080a2458 	.word	0x080a2458

080a10e8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a10e8:	7441      	strb	r1, [r0, #17]
 80a10ea:	4770      	bx	lr

080a10ec <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a10ec:	4770      	bx	lr

080a10ee <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a10ee:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a10f0:	2100      	movs	r1, #0
 80a10f2:	7c00      	ldrb	r0, [r0, #16]
 80a10f4:	f7ff fa10 	bl	80a0518 <HAL_USB_USART_Receive_Data>
}
 80a10f8:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a10fc:	bf28      	it	cs
 80a10fe:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1102:	bd08      	pop	{r3, pc}

080a1104 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a1104:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a1106:	2101      	movs	r1, #1
 80a1108:	7c00      	ldrb	r0, [r0, #16]
 80a110a:	f7ff fa05 	bl	80a0518 <HAL_USB_USART_Receive_Data>
}
 80a110e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1112:	bf28      	it	cs
 80a1114:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1118:	bd08      	pop	{r3, pc}

080a111a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a111a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a111c:	7c00      	ldrb	r0, [r0, #16]
 80a111e:	f7ff f9f3 	bl	80a0508 <HAL_USB_USART_Available_Data_For_Write>
}
 80a1122:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1126:	bd08      	pop	{r3, pc}

080a1128 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a1128:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a112a:	7c00      	ldrb	r0, [r0, #16]
 80a112c:	f7ff f9e4 	bl	80a04f8 <HAL_USB_USART_Available_Data>
}
 80a1130:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1134:	bd08      	pop	{r3, pc}

080a1136 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a1136:	7c00      	ldrb	r0, [r0, #16]
 80a1138:	f7ff b9fe 	b.w	80a0538 <HAL_USB_USART_Flush_Data>

080a113c <_ZN9USBSerialD0Ev>:
 80a113c:	b510      	push	{r4, lr}
 80a113e:	4604      	mov	r4, r0
 80a1140:	2114      	movs	r1, #20
 80a1142:	f000 faf4 	bl	80a172e <_ZdlPvj>
 80a1146:	4620      	mov	r0, r4
 80a1148:	bd10      	pop	{r4, pc}

080a114a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a114a:	b538      	push	{r3, r4, r5, lr}
 80a114c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a114e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a1150:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1152:	f7ff f9d9 	bl	80a0508 <HAL_USB_USART_Available_Data_For_Write>
 80a1156:	2800      	cmp	r0, #0
 80a1158:	dc01      	bgt.n	80a115e <_ZN9USBSerial5writeEh+0x14>
 80a115a:	7c60      	ldrb	r0, [r4, #17]
 80a115c:	b128      	cbz	r0, 80a116a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a115e:	4629      	mov	r1, r5
 80a1160:	7c20      	ldrb	r0, [r4, #16]
 80a1162:	f7ff f9e1 	bl	80a0528 <HAL_USB_USART_Send_Data>
 80a1166:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a116a:	bd38      	pop	{r3, r4, r5, pc}

080a116c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a116c:	b510      	push	{r4, lr}
 80a116e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1170:	2300      	movs	r3, #0
 80a1172:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1174:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1178:	60a3      	str	r3, [r4, #8]
 80a117a:	4b05      	ldr	r3, [pc, #20]	; (80a1190 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a117c:	4608      	mov	r0, r1
 80a117e:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a1180:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a1182:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a1184:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a1186:	4611      	mov	r1, r2
 80a1188:	f7ff f9a6 	bl	80a04d8 <HAL_USB_USART_Init>
}
 80a118c:	4620      	mov	r0, r4
 80a118e:	bd10      	pop	{r4, pc}
 80a1190:	080a246c 	.word	0x080a246c

080a1194 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a1194:	2200      	movs	r2, #0
 80a1196:	7c00      	ldrb	r0, [r0, #16]
 80a1198:	f7ff b9a6 	b.w	80a04e8 <HAL_USB_USART_Begin>

080a119c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a119c:	b510      	push	{r4, lr}
 80a119e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a11a0:	2214      	movs	r2, #20
 80a11a2:	2100      	movs	r1, #0
 80a11a4:	f001 f843 	bl	80a222e <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a11a8:	4b05      	ldr	r3, [pc, #20]	; (80a11c0 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a11aa:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a11ac:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a11ae:	4b05      	ldr	r3, [pc, #20]	; (80a11c4 <_Z19acquireSerialBufferv+0x28>)
 80a11b0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a11b2:	f240 1301 	movw	r3, #257	; 0x101
 80a11b6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a11b8:	2381      	movs	r3, #129	; 0x81
 80a11ba:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a11bc:	bd10      	pop	{r4, pc}
 80a11be:	bf00      	nop
 80a11c0:	20000135 	.word	0x20000135
 80a11c4:	200000b4 	.word	0x200000b4

080a11c8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a11c8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a11ca:	4d0e      	ldr	r5, [pc, #56]	; (80a1204 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a11cc:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a11ce:	a801      	add	r0, sp, #4
 80a11d0:	f7ff ffe4 	bl	80a119c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a11d4:	6829      	ldr	r1, [r5, #0]
 80a11d6:	f011 0401 	ands.w	r4, r1, #1
 80a11da:	d110      	bne.n	80a11fe <_Z16_fetch_usbserialv+0x36>
 80a11dc:	4628      	mov	r0, r5
 80a11de:	f7fe ff62 	bl	80a00a6 <__cxa_guard_acquire>
 80a11e2:	b160      	cbz	r0, 80a11fe <_Z16_fetch_usbserialv+0x36>
 80a11e4:	aa01      	add	r2, sp, #4
 80a11e6:	4621      	mov	r1, r4
 80a11e8:	4807      	ldr	r0, [pc, #28]	; (80a1208 <_Z16_fetch_usbserialv+0x40>)
 80a11ea:	f7ff ffbf 	bl	80a116c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a11ee:	4628      	mov	r0, r5
 80a11f0:	f7fe ff5e 	bl	80a00b0 <__cxa_guard_release>
 80a11f4:	4a05      	ldr	r2, [pc, #20]	; (80a120c <_Z16_fetch_usbserialv+0x44>)
 80a11f6:	4906      	ldr	r1, [pc, #24]	; (80a1210 <_Z16_fetch_usbserialv+0x48>)
 80a11f8:	4803      	ldr	r0, [pc, #12]	; (80a1208 <_Z16_fetch_usbserialv+0x40>)
 80a11fa:	f000 fa93 	bl	80a1724 <__aeabi_atexit>
	return _usbserial;
}
 80a11fe:	4802      	ldr	r0, [pc, #8]	; (80a1208 <_Z16_fetch_usbserialv+0x40>)
 80a1200:	b007      	add	sp, #28
 80a1202:	bd30      	pop	{r4, r5, pc}
 80a1204:	200000b0 	.word	0x200000b0
 80a1208:	20000238 	.word	0x20000238
 80a120c:	20000068 	.word	0x20000068
 80a1210:	080a10ed 	.word	0x080a10ed

080a1214 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a1214:	b510      	push	{r4, lr}
 80a1216:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1218:	2214      	movs	r2, #20
 80a121a:	2100      	movs	r1, #0
 80a121c:	f001 f807 	bl	80a222e <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1220:	4b05      	ldr	r3, [pc, #20]	; (80a1238 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1222:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1224:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a1226:	4b05      	ldr	r3, [pc, #20]	; (80a123c <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a1228:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a122a:	f240 1301 	movw	r3, #257	; 0x101
 80a122e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1230:	2381      	movs	r3, #129	; 0x81
 80a1232:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1234:	bd10      	pop	{r4, pc}
 80a1236:	bf00      	nop
 80a1238:	200002e8 	.word	0x200002e8
 80a123c:	20000250 	.word	0x20000250

080a1240 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1240:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1242:	4c0e      	ldr	r4, [pc, #56]	; (80a127c <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a1244:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a1246:	a801      	add	r0, sp, #4
 80a1248:	f7ff ffe4 	bl	80a1214 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a124c:	6823      	ldr	r3, [r4, #0]
 80a124e:	07db      	lsls	r3, r3, #31
 80a1250:	d410      	bmi.n	80a1274 <_Z17_fetch_usbserial1v+0x34>
 80a1252:	4620      	mov	r0, r4
 80a1254:	f7fe ff27 	bl	80a00a6 <__cxa_guard_acquire>
 80a1258:	b160      	cbz	r0, 80a1274 <_Z17_fetch_usbserial1v+0x34>
 80a125a:	aa01      	add	r2, sp, #4
 80a125c:	2101      	movs	r1, #1
 80a125e:	4808      	ldr	r0, [pc, #32]	; (80a1280 <_Z17_fetch_usbserial1v+0x40>)
 80a1260:	f7ff ff84 	bl	80a116c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1264:	4620      	mov	r0, r4
 80a1266:	f7fe ff23 	bl	80a00b0 <__cxa_guard_release>
 80a126a:	4a06      	ldr	r2, [pc, #24]	; (80a1284 <_Z17_fetch_usbserial1v+0x44>)
 80a126c:	4906      	ldr	r1, [pc, #24]	; (80a1288 <_Z17_fetch_usbserial1v+0x48>)
 80a126e:	4804      	ldr	r0, [pc, #16]	; (80a1280 <_Z17_fetch_usbserial1v+0x40>)
 80a1270:	f000 fa58 	bl	80a1724 <__aeabi_atexit>
  return _usbserial1;
}
 80a1274:	4802      	ldr	r0, [pc, #8]	; (80a1280 <_Z17_fetch_usbserial1v+0x40>)
 80a1276:	b006      	add	sp, #24
 80a1278:	bd10      	pop	{r4, pc}
 80a127a:	bf00      	nop
 80a127c:	2000024c 	.word	0x2000024c
 80a1280:	200002d4 	.word	0x200002d4
 80a1284:	20000068 	.word	0x20000068
 80a1288:	080a10ed 	.word	0x080a10ed

080a128c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a128c:	4770      	bx	lr

080a128e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a128e:	7441      	strb	r1, [r0, #17]
 80a1290:	4770      	bx	lr

080a1292 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a1292:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a1294:	7c00      	ldrb	r0, [r0, #16]
 80a1296:	f7ff f8bd 	bl	80a0414 <HAL_USART_Available_Data_For_Write>
}
 80a129a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a129e:	bd08      	pop	{r3, pc}

080a12a0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a12a0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a12a2:	7c00      	ldrb	r0, [r0, #16]
 80a12a4:	f7ff f88e 	bl	80a03c4 <HAL_USART_Available_Data>
}
 80a12a8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a12ac:	bd08      	pop	{r3, pc}

080a12ae <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a12ae:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a12b0:	7c00      	ldrb	r0, [r0, #16]
 80a12b2:	f7ff f897 	bl	80a03e4 <HAL_USART_Peek_Data>
}
 80a12b6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a12ba:	bf28      	it	cs
 80a12bc:	f04f 30ff 	movcs.w	r0, #4294967295
 80a12c0:	bd08      	pop	{r3, pc}

080a12c2 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a12c2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a12c4:	7c00      	ldrb	r0, [r0, #16]
 80a12c6:	f7ff f885 	bl	80a03d4 <HAL_USART_Read_Data>
}
 80a12ca:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a12ce:	bf28      	it	cs
 80a12d0:	f04f 30ff 	movcs.w	r0, #4294967295
 80a12d4:	bd08      	pop	{r3, pc}

080a12d6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a12d6:	7c00      	ldrb	r0, [r0, #16]
 80a12d8:	f7ff b88c 	b.w	80a03f4 <HAL_USART_Flush_Data>

080a12dc <_ZN11USARTSerialD0Ev>:
 80a12dc:	b510      	push	{r4, lr}
 80a12de:	4604      	mov	r4, r0
 80a12e0:	2114      	movs	r1, #20
 80a12e2:	f000 fa24 	bl	80a172e <_ZdlPvj>
 80a12e6:	4620      	mov	r0, r4
 80a12e8:	bd10      	pop	{r4, pc}

080a12ea <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a12ea:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a12ec:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a12ee:	4604      	mov	r4, r0
 80a12f0:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a12f2:	b925      	cbnz	r5, 80a12fe <_ZN11USARTSerial5writeEh+0x14>
 80a12f4:	7c00      	ldrb	r0, [r0, #16]
 80a12f6:	f7ff f88d 	bl	80a0414 <HAL_USART_Available_Data_For_Write>
 80a12fa:	2800      	cmp	r0, #0
 80a12fc:	dd05      	ble.n	80a130a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a12fe:	4631      	mov	r1, r6
 80a1300:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a1302:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1306:	f7ff b855 	b.w	80a03b4 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a130a:	4628      	mov	r0, r5
 80a130c:	bd70      	pop	{r4, r5, r6, pc}
	...

080a1310 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1310:	b510      	push	{r4, lr}
 80a1312:	4604      	mov	r4, r0
 80a1314:	4608      	mov	r0, r1
 80a1316:	4611      	mov	r1, r2
 80a1318:	2200      	movs	r2, #0
 80a131a:	6062      	str	r2, [r4, #4]
 80a131c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1320:	60a2      	str	r2, [r4, #8]
 80a1322:	4a05      	ldr	r2, [pc, #20]	; (80a1338 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a1324:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1326:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a1328:	2201      	movs	r2, #1
 80a132a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a132c:	461a      	mov	r2, r3
 80a132e:	f7ff f839 	bl	80a03a4 <HAL_USART_Init>
}
 80a1332:	4620      	mov	r0, r4
 80a1334:	bd10      	pop	{r4, pc}
 80a1336:	bf00      	nop
 80a1338:	080a249c 	.word	0x080a249c

080a133c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a133c:	7c00      	ldrb	r0, [r0, #16]
 80a133e:	f7ff b861 	b.w	80a0404 <HAL_USART_Is_Enabled>
	...

080a1344 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a1344:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a1346:	4d0c      	ldr	r5, [pc, #48]	; (80a1378 <_Z22__fetch_global_Serial1v+0x34>)
 80a1348:	6829      	ldr	r1, [r5, #0]
 80a134a:	f011 0401 	ands.w	r4, r1, #1
 80a134e:	d111      	bne.n	80a1374 <_Z22__fetch_global_Serial1v+0x30>
 80a1350:	4628      	mov	r0, r5
 80a1352:	f7fe fea8 	bl	80a00a6 <__cxa_guard_acquire>
 80a1356:	b168      	cbz	r0, 80a1374 <_Z22__fetch_global_Serial1v+0x30>
 80a1358:	4a08      	ldr	r2, [pc, #32]	; (80a137c <_Z22__fetch_global_Serial1v+0x38>)
 80a135a:	4621      	mov	r1, r4
 80a135c:	4b08      	ldr	r3, [pc, #32]	; (80a1380 <_Z22__fetch_global_Serial1v+0x3c>)
 80a135e:	4809      	ldr	r0, [pc, #36]	; (80a1384 <_Z22__fetch_global_Serial1v+0x40>)
 80a1360:	f7ff ffd6 	bl	80a1310 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a1364:	4628      	mov	r0, r5
 80a1366:	f7fe fea3 	bl	80a00b0 <__cxa_guard_release>
 80a136a:	4a07      	ldr	r2, [pc, #28]	; (80a1388 <_Z22__fetch_global_Serial1v+0x44>)
 80a136c:	4907      	ldr	r1, [pc, #28]	; (80a138c <_Z22__fetch_global_Serial1v+0x48>)
 80a136e:	4805      	ldr	r0, [pc, #20]	; (80a1384 <_Z22__fetch_global_Serial1v+0x40>)
 80a1370:	f000 f9d8 	bl	80a1724 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a1374:	4803      	ldr	r0, [pc, #12]	; (80a1384 <_Z22__fetch_global_Serial1v+0x40>)
 80a1376:	bd38      	pop	{r3, r4, r5, pc}
 80a1378:	20000484 	.word	0x20000484
 80a137c:	20000488 	.word	0x20000488
 80a1380:	20000400 	.word	0x20000400
 80a1384:	200003ec 	.word	0x200003ec
 80a1388:	20000068 	.word	0x20000068
 80a138c:	080a128d 	.word	0x080a128d

080a1390 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a1390:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1392:	6883      	ldr	r3, [r0, #8]
 80a1394:	4604      	mov	r4, r0
 80a1396:	b90b      	cbnz	r3, 80a139c <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a1398:	f000 f9cb 	bl	80a1732 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a139c:	68c3      	ldr	r3, [r0, #12]
 80a139e:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a13a0:	68a3      	ldr	r3, [r4, #8]
 80a13a2:	b11b      	cbz	r3, 80a13ac <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a13a4:	2203      	movs	r2, #3
 80a13a6:	4621      	mov	r1, r4
 80a13a8:	4620      	mov	r0, r4
 80a13aa:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a13ac:	4620      	mov	r0, r4
}
 80a13ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a13b2:	2110      	movs	r1, #16
 80a13b4:	f000 b9bb 	b.w	80a172e <_ZdlPvj>

080a13b8 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a13b8:	4770      	bx	lr

080a13ba <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a13ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a13bc:	4606      	mov	r6, r0
 80a13be:	4615      	mov	r5, r2
 80a13c0:	460c      	mov	r4, r1
 80a13c2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a13c4:	42bc      	cmp	r4, r7
 80a13c6:	d006      	beq.n	80a13d6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a13c8:	6833      	ldr	r3, [r6, #0]
 80a13ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a13ce:	689b      	ldr	r3, [r3, #8]
 80a13d0:	4630      	mov	r0, r6
 80a13d2:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a13d4:	e7f6      	b.n	80a13c4 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a13d6:	4628      	mov	r0, r5
 80a13d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a13da <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a13da:	2200      	movs	r2, #0
 80a13dc:	7c00      	ldrb	r0, [r0, #16]
 80a13de:	f7ff b841 	b.w	80a0464 <HAL_I2C_Write_Data>

080a13e2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a13e2:	2100      	movs	r1, #0
 80a13e4:	7c00      	ldrb	r0, [r0, #16]
 80a13e6:	f7ff b845 	b.w	80a0474 <HAL_I2C_Available_Data>

080a13ea <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a13ea:	2100      	movs	r1, #0
 80a13ec:	7c00      	ldrb	r0, [r0, #16]
 80a13ee:	f7ff b849 	b.w	80a0484 <HAL_I2C_Read_Data>

080a13f2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a13f2:	2100      	movs	r1, #0
 80a13f4:	7c00      	ldrb	r0, [r0, #16]
 80a13f6:	f7ff b84d 	b.w	80a0494 <HAL_I2C_Peek_Data>

080a13fa <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a13fa:	2100      	movs	r1, #0
 80a13fc:	7c00      	ldrb	r0, [r0, #16]
 80a13fe:	f7ff b851 	b.w	80a04a4 <HAL_I2C_Flush_Data>

080a1402 <_ZN7TwoWireD0Ev>:
 80a1402:	b510      	push	{r4, lr}
 80a1404:	4604      	mov	r4, r0
 80a1406:	2114      	movs	r1, #20
 80a1408:	f000 f991 	bl	80a172e <_ZdlPvj>
 80a140c:	4620      	mov	r0, r4
 80a140e:	bd10      	pop	{r4, pc}

080a1410 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1410:	b510      	push	{r4, lr}
 80a1412:	4604      	mov	r4, r0
 80a1414:	4608      	mov	r0, r1
 80a1416:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a141a:	60a3      	str	r3, [r4, #8]
 80a141c:	4b04      	ldr	r3, [pc, #16]	; (80a1430 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80a141e:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a1420:	7420      	strb	r0, [r4, #16]
 80a1422:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1424:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a1426:	f7ff f84d 	bl	80a04c4 <HAL_I2C_Init>

}
 80a142a:	4620      	mov	r0, r4
 80a142c:	bd10      	pop	{r4, pc}
 80a142e:	bf00      	nop
 80a1430:	080a24cc 	.word	0x080a24cc

080a1434 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a1434:	2300      	movs	r3, #0
 80a1436:	461a      	mov	r2, r3
 80a1438:	4619      	mov	r1, r3
 80a143a:	7c00      	ldrb	r0, [r0, #16]
 80a143c:	f7fe bff2 	b.w	80a0424 <HAL_I2C_Begin>

080a1440 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a1440:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a1442:	2400      	movs	r4, #0
 80a1444:	7c00      	ldrb	r0, [r0, #16]
 80a1446:	9400      	str	r4, [sp, #0]
 80a1448:	f7fe fff4 	bl	80a0434 <HAL_I2C_Request_Data>
  return result;
}
 80a144c:	b2c0      	uxtb	r0, r0
 80a144e:	b002      	add	sp, #8
 80a1450:	bd10      	pop	{r4, pc}

080a1452 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a1452:	2301      	movs	r3, #1
 80a1454:	f7ff bff4 	b.w	80a1440 <_ZN7TwoWire11requestFromEhhh>

080a1458 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a1458:	2200      	movs	r2, #0
 80a145a:	7c00      	ldrb	r0, [r0, #16]
 80a145c:	f7fe bff2 	b.w	80a0444 <HAL_I2C_Begin_Transmission>

080a1460 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a1460:	2200      	movs	r2, #0
 80a1462:	7c00      	ldrb	r0, [r0, #16]
 80a1464:	f7fe bff6 	b.w	80a0454 <HAL_I2C_End_Transmission>

080a1468 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a1468:	2101      	movs	r1, #1
 80a146a:	f7ff bff9 	b.w	80a1460 <_ZN7TwoWire15endTransmissionEh>

080a146e <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a146e:	2100      	movs	r1, #0
 80a1470:	7c00      	ldrb	r0, [r0, #16]
 80a1472:	f7ff b81f 	b.w	80a04b4 <HAL_I2C_Is_Enabled>

080a1476 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a1476:	2200      	movs	r2, #0
 80a1478:	4611      	mov	r1, r2
 80a147a:	6840      	ldr	r0, [r0, #4]
 80a147c:	f7ff b8b8 	b.w	80a05f0 <network_ready>

080a1480 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1480:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1482:	4616      	mov	r6, r2
 80a1484:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a1486:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1488:	460f      	mov	r7, r1
 80a148a:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a148c:	2100      	movs	r1, #0
 80a148e:	a803      	add	r0, sp, #12
 80a1490:	f000 fecd 	bl	80a222e <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1494:	4630      	mov	r0, r6
 80a1496:	f000 ff16 	bl	80a22c6 <strlen>
 80a149a:	2500      	movs	r5, #0
 80a149c:	9500      	str	r5, [sp, #0]
 80a149e:	b281      	uxth	r1, r0
 80a14a0:	687b      	ldr	r3, [r7, #4]
 80a14a2:	aa03      	add	r2, sp, #12
 80a14a4:	4630      	mov	r0, r6
 80a14a6:	f7ff f84f 	bl	80a0548 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a14aa:	b120      	cbz	r0, 80a14b6 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a14ac:	4629      	mov	r1, r5
 80a14ae:	4620      	mov	r0, r4
 80a14b0:	f7ff fdf8 	bl	80a10a4 <_ZN9IPAddressC1Em>
 80a14b4:	e003      	b.n	80a14be <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a14b6:	a903      	add	r1, sp, #12
 80a14b8:	4620      	mov	r0, r4
 80a14ba:	f7ff fde1 	bl	80a1080 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a14be:	4620      	mov	r0, r4
 80a14c0:	b009      	add	sp, #36	; 0x24
 80a14c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a14c4 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a14c4:	2200      	movs	r2, #0
 80a14c6:	4611      	mov	r1, r2
 80a14c8:	6840      	ldr	r0, [r0, #4]
 80a14ca:	f7ff b8b1 	b.w	80a0630 <network_listening>

080a14ce <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a14ce:	2200      	movs	r2, #0
 80a14d0:	4611      	mov	r1, r2
 80a14d2:	6840      	ldr	r0, [r0, #4]
 80a14d4:	f7ff b8bc 	b.w	80a0650 <network_get_listen_timeout>

080a14d8 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a14d8:	2200      	movs	r2, #0
 80a14da:	6840      	ldr	r0, [r0, #4]
 80a14dc:	f7ff b8b0 	b.w	80a0640 <network_set_listen_timeout>

080a14e0 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a14e0:	2200      	movs	r2, #0
 80a14e2:	f081 0101 	eor.w	r1, r1, #1
 80a14e6:	6840      	ldr	r0, [r0, #4]
 80a14e8:	f7ff b89a 	b.w	80a0620 <network_listen>

080a14ec <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a14ec:	2300      	movs	r3, #0
 80a14ee:	461a      	mov	r2, r3
 80a14f0:	4619      	mov	r1, r3
 80a14f2:	6840      	ldr	r0, [r0, #4]
 80a14f4:	f7ff b88c 	b.w	80a0610 <network_off>

080a14f8 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a14f8:	2200      	movs	r2, #0
 80a14fa:	4611      	mov	r1, r2
 80a14fc:	6840      	ldr	r0, [r0, #4]
 80a14fe:	f7ff b867 	b.w	80a05d0 <network_connecting>

080a1502 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a1502:	2200      	movs	r2, #0
 80a1504:	2102      	movs	r1, #2
 80a1506:	6840      	ldr	r0, [r0, #4]
 80a1508:	f7ff b86a 	b.w	80a05e0 <network_disconnect>

080a150c <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a150c:	2300      	movs	r3, #0
 80a150e:	461a      	mov	r2, r3
 80a1510:	6840      	ldr	r0, [r0, #4]
 80a1512:	f7ff b855 	b.w	80a05c0 <network_connect>
	...

080a1518 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1518:	4b02      	ldr	r3, [pc, #8]	; (80a1524 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a151a:	2204      	movs	r2, #4
 80a151c:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a151e:	4a02      	ldr	r2, [pc, #8]	; (80a1528 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a1520:	601a      	str	r2, [r3, #0]
 80a1522:	4770      	bx	lr
 80a1524:	2000050c 	.word	0x2000050c
 80a1528:	080a24f4 	.word	0x080a24f4

080a152c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a152c:	2300      	movs	r3, #0
 80a152e:	461a      	mov	r2, r3
 80a1530:	6840      	ldr	r0, [r0, #4]
 80a1532:	f7ff b845 	b.w	80a05c0 <network_connect>

080a1536 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a1536:	2200      	movs	r2, #0
 80a1538:	2102      	movs	r1, #2
 80a153a:	6840      	ldr	r0, [r0, #4]
 80a153c:	f7ff b850 	b.w	80a05e0 <network_disconnect>

080a1540 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a1540:	2200      	movs	r2, #0
 80a1542:	4611      	mov	r1, r2
 80a1544:	6840      	ldr	r0, [r0, #4]
 80a1546:	f7ff b843 	b.w	80a05d0 <network_connecting>

080a154a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a154a:	2200      	movs	r2, #0
 80a154c:	4611      	mov	r1, r2
 80a154e:	6840      	ldr	r0, [r0, #4]
 80a1550:	f7ff b84e 	b.w	80a05f0 <network_ready>

080a1554 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a1554:	2300      	movs	r3, #0
 80a1556:	461a      	mov	r2, r3
 80a1558:	4619      	mov	r1, r3
 80a155a:	6840      	ldr	r0, [r0, #4]
 80a155c:	f7ff b850 	b.w	80a0600 <network_on>

080a1560 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a1560:	2300      	movs	r3, #0
 80a1562:	461a      	mov	r2, r3
 80a1564:	4619      	mov	r1, r3
 80a1566:	6840      	ldr	r0, [r0, #4]
 80a1568:	f7ff b852 	b.w	80a0610 <network_off>

080a156c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a156c:	2200      	movs	r2, #0
 80a156e:	f081 0101 	eor.w	r1, r1, #1
 80a1572:	6840      	ldr	r0, [r0, #4]
 80a1574:	f7ff b854 	b.w	80a0620 <network_listen>

080a1578 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a1578:	2200      	movs	r2, #0
 80a157a:	6840      	ldr	r0, [r0, #4]
 80a157c:	f7ff b860 	b.w	80a0640 <network_set_listen_timeout>

080a1580 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a1580:	2200      	movs	r2, #0
 80a1582:	4611      	mov	r1, r2
 80a1584:	6840      	ldr	r0, [r0, #4]
 80a1586:	f7ff b863 	b.w	80a0650 <network_get_listen_timeout>

080a158a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a158a:	2200      	movs	r2, #0
 80a158c:	4611      	mov	r1, r2
 80a158e:	6840      	ldr	r0, [r0, #4]
 80a1590:	f7ff b84e 	b.w	80a0630 <network_listening>

080a1594 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a1594:	b570      	push	{r4, r5, r6, lr}
 80a1596:	4616      	mov	r6, r2
 80a1598:	b08e      	sub	sp, #56	; 0x38
 80a159a:	4604      	mov	r4, r0
    IPAddress addr;
 80a159c:	a808      	add	r0, sp, #32
 80a159e:	f7ff fd61 	bl	80a1064 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a15a2:	2211      	movs	r2, #17
 80a15a4:	2100      	movs	r1, #0
 80a15a6:	a803      	add	r0, sp, #12
 80a15a8:	f000 fe41 	bl	80a222e <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a15ac:	4630      	mov	r0, r6
 80a15ae:	f000 fe8a 	bl	80a22c6 <strlen>
 80a15b2:	2500      	movs	r5, #0
 80a15b4:	4b0a      	ldr	r3, [pc, #40]	; (80a15e0 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a15b6:	9500      	str	r5, [sp, #0]
 80a15b8:	b281      	uxth	r1, r0
 80a15ba:	685b      	ldr	r3, [r3, #4]
 80a15bc:	aa03      	add	r2, sp, #12
 80a15be:	4630      	mov	r0, r6
 80a15c0:	f7fe ffc2 	bl	80a0548 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a15c4:	b120      	cbz	r0, 80a15d0 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a15c6:	4629      	mov	r1, r5
 80a15c8:	4620      	mov	r0, r4
 80a15ca:	f7ff fd6b 	bl	80a10a4 <_ZN9IPAddressC1Em>
 80a15ce:	e003      	b.n	80a15d8 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a15d0:	a903      	add	r1, sp, #12
 80a15d2:	4620      	mov	r0, r4
 80a15d4:	f7ff fd54 	bl	80a1080 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a15d8:	4620      	mov	r0, r4
 80a15da:	b00e      	add	sp, #56	; 0x38
 80a15dc:	bd70      	pop	{r4, r5, r6, pc}
 80a15de:	bf00      	nop
 80a15e0:	2000050c 	.word	0x2000050c

080a15e4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a15e4:	4b02      	ldr	r3, [pc, #8]	; (80a15f0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a15e6:	4a03      	ldr	r2, [pc, #12]	; (80a15f4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a15e8:	601a      	str	r2, [r3, #0]
 80a15ea:	2200      	movs	r2, #0
 80a15ec:	605a      	str	r2, [r3, #4]
 80a15ee:	4770      	bx	lr
 80a15f0:	20000514 	.word	0x20000514
 80a15f4:	080a2528 	.word	0x080a2528

080a15f8 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a15f8:	b510      	push	{r4, lr}
 80a15fa:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a15fc:	480f      	ldr	r0, [pc, #60]	; (80a163c <pinAvailable+0x44>)
 80a15fe:	f7ff f88b 	bl	80a0718 <_ZN8SPIClass9isEnabledEv>
 80a1602:	b128      	cbz	r0, 80a1610 <pinAvailable+0x18>
 80a1604:	f1a4 030d 	sub.w	r3, r4, #13
 80a1608:	2b02      	cmp	r3, #2
 80a160a:	d801      	bhi.n	80a1610 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a160c:	2000      	movs	r0, #0
 80a160e:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a1610:	f000 f868 	bl	80a16e4 <_Z19__fetch_global_Wirev>
 80a1614:	f7ff ff2b 	bl	80a146e <_ZN7TwoWire9isEnabledEv>
 80a1618:	b108      	cbz	r0, 80a161e <pinAvailable+0x26>
 80a161a:	2c01      	cmp	r4, #1
 80a161c:	d9f6      	bls.n	80a160c <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a161e:	f7ff fe91 	bl	80a1344 <_Z22__fetch_global_Serial1v>
 80a1622:	f7ff fe8b 	bl	80a133c <_ZN11USARTSerial9isEnabledEv>
 80a1626:	b118      	cbz	r0, 80a1630 <pinAvailable+0x38>
 80a1628:	f1a4 0312 	sub.w	r3, r4, #18
 80a162c:	2b01      	cmp	r3, #1
 80a162e:	d9ed      	bls.n	80a160c <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a1630:	2c17      	cmp	r4, #23
 80a1632:	bf8c      	ite	hi
 80a1634:	2000      	movhi	r0, #0
 80a1636:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a1638:	bd10      	pop	{r4, pc}
 80a163a:	bf00      	nop
 80a163c:	2000051c 	.word	0x2000051c

080a1640 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a1640:	b510      	push	{r4, lr}
 80a1642:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80a1644:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a1646:	bf9c      	itt	ls
 80a1648:	340a      	addls	r4, #10
 80a164a:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a164c:	4620      	mov	r0, r4
 80a164e:	f7ff ffd3 	bl	80a15f8 <pinAvailable>
 80a1652:	b150      	cbz	r0, 80a166a <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a1654:	2103      	movs	r1, #3
 80a1656:	4620      	mov	r0, r4
 80a1658:	f7fe fe6c 	bl	80a0334 <HAL_Validate_Pin_Function>
 80a165c:	2803      	cmp	r0, #3
 80a165e:	d104      	bne.n	80a166a <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a1660:	4620      	mov	r0, r4
}
 80a1662:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a1666:	f7fe be6d 	b.w	80a0344 <HAL_ADC_Read>
}
 80a166a:	2000      	movs	r0, #0
 80a166c:	bd10      	pop	{r4, pc}
	...

080a1670 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1670:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a1672:	4c0c      	ldr	r4, [pc, #48]	; (80a16a4 <_GLOBAL__sub_I_SPI+0x34>)
 80a1674:	4e0c      	ldr	r6, [pc, #48]	; (80a16a8 <_GLOBAL__sub_I_SPI+0x38>)
 80a1676:	4d0d      	ldr	r5, [pc, #52]	; (80a16ac <_GLOBAL__sub_I_SPI+0x3c>)
 80a1678:	2100      	movs	r1, #0
 80a167a:	4620      	mov	r0, r4
 80a167c:	f7ff f838 	bl	80a06f0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1680:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1682:	4c0b      	ldr	r4, [pc, #44]	; (80a16b0 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a1684:	4632      	mov	r2, r6
 80a1686:	4629      	mov	r1, r5
 80a1688:	f000 f84c 	bl	80a1724 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a168c:	2101      	movs	r1, #1
 80a168e:	4620      	mov	r0, r4
 80a1690:	f7ff f82e 	bl	80a06f0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1694:	4632      	mov	r2, r6
 80a1696:	4629      	mov	r1, r5
 80a1698:	4620      	mov	r0, r4
 80a169a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a169e:	f000 b841 	b.w	80a1724 <__aeabi_atexit>
 80a16a2:	bf00      	nop
 80a16a4:	2000051c 	.word	0x2000051c
 80a16a8:	20000068 	.word	0x20000068
 80a16ac:	080a06e1 	.word	0x080a06e1
 80a16b0:	2000052c 	.word	0x2000052c

080a16b4 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a16b4:	b513      	push	{r0, r1, r4, lr}
 80a16b6:	4c08      	ldr	r4, [pc, #32]	; (80a16d8 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a16b8:	2300      	movs	r3, #0
 80a16ba:	461a      	mov	r2, r3
 80a16bc:	4619      	mov	r1, r3
 80a16be:	9300      	str	r3, [sp, #0]
 80a16c0:	4620      	mov	r0, r4
 80a16c2:	f7ff fd05 	bl	80a10d0 <_ZN9IPAddressC1Ehhhh>
 80a16c6:	4620      	mov	r0, r4
 80a16c8:	4a04      	ldr	r2, [pc, #16]	; (80a16dc <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a16ca:	4905      	ldr	r1, [pc, #20]	; (80a16e0 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a16cc:	b002      	add	sp, #8
 80a16ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a16d2:	f000 b827 	b.w	80a1724 <__aeabi_atexit>
 80a16d6:	bf00      	nop
 80a16d8:	20000540 	.word	0x20000540
 80a16dc:	20000068 	.word	0x20000068
 80a16e0:	080a1021 	.word	0x080a1021

080a16e4 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a16e4:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a16e6:	4d0b      	ldr	r5, [pc, #44]	; (80a1714 <_Z19__fetch_global_Wirev+0x30>)
 80a16e8:	6829      	ldr	r1, [r5, #0]
 80a16ea:	f011 0401 	ands.w	r4, r1, #1
 80a16ee:	d10f      	bne.n	80a1710 <_Z19__fetch_global_Wirev+0x2c>
 80a16f0:	4628      	mov	r0, r5
 80a16f2:	f7fe fcd8 	bl	80a00a6 <__cxa_guard_acquire>
 80a16f6:	b158      	cbz	r0, 80a1710 <_Z19__fetch_global_Wirev+0x2c>
 80a16f8:	4621      	mov	r1, r4
 80a16fa:	4807      	ldr	r0, [pc, #28]	; (80a1718 <_Z19__fetch_global_Wirev+0x34>)
 80a16fc:	f7ff fe88 	bl	80a1410 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a1700:	4628      	mov	r0, r5
 80a1702:	f7fe fcd5 	bl	80a00b0 <__cxa_guard_release>
 80a1706:	4a05      	ldr	r2, [pc, #20]	; (80a171c <_Z19__fetch_global_Wirev+0x38>)
 80a1708:	4905      	ldr	r1, [pc, #20]	; (80a1720 <_Z19__fetch_global_Wirev+0x3c>)
 80a170a:	4803      	ldr	r0, [pc, #12]	; (80a1718 <_Z19__fetch_global_Wirev+0x34>)
 80a170c:	f000 f80a 	bl	80a1724 <__aeabi_atexit>
	return wire;
}
 80a1710:	4801      	ldr	r0, [pc, #4]	; (80a1718 <_Z19__fetch_global_Wirev+0x34>)
 80a1712:	bd38      	pop	{r3, r4, r5, pc}
 80a1714:	20000558 	.word	0x20000558
 80a1718:	2000055c 	.word	0x2000055c
 80a171c:	20000068 	.word	0x20000068
 80a1720:	080a13b9 	.word	0x080a13b9

080a1724 <__aeabi_atexit>:
 80a1724:	460b      	mov	r3, r1
 80a1726:	4601      	mov	r1, r0
 80a1728:	4618      	mov	r0, r3
 80a172a:	f000 bd67 	b.w	80a21fc <__cxa_atexit>

080a172e <_ZdlPvj>:
 80a172e:	f7fe bcb8 	b.w	80a00a2 <_ZdlPv>

080a1732 <_ZSt25__throw_bad_function_callv>:
 80a1732:	b508      	push	{r3, lr}
 80a1734:	f7fe ffc4 	bl	80a06c0 <abort>

080a1738 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1738:	4b18      	ldr	r3, [pc, #96]	; (80a179c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a173a:	681a      	ldr	r2, [r3, #0]
 80a173c:	07d1      	lsls	r1, r2, #31
 80a173e:	bf5c      	itt	pl
 80a1740:	2201      	movpl	r2, #1
 80a1742:	601a      	strpl	r2, [r3, #0]
 80a1744:	4b16      	ldr	r3, [pc, #88]	; (80a17a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1746:	681a      	ldr	r2, [r3, #0]
 80a1748:	07d2      	lsls	r2, r2, #31
 80a174a:	bf5c      	itt	pl
 80a174c:	2201      	movpl	r2, #1
 80a174e:	601a      	strpl	r2, [r3, #0]
 80a1750:	4b14      	ldr	r3, [pc, #80]	; (80a17a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1752:	681a      	ldr	r2, [r3, #0]
 80a1754:	07d0      	lsls	r0, r2, #31
 80a1756:	bf5c      	itt	pl
 80a1758:	2201      	movpl	r2, #1
 80a175a:	601a      	strpl	r2, [r3, #0]
 80a175c:	4b12      	ldr	r3, [pc, #72]	; (80a17a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a175e:	681a      	ldr	r2, [r3, #0]
 80a1760:	07d1      	lsls	r1, r2, #31
 80a1762:	bf5c      	itt	pl
 80a1764:	2201      	movpl	r2, #1
 80a1766:	601a      	strpl	r2, [r3, #0]
 80a1768:	4b10      	ldr	r3, [pc, #64]	; (80a17ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a176a:	681a      	ldr	r2, [r3, #0]
 80a176c:	07d2      	lsls	r2, r2, #31
 80a176e:	bf5c      	itt	pl
 80a1770:	2201      	movpl	r2, #1
 80a1772:	601a      	strpl	r2, [r3, #0]
 80a1774:	4b0e      	ldr	r3, [pc, #56]	; (80a17b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1776:	681a      	ldr	r2, [r3, #0]
 80a1778:	07d0      	lsls	r0, r2, #31
 80a177a:	bf5c      	itt	pl
 80a177c:	2201      	movpl	r2, #1
 80a177e:	601a      	strpl	r2, [r3, #0]
 80a1780:	4b0c      	ldr	r3, [pc, #48]	; (80a17b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1782:	681a      	ldr	r2, [r3, #0]
 80a1784:	07d1      	lsls	r1, r2, #31
 80a1786:	bf5c      	itt	pl
 80a1788:	2201      	movpl	r2, #1
 80a178a:	601a      	strpl	r2, [r3, #0]
 80a178c:	4b0a      	ldr	r3, [pc, #40]	; (80a17b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a178e:	681a      	ldr	r2, [r3, #0]
 80a1790:	07d2      	lsls	r2, r2, #31
 80a1792:	bf5c      	itt	pl
 80a1794:	2201      	movpl	r2, #1
 80a1796:	601a      	strpl	r2, [r3, #0]
 80a1798:	4770      	bx	lr
 80a179a:	bf00      	nop
 80a179c:	2000058c 	.word	0x2000058c
 80a17a0:	20000588 	.word	0x20000588
 80a17a4:	20000584 	.word	0x20000584
 80a17a8:	20000580 	.word	0x20000580
 80a17ac:	2000057c 	.word	0x2000057c
 80a17b0:	20000578 	.word	0x20000578
 80a17b4:	20000574 	.word	0x20000574
 80a17b8:	20000570 	.word	0x20000570

080a17bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a17bc:	4b24      	ldr	r3, [pc, #144]	; (80a1850 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a17be:	681a      	ldr	r2, [r3, #0]
 80a17c0:	07d0      	lsls	r0, r2, #31
 80a17c2:	bf5c      	itt	pl
 80a17c4:	2201      	movpl	r2, #1
 80a17c6:	601a      	strpl	r2, [r3, #0]
 80a17c8:	4b22      	ldr	r3, [pc, #136]	; (80a1854 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a17ca:	681a      	ldr	r2, [r3, #0]
 80a17cc:	07d1      	lsls	r1, r2, #31
 80a17ce:	bf5c      	itt	pl
 80a17d0:	2201      	movpl	r2, #1
 80a17d2:	601a      	strpl	r2, [r3, #0]
 80a17d4:	4b20      	ldr	r3, [pc, #128]	; (80a1858 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a17d6:	681a      	ldr	r2, [r3, #0]
 80a17d8:	07d2      	lsls	r2, r2, #31
 80a17da:	bf5c      	itt	pl
 80a17dc:	2201      	movpl	r2, #1
 80a17de:	601a      	strpl	r2, [r3, #0]
 80a17e0:	4b1e      	ldr	r3, [pc, #120]	; (80a185c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a17e2:	681a      	ldr	r2, [r3, #0]
 80a17e4:	07d0      	lsls	r0, r2, #31
 80a17e6:	bf5c      	itt	pl
 80a17e8:	2201      	movpl	r2, #1
 80a17ea:	601a      	strpl	r2, [r3, #0]
 80a17ec:	4b1c      	ldr	r3, [pc, #112]	; (80a1860 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a17ee:	681a      	ldr	r2, [r3, #0]
 80a17f0:	07d1      	lsls	r1, r2, #31
 80a17f2:	bf5c      	itt	pl
 80a17f4:	2201      	movpl	r2, #1
 80a17f6:	601a      	strpl	r2, [r3, #0]
 80a17f8:	4b1a      	ldr	r3, [pc, #104]	; (80a1864 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a17fa:	681a      	ldr	r2, [r3, #0]
 80a17fc:	07d2      	lsls	r2, r2, #31
 80a17fe:	bf5c      	itt	pl
 80a1800:	2201      	movpl	r2, #1
 80a1802:	601a      	strpl	r2, [r3, #0]
 80a1804:	4b18      	ldr	r3, [pc, #96]	; (80a1868 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a1806:	681a      	ldr	r2, [r3, #0]
 80a1808:	07d0      	lsls	r0, r2, #31
 80a180a:	bf5c      	itt	pl
 80a180c:	2201      	movpl	r2, #1
 80a180e:	601a      	strpl	r2, [r3, #0]
 80a1810:	4b16      	ldr	r3, [pc, #88]	; (80a186c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a1812:	681a      	ldr	r2, [r3, #0]
 80a1814:	07d1      	lsls	r1, r2, #31
 80a1816:	bf5c      	itt	pl
 80a1818:	2201      	movpl	r2, #1
 80a181a:	601a      	strpl	r2, [r3, #0]
 80a181c:	4b14      	ldr	r3, [pc, #80]	; (80a1870 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a181e:	681a      	ldr	r2, [r3, #0]
 80a1820:	07d2      	lsls	r2, r2, #31
 80a1822:	bf5c      	itt	pl
 80a1824:	2201      	movpl	r2, #1
 80a1826:	601a      	strpl	r2, [r3, #0]
 80a1828:	4b12      	ldr	r3, [pc, #72]	; (80a1874 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a182a:	681a      	ldr	r2, [r3, #0]
 80a182c:	07d0      	lsls	r0, r2, #31
 80a182e:	bf5c      	itt	pl
 80a1830:	2201      	movpl	r2, #1
 80a1832:	601a      	strpl	r2, [r3, #0]
 80a1834:	4b10      	ldr	r3, [pc, #64]	; (80a1878 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a1836:	681a      	ldr	r2, [r3, #0]
 80a1838:	07d1      	lsls	r1, r2, #31
 80a183a:	bf5c      	itt	pl
 80a183c:	2201      	movpl	r2, #1
 80a183e:	601a      	strpl	r2, [r3, #0]
 80a1840:	4b0e      	ldr	r3, [pc, #56]	; (80a187c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a1842:	681a      	ldr	r2, [r3, #0]
 80a1844:	07d2      	lsls	r2, r2, #31
 80a1846:	bf5c      	itt	pl
 80a1848:	2201      	movpl	r2, #1
 80a184a:	601a      	strpl	r2, [r3, #0]
 80a184c:	4770      	bx	lr
 80a184e:	bf00      	nop
 80a1850:	200005bc 	.word	0x200005bc
 80a1854:	200005b8 	.word	0x200005b8
 80a1858:	200005b4 	.word	0x200005b4
 80a185c:	200005b0 	.word	0x200005b0
 80a1860:	200005ac 	.word	0x200005ac
 80a1864:	200005a8 	.word	0x200005a8
 80a1868:	200005a4 	.word	0x200005a4
 80a186c:	200005a0 	.word	0x200005a0
 80a1870:	2000059c 	.word	0x2000059c
 80a1874:	20000598 	.word	0x20000598
 80a1878:	20000594 	.word	0x20000594
 80a187c:	20000590 	.word	0x20000590

080a1880 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a1880:	4b24      	ldr	r3, [pc, #144]	; (80a1914 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a1882:	681a      	ldr	r2, [r3, #0]
 80a1884:	07d0      	lsls	r0, r2, #31
 80a1886:	bf5c      	itt	pl
 80a1888:	2201      	movpl	r2, #1
 80a188a:	601a      	strpl	r2, [r3, #0]
 80a188c:	4b22      	ldr	r3, [pc, #136]	; (80a1918 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a188e:	681a      	ldr	r2, [r3, #0]
 80a1890:	07d1      	lsls	r1, r2, #31
 80a1892:	bf5c      	itt	pl
 80a1894:	2201      	movpl	r2, #1
 80a1896:	601a      	strpl	r2, [r3, #0]
 80a1898:	4b20      	ldr	r3, [pc, #128]	; (80a191c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a189a:	681a      	ldr	r2, [r3, #0]
 80a189c:	07d2      	lsls	r2, r2, #31
 80a189e:	bf5c      	itt	pl
 80a18a0:	2201      	movpl	r2, #1
 80a18a2:	601a      	strpl	r2, [r3, #0]
 80a18a4:	4b1e      	ldr	r3, [pc, #120]	; (80a1920 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a18a6:	681a      	ldr	r2, [r3, #0]
 80a18a8:	07d0      	lsls	r0, r2, #31
 80a18aa:	bf5c      	itt	pl
 80a18ac:	2201      	movpl	r2, #1
 80a18ae:	601a      	strpl	r2, [r3, #0]
 80a18b0:	4b1c      	ldr	r3, [pc, #112]	; (80a1924 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a18b2:	681a      	ldr	r2, [r3, #0]
 80a18b4:	07d1      	lsls	r1, r2, #31
 80a18b6:	bf5c      	itt	pl
 80a18b8:	2201      	movpl	r2, #1
 80a18ba:	601a      	strpl	r2, [r3, #0]
 80a18bc:	4b1a      	ldr	r3, [pc, #104]	; (80a1928 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a18be:	681a      	ldr	r2, [r3, #0]
 80a18c0:	07d2      	lsls	r2, r2, #31
 80a18c2:	bf5c      	itt	pl
 80a18c4:	2201      	movpl	r2, #1
 80a18c6:	601a      	strpl	r2, [r3, #0]
 80a18c8:	4b18      	ldr	r3, [pc, #96]	; (80a192c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a18ca:	681a      	ldr	r2, [r3, #0]
 80a18cc:	07d0      	lsls	r0, r2, #31
 80a18ce:	bf5c      	itt	pl
 80a18d0:	2201      	movpl	r2, #1
 80a18d2:	601a      	strpl	r2, [r3, #0]
 80a18d4:	4b16      	ldr	r3, [pc, #88]	; (80a1930 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a18d6:	681a      	ldr	r2, [r3, #0]
 80a18d8:	07d1      	lsls	r1, r2, #31
 80a18da:	bf5c      	itt	pl
 80a18dc:	2201      	movpl	r2, #1
 80a18de:	601a      	strpl	r2, [r3, #0]
 80a18e0:	4b14      	ldr	r3, [pc, #80]	; (80a1934 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a18e2:	681a      	ldr	r2, [r3, #0]
 80a18e4:	07d2      	lsls	r2, r2, #31
 80a18e6:	bf5c      	itt	pl
 80a18e8:	2201      	movpl	r2, #1
 80a18ea:	601a      	strpl	r2, [r3, #0]
 80a18ec:	4b12      	ldr	r3, [pc, #72]	; (80a1938 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a18ee:	681a      	ldr	r2, [r3, #0]
 80a18f0:	07d0      	lsls	r0, r2, #31
 80a18f2:	bf5c      	itt	pl
 80a18f4:	2201      	movpl	r2, #1
 80a18f6:	601a      	strpl	r2, [r3, #0]
 80a18f8:	4b10      	ldr	r3, [pc, #64]	; (80a193c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a18fa:	681a      	ldr	r2, [r3, #0]
 80a18fc:	07d1      	lsls	r1, r2, #31
 80a18fe:	bf5c      	itt	pl
 80a1900:	2201      	movpl	r2, #1
 80a1902:	601a      	strpl	r2, [r3, #0]
 80a1904:	4b0e      	ldr	r3, [pc, #56]	; (80a1940 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a1906:	681a      	ldr	r2, [r3, #0]
 80a1908:	07d2      	lsls	r2, r2, #31
 80a190a:	bf5c      	itt	pl
 80a190c:	2201      	movpl	r2, #1
 80a190e:	601a      	strpl	r2, [r3, #0]
 80a1910:	4770      	bx	lr
 80a1912:	bf00      	nop
 80a1914:	200005ec 	.word	0x200005ec
 80a1918:	200005e8 	.word	0x200005e8
 80a191c:	200005e4 	.word	0x200005e4
 80a1920:	200005e0 	.word	0x200005e0
 80a1924:	200005dc 	.word	0x200005dc
 80a1928:	200005d8 	.word	0x200005d8
 80a192c:	200005d4 	.word	0x200005d4
 80a1930:	200005d0 	.word	0x200005d0
 80a1934:	200005cc 	.word	0x200005cc
 80a1938:	200005c8 	.word	0x200005c8
 80a193c:	200005c4 	.word	0x200005c4
 80a1940:	200005c0 	.word	0x200005c0

080a1944 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1944:	4b18      	ldr	r3, [pc, #96]	; (80a19a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1946:	681a      	ldr	r2, [r3, #0]
 80a1948:	07d1      	lsls	r1, r2, #31
 80a194a:	bf5c      	itt	pl
 80a194c:	2201      	movpl	r2, #1
 80a194e:	601a      	strpl	r2, [r3, #0]
 80a1950:	4b16      	ldr	r3, [pc, #88]	; (80a19ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1952:	681a      	ldr	r2, [r3, #0]
 80a1954:	07d2      	lsls	r2, r2, #31
 80a1956:	bf5c      	itt	pl
 80a1958:	2201      	movpl	r2, #1
 80a195a:	601a      	strpl	r2, [r3, #0]
 80a195c:	4b14      	ldr	r3, [pc, #80]	; (80a19b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a195e:	681a      	ldr	r2, [r3, #0]
 80a1960:	07d0      	lsls	r0, r2, #31
 80a1962:	bf5c      	itt	pl
 80a1964:	2201      	movpl	r2, #1
 80a1966:	601a      	strpl	r2, [r3, #0]
 80a1968:	4b12      	ldr	r3, [pc, #72]	; (80a19b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a196a:	681a      	ldr	r2, [r3, #0]
 80a196c:	07d1      	lsls	r1, r2, #31
 80a196e:	bf5c      	itt	pl
 80a1970:	2201      	movpl	r2, #1
 80a1972:	601a      	strpl	r2, [r3, #0]
 80a1974:	4b10      	ldr	r3, [pc, #64]	; (80a19b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1976:	681a      	ldr	r2, [r3, #0]
 80a1978:	07d2      	lsls	r2, r2, #31
 80a197a:	bf5c      	itt	pl
 80a197c:	2201      	movpl	r2, #1
 80a197e:	601a      	strpl	r2, [r3, #0]
 80a1980:	4b0e      	ldr	r3, [pc, #56]	; (80a19bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1982:	681a      	ldr	r2, [r3, #0]
 80a1984:	07d0      	lsls	r0, r2, #31
 80a1986:	bf5c      	itt	pl
 80a1988:	2201      	movpl	r2, #1
 80a198a:	601a      	strpl	r2, [r3, #0]
 80a198c:	4b0c      	ldr	r3, [pc, #48]	; (80a19c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a198e:	681a      	ldr	r2, [r3, #0]
 80a1990:	07d1      	lsls	r1, r2, #31
 80a1992:	bf5c      	itt	pl
 80a1994:	2201      	movpl	r2, #1
 80a1996:	601a      	strpl	r2, [r3, #0]
 80a1998:	4b0a      	ldr	r3, [pc, #40]	; (80a19c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a199a:	681a      	ldr	r2, [r3, #0]
 80a199c:	07d2      	lsls	r2, r2, #31
 80a199e:	bf5c      	itt	pl
 80a19a0:	2201      	movpl	r2, #1
 80a19a2:	601a      	strpl	r2, [r3, #0]
 80a19a4:	4770      	bx	lr
 80a19a6:	bf00      	nop
 80a19a8:	2000060c 	.word	0x2000060c
 80a19ac:	20000608 	.word	0x20000608
 80a19b0:	20000604 	.word	0x20000604
 80a19b4:	20000600 	.word	0x20000600
 80a19b8:	200005fc 	.word	0x200005fc
 80a19bc:	200005f8 	.word	0x200005f8
 80a19c0:	200005f4 	.word	0x200005f4
 80a19c4:	200005f0 	.word	0x200005f0

080a19c8 <__aeabi_drsub>:
 80a19c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a19cc:	e002      	b.n	80a19d4 <__adddf3>
 80a19ce:	bf00      	nop

080a19d0 <__aeabi_dsub>:
 80a19d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a19d4 <__adddf3>:
 80a19d4:	b530      	push	{r4, r5, lr}
 80a19d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a19da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a19de:	ea94 0f05 	teq	r4, r5
 80a19e2:	bf08      	it	eq
 80a19e4:	ea90 0f02 	teqeq	r0, r2
 80a19e8:	bf1f      	itttt	ne
 80a19ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a19ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a19f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a19f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a19fa:	f000 80e2 	beq.w	80a1bc2 <__adddf3+0x1ee>
 80a19fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a1a02:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a1a06:	bfb8      	it	lt
 80a1a08:	426d      	neglt	r5, r5
 80a1a0a:	dd0c      	ble.n	80a1a26 <__adddf3+0x52>
 80a1a0c:	442c      	add	r4, r5
 80a1a0e:	ea80 0202 	eor.w	r2, r0, r2
 80a1a12:	ea81 0303 	eor.w	r3, r1, r3
 80a1a16:	ea82 0000 	eor.w	r0, r2, r0
 80a1a1a:	ea83 0101 	eor.w	r1, r3, r1
 80a1a1e:	ea80 0202 	eor.w	r2, r0, r2
 80a1a22:	ea81 0303 	eor.w	r3, r1, r3
 80a1a26:	2d36      	cmp	r5, #54	; 0x36
 80a1a28:	bf88      	it	hi
 80a1a2a:	bd30      	pophi	{r4, r5, pc}
 80a1a2c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a1a30:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a1a34:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a1a38:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a1a3c:	d002      	beq.n	80a1a44 <__adddf3+0x70>
 80a1a3e:	4240      	negs	r0, r0
 80a1a40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1a44:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a1a48:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a1a4c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a1a50:	d002      	beq.n	80a1a58 <__adddf3+0x84>
 80a1a52:	4252      	negs	r2, r2
 80a1a54:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a1a58:	ea94 0f05 	teq	r4, r5
 80a1a5c:	f000 80a7 	beq.w	80a1bae <__adddf3+0x1da>
 80a1a60:	f1a4 0401 	sub.w	r4, r4, #1
 80a1a64:	f1d5 0e20 	rsbs	lr, r5, #32
 80a1a68:	db0d      	blt.n	80a1a86 <__adddf3+0xb2>
 80a1a6a:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a1a6e:	fa22 f205 	lsr.w	r2, r2, r5
 80a1a72:	1880      	adds	r0, r0, r2
 80a1a74:	f141 0100 	adc.w	r1, r1, #0
 80a1a78:	fa03 f20e 	lsl.w	r2, r3, lr
 80a1a7c:	1880      	adds	r0, r0, r2
 80a1a7e:	fa43 f305 	asr.w	r3, r3, r5
 80a1a82:	4159      	adcs	r1, r3
 80a1a84:	e00e      	b.n	80a1aa4 <__adddf3+0xd0>
 80a1a86:	f1a5 0520 	sub.w	r5, r5, #32
 80a1a8a:	f10e 0e20 	add.w	lr, lr, #32
 80a1a8e:	2a01      	cmp	r2, #1
 80a1a90:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a1a94:	bf28      	it	cs
 80a1a96:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a1a9a:	fa43 f305 	asr.w	r3, r3, r5
 80a1a9e:	18c0      	adds	r0, r0, r3
 80a1aa0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a1aa4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1aa8:	d507      	bpl.n	80a1aba <__adddf3+0xe6>
 80a1aaa:	f04f 0e00 	mov.w	lr, #0
 80a1aae:	f1dc 0c00 	rsbs	ip, ip, #0
 80a1ab2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a1ab6:	eb6e 0101 	sbc.w	r1, lr, r1
 80a1aba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a1abe:	d31b      	bcc.n	80a1af8 <__adddf3+0x124>
 80a1ac0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a1ac4:	d30c      	bcc.n	80a1ae0 <__adddf3+0x10c>
 80a1ac6:	0849      	lsrs	r1, r1, #1
 80a1ac8:	ea5f 0030 	movs.w	r0, r0, rrx
 80a1acc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a1ad0:	f104 0401 	add.w	r4, r4, #1
 80a1ad4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a1ad8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a1adc:	f080 809a 	bcs.w	80a1c14 <__adddf3+0x240>
 80a1ae0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a1ae4:	bf08      	it	eq
 80a1ae6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a1aea:	f150 0000 	adcs.w	r0, r0, #0
 80a1aee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a1af2:	ea41 0105 	orr.w	r1, r1, r5
 80a1af6:	bd30      	pop	{r4, r5, pc}
 80a1af8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a1afc:	4140      	adcs	r0, r0
 80a1afe:	eb41 0101 	adc.w	r1, r1, r1
 80a1b02:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a1b06:	f1a4 0401 	sub.w	r4, r4, #1
 80a1b0a:	d1e9      	bne.n	80a1ae0 <__adddf3+0x10c>
 80a1b0c:	f091 0f00 	teq	r1, #0
 80a1b10:	bf04      	itt	eq
 80a1b12:	4601      	moveq	r1, r0
 80a1b14:	2000      	moveq	r0, #0
 80a1b16:	fab1 f381 	clz	r3, r1
 80a1b1a:	bf08      	it	eq
 80a1b1c:	3320      	addeq	r3, #32
 80a1b1e:	f1a3 030b 	sub.w	r3, r3, #11
 80a1b22:	f1b3 0220 	subs.w	r2, r3, #32
 80a1b26:	da0c      	bge.n	80a1b42 <__adddf3+0x16e>
 80a1b28:	320c      	adds	r2, #12
 80a1b2a:	dd08      	ble.n	80a1b3e <__adddf3+0x16a>
 80a1b2c:	f102 0c14 	add.w	ip, r2, #20
 80a1b30:	f1c2 020c 	rsb	r2, r2, #12
 80a1b34:	fa01 f00c 	lsl.w	r0, r1, ip
 80a1b38:	fa21 f102 	lsr.w	r1, r1, r2
 80a1b3c:	e00c      	b.n	80a1b58 <__adddf3+0x184>
 80a1b3e:	f102 0214 	add.w	r2, r2, #20
 80a1b42:	bfd8      	it	le
 80a1b44:	f1c2 0c20 	rsble	ip, r2, #32
 80a1b48:	fa01 f102 	lsl.w	r1, r1, r2
 80a1b4c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a1b50:	bfdc      	itt	le
 80a1b52:	ea41 010c 	orrle.w	r1, r1, ip
 80a1b56:	4090      	lslle	r0, r2
 80a1b58:	1ae4      	subs	r4, r4, r3
 80a1b5a:	bfa2      	ittt	ge
 80a1b5c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a1b60:	4329      	orrge	r1, r5
 80a1b62:	bd30      	popge	{r4, r5, pc}
 80a1b64:	ea6f 0404 	mvn.w	r4, r4
 80a1b68:	3c1f      	subs	r4, #31
 80a1b6a:	da1c      	bge.n	80a1ba6 <__adddf3+0x1d2>
 80a1b6c:	340c      	adds	r4, #12
 80a1b6e:	dc0e      	bgt.n	80a1b8e <__adddf3+0x1ba>
 80a1b70:	f104 0414 	add.w	r4, r4, #20
 80a1b74:	f1c4 0220 	rsb	r2, r4, #32
 80a1b78:	fa20 f004 	lsr.w	r0, r0, r4
 80a1b7c:	fa01 f302 	lsl.w	r3, r1, r2
 80a1b80:	ea40 0003 	orr.w	r0, r0, r3
 80a1b84:	fa21 f304 	lsr.w	r3, r1, r4
 80a1b88:	ea45 0103 	orr.w	r1, r5, r3
 80a1b8c:	bd30      	pop	{r4, r5, pc}
 80a1b8e:	f1c4 040c 	rsb	r4, r4, #12
 80a1b92:	f1c4 0220 	rsb	r2, r4, #32
 80a1b96:	fa20 f002 	lsr.w	r0, r0, r2
 80a1b9a:	fa01 f304 	lsl.w	r3, r1, r4
 80a1b9e:	ea40 0003 	orr.w	r0, r0, r3
 80a1ba2:	4629      	mov	r1, r5
 80a1ba4:	bd30      	pop	{r4, r5, pc}
 80a1ba6:	fa21 f004 	lsr.w	r0, r1, r4
 80a1baa:	4629      	mov	r1, r5
 80a1bac:	bd30      	pop	{r4, r5, pc}
 80a1bae:	f094 0f00 	teq	r4, #0
 80a1bb2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a1bb6:	bf06      	itte	eq
 80a1bb8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a1bbc:	3401      	addeq	r4, #1
 80a1bbe:	3d01      	subne	r5, #1
 80a1bc0:	e74e      	b.n	80a1a60 <__adddf3+0x8c>
 80a1bc2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a1bc6:	bf18      	it	ne
 80a1bc8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a1bcc:	d029      	beq.n	80a1c22 <__adddf3+0x24e>
 80a1bce:	ea94 0f05 	teq	r4, r5
 80a1bd2:	bf08      	it	eq
 80a1bd4:	ea90 0f02 	teqeq	r0, r2
 80a1bd8:	d005      	beq.n	80a1be6 <__adddf3+0x212>
 80a1bda:	ea54 0c00 	orrs.w	ip, r4, r0
 80a1bde:	bf04      	itt	eq
 80a1be0:	4619      	moveq	r1, r3
 80a1be2:	4610      	moveq	r0, r2
 80a1be4:	bd30      	pop	{r4, r5, pc}
 80a1be6:	ea91 0f03 	teq	r1, r3
 80a1bea:	bf1e      	ittt	ne
 80a1bec:	2100      	movne	r1, #0
 80a1bee:	2000      	movne	r0, #0
 80a1bf0:	bd30      	popne	{r4, r5, pc}
 80a1bf2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a1bf6:	d105      	bne.n	80a1c04 <__adddf3+0x230>
 80a1bf8:	0040      	lsls	r0, r0, #1
 80a1bfa:	4149      	adcs	r1, r1
 80a1bfc:	bf28      	it	cs
 80a1bfe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a1c02:	bd30      	pop	{r4, r5, pc}
 80a1c04:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a1c08:	bf3c      	itt	cc
 80a1c0a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a1c0e:	bd30      	popcc	{r4, r5, pc}
 80a1c10:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1c14:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a1c18:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a1c1c:	f04f 0000 	mov.w	r0, #0
 80a1c20:	bd30      	pop	{r4, r5, pc}
 80a1c22:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a1c26:	bf1a      	itte	ne
 80a1c28:	4619      	movne	r1, r3
 80a1c2a:	4610      	movne	r0, r2
 80a1c2c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a1c30:	bf1c      	itt	ne
 80a1c32:	460b      	movne	r3, r1
 80a1c34:	4602      	movne	r2, r0
 80a1c36:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a1c3a:	bf06      	itte	eq
 80a1c3c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a1c40:	ea91 0f03 	teqeq	r1, r3
 80a1c44:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a1c48:	bd30      	pop	{r4, r5, pc}
 80a1c4a:	bf00      	nop

080a1c4c <__aeabi_ui2d>:
 80a1c4c:	f090 0f00 	teq	r0, #0
 80a1c50:	bf04      	itt	eq
 80a1c52:	2100      	moveq	r1, #0
 80a1c54:	4770      	bxeq	lr
 80a1c56:	b530      	push	{r4, r5, lr}
 80a1c58:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1c5c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1c60:	f04f 0500 	mov.w	r5, #0
 80a1c64:	f04f 0100 	mov.w	r1, #0
 80a1c68:	e750      	b.n	80a1b0c <__adddf3+0x138>
 80a1c6a:	bf00      	nop

080a1c6c <__aeabi_i2d>:
 80a1c6c:	f090 0f00 	teq	r0, #0
 80a1c70:	bf04      	itt	eq
 80a1c72:	2100      	moveq	r1, #0
 80a1c74:	4770      	bxeq	lr
 80a1c76:	b530      	push	{r4, r5, lr}
 80a1c78:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1c7c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1c80:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a1c84:	bf48      	it	mi
 80a1c86:	4240      	negmi	r0, r0
 80a1c88:	f04f 0100 	mov.w	r1, #0
 80a1c8c:	e73e      	b.n	80a1b0c <__adddf3+0x138>
 80a1c8e:	bf00      	nop

080a1c90 <__aeabi_f2d>:
 80a1c90:	0042      	lsls	r2, r0, #1
 80a1c92:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a1c96:	ea4f 0131 	mov.w	r1, r1, rrx
 80a1c9a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a1c9e:	bf1f      	itttt	ne
 80a1ca0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a1ca4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a1ca8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a1cac:	4770      	bxne	lr
 80a1cae:	f092 0f00 	teq	r2, #0
 80a1cb2:	bf14      	ite	ne
 80a1cb4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a1cb8:	4770      	bxeq	lr
 80a1cba:	b530      	push	{r4, r5, lr}
 80a1cbc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a1cc0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1cc4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a1cc8:	e720      	b.n	80a1b0c <__adddf3+0x138>
 80a1cca:	bf00      	nop

080a1ccc <__aeabi_ul2d>:
 80a1ccc:	ea50 0201 	orrs.w	r2, r0, r1
 80a1cd0:	bf08      	it	eq
 80a1cd2:	4770      	bxeq	lr
 80a1cd4:	b530      	push	{r4, r5, lr}
 80a1cd6:	f04f 0500 	mov.w	r5, #0
 80a1cda:	e00a      	b.n	80a1cf2 <__aeabi_l2d+0x16>

080a1cdc <__aeabi_l2d>:
 80a1cdc:	ea50 0201 	orrs.w	r2, r0, r1
 80a1ce0:	bf08      	it	eq
 80a1ce2:	4770      	bxeq	lr
 80a1ce4:	b530      	push	{r4, r5, lr}
 80a1ce6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a1cea:	d502      	bpl.n	80a1cf2 <__aeabi_l2d+0x16>
 80a1cec:	4240      	negs	r0, r0
 80a1cee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1cf2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1cf6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1cfa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a1cfe:	f43f aedc 	beq.w	80a1aba <__adddf3+0xe6>
 80a1d02:	f04f 0203 	mov.w	r2, #3
 80a1d06:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a1d0a:	bf18      	it	ne
 80a1d0c:	3203      	addne	r2, #3
 80a1d0e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a1d12:	bf18      	it	ne
 80a1d14:	3203      	addne	r2, #3
 80a1d16:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a1d1a:	f1c2 0320 	rsb	r3, r2, #32
 80a1d1e:	fa00 fc03 	lsl.w	ip, r0, r3
 80a1d22:	fa20 f002 	lsr.w	r0, r0, r2
 80a1d26:	fa01 fe03 	lsl.w	lr, r1, r3
 80a1d2a:	ea40 000e 	orr.w	r0, r0, lr
 80a1d2e:	fa21 f102 	lsr.w	r1, r1, r2
 80a1d32:	4414      	add	r4, r2
 80a1d34:	e6c1      	b.n	80a1aba <__adddf3+0xe6>
 80a1d36:	bf00      	nop

080a1d38 <__aeabi_dmul>:
 80a1d38:	b570      	push	{r4, r5, r6, lr}
 80a1d3a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a1d3e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a1d42:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a1d46:	bf1d      	ittte	ne
 80a1d48:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a1d4c:	ea94 0f0c 	teqne	r4, ip
 80a1d50:	ea95 0f0c 	teqne	r5, ip
 80a1d54:	f000 f8de 	bleq	80a1f14 <__aeabi_dmul+0x1dc>
 80a1d58:	442c      	add	r4, r5
 80a1d5a:	ea81 0603 	eor.w	r6, r1, r3
 80a1d5e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a1d62:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a1d66:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a1d6a:	bf18      	it	ne
 80a1d6c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a1d70:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a1d74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a1d78:	d038      	beq.n	80a1dec <__aeabi_dmul+0xb4>
 80a1d7a:	fba0 ce02 	umull	ip, lr, r0, r2
 80a1d7e:	f04f 0500 	mov.w	r5, #0
 80a1d82:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a1d86:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a1d8a:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a1d8e:	f04f 0600 	mov.w	r6, #0
 80a1d92:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a1d96:	f09c 0f00 	teq	ip, #0
 80a1d9a:	bf18      	it	ne
 80a1d9c:	f04e 0e01 	orrne.w	lr, lr, #1
 80a1da0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a1da4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a1da8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a1dac:	d204      	bcs.n	80a1db8 <__aeabi_dmul+0x80>
 80a1dae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a1db2:	416d      	adcs	r5, r5
 80a1db4:	eb46 0606 	adc.w	r6, r6, r6
 80a1db8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a1dbc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a1dc0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a1dc4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a1dc8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a1dcc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a1dd0:	bf88      	it	hi
 80a1dd2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a1dd6:	d81e      	bhi.n	80a1e16 <__aeabi_dmul+0xde>
 80a1dd8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a1ddc:	bf08      	it	eq
 80a1dde:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a1de2:	f150 0000 	adcs.w	r0, r0, #0
 80a1de6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a1dea:	bd70      	pop	{r4, r5, r6, pc}
 80a1dec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a1df0:	ea46 0101 	orr.w	r1, r6, r1
 80a1df4:	ea40 0002 	orr.w	r0, r0, r2
 80a1df8:	ea81 0103 	eor.w	r1, r1, r3
 80a1dfc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a1e00:	bfc2      	ittt	gt
 80a1e02:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a1e06:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a1e0a:	bd70      	popgt	{r4, r5, r6, pc}
 80a1e0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a1e10:	f04f 0e00 	mov.w	lr, #0
 80a1e14:	3c01      	subs	r4, #1
 80a1e16:	f300 80ab 	bgt.w	80a1f70 <__aeabi_dmul+0x238>
 80a1e1a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a1e1e:	bfde      	ittt	le
 80a1e20:	2000      	movle	r0, #0
 80a1e22:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a1e26:	bd70      	pople	{r4, r5, r6, pc}
 80a1e28:	f1c4 0400 	rsb	r4, r4, #0
 80a1e2c:	3c20      	subs	r4, #32
 80a1e2e:	da35      	bge.n	80a1e9c <__aeabi_dmul+0x164>
 80a1e30:	340c      	adds	r4, #12
 80a1e32:	dc1b      	bgt.n	80a1e6c <__aeabi_dmul+0x134>
 80a1e34:	f104 0414 	add.w	r4, r4, #20
 80a1e38:	f1c4 0520 	rsb	r5, r4, #32
 80a1e3c:	fa00 f305 	lsl.w	r3, r0, r5
 80a1e40:	fa20 f004 	lsr.w	r0, r0, r4
 80a1e44:	fa01 f205 	lsl.w	r2, r1, r5
 80a1e48:	ea40 0002 	orr.w	r0, r0, r2
 80a1e4c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a1e50:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a1e54:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a1e58:	fa21 f604 	lsr.w	r6, r1, r4
 80a1e5c:	eb42 0106 	adc.w	r1, r2, r6
 80a1e60:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a1e64:	bf08      	it	eq
 80a1e66:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a1e6a:	bd70      	pop	{r4, r5, r6, pc}
 80a1e6c:	f1c4 040c 	rsb	r4, r4, #12
 80a1e70:	f1c4 0520 	rsb	r5, r4, #32
 80a1e74:	fa00 f304 	lsl.w	r3, r0, r4
 80a1e78:	fa20 f005 	lsr.w	r0, r0, r5
 80a1e7c:	fa01 f204 	lsl.w	r2, r1, r4
 80a1e80:	ea40 0002 	orr.w	r0, r0, r2
 80a1e84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a1e88:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a1e8c:	f141 0100 	adc.w	r1, r1, #0
 80a1e90:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a1e94:	bf08      	it	eq
 80a1e96:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a1e9a:	bd70      	pop	{r4, r5, r6, pc}
 80a1e9c:	f1c4 0520 	rsb	r5, r4, #32
 80a1ea0:	fa00 f205 	lsl.w	r2, r0, r5
 80a1ea4:	ea4e 0e02 	orr.w	lr, lr, r2
 80a1ea8:	fa20 f304 	lsr.w	r3, r0, r4
 80a1eac:	fa01 f205 	lsl.w	r2, r1, r5
 80a1eb0:	ea43 0302 	orr.w	r3, r3, r2
 80a1eb4:	fa21 f004 	lsr.w	r0, r1, r4
 80a1eb8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a1ebc:	fa21 f204 	lsr.w	r2, r1, r4
 80a1ec0:	ea20 0002 	bic.w	r0, r0, r2
 80a1ec4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a1ec8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a1ecc:	bf08      	it	eq
 80a1ece:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a1ed2:	bd70      	pop	{r4, r5, r6, pc}
 80a1ed4:	f094 0f00 	teq	r4, #0
 80a1ed8:	d10f      	bne.n	80a1efa <__aeabi_dmul+0x1c2>
 80a1eda:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a1ede:	0040      	lsls	r0, r0, #1
 80a1ee0:	eb41 0101 	adc.w	r1, r1, r1
 80a1ee4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a1ee8:	bf08      	it	eq
 80a1eea:	3c01      	subeq	r4, #1
 80a1eec:	d0f7      	beq.n	80a1ede <__aeabi_dmul+0x1a6>
 80a1eee:	ea41 0106 	orr.w	r1, r1, r6
 80a1ef2:	f095 0f00 	teq	r5, #0
 80a1ef6:	bf18      	it	ne
 80a1ef8:	4770      	bxne	lr
 80a1efa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a1efe:	0052      	lsls	r2, r2, #1
 80a1f00:	eb43 0303 	adc.w	r3, r3, r3
 80a1f04:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a1f08:	bf08      	it	eq
 80a1f0a:	3d01      	subeq	r5, #1
 80a1f0c:	d0f7      	beq.n	80a1efe <__aeabi_dmul+0x1c6>
 80a1f0e:	ea43 0306 	orr.w	r3, r3, r6
 80a1f12:	4770      	bx	lr
 80a1f14:	ea94 0f0c 	teq	r4, ip
 80a1f18:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a1f1c:	bf18      	it	ne
 80a1f1e:	ea95 0f0c 	teqne	r5, ip
 80a1f22:	d00c      	beq.n	80a1f3e <__aeabi_dmul+0x206>
 80a1f24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a1f28:	bf18      	it	ne
 80a1f2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a1f2e:	d1d1      	bne.n	80a1ed4 <__aeabi_dmul+0x19c>
 80a1f30:	ea81 0103 	eor.w	r1, r1, r3
 80a1f34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a1f38:	f04f 0000 	mov.w	r0, #0
 80a1f3c:	bd70      	pop	{r4, r5, r6, pc}
 80a1f3e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a1f42:	bf06      	itte	eq
 80a1f44:	4610      	moveq	r0, r2
 80a1f46:	4619      	moveq	r1, r3
 80a1f48:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a1f4c:	d019      	beq.n	80a1f82 <__aeabi_dmul+0x24a>
 80a1f4e:	ea94 0f0c 	teq	r4, ip
 80a1f52:	d102      	bne.n	80a1f5a <__aeabi_dmul+0x222>
 80a1f54:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a1f58:	d113      	bne.n	80a1f82 <__aeabi_dmul+0x24a>
 80a1f5a:	ea95 0f0c 	teq	r5, ip
 80a1f5e:	d105      	bne.n	80a1f6c <__aeabi_dmul+0x234>
 80a1f60:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a1f64:	bf1c      	itt	ne
 80a1f66:	4610      	movne	r0, r2
 80a1f68:	4619      	movne	r1, r3
 80a1f6a:	d10a      	bne.n	80a1f82 <__aeabi_dmul+0x24a>
 80a1f6c:	ea81 0103 	eor.w	r1, r1, r3
 80a1f70:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a1f74:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a1f78:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a1f7c:	f04f 0000 	mov.w	r0, #0
 80a1f80:	bd70      	pop	{r4, r5, r6, pc}
 80a1f82:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a1f86:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a1f8a:	bd70      	pop	{r4, r5, r6, pc}

080a1f8c <__aeabi_ddiv>:
 80a1f8c:	b570      	push	{r4, r5, r6, lr}
 80a1f8e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a1f92:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a1f96:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a1f9a:	bf1d      	ittte	ne
 80a1f9c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a1fa0:	ea94 0f0c 	teqne	r4, ip
 80a1fa4:	ea95 0f0c 	teqne	r5, ip
 80a1fa8:	f000 f8a7 	bleq	80a20fa <__aeabi_ddiv+0x16e>
 80a1fac:	eba4 0405 	sub.w	r4, r4, r5
 80a1fb0:	ea81 0e03 	eor.w	lr, r1, r3
 80a1fb4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a1fb8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a1fbc:	f000 8088 	beq.w	80a20d0 <__aeabi_ddiv+0x144>
 80a1fc0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a1fc4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a1fc8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a1fcc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a1fd0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a1fd4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a1fd8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a1fdc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a1fe0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a1fe4:	429d      	cmp	r5, r3
 80a1fe6:	bf08      	it	eq
 80a1fe8:	4296      	cmpeq	r6, r2
 80a1fea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a1fee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a1ff2:	d202      	bcs.n	80a1ffa <__aeabi_ddiv+0x6e>
 80a1ff4:	085b      	lsrs	r3, r3, #1
 80a1ff6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a1ffa:	1ab6      	subs	r6, r6, r2
 80a1ffc:	eb65 0503 	sbc.w	r5, r5, r3
 80a2000:	085b      	lsrs	r3, r3, #1
 80a2002:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2006:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a200a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a200e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2012:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2016:	bf22      	ittt	cs
 80a2018:	1ab6      	subcs	r6, r6, r2
 80a201a:	4675      	movcs	r5, lr
 80a201c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a2020:	085b      	lsrs	r3, r3, #1
 80a2022:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2026:	ebb6 0e02 	subs.w	lr, r6, r2
 80a202a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a202e:	bf22      	ittt	cs
 80a2030:	1ab6      	subcs	r6, r6, r2
 80a2032:	4675      	movcs	r5, lr
 80a2034:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a2038:	085b      	lsrs	r3, r3, #1
 80a203a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a203e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2042:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2046:	bf22      	ittt	cs
 80a2048:	1ab6      	subcs	r6, r6, r2
 80a204a:	4675      	movcs	r5, lr
 80a204c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a2050:	085b      	lsrs	r3, r3, #1
 80a2052:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2056:	ebb6 0e02 	subs.w	lr, r6, r2
 80a205a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a205e:	bf22      	ittt	cs
 80a2060:	1ab6      	subcs	r6, r6, r2
 80a2062:	4675      	movcs	r5, lr
 80a2064:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a2068:	ea55 0e06 	orrs.w	lr, r5, r6
 80a206c:	d018      	beq.n	80a20a0 <__aeabi_ddiv+0x114>
 80a206e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a2072:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a2076:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a207a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a207e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a2082:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a2086:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a208a:	d1c0      	bne.n	80a200e <__aeabi_ddiv+0x82>
 80a208c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2090:	d10b      	bne.n	80a20aa <__aeabi_ddiv+0x11e>
 80a2092:	ea41 0100 	orr.w	r1, r1, r0
 80a2096:	f04f 0000 	mov.w	r0, #0
 80a209a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a209e:	e7b6      	b.n	80a200e <__aeabi_ddiv+0x82>
 80a20a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a20a4:	bf04      	itt	eq
 80a20a6:	4301      	orreq	r1, r0
 80a20a8:	2000      	moveq	r0, #0
 80a20aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a20ae:	bf88      	it	hi
 80a20b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a20b4:	f63f aeaf 	bhi.w	80a1e16 <__aeabi_dmul+0xde>
 80a20b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80a20bc:	bf04      	itt	eq
 80a20be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a20c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a20c6:	f150 0000 	adcs.w	r0, r0, #0
 80a20ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a20ce:	bd70      	pop	{r4, r5, r6, pc}
 80a20d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a20d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a20d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a20dc:	bfc2      	ittt	gt
 80a20de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a20e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a20e6:	bd70      	popgt	{r4, r5, r6, pc}
 80a20e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a20ec:	f04f 0e00 	mov.w	lr, #0
 80a20f0:	3c01      	subs	r4, #1
 80a20f2:	e690      	b.n	80a1e16 <__aeabi_dmul+0xde>
 80a20f4:	ea45 0e06 	orr.w	lr, r5, r6
 80a20f8:	e68d      	b.n	80a1e16 <__aeabi_dmul+0xde>
 80a20fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a20fe:	ea94 0f0c 	teq	r4, ip
 80a2102:	bf08      	it	eq
 80a2104:	ea95 0f0c 	teqeq	r5, ip
 80a2108:	f43f af3b 	beq.w	80a1f82 <__aeabi_dmul+0x24a>
 80a210c:	ea94 0f0c 	teq	r4, ip
 80a2110:	d10a      	bne.n	80a2128 <__aeabi_ddiv+0x19c>
 80a2112:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2116:	f47f af34 	bne.w	80a1f82 <__aeabi_dmul+0x24a>
 80a211a:	ea95 0f0c 	teq	r5, ip
 80a211e:	f47f af25 	bne.w	80a1f6c <__aeabi_dmul+0x234>
 80a2122:	4610      	mov	r0, r2
 80a2124:	4619      	mov	r1, r3
 80a2126:	e72c      	b.n	80a1f82 <__aeabi_dmul+0x24a>
 80a2128:	ea95 0f0c 	teq	r5, ip
 80a212c:	d106      	bne.n	80a213c <__aeabi_ddiv+0x1b0>
 80a212e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a2132:	f43f aefd 	beq.w	80a1f30 <__aeabi_dmul+0x1f8>
 80a2136:	4610      	mov	r0, r2
 80a2138:	4619      	mov	r1, r3
 80a213a:	e722      	b.n	80a1f82 <__aeabi_dmul+0x24a>
 80a213c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2140:	bf18      	it	ne
 80a2142:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2146:	f47f aec5 	bne.w	80a1ed4 <__aeabi_dmul+0x19c>
 80a214a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a214e:	f47f af0d 	bne.w	80a1f6c <__aeabi_dmul+0x234>
 80a2152:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a2156:	f47f aeeb 	bne.w	80a1f30 <__aeabi_dmul+0x1f8>
 80a215a:	e712      	b.n	80a1f82 <__aeabi_dmul+0x24a>

080a215c <__aeabi_d2f>:
 80a215c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a2160:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a2164:	bf24      	itt	cs
 80a2166:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a216a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a216e:	d90d      	bls.n	80a218c <__aeabi_d2f+0x30>
 80a2170:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a2174:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a2178:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a217c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a2180:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a2184:	bf08      	it	eq
 80a2186:	f020 0001 	biceq.w	r0, r0, #1
 80a218a:	4770      	bx	lr
 80a218c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a2190:	d121      	bne.n	80a21d6 <__aeabi_d2f+0x7a>
 80a2192:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a2196:	bfbc      	itt	lt
 80a2198:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a219c:	4770      	bxlt	lr
 80a219e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a21a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a21a6:	f1c2 0218 	rsb	r2, r2, #24
 80a21aa:	f1c2 0c20 	rsb	ip, r2, #32
 80a21ae:	fa10 f30c 	lsls.w	r3, r0, ip
 80a21b2:	fa20 f002 	lsr.w	r0, r0, r2
 80a21b6:	bf18      	it	ne
 80a21b8:	f040 0001 	orrne.w	r0, r0, #1
 80a21bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a21c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a21c4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a21c8:	ea40 000c 	orr.w	r0, r0, ip
 80a21cc:	fa23 f302 	lsr.w	r3, r3, r2
 80a21d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a21d4:	e7cc      	b.n	80a2170 <__aeabi_d2f+0x14>
 80a21d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a21da:	d107      	bne.n	80a21ec <__aeabi_d2f+0x90>
 80a21dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a21e0:	bf1e      	ittt	ne
 80a21e2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a21e6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a21ea:	4770      	bxne	lr
 80a21ec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a21f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a21f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a21f8:	4770      	bx	lr
 80a21fa:	bf00      	nop

080a21fc <__cxa_atexit>:
 80a21fc:	b510      	push	{r4, lr}
 80a21fe:	4c05      	ldr	r4, [pc, #20]	; (80a2214 <__cxa_atexit+0x18>)
 80a2200:	4613      	mov	r3, r2
 80a2202:	b12c      	cbz	r4, 80a2210 <__cxa_atexit+0x14>
 80a2204:	460a      	mov	r2, r1
 80a2206:	4601      	mov	r1, r0
 80a2208:	2002      	movs	r0, #2
 80a220a:	f3af 8000 	nop.w
 80a220e:	bd10      	pop	{r4, pc}
 80a2210:	4620      	mov	r0, r4
 80a2212:	bd10      	pop	{r4, pc}
 80a2214:	00000000 	.word	0x00000000

080a2218 <memcpy>:
 80a2218:	b510      	push	{r4, lr}
 80a221a:	1e43      	subs	r3, r0, #1
 80a221c:	440a      	add	r2, r1
 80a221e:	4291      	cmp	r1, r2
 80a2220:	d004      	beq.n	80a222c <memcpy+0x14>
 80a2222:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a2226:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a222a:	e7f8      	b.n	80a221e <memcpy+0x6>
 80a222c:	bd10      	pop	{r4, pc}

080a222e <memset>:
 80a222e:	4603      	mov	r3, r0
 80a2230:	4402      	add	r2, r0
 80a2232:	4293      	cmp	r3, r2
 80a2234:	d002      	beq.n	80a223c <memset+0xe>
 80a2236:	f803 1b01 	strb.w	r1, [r3], #1
 80a223a:	e7fa      	b.n	80a2232 <memset+0x4>
 80a223c:	4770      	bx	lr
	...

080a2240 <srand>:
 80a2240:	b538      	push	{r3, r4, r5, lr}
 80a2242:	4b12      	ldr	r3, [pc, #72]	; (80a228c <srand+0x4c>)
 80a2244:	4605      	mov	r5, r0
 80a2246:	681c      	ldr	r4, [r3, #0]
 80a2248:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a224a:	b9d3      	cbnz	r3, 80a2282 <srand+0x42>
 80a224c:	2018      	movs	r0, #24
 80a224e:	f7fe fa1f 	bl	80a0690 <malloc>
 80a2252:	f243 330e 	movw	r3, #13070	; 0x330e
 80a2256:	63a0      	str	r0, [r4, #56]	; 0x38
 80a2258:	8003      	strh	r3, [r0, #0]
 80a225a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a225e:	8043      	strh	r3, [r0, #2]
 80a2260:	f241 2334 	movw	r3, #4660	; 0x1234
 80a2264:	8083      	strh	r3, [r0, #4]
 80a2266:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a226a:	80c3      	strh	r3, [r0, #6]
 80a226c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a2270:	8103      	strh	r3, [r0, #8]
 80a2272:	2305      	movs	r3, #5
 80a2274:	8143      	strh	r3, [r0, #10]
 80a2276:	230b      	movs	r3, #11
 80a2278:	8183      	strh	r3, [r0, #12]
 80a227a:	2201      	movs	r2, #1
 80a227c:	2300      	movs	r3, #0
 80a227e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a2282:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2284:	2200      	movs	r2, #0
 80a2286:	611d      	str	r5, [r3, #16]
 80a2288:	615a      	str	r2, [r3, #20]
 80a228a:	bd38      	pop	{r3, r4, r5, pc}
 80a228c:	20000064 	.word	0x20000064

080a2290 <strdup>:
 80a2290:	4b02      	ldr	r3, [pc, #8]	; (80a229c <strdup+0xc>)
 80a2292:	4601      	mov	r1, r0
 80a2294:	6818      	ldr	r0, [r3, #0]
 80a2296:	f000 b803 	b.w	80a22a0 <_strdup_r>
 80a229a:	bf00      	nop
 80a229c:	20000064 	.word	0x20000064

080a22a0 <_strdup_r>:
 80a22a0:	b570      	push	{r4, r5, r6, lr}
 80a22a2:	4606      	mov	r6, r0
 80a22a4:	4608      	mov	r0, r1
 80a22a6:	460c      	mov	r4, r1
 80a22a8:	f000 f80d 	bl	80a22c6 <strlen>
 80a22ac:	1c45      	adds	r5, r0, #1
 80a22ae:	4629      	mov	r1, r5
 80a22b0:	4630      	mov	r0, r6
 80a22b2:	f7fe fa0d 	bl	80a06d0 <_malloc_r>
 80a22b6:	4606      	mov	r6, r0
 80a22b8:	b118      	cbz	r0, 80a22c2 <_strdup_r+0x22>
 80a22ba:	462a      	mov	r2, r5
 80a22bc:	4621      	mov	r1, r4
 80a22be:	f7ff ffab 	bl	80a2218 <memcpy>
 80a22c2:	4630      	mov	r0, r6
 80a22c4:	bd70      	pop	{r4, r5, r6, pc}

080a22c6 <strlen>:
 80a22c6:	4603      	mov	r3, r0
 80a22c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a22cc:	2a00      	cmp	r2, #0
 80a22ce:	d1fb      	bne.n	80a22c8 <strlen+0x2>
 80a22d0:	1a18      	subs	r0, r3, r0
 80a22d2:	3801      	subs	r0, #1
 80a22d4:	4770      	bx	lr

080a22d6 <link_code_end>:
	...

080a22d8 <dynalib_user>:
 80a22d8:	0021 080a 0061 080a 008d 080a 0091 080a     !...a...........
 80a22e8:	0000 0000 7774 6c69 6f69 735f 736d 5900     ....twilio_sms.Y
 80a22f8:	756f 2072 6863 6c69 2064 7369 6920 206e     our child is in 
 80a2308:	6874 2065 6163 2172 0000 0000               the car!....

080a2314 <_ZTV8SPIClass>:
	...
 80a231c:	06e1 080a 06e3 080a 6162 6475 5300 7265     ........baud.Ser
 80a232c:	6169 006c 5355 5342 7265 6169 316c 7400     ial.USBSerial1.t
 80a233c:	7079 0065 6170 6172 006d 6d63 0064 6469     ype.param.cmd.id
 80a234c:	6800 646e 7300 7274 006d 6966 746c 6c00     .hnd.strm.filt.l
 80a235c:	6c76 6100 6464 6148 646e 656c 0072 6572     vl.addHandler.re
 80a236c:	6f6d 6576 6148 646e 656c 0072 6e65 6d75     moveHandler.enum
 80a237c:	6148 646e 656c 7372 4a00 4f53 534e 7274     Handlers.JSONStr
 80a238c:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
 80a239c:	0070 3025 3031 2075 5d00 0020 6425 2c00     p.%010u .] .%d.,
 80a23ac:	0020 2928 203a 2000 005b 6f63 6564 3d20      .(): . [.code =
 80a23bc:	0020 6925 6400 7465 6961 736c 3d20 0020      .%i.details = .
 80a23cc:	0a0d 6600 6c00 006e 6e66 6300 646f 0065     ...f.ln.fn.code.
 80a23dc:	6564 6174 6c69 6e00 6e6f 0065 7274 6361     detail.none.trac
 80a23ec:	0065 6e69 6f66 7700 7261 006e 7265 6f72     e.info.warn.erro
 80a23fc:	0072 6170 696e 0063 6c61 006c 005a 2b25     r.panic.all.Z.%+
 80a240c:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
 80a241c:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
 80a242c:	6974 656d 0000 0000                         time....

080a2434 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a243c:	0a99 080a 0a9f 080a 0ae3 080a 0aad 080a     ................
 80a244c:	0a9b 080a                                   ....

080a2450 <_ZTV9IPAddress>:
	...
 80a2458:	1031 080a 1021 080a 1023 080a               1...!...#...

080a2464 <_ZTV9USBSerial>:
	...
 80a246c:	10ed 080a 113d 080a 114b 080a 07ed 080a     ....=...K.......
 80a247c:	1129 080a 10ef 080a 1105 080a 1137 080a     )...........7...
 80a248c:	111b 080a 10e9 080a                         ........

080a2494 <_ZTV11USARTSerial>:
	...
 80a249c:	128d 080a 12dd 080a 12eb 080a 07ed 080a     ................
 80a24ac:	12a1 080a 12c3 080a 12af 080a 12d7 080a     ................
 80a24bc:	128f 080a 1293 080a                         ........

080a24c4 <_ZTV7TwoWire>:
	...
 80a24cc:	13b9 080a 1403 080a 13db 080a 13bb 080a     ................
 80a24dc:	13e3 080a 13eb 080a 13f3 080a 13fb 080a     ................

080a24ec <_ZTVN5spark9WiFiClassE>:
	...
 80a24f4:	150d 080a 1503 080a 14f9 080a 1477 080a     ............w...
 80a2504:	0897 080a 14ed 080a 14e1 080a 14d9 080a     ................
 80a2514:	14cf 080a 14c5 080a 1481 080a               ............

080a2520 <_ZTVN5spark12NetworkClassE>:
	...
 80a2528:	152d 080a 1537 080a 1541 080a 154b 080a     -...7...A...K...
 80a2538:	1555 080a 1561 080a 156d 080a 1579 080a     U...a...m...y...
 80a2548:	1581 080a 158b 080a 1595 080a               ............

080a2554 <__sf_fake_stdin>:
	...

080a2574 <__sf_fake_stdout>:
	...

080a2594 <__sf_fake_stderr>:
	...
 80a25b4:	0043                                        C.

080a25b6 <link_const_variable_data_end>:
	...

080a25b8 <link_constructors_location>:
 80a25b8:	080a0149 	.word	0x080a0149
 80a25bc:	080a0321 	.word	0x080a0321
 80a25c0:	080a0721 	.word	0x080a0721
 80a25c4:	080a08dd 	.word	0x080a08dd
 80a25c8:	080a08ed 	.word	0x080a08ed
 80a25cc:	080a0945 	.word	0x080a0945
 80a25d0:	080a1519 	.word	0x080a1519
 80a25d4:	080a15e5 	.word	0x080a15e5
 80a25d8:	080a1671 	.word	0x080a1671
 80a25dc:	080a16b5 	.word	0x080a16b5
 80a25e0:	080a1739 	.word	0x080a1739
 80a25e4:	080a17bd 	.word	0x080a17bd
 80a25e8:	080a1881 	.word	0x080a1881
 80a25ec:	080a1945 	.word	0x080a1945
