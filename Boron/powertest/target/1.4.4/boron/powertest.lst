
c:/Users/BryceBurnette/Documents/ParticleProjects/powertest/target/1.4.4/boron/powertest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002bf0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  00016ca4  2**0
                  CONTENTS
  4 .data         00000068  2003e314  000d6c10  0000e314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000474  2003e37c  2003e37c  0001e37c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d6c78  000d6c78  00016c78  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6ca0  000d6ca0  00016ca0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000da0f8  00000000  00000000  00016ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00011842  00000000  00000000  000f0d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001eb0c  00000000  00000000  001025de  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002558  00000000  00000000  001210ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000046a0  00000000  00000000  00123642  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00035ea1  00000000  00000000  00127ce2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002b405  00000000  00000000  0015db83  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00101641  00000000  00000000  00188f88  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000cefc  00000000  00000000  0028a5cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f002 fbbb 	bl	d67ac <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f002 fbc0 	bl	d67c2 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e314 	.word	0x2003e314
   d404c:	000d6c10 	.word	0x000d6c10
   d4050:	2003e37c 	.word	0x2003e37c
   d4054:	2003e37c 	.word	0x2003e37c
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f000 fe59 	bl	d4d14 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d6c08 	.word	0x000d6c08
   d4084:	000d6bc8 	.word	0x000d6bc8

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b816 	b.w	d40b8 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f855 	bl	d413c <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f000 be0b 	b.w	d4cb0 <_post_loop>

000d409a <_Znwj>:
   d409a:	f000 bb5d 	b.w	d4758 <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 bb63 	b.w	d4768 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 bb61 	b.w	d4768 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <setup>:
String body = "Your child is in the car!";

Adafruit_SHT31 sht31 = Adafruit_SHT31();

void setup() 
{
   d40b8:	b508      	push	{r3, lr}
    Serial.begin(9600);
   d40ba:	f001 f9dd 	bl	d5478 <_Z16_fetch_usbserialv>
   d40be:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40c2:	f001 f9cd 	bl	d5460 <_ZN9USBSerial5beginEl>
    sht31.begin(0x44);
   d40c6:	2144      	movs	r1, #68	; 0x44
   d40c8:	4806      	ldr	r0, [pc, #24]	; (d40e4 <setup+0x2c>)
   d40ca:	f000 f8bc 	bl	d4246 <_ZN14Adafruit_SHT315beginEh>
    Serial.begin(115200);
   d40ce:	f001 f9d3 	bl	d5478 <_Z16_fetch_usbserialv>
   d40d2:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d40d6:	f001 f9c3 	bl	d5460 <_ZN9USBSerial5beginEl>
    delay(100);
   d40da:	2064      	movs	r0, #100	; 0x64
}
   d40dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void setup() 
{
    Serial.begin(9600);
    sht31.begin(0x44);
    Serial.begin(115200);
    delay(100);
   d40e0:	f000 bd98 	b.w	d4c14 <delay>
   d40e4:	2003e380 	.word	0x2003e380

000d40e8 <_Z11sendMessageRK6String>:
    sendMessage(body);
    delay(100);
}

void sendMessage(const String& body)
{
   d40e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d40ea:	4b11      	ldr	r3, [pc, #68]	; (d4130 <_Z11sendMessageRK6String+0x48>)
   d40ec:	6802      	ldr	r2, [r0, #0]
   d40ee:	781b      	ldrb	r3, [r3, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40f0:	f88d 3000 	strb.w	r3, [sp]
   d40f4:	490f      	ldr	r1, [pc, #60]	; (d4134 <_Z11sendMessageRK6String+0x4c>)
   d40f6:	233c      	movs	r3, #60	; 0x3c
   d40f8:	a802      	add	r0, sp, #8
   d40fa:	f000 ff67 	bl	d4fcc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d40fe:	9c03      	ldr	r4, [sp, #12]
   d4100:	b17c      	cbz	r4, d4122 <_Z11sendMessageRK6String+0x3a>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4102:	6863      	ldr	r3, [r4, #4]
   d4104:	3b01      	subs	r3, #1
   d4106:	6063      	str	r3, [r4, #4]
   d4108:	b95b      	cbnz	r3, d4122 <_Z11sendMessageRK6String+0x3a>
        {
          _M_dispose();
   d410a:	6823      	ldr	r3, [r4, #0]
   d410c:	4620      	mov	r0, r4
   d410e:	689b      	ldr	r3, [r3, #8]
   d4110:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4112:	68a3      	ldr	r3, [r4, #8]
   d4114:	3b01      	subs	r3, #1
   d4116:	60a3      	str	r3, [r4, #8]
   d4118:	b91b      	cbnz	r3, d4122 <_Z11sendMessageRK6String+0x3a>
            _M_destroy();
   d411a:	6823      	ldr	r3, [r4, #0]
   d411c:	4620      	mov	r0, r4
   d411e:	68db      	ldr	r3, [r3, #12]
   d4120:	4798      	blx	r3
    Particle.publish("twilio_sms", body, PRIVATE);
    Serial.print("SendingMessage");
   d4122:	f001 f9a9 	bl	d5478 <_Z16_fetch_usbserialv>
   d4126:	4904      	ldr	r1, [pc, #16]	; (d4138 <_Z11sendMessageRK6String+0x50>)
   d4128:	f000 fc54 	bl	d49d4 <_ZN5Print5printEPKc>
   d412c:	b004      	add	sp, #16
   d412e:	bd10      	pop	{r4, pc}
   d4130:	2003e39c 	.word	0x2003e39c
   d4134:	000d6880 	.word	0x000d6880
   d4138:	000d688b 	.word	0x000d688b

000d413c <loop>:
    Serial.begin(115200);
    delay(100);
}

void loop() 
{
   d413c:	b510      	push	{r4, lr}
   d413e:	ed2d 8b02 	vpush	{d8}
    float temp = sht31.readTemperature();
   d4142:	481a      	ldr	r0, [pc, #104]	; (d41ac <loop+0x70>)
    Serial.begin(115200);
    delay(100);
}

void loop() 
{
   d4144:	b082      	sub	sp, #8
    float temp = sht31.readTemperature();
   d4146:	f000 f913 	bl	d4370 <_ZN14Adafruit_SHT3115readTemperatureEv>
   d414a:	ed8d 0a01 	vstr	s0, [sp, #4]
    Serial.print(temp);
   d414e:	f001 f993 	bl	d5478 <_Z16_fetch_usbserialv>
   d4152:	ed9d 0a01 	vldr	s0, [sp, #4]
   d4156:	4604      	mov	r4, r0
   d4158:	ee10 0a10 	vmov	r0, s0
   d415c:	f001 ff7c 	bl	d6058 <__aeabi_f2d>
   d4160:	ec41 0b10 	vmov	d0, r0, r1
   d4164:	2102      	movs	r1, #2
   d4166:	4620      	mov	r0, r4
   d4168:	f000 fd3e 	bl	d4be8 <_ZN5Print5printEdi>
    float pressure = analogRead(PRESSURE_PIN);
   d416c:	2011      	movs	r0, #17
   d416e:	f001 fc63 	bl	d5a38 <analogRead>
   d4172:	ee08 0a10 	vmov	s16, r0
    Serial.print(pressure);
   d4176:	f001 f97f 	bl	d5478 <_Z16_fetch_usbserialv>
   d417a:	eef8 7ac8 	vcvt.f32.s32	s15, s16
   d417e:	4604      	mov	r4, r0
   d4180:	ee17 0a90 	vmov	r0, s15
   d4184:	f001 ff68 	bl	d6058 <__aeabi_f2d>
   d4188:	ec41 0b10 	vmov	d0, r0, r1
   d418c:	2102      	movs	r1, #2
   d418e:	4620      	mov	r0, r4
   d4190:	f000 fd2a 	bl	d4be8 <_ZN5Print5printEdi>
    sendMessage(body);
   d4194:	4806      	ldr	r0, [pc, #24]	; (d41b0 <loop+0x74>)
   d4196:	f7ff ffa7 	bl	d40e8 <_Z11sendMessageRK6String>
    delay(100);
   d419a:	2064      	movs	r0, #100	; 0x64
}
   d419c:	b002      	add	sp, #8
   d419e:	ecbd 8b02 	vpop	{d8}
   d41a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    float temp = sht31.readTemperature();
    Serial.print(temp);
    float pressure = analogRead(PRESSURE_PIN);
    Serial.print(pressure);
    sendMessage(body);
    delay(100);
   d41a6:	f000 bd35 	b.w	d4c14 <delay>
   d41aa:	bf00      	nop
   d41ac:	2003e380 	.word	0x2003e380
   d41b0:	2003e38c 	.word	0x2003e38c

000d41b4 <_GLOBAL__sub_I_body>:

void sendMessage(const String& body)
{
    Particle.publish("twilio_sms", body, PRIVATE);
    Serial.print("SendingMessage");
   d41b4:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d41b6:	4b0a      	ldr	r3, [pc, #40]	; (d41e0 <_GLOBAL__sub_I_body+0x2c>)
#include <adafruit-sht31.h>

#define DONEPIN  12
#define PRESSURE_PIN A2

String body = "Your child is in the car!";
   d41b8:	4c0a      	ldr	r4, [pc, #40]	; (d41e4 <_GLOBAL__sub_I_body+0x30>)
   d41ba:	2201      	movs	r2, #1
   d41bc:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d41be:	f000 f8f7 	bl	d43b0 <HAL_Pin_Map>
   d41c2:	4909      	ldr	r1, [pc, #36]	; (d41e8 <_GLOBAL__sub_I_body+0x34>)
   d41c4:	4620      	mov	r0, r4
   d41c6:	f000 fba0 	bl	d490a <_ZN6StringC1EPK19__FlashStringHelper>
   d41ca:	4620      	mov	r0, r4
   d41cc:	4a07      	ldr	r2, [pc, #28]	; (d41ec <_GLOBAL__sub_I_body+0x38>)
   d41ce:	4908      	ldr	r1, [pc, #32]	; (d41f0 <_GLOBAL__sub_I_body+0x3c>)
   d41d0:	f001 fc8c 	bl	d5aec <__aeabi_atexit>

Adafruit_SHT31 sht31 = Adafruit_SHT31();
   d41d4:	4807      	ldr	r0, [pc, #28]	; (d41f4 <_GLOBAL__sub_I_body+0x40>)

void sendMessage(const String& body)
{
    Particle.publish("twilio_sms", body, PRIVATE);
    Serial.print("SendingMessage");
   d41d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#define DONEPIN  12
#define PRESSURE_PIN A2

String body = "Your child is in the car!";

Adafruit_SHT31 sht31 = Adafruit_SHT31();
   d41da:	f000 b811 	b.w	d4200 <_ZN14Adafruit_SHT31C1Ev>
   d41de:	bf00      	nop
   d41e0:	2003e39c 	.word	0x2003e39c
   d41e4:	2003e38c 	.word	0x2003e38c
   d41e8:	000d689a 	.word	0x000d689a
   d41ec:	2003e37c 	.word	0x2003e37c
   d41f0:	000d487d 	.word	0x000d487d
   d41f4:	2003e380 	.word	0x2003e380

000d41f8 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d41f8:	6803      	ldr	r3, [r0, #0]
   d41fa:	b2c9      	uxtb	r1, r1
   d41fc:	689b      	ldr	r3, [r3, #8]
   d41fe:	4718      	bx	r3

000d4200 <_ZN14Adafruit_SHT31C1Ev>:
#include "application.h"
#include "math.h"
#include "adafruit-sht31.h"

Adafruit_SHT31::Adafruit_SHT31() {
}
   d4200:	4770      	bx	lr

000d4202 <_ZN14Adafruit_SHT3112writeCommandEt>:
  humidity = shum;
  
  return true;
}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
   d4202:	b538      	push	{r3, r4, r5, lr}
   d4204:	4605      	mov	r5, r0
   d4206:	460c      	mov	r4, r1
  Wire.beginTransmission(_i2caddr);
   d4208:	f001 fc50 	bl	d5aac <_Z19__fetch_global_Wirev>
   d420c:	7829      	ldrb	r1, [r5, #0]
   d420e:	f001 fa8b 	bl	d5728 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(cmd >> 8);
   d4212:	f001 fc4b 	bl	d5aac <_Z19__fetch_global_Wirev>
   d4216:	0a21      	lsrs	r1, r4, #8
   d4218:	f7ff ffee 	bl	d41f8 <_ZN7TwoWire5writeEi>
  Wire.write(cmd & 0xFF);
   d421c:	f001 fc46 	bl	d5aac <_Z19__fetch_global_Wirev>
   d4220:	b2e1      	uxtb	r1, r4
   d4222:	f7ff ffe9 	bl	d41f8 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();  
   d4226:	f001 fc41 	bl	d5aac <_Z19__fetch_global_Wirev>
}
   d422a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
  Wire.beginTransmission(_i2caddr);
  Wire.write(cmd >> 8);
  Wire.write(cmd & 0xFF);
  Wire.endTransmission();  
   d422e:	f001 ba83 	b.w	d5738 <_ZN7TwoWire15endTransmissionEv>

000d4232 <_ZN14Adafruit_SHT315resetEv>:
  stat |= Wire.read();
  //Serial.println(stat, HEX);
  return stat;
}

void Adafruit_SHT31::reset(void) {
   d4232:	b508      	push	{r3, lr}
  writeCommand(SHT31_SOFTRESET);
   d4234:	f243 01a2 	movw	r1, #12450	; 0x30a2
   d4238:	f7ff ffe3 	bl	d4202 <_ZN14Adafruit_SHT3112writeCommandEt>
  delay(10);
   d423c:	200a      	movs	r0, #10
}
   d423e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return stat;
}

void Adafruit_SHT31::reset(void) {
  writeCommand(SHT31_SOFTRESET);
  delay(10);
   d4242:	f000 bce7 	b.w	d4c14 <delay>

000d4246 <_ZN14Adafruit_SHT315beginEh>:

Adafruit_SHT31::Adafruit_SHT31() {
}


boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
   d4246:	b538      	push	{r3, r4, r5, lr}
   d4248:	4604      	mov	r4, r0
   d424a:	460d      	mov	r5, r1
  Wire.begin();
   d424c:	f001 fc2e 	bl	d5aac <_Z19__fetch_global_Wirev>
   d4250:	f001 fa58 	bl	d5704 <_ZN7TwoWire5beginEv>
  _i2caddr = i2caddr;
  reset();
   d4254:	4620      	mov	r0, r4
}


boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
  Wire.begin();
  _i2caddr = i2caddr;
   d4256:	7025      	strb	r5, [r4, #0]
  reset();
   d4258:	f7ff ffeb 	bl	d4232 <_ZN14Adafruit_SHT315resetEv>
  //return (readStatus() == 0x40);
  return true;
}
   d425c:	2001      	movs	r0, #1
   d425e:	bd38      	pop	{r3, r4, r5, pc}

000d4260 <_ZN14Adafruit_SHT314crc8EPKhi>:
  Wire.write(cmd & 0xFF);
  Wire.endTransmission();  
}

uint8_t Adafruit_SHT31::crc8(const uint8_t *data, int len)
{
   d4260:	440a      	add	r2, r1
 * Polynomial 0x31 (x8 + x5 +x4 +1)
 * Final XOR 0x00
 */

  const uint8_t POLYNOMIAL(0x31);
  uint8_t crc(0xFF);
   d4262:	20ff      	movs	r0, #255	; 0xff
  
  for ( int j = len; j; --j ) {
   d4264:	4291      	cmp	r1, r2
   d4266:	d00e      	beq.n	d4286 <_ZN14Adafruit_SHT314crc8EPKhi+0x26>
      crc ^= *data++;
   d4268:	f811 3b01 	ldrb.w	r3, [r1], #1
   d426c:	4058      	eors	r0, r3
   d426e:	2308      	movs	r3, #8

      for ( int i = 8; i; --i ) {
	crc = ( crc & 0x80 )
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
   d4270:	f010 0f80 	tst.w	r0, #128	; 0x80
   d4274:	ea4f 0040 	mov.w	r0, r0, lsl #1
   d4278:	bf18      	it	ne
   d427a:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
      crc ^= *data++;

      for ( int i = 8; i; --i ) {
   d427e:	3b01      	subs	r3, #1
	crc = ( crc & 0x80 )
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
   d4280:	b2c0      	uxtb	r0, r0
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
      crc ^= *data++;

      for ( int i = 8; i; --i ) {
   d4282:	d1f5      	bne.n	d4270 <_ZN14Adafruit_SHT314crc8EPKhi+0x10>
   d4284:	e7ee      	b.n	d4264 <_ZN14Adafruit_SHT314crc8EPKhi+0x4>
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
      }
  }
  return crc;
}
   d4286:	4770      	bx	lr

000d4288 <_ZN14Adafruit_SHT3111readTempHumEv>:

  return humidity;
}


boolean Adafruit_SHT31::readTempHum(void) {
   d4288:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t readbuffer[6];

  writeCommand(SHT31_MEAS_HIGHREP);
   d428a:	f44f 5110 	mov.w	r1, #9216	; 0x2400

  return humidity;
}


boolean Adafruit_SHT31::readTempHum(void) {
   d428e:	4604      	mov	r4, r0
  uint8_t readbuffer[6];

  writeCommand(SHT31_MEAS_HIGHREP);
   d4290:	f7ff ffb7 	bl	d4202 <_ZN14Adafruit_SHT3112writeCommandEt>
  
  delay(500);
   d4294:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4298:	f000 fcbc 	bl	d4c14 <delay>
  Wire.requestFrom(_i2caddr, (uint8_t)6);
   d429c:	f001 fc06 	bl	d5aac <_Z19__fetch_global_Wirev>
   d42a0:	2206      	movs	r2, #6
   d42a2:	7821      	ldrb	r1, [r4, #0]
   d42a4:	f001 fa3d 	bl	d5722 <_ZN7TwoWire11requestFromEhh>
  if (Wire.available() != 6) 
   d42a8:	f001 fc00 	bl	d5aac <_Z19__fetch_global_Wirev>
   d42ac:	6803      	ldr	r3, [r0, #0]
   d42ae:	691b      	ldr	r3, [r3, #16]
   d42b0:	4798      	blx	r3
   d42b2:	2806      	cmp	r0, #6
   d42b4:	d14a      	bne.n	d434c <_ZN14Adafruit_SHT3111readTempHumEv+0xc4>
   d42b6:	2500      	movs	r5, #0
    return false;
  for (uint8_t i=0; i<6; i++) {
    readbuffer[i] = Wire.read();
   d42b8:	f001 fbf8 	bl	d5aac <_Z19__fetch_global_Wirev>
   d42bc:	6803      	ldr	r3, [r0, #0]
   d42be:	695b      	ldr	r3, [r3, #20]
   d42c0:	4798      	blx	r3
   d42c2:	f80d 0005 	strb.w	r0, [sp, r5]
   d42c6:	3501      	adds	r5, #1
  
  delay(500);
  Wire.requestFrom(_i2caddr, (uint8_t)6);
  if (Wire.available() != 6) 
    return false;
  for (uint8_t i=0; i<6; i++) {
   d42c8:	2d06      	cmp	r5, #6
   d42ca:	d1f5      	bne.n	d42b8 <_ZN14Adafruit_SHT3111readTempHumEv+0x30>
  uint16_t ST, SRH;
  ST = readbuffer[0];
  ST <<= 8;
  ST |= readbuffer[1];

  if (readbuffer[2] != crc8(readbuffer, 2)) return false;
   d42cc:	2202      	movs	r2, #2
   d42ce:	4669      	mov	r1, sp
   d42d0:	4620      	mov	r0, r4
   d42d2:	f7ff ffc5 	bl	d4260 <_ZN14Adafruit_SHT314crc8EPKhi>
   d42d6:	f89d 5002 	ldrb.w	r5, [sp, #2]
   d42da:	4285      	cmp	r5, r0
   d42dc:	d136      	bne.n	d434c <_ZN14Adafruit_SHT3111readTempHumEv+0xc4>

  SRH = readbuffer[3];
  SRH <<= 8;
  SRH |= readbuffer[4];

  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;
   d42de:	2202      	movs	r2, #2
   d42e0:	f10d 0103 	add.w	r1, sp, #3
   d42e4:	4620      	mov	r0, r4
   d42e6:	f7ff ffbb 	bl	d4260 <_ZN14Adafruit_SHT314crc8EPKhi>
   d42ea:	f89d 5005 	ldrb.w	r5, [sp, #5]
   d42ee:	4285      	cmp	r5, r0
   d42f0:	d12c      	bne.n	d434c <_ZN14Adafruit_SHT3111readTempHumEv+0xc4>

 // Serial.print("ST = "); Serial.println(ST);
  double stemp = ST;
   d42f2:	f8bd 0000 	ldrh.w	r0, [sp]
  ST <<= 8;
  ST |= readbuffer[1];

  if (readbuffer[2] != crc8(readbuffer, 2)) return false;

  SRH = readbuffer[3];
   d42f6:	f89d 6003 	ldrb.w	r6, [sp, #3]
  SRH <<= 8;
  SRH |= readbuffer[4];
   d42fa:	f89d 5004 	ldrb.w	r5, [sp, #4]

  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;

 // Serial.print("ST = "); Serial.println(ST);
  double stemp = ST;
   d42fe:	ba40      	rev16	r0, r0
   d4300:	b280      	uxth	r0, r0
   d4302:	f001 fe87 	bl	d6014 <__aeabi_ui2d>
  stemp *= 175;
   d4306:	a318      	add	r3, pc, #96	; (adr r3, d4368 <_ZN14Adafruit_SHT3111readTempHumEv+0xe0>)
   d4308:	e9d3 2300 	ldrd	r2, r3, [r3]
   d430c:	f001 fef8 	bl	d6100 <__aeabi_dmul>
  stemp /= 0xffff;
   d4310:	a311      	add	r3, pc, #68	; (adr r3, d4358 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d4312:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4316:	f002 f81d 	bl	d6354 <__aeabi_ddiv>
  stemp = -45 + stemp;
  temp = stemp;
   d431a:	2200      	movs	r2, #0
   d431c:	4b10      	ldr	r3, [pc, #64]	; (d4360 <_ZN14Adafruit_SHT3111readTempHumEv+0xd8>)
   d431e:	f001 fd3b 	bl	d5d98 <__aeabi_dsub>
   d4322:	f002 f9e5 	bl	d66f0 <__aeabi_d2f>
   d4326:	60a0      	str	r0, [r4, #8]
  
//  Serial.print("SRH = "); Serial.println(SRH);
  double shum = SRH;
   d4328:	ea45 2006 	orr.w	r0, r5, r6, lsl #8
   d432c:	f001 fe72 	bl	d6014 <__aeabi_ui2d>
  shum *= 100;
   d4330:	2200      	movs	r2, #0
   d4332:	4b0c      	ldr	r3, [pc, #48]	; (d4364 <_ZN14Adafruit_SHT3111readTempHumEv+0xdc>)
   d4334:	f001 fee4 	bl	d6100 <__aeabi_dmul>
  shum /= 0xFFFF;
  
  humidity = shum;
   d4338:	a307      	add	r3, pc, #28	; (adr r3, d4358 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d433a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d433e:	f002 f809 	bl	d6354 <__aeabi_ddiv>
   d4342:	f002 f9d5 	bl	d66f0 <__aeabi_d2f>
   d4346:	6060      	str	r0, [r4, #4]
  
  return true;
   d4348:	2001      	movs	r0, #1
   d434a:	e000      	b.n	d434e <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
  writeCommand(SHT31_MEAS_HIGHREP);
  
  delay(500);
  Wire.requestFrom(_i2caddr, (uint8_t)6);
  if (Wire.available() != 6) 
    return false;
   d434c:	2000      	movs	r0, #0
  shum /= 0xFFFF;
  
  humidity = shum;
  
  return true;
}
   d434e:	b002      	add	sp, #8
   d4350:	bd70      	pop	{r4, r5, r6, pc}
   d4352:	bf00      	nop
   d4354:	f3af 8000 	nop.w
   d4358:	00000000 	.word	0x00000000
   d435c:	40efffe0 	.word	0x40efffe0
   d4360:	40468000 	.word	0x40468000
   d4364:	40590000 	.word	0x40590000
   d4368:	00000000 	.word	0x00000000
   d436c:	4065e000 	.word	0x4065e000

000d4370 <_ZN14Adafruit_SHT3115readTemperatureEv>:
  else
    writeCommand(SHT31_HEATERDIS);
}


float Adafruit_SHT31::readTemperature(void) {
   d4370:	b510      	push	{r4, lr}
   d4372:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   d4374:	f7ff ff88 	bl	d4288 <_ZN14Adafruit_SHT3111readTempHumEv>
   d4378:	b110      	cbz	r0, d4380 <_ZN14Adafruit_SHT3115readTemperatureEv+0x10>

  return temp;
   d437a:	ed94 0a02 	vldr	s0, [r4, #8]
   d437e:	bd10      	pop	{r4, pc}
    writeCommand(SHT31_HEATERDIS);
}


float Adafruit_SHT31::readTemperature(void) {
  if (! readTempHum()) return NAN;
   d4380:	ed9f 0a01 	vldr	s0, [pc, #4]	; d4388 <_ZN14Adafruit_SHT3115readTemperatureEv+0x18>

  return temp;
}
   d4384:	bd10      	pop	{r4, pc}
   d4386:	bf00      	nop
   d4388:	7fc00000 	.word	0x7fc00000

000d438c <_GLOBAL__sub_I__ZN14Adafruit_SHT31C2Ev>:
   d438c:	f000 b810 	b.w	d43b0 <HAL_Pin_Map>

000d4390 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4390:	b508      	push	{r3, lr}
   d4392:	4b02      	ldr	r3, [pc, #8]	; (d439c <netdb_freeaddrinfo+0xc>)
   d4394:	681b      	ldr	r3, [r3, #0]
   d4396:	689b      	ldr	r3, [r3, #8]
   d4398:	9301      	str	r3, [sp, #4]
   d439a:	bd08      	pop	{r3, pc}
   d439c:	00030268 	.word	0x00030268

000d43a0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d43a0:	b508      	push	{r3, lr}
   d43a2:	4b02      	ldr	r3, [pc, #8]	; (d43ac <netdb_getaddrinfo+0xc>)
   d43a4:	681b      	ldr	r3, [r3, #0]
   d43a6:	68db      	ldr	r3, [r3, #12]
   d43a8:	9301      	str	r3, [sp, #4]
   d43aa:	bd08      	pop	{r3, pc}
   d43ac:	00030268 	.word	0x00030268

000d43b0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d43b0:	b508      	push	{r3, lr}
   d43b2:	4b02      	ldr	r3, [pc, #8]	; (d43bc <HAL_Pin_Map+0xc>)
   d43b4:	681b      	ldr	r3, [r3, #0]
   d43b6:	681b      	ldr	r3, [r3, #0]
   d43b8:	9301      	str	r3, [sp, #4]
   d43ba:	bd08      	pop	{r3, pc}
   d43bc:	0003022c 	.word	0x0003022c

000d43c0 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d43c0:	b508      	push	{r3, lr}
   d43c2:	4b02      	ldr	r3, [pc, #8]	; (d43cc <HAL_Validate_Pin_Function+0xc>)
   d43c4:	681b      	ldr	r3, [r3, #0]
   d43c6:	685b      	ldr	r3, [r3, #4]
   d43c8:	9301      	str	r3, [sp, #4]
   d43ca:	bd08      	pop	{r3, pc}
   d43cc:	0003022c 	.word	0x0003022c

000d43d0 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d43d0:	b508      	push	{r3, lr}
   d43d2:	4b02      	ldr	r3, [pc, #8]	; (d43dc <HAL_ADC_Read+0xc>)
   d43d4:	681b      	ldr	r3, [r3, #0]
   d43d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d43d8:	9301      	str	r3, [sp, #4]
   d43da:	bd08      	pop	{r3, pc}
   d43dc:	0003022c 	.word	0x0003022c

000d43e0 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d43e0:	b508      	push	{r3, lr}
   d43e2:	4b02      	ldr	r3, [pc, #8]	; (d43ec <HAL_SPI_Init+0xc>)
   d43e4:	681b      	ldr	r3, [r3, #0]
   d43e6:	69db      	ldr	r3, [r3, #28]
   d43e8:	9301      	str	r3, [sp, #4]
   d43ea:	bd08      	pop	{r3, pc}
   d43ec:	00030230 	.word	0x00030230

000d43f0 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d43f0:	b508      	push	{r3, lr}
   d43f2:	4b02      	ldr	r3, [pc, #8]	; (d43fc <HAL_SPI_Is_Enabled+0xc>)
   d43f4:	681b      	ldr	r3, [r3, #0]
   d43f6:	6a1b      	ldr	r3, [r3, #32]
   d43f8:	9301      	str	r3, [sp, #4]
   d43fa:	bd08      	pop	{r3, pc}
   d43fc:	00030230 	.word	0x00030230

000d4400 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4400:	b508      	push	{r3, lr}
   d4402:	4b02      	ldr	r3, [pc, #8]	; (d440c <HAL_RNG_GetRandomNumber+0xc>)
   d4404:	681b      	ldr	r3, [r3, #0]
   d4406:	685b      	ldr	r3, [r3, #4]
   d4408:	9301      	str	r3, [sp, #4]
   d440a:	bd08      	pop	{r3, pc}
   d440c:	00030218 	.word	0x00030218

000d4410 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4410:	b508      	push	{r3, lr}
   d4412:	4b02      	ldr	r3, [pc, #8]	; (d441c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4414:	681b      	ldr	r3, [r3, #0]
   d4416:	695b      	ldr	r3, [r3, #20]
   d4418:	9301      	str	r3, [sp, #4]
   d441a:	bd08      	pop	{r3, pc}
   d441c:	00030218 	.word	0x00030218

000d4420 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4420:	b508      	push	{r3, lr}
   d4422:	4b02      	ldr	r3, [pc, #8]	; (d442c <os_thread_is_current+0xc>)
   d4424:	681b      	ldr	r3, [r3, #0]
   d4426:	689b      	ldr	r3, [r3, #8]
   d4428:	9301      	str	r3, [sp, #4]
   d442a:	bd08      	pop	{r3, pc}
   d442c:	00030248 	.word	0x00030248

000d4430 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4430:	b508      	push	{r3, lr}
   d4432:	4b02      	ldr	r3, [pc, #8]	; (d443c <os_thread_join+0xc>)
   d4434:	681b      	ldr	r3, [r3, #0]
   d4436:	691b      	ldr	r3, [r3, #16]
   d4438:	9301      	str	r3, [sp, #4]
   d443a:	bd08      	pop	{r3, pc}
   d443c:	00030248 	.word	0x00030248

000d4440 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4440:	b508      	push	{r3, lr}
   d4442:	4b02      	ldr	r3, [pc, #8]	; (d444c <os_thread_cleanup+0xc>)
   d4444:	681b      	ldr	r3, [r3, #0]
   d4446:	695b      	ldr	r3, [r3, #20]
   d4448:	9301      	str	r3, [sp, #4]
   d444a:	bd08      	pop	{r3, pc}
   d444c:	00030248 	.word	0x00030248

000d4450 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4450:	b508      	push	{r3, lr}
   d4452:	4b02      	ldr	r3, [pc, #8]	; (d445c <os_mutex_create+0xc>)
   d4454:	681b      	ldr	r3, [r3, #0]
   d4456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4458:	9301      	str	r3, [sp, #4]
   d445a:	bd08      	pop	{r3, pc}
   d445c:	00030248 	.word	0x00030248

000d4460 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4460:	b508      	push	{r3, lr}
   d4462:	4b02      	ldr	r3, [pc, #8]	; (d446c <os_mutex_recursive_create+0xc>)
   d4464:	681b      	ldr	r3, [r3, #0]
   d4466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4468:	9301      	str	r3, [sp, #4]
   d446a:	bd08      	pop	{r3, pc}
   d446c:	00030248 	.word	0x00030248

000d4470 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4470:	b508      	push	{r3, lr}
   d4472:	4b02      	ldr	r3, [pc, #8]	; (d447c <inet_inet_ntop+0xc>)
   d4474:	681b      	ldr	r3, [r3, #0]
   d4476:	695b      	ldr	r3, [r3, #20]
   d4478:	9301      	str	r3, [sp, #4]
   d447a:	bd08      	pop	{r3, pc}
   d447c:	00030264 	.word	0x00030264

000d4480 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4480:	b508      	push	{r3, lr}
   d4482:	4b02      	ldr	r3, [pc, #8]	; (d448c <HAL_USART_Init+0xc>)
   d4484:	681b      	ldr	r3, [r3, #0]
   d4486:	681b      	ldr	r3, [r3, #0]
   d4488:	9301      	str	r3, [sp, #4]
   d448a:	bd08      	pop	{r3, pc}
   d448c:	0003023c 	.word	0x0003023c

000d4490 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4490:	b508      	push	{r3, lr}
   d4492:	4b02      	ldr	r3, [pc, #8]	; (d449c <HAL_USART_Write_Data+0xc>)
   d4494:	681b      	ldr	r3, [r3, #0]
   d4496:	68db      	ldr	r3, [r3, #12]
   d4498:	9301      	str	r3, [sp, #4]
   d449a:	bd08      	pop	{r3, pc}
   d449c:	0003023c 	.word	0x0003023c

000d44a0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d44a0:	b508      	push	{r3, lr}
   d44a2:	4b02      	ldr	r3, [pc, #8]	; (d44ac <HAL_USART_Available_Data+0xc>)
   d44a4:	681b      	ldr	r3, [r3, #0]
   d44a6:	691b      	ldr	r3, [r3, #16]
   d44a8:	9301      	str	r3, [sp, #4]
   d44aa:	bd08      	pop	{r3, pc}
   d44ac:	0003023c 	.word	0x0003023c

000d44b0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d44b0:	b508      	push	{r3, lr}
   d44b2:	4b02      	ldr	r3, [pc, #8]	; (d44bc <HAL_USART_Read_Data+0xc>)
   d44b4:	681b      	ldr	r3, [r3, #0]
   d44b6:	695b      	ldr	r3, [r3, #20]
   d44b8:	9301      	str	r3, [sp, #4]
   d44ba:	bd08      	pop	{r3, pc}
   d44bc:	0003023c 	.word	0x0003023c

000d44c0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d44c0:	b508      	push	{r3, lr}
   d44c2:	4b02      	ldr	r3, [pc, #8]	; (d44cc <HAL_USART_Peek_Data+0xc>)
   d44c4:	681b      	ldr	r3, [r3, #0]
   d44c6:	699b      	ldr	r3, [r3, #24]
   d44c8:	9301      	str	r3, [sp, #4]
   d44ca:	bd08      	pop	{r3, pc}
   d44cc:	0003023c 	.word	0x0003023c

000d44d0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d44d0:	b508      	push	{r3, lr}
   d44d2:	4b02      	ldr	r3, [pc, #8]	; (d44dc <HAL_USART_Flush_Data+0xc>)
   d44d4:	681b      	ldr	r3, [r3, #0]
   d44d6:	69db      	ldr	r3, [r3, #28]
   d44d8:	9301      	str	r3, [sp, #4]
   d44da:	bd08      	pop	{r3, pc}
   d44dc:	0003023c 	.word	0x0003023c

000d44e0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d44e0:	b508      	push	{r3, lr}
   d44e2:	4b02      	ldr	r3, [pc, #8]	; (d44ec <HAL_USART_Is_Enabled+0xc>)
   d44e4:	681b      	ldr	r3, [r3, #0]
   d44e6:	6a1b      	ldr	r3, [r3, #32]
   d44e8:	9301      	str	r3, [sp, #4]
   d44ea:	bd08      	pop	{r3, pc}
   d44ec:	0003023c 	.word	0x0003023c

000d44f0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d44f0:	b508      	push	{r3, lr}
   d44f2:	4b02      	ldr	r3, [pc, #8]	; (d44fc <HAL_USART_Available_Data_For_Write+0xc>)
   d44f4:	681b      	ldr	r3, [r3, #0]
   d44f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d44f8:	9301      	str	r3, [sp, #4]
   d44fa:	bd08      	pop	{r3, pc}
   d44fc:	0003023c 	.word	0x0003023c

000d4500 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d4500:	b508      	push	{r3, lr}
   d4502:	4b02      	ldr	r3, [pc, #8]	; (d450c <HAL_I2C_Begin+0xc>)
   d4504:	681b      	ldr	r3, [r3, #0]
   d4506:	68db      	ldr	r3, [r3, #12]
   d4508:	9301      	str	r3, [sp, #4]
   d450a:	bd08      	pop	{r3, pc}
   d450c:	00030228 	.word	0x00030228

000d4510 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
   d4510:	b508      	push	{r3, lr}
   d4512:	4b02      	ldr	r3, [pc, #8]	; (d451c <HAL_I2C_Request_Data+0xc>)
   d4514:	681b      	ldr	r3, [r3, #0]
   d4516:	695b      	ldr	r3, [r3, #20]
   d4518:	9301      	str	r3, [sp, #4]
   d451a:	bd08      	pop	{r3, pc}
   d451c:	00030228 	.word	0x00030228

000d4520 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   d4520:	b508      	push	{r3, lr}
   d4522:	4b02      	ldr	r3, [pc, #8]	; (d452c <HAL_I2C_Begin_Transmission+0xc>)
   d4524:	681b      	ldr	r3, [r3, #0]
   d4526:	699b      	ldr	r3, [r3, #24]
   d4528:	9301      	str	r3, [sp, #4]
   d452a:	bd08      	pop	{r3, pc}
   d452c:	00030228 	.word	0x00030228

000d4530 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d4530:	b508      	push	{r3, lr}
   d4532:	4b02      	ldr	r3, [pc, #8]	; (d453c <HAL_I2C_End_Transmission+0xc>)
   d4534:	681b      	ldr	r3, [r3, #0]
   d4536:	69db      	ldr	r3, [r3, #28]
   d4538:	9301      	str	r3, [sp, #4]
   d453a:	bd08      	pop	{r3, pc}
   d453c:	00030228 	.word	0x00030228

000d4540 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4540:	b508      	push	{r3, lr}
   d4542:	4b02      	ldr	r3, [pc, #8]	; (d454c <HAL_I2C_Write_Data+0xc>)
   d4544:	681b      	ldr	r3, [r3, #0]
   d4546:	6a1b      	ldr	r3, [r3, #32]
   d4548:	9301      	str	r3, [sp, #4]
   d454a:	bd08      	pop	{r3, pc}
   d454c:	00030228 	.word	0x00030228

000d4550 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4550:	b508      	push	{r3, lr}
   d4552:	4b02      	ldr	r3, [pc, #8]	; (d455c <HAL_I2C_Available_Data+0xc>)
   d4554:	681b      	ldr	r3, [r3, #0]
   d4556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4558:	9301      	str	r3, [sp, #4]
   d455a:	bd08      	pop	{r3, pc}
   d455c:	00030228 	.word	0x00030228

000d4560 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4560:	b508      	push	{r3, lr}
   d4562:	4b02      	ldr	r3, [pc, #8]	; (d456c <HAL_I2C_Read_Data+0xc>)
   d4564:	681b      	ldr	r3, [r3, #0]
   d4566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4568:	9301      	str	r3, [sp, #4]
   d456a:	bd08      	pop	{r3, pc}
   d456c:	00030228 	.word	0x00030228

000d4570 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4570:	b508      	push	{r3, lr}
   d4572:	4b02      	ldr	r3, [pc, #8]	; (d457c <HAL_I2C_Peek_Data+0xc>)
   d4574:	681b      	ldr	r3, [r3, #0]
   d4576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4578:	9301      	str	r3, [sp, #4]
   d457a:	bd08      	pop	{r3, pc}
   d457c:	00030228 	.word	0x00030228

000d4580 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4580:	b508      	push	{r3, lr}
   d4582:	4b02      	ldr	r3, [pc, #8]	; (d458c <HAL_I2C_Flush_Data+0xc>)
   d4584:	681b      	ldr	r3, [r3, #0]
   d4586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4588:	9301      	str	r3, [sp, #4]
   d458a:	bd08      	pop	{r3, pc}
   d458c:	00030228 	.word	0x00030228

000d4590 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4590:	b508      	push	{r3, lr}
   d4592:	4b02      	ldr	r3, [pc, #8]	; (d459c <HAL_I2C_Is_Enabled+0xc>)
   d4594:	681b      	ldr	r3, [r3, #0]
   d4596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4598:	9301      	str	r3, [sp, #4]
   d459a:	bd08      	pop	{r3, pc}
   d459c:	00030228 	.word	0x00030228

000d45a0 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d45a0:	b508      	push	{r3, lr}
   d45a2:	4b02      	ldr	r3, [pc, #8]	; (d45ac <HAL_I2C_Init+0xc>)
   d45a4:	681b      	ldr	r3, [r3, #0]
   d45a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d45a8:	9301      	str	r3, [sp, #4]
   d45aa:	bd08      	pop	{r3, pc}
   d45ac:	00030228 	.word	0x00030228

000d45b0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d45b0:	b508      	push	{r3, lr}
   d45b2:	4b02      	ldr	r3, [pc, #8]	; (d45bc <HAL_USB_USART_Init+0xc>)
   d45b4:	681b      	ldr	r3, [r3, #0]
   d45b6:	681b      	ldr	r3, [r3, #0]
   d45b8:	9301      	str	r3, [sp, #4]
   d45ba:	bd08      	pop	{r3, pc}
   d45bc:	0003024c 	.word	0x0003024c

000d45c0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d45c0:	b508      	push	{r3, lr}
   d45c2:	4b02      	ldr	r3, [pc, #8]	; (d45cc <HAL_USB_USART_Begin+0xc>)
   d45c4:	681b      	ldr	r3, [r3, #0]
   d45c6:	685b      	ldr	r3, [r3, #4]
   d45c8:	9301      	str	r3, [sp, #4]
   d45ca:	bd08      	pop	{r3, pc}
   d45cc:	0003024c 	.word	0x0003024c

000d45d0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d45d0:	b508      	push	{r3, lr}
   d45d2:	4b02      	ldr	r3, [pc, #8]	; (d45dc <HAL_USB_USART_Available_Data+0xc>)
   d45d4:	681b      	ldr	r3, [r3, #0]
   d45d6:	691b      	ldr	r3, [r3, #16]
   d45d8:	9301      	str	r3, [sp, #4]
   d45da:	bd08      	pop	{r3, pc}
   d45dc:	0003024c 	.word	0x0003024c

000d45e0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d45e0:	b508      	push	{r3, lr}
   d45e2:	4b02      	ldr	r3, [pc, #8]	; (d45ec <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d45e4:	681b      	ldr	r3, [r3, #0]
   d45e6:	695b      	ldr	r3, [r3, #20]
   d45e8:	9301      	str	r3, [sp, #4]
   d45ea:	bd08      	pop	{r3, pc}
   d45ec:	0003024c 	.word	0x0003024c

000d45f0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d45f0:	b508      	push	{r3, lr}
   d45f2:	4b02      	ldr	r3, [pc, #8]	; (d45fc <HAL_USB_USART_Receive_Data+0xc>)
   d45f4:	681b      	ldr	r3, [r3, #0]
   d45f6:	699b      	ldr	r3, [r3, #24]
   d45f8:	9301      	str	r3, [sp, #4]
   d45fa:	bd08      	pop	{r3, pc}
   d45fc:	0003024c 	.word	0x0003024c

000d4600 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4600:	b508      	push	{r3, lr}
   d4602:	4b02      	ldr	r3, [pc, #8]	; (d460c <HAL_USB_USART_Send_Data+0xc>)
   d4604:	681b      	ldr	r3, [r3, #0]
   d4606:	69db      	ldr	r3, [r3, #28]
   d4608:	9301      	str	r3, [sp, #4]
   d460a:	bd08      	pop	{r3, pc}
   d460c:	0003024c 	.word	0x0003024c

000d4610 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4610:	b508      	push	{r3, lr}
   d4612:	4b02      	ldr	r3, [pc, #8]	; (d461c <HAL_USB_USART_Flush_Data+0xc>)
   d4614:	681b      	ldr	r3, [r3, #0]
   d4616:	6a1b      	ldr	r3, [r3, #32]
   d4618:	9301      	str	r3, [sp, #4]
   d461a:	bd08      	pop	{r3, pc}
   d461c:	0003024c 	.word	0x0003024c

000d4620 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4620:	b508      	push	{r3, lr}
   d4622:	4b02      	ldr	r3, [pc, #8]	; (d462c <set_system_mode+0xc>)
   d4624:	681b      	ldr	r3, [r3, #0]
   d4626:	685b      	ldr	r3, [r3, #4]
   d4628:	9301      	str	r3, [sp, #4]
   d462a:	bd08      	pop	{r3, pc}
   d462c:	00030220 	.word	0x00030220

000d4630 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4630:	b508      	push	{r3, lr}
   d4632:	4b02      	ldr	r3, [pc, #8]	; (d463c <system_delay_ms+0xc>)
   d4634:	681b      	ldr	r3, [r3, #0]
   d4636:	695b      	ldr	r3, [r3, #20]
   d4638:	9301      	str	r3, [sp, #4]
   d463a:	bd08      	pop	{r3, pc}
   d463c:	00030220 	.word	0x00030220

000d4640 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4640:	b508      	push	{r3, lr}
   d4642:	4b02      	ldr	r3, [pc, #8]	; (d464c <application_thread_current+0xc>)
   d4644:	681b      	ldr	r3, [r3, #0]
   d4646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4648:	9301      	str	r3, [sp, #4]
   d464a:	bd08      	pop	{r3, pc}
   d464c:	00030220 	.word	0x00030220

000d4650 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4650:	b508      	push	{r3, lr}
   d4652:	4b02      	ldr	r3, [pc, #8]	; (d465c <application_thread_invoke+0xc>)
   d4654:	681b      	ldr	r3, [r3, #0]
   d4656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4658:	9301      	str	r3, [sp, #4]
   d465a:	bd08      	pop	{r3, pc}
   d465c:	00030220 	.word	0x00030220

000d4660 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4660:	b508      	push	{r3, lr}
   d4662:	4b03      	ldr	r3, [pc, #12]	; (d4670 <system_ctrl_set_app_request_handler+0x10>)
   d4664:	681b      	ldr	r3, [r3, #0]
   d4666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d466a:	9301      	str	r3, [sp, #4]
   d466c:	bd08      	pop	{r3, pc}
   d466e:	0000      	.short	0x0000
   d4670:	00030220 	.word	0x00030220

000d4674 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4674:	b508      	push	{r3, lr}
   d4676:	4b03      	ldr	r3, [pc, #12]	; (d4684 <system_ctrl_set_result+0x10>)
   d4678:	681b      	ldr	r3, [r3, #0]
   d467a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d467e:	9301      	str	r3, [sp, #4]
   d4680:	bd08      	pop	{r3, pc}
   d4682:	0000      	.short	0x0000
   d4684:	00030220 	.word	0x00030220

000d4688 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4688:	b508      	push	{r3, lr}
   d468a:	4b02      	ldr	r3, [pc, #8]	; (d4694 <network_connect+0xc>)
   d468c:	681b      	ldr	r3, [r3, #0]
   d468e:	685b      	ldr	r3, [r3, #4]
   d4690:	9301      	str	r3, [sp, #4]
   d4692:	bd08      	pop	{r3, pc}
   d4694:	00030240 	.word	0x00030240

000d4698 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4698:	b508      	push	{r3, lr}
   d469a:	4b02      	ldr	r3, [pc, #8]	; (d46a4 <network_connecting+0xc>)
   d469c:	681b      	ldr	r3, [r3, #0]
   d469e:	689b      	ldr	r3, [r3, #8]
   d46a0:	9301      	str	r3, [sp, #4]
   d46a2:	bd08      	pop	{r3, pc}
   d46a4:	00030240 	.word	0x00030240

000d46a8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d46a8:	b508      	push	{r3, lr}
   d46aa:	4b02      	ldr	r3, [pc, #8]	; (d46b4 <network_disconnect+0xc>)
   d46ac:	681b      	ldr	r3, [r3, #0]
   d46ae:	68db      	ldr	r3, [r3, #12]
   d46b0:	9301      	str	r3, [sp, #4]
   d46b2:	bd08      	pop	{r3, pc}
   d46b4:	00030240 	.word	0x00030240

000d46b8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d46b8:	b508      	push	{r3, lr}
   d46ba:	4b02      	ldr	r3, [pc, #8]	; (d46c4 <network_ready+0xc>)
   d46bc:	681b      	ldr	r3, [r3, #0]
   d46be:	691b      	ldr	r3, [r3, #16]
   d46c0:	9301      	str	r3, [sp, #4]
   d46c2:	bd08      	pop	{r3, pc}
   d46c4:	00030240 	.word	0x00030240

000d46c8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d46c8:	b508      	push	{r3, lr}
   d46ca:	4b02      	ldr	r3, [pc, #8]	; (d46d4 <network_on+0xc>)
   d46cc:	681b      	ldr	r3, [r3, #0]
   d46ce:	695b      	ldr	r3, [r3, #20]
   d46d0:	9301      	str	r3, [sp, #4]
   d46d2:	bd08      	pop	{r3, pc}
   d46d4:	00030240 	.word	0x00030240

000d46d8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d46d8:	b508      	push	{r3, lr}
   d46da:	4b02      	ldr	r3, [pc, #8]	; (d46e4 <network_off+0xc>)
   d46dc:	681b      	ldr	r3, [r3, #0]
   d46de:	699b      	ldr	r3, [r3, #24]
   d46e0:	9301      	str	r3, [sp, #4]
   d46e2:	bd08      	pop	{r3, pc}
   d46e4:	00030240 	.word	0x00030240

000d46e8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d46e8:	b508      	push	{r3, lr}
   d46ea:	4b02      	ldr	r3, [pc, #8]	; (d46f4 <network_listen+0xc>)
   d46ec:	681b      	ldr	r3, [r3, #0]
   d46ee:	69db      	ldr	r3, [r3, #28]
   d46f0:	9301      	str	r3, [sp, #4]
   d46f2:	bd08      	pop	{r3, pc}
   d46f4:	00030240 	.word	0x00030240

000d46f8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d46f8:	b508      	push	{r3, lr}
   d46fa:	4b02      	ldr	r3, [pc, #8]	; (d4704 <network_listening+0xc>)
   d46fc:	681b      	ldr	r3, [r3, #0]
   d46fe:	6a1b      	ldr	r3, [r3, #32]
   d4700:	9301      	str	r3, [sp, #4]
   d4702:	bd08      	pop	{r3, pc}
   d4704:	00030240 	.word	0x00030240

000d4708 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4708:	b508      	push	{r3, lr}
   d470a:	4b02      	ldr	r3, [pc, #8]	; (d4714 <network_set_listen_timeout+0xc>)
   d470c:	681b      	ldr	r3, [r3, #0]
   d470e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4710:	9301      	str	r3, [sp, #4]
   d4712:	bd08      	pop	{r3, pc}
   d4714:	00030240 	.word	0x00030240

000d4718 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4718:	b508      	push	{r3, lr}
   d471a:	4b02      	ldr	r3, [pc, #8]	; (d4724 <network_get_listen_timeout+0xc>)
   d471c:	681b      	ldr	r3, [r3, #0]
   d471e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4720:	9301      	str	r3, [sp, #4]
   d4722:	bd08      	pop	{r3, pc}
   d4724:	00030240 	.word	0x00030240

000d4728 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4728:	b508      	push	{r3, lr}
   d472a:	4b02      	ldr	r3, [pc, #8]	; (d4734 <spark_cloud_flag_connected+0xc>)
   d472c:	681b      	ldr	r3, [r3, #0]
   d472e:	695b      	ldr	r3, [r3, #20]
   d4730:	9301      	str	r3, [sp, #4]
   d4732:	bd08      	pop	{r3, pc}
   d4734:	00030244 	.word	0x00030244

000d4738 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4738:	b508      	push	{r3, lr}
   d473a:	4b02      	ldr	r3, [pc, #8]	; (d4744 <spark_send_event+0xc>)
   d473c:	681b      	ldr	r3, [r3, #0]
   d473e:	6a1b      	ldr	r3, [r3, #32]
   d4740:	9301      	str	r3, [sp, #4]
   d4742:	bd08      	pop	{r3, pc}
   d4744:	00030244 	.word	0x00030244

000d4748 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4748:	b508      	push	{r3, lr}
   d474a:	4b02      	ldr	r3, [pc, #8]	; (d4754 <spark_set_random_seed_from_cloud_handler+0xc>)
   d474c:	681b      	ldr	r3, [r3, #0]
   d474e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4750:	9301      	str	r3, [sp, #4]
   d4752:	bd08      	pop	{r3, pc}
   d4754:	00030244 	.word	0x00030244

000d4758 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4758:	b508      	push	{r3, lr}
   d475a:	4b02      	ldr	r3, [pc, #8]	; (d4764 <malloc+0xc>)
   d475c:	681b      	ldr	r3, [r3, #0]
   d475e:	681b      	ldr	r3, [r3, #0]
   d4760:	9301      	str	r3, [sp, #4]
   d4762:	bd08      	pop	{r3, pc}
   d4764:	0003021c 	.word	0x0003021c

000d4768 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4768:	b508      	push	{r3, lr}
   d476a:	4b02      	ldr	r3, [pc, #8]	; (d4774 <free+0xc>)
   d476c:	681b      	ldr	r3, [r3, #0]
   d476e:	685b      	ldr	r3, [r3, #4]
   d4770:	9301      	str	r3, [sp, #4]
   d4772:	bd08      	pop	{r3, pc}
   d4774:	0003021c 	.word	0x0003021c

000d4778 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4778:	b508      	push	{r3, lr}
   d477a:	4b02      	ldr	r3, [pc, #8]	; (d4784 <realloc+0xc>)
   d477c:	681b      	ldr	r3, [r3, #0]
   d477e:	689b      	ldr	r3, [r3, #8]
   d4780:	9301      	str	r3, [sp, #4]
   d4782:	bd08      	pop	{r3, pc}
   d4784:	0003021c 	.word	0x0003021c

000d4788 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4788:	b508      	push	{r3, lr}
   d478a:	4b02      	ldr	r3, [pc, #8]	; (d4794 <abort+0xc>)
   d478c:	681b      	ldr	r3, [r3, #0]
   d478e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4790:	9301      	str	r3, [sp, #4]
   d4792:	bd08      	pop	{r3, pc}
   d4794:	0003021c 	.word	0x0003021c

000d4798 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4798:	b508      	push	{r3, lr}
   d479a:	4b02      	ldr	r3, [pc, #8]	; (d47a4 <_malloc_r+0xc>)
   d479c:	681b      	ldr	r3, [r3, #0]
   d479e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d47a0:	9301      	str	r3, [sp, #4]
   d47a2:	bd08      	pop	{r3, pc}
   d47a4:	0003021c 	.word	0x0003021c

000d47a8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d47a8:	2200      	movs	r2, #0
   d47aa:	4611      	mov	r1, r2
   d47ac:	6840      	ldr	r0, [r0, #4]
   d47ae:	f7ff bfa3 	b.w	d46f8 <network_listening>

000d47b2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d47b2:	2200      	movs	r2, #0
   d47b4:	4611      	mov	r1, r2
   d47b6:	6840      	ldr	r0, [r0, #4]
   d47b8:	f7ff bfae 	b.w	d4718 <network_get_listen_timeout>

000d47bc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d47bc:	2200      	movs	r2, #0
   d47be:	6840      	ldr	r0, [r0, #4]
   d47c0:	f7ff bfa2 	b.w	d4708 <network_set_listen_timeout>

000d47c4 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d47c4:	2200      	movs	r2, #0
   d47c6:	f081 0101 	eor.w	r1, r1, #1
   d47ca:	6840      	ldr	r0, [r0, #4]
   d47cc:	f7ff bf8c 	b.w	d46e8 <network_listen>

000d47d0 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d47d0:	2300      	movs	r3, #0
   d47d2:	461a      	mov	r2, r3
   d47d4:	4619      	mov	r1, r3
   d47d6:	6840      	ldr	r0, [r0, #4]
   d47d8:	f7ff bf7e 	b.w	d46d8 <network_off>

000d47dc <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d47dc:	2300      	movs	r3, #0
   d47de:	461a      	mov	r2, r3
   d47e0:	4619      	mov	r1, r3
   d47e2:	6840      	ldr	r0, [r0, #4]
   d47e4:	f7ff bf70 	b.w	d46c8 <network_on>

000d47e8 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d47e8:	2200      	movs	r2, #0
   d47ea:	4611      	mov	r1, r2
   d47ec:	6840      	ldr	r0, [r0, #4]
   d47ee:	f7ff bf63 	b.w	d46b8 <network_ready>

000d47f2 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d47f2:	2200      	movs	r2, #0
   d47f4:	4611      	mov	r1, r2
   d47f6:	6840      	ldr	r0, [r0, #4]
   d47f8:	f7ff bf4e 	b.w	d4698 <network_connecting>

000d47fc <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d47fc:	2200      	movs	r2, #0
   d47fe:	2102      	movs	r1, #2
   d4800:	6840      	ldr	r0, [r0, #4]
   d4802:	f7ff bf51 	b.w	d46a8 <network_disconnect>

000d4806 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4806:	2300      	movs	r3, #0
   d4808:	461a      	mov	r2, r3
   d480a:	6840      	ldr	r0, [r0, #4]
   d480c:	f7ff bf3c 	b.w	d4688 <network_connect>

000d4810 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4810:	4b02      	ldr	r3, [pc, #8]	; (d481c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4812:	2203      	movs	r2, #3
   d4814:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4816:	4a02      	ldr	r2, [pc, #8]	; (d4820 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4818:	601a      	str	r2, [r3, #0]
   d481a:	4770      	bx	lr
   d481c:	2003e3a0 	.word	0x2003e3a0
   d4820:	000d68bc 	.word	0x000d68bc

000d4824 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d4824:	4770      	bx	lr

000d4826 <_ZN8SPIClassD0Ev>:
   d4826:	b510      	push	{r4, lr}
   d4828:	2110      	movs	r1, #16
   d482a:	4604      	mov	r4, r0
   d482c:	f001 f963 	bl	d5af6 <_ZdlPvj>
   d4830:	4620      	mov	r0, r4
   d4832:	bd10      	pop	{r4, pc}

000d4834 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4834:	b570      	push	{r4, r5, r6, lr}
   d4836:	4b08      	ldr	r3, [pc, #32]	; (d4858 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d4838:	6003      	str	r3, [r0, #0]
   d483a:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d483c:	2500      	movs	r5, #0
   d483e:	460e      	mov	r6, r1
   d4840:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d4844:	f7ff fe04 	bl	d4450 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d4848:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d484a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d484c:	f7ff fdc8 	bl	d43e0 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d4850:	60a5      	str	r5, [r4, #8]
}
   d4852:	4620      	mov	r0, r4
   d4854:	bd70      	pop	{r4, r5, r6, pc}
   d4856:	bf00      	nop
   d4858:	000d68f0 	.word	0x000d68f0

000d485c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d485c:	7900      	ldrb	r0, [r0, #4]
   d485e:	f7ff bdc7 	b.w	d43f0 <HAL_SPI_Is_Enabled>
	...

000d4864 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d4864:	4b04      	ldr	r3, [pc, #16]	; (d4878 <_GLOBAL__sub_I_System+0x14>)
   d4866:	2000      	movs	r0, #0
   d4868:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d486c:	7018      	strb	r0, [r3, #0]
   d486e:	8058      	strh	r0, [r3, #2]
   d4870:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4872:	f7ff bed5 	b.w	d4620 <set_system_mode>
   d4876:	bf00      	nop
   d4878:	2003e3a8 	.word	0x2003e3a8

000d487c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d487c:	b510      	push	{r4, lr}
   d487e:	4604      	mov	r4, r0
{
	free(buffer);
   d4880:	6800      	ldr	r0, [r0, #0]
   d4882:	f7ff ff71 	bl	d4768 <free>
}
   d4886:	4620      	mov	r0, r4
   d4888:	bd10      	pop	{r4, pc}

000d488a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d488a:	b510      	push	{r4, lr}
   d488c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d488e:	6800      	ldr	r0, [r0, #0]
   d4890:	b108      	cbz	r0, d4896 <_ZN6String10invalidateEv+0xc>
   d4892:	f7ff ff69 	bl	d4768 <free>
	buffer = NULL;
   d4896:	2300      	movs	r3, #0
   d4898:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d489a:	60a3      	str	r3, [r4, #8]
   d489c:	6063      	str	r3, [r4, #4]
   d489e:	bd10      	pop	{r4, pc}

000d48a0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d48a0:	b538      	push	{r3, r4, r5, lr}
   d48a2:	4604      	mov	r4, r0
   d48a4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d48a6:	6800      	ldr	r0, [r0, #0]
   d48a8:	3101      	adds	r1, #1
   d48aa:	f7ff ff65 	bl	d4778 <realloc>
	if (newbuffer) {
   d48ae:	b110      	cbz	r0, d48b6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d48b0:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d48b4:	2001      	movs	r0, #1
	}
	return 0;
}
   d48b6:	bd38      	pop	{r3, r4, r5, pc}

000d48b8 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d48b8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d48ba:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d48bc:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d48be:	b113      	cbz	r3, d48c6 <_ZN6String7reserveEj+0xe>
   d48c0:	6843      	ldr	r3, [r0, #4]
   d48c2:	428b      	cmp	r3, r1
   d48c4:	d207      	bcs.n	d48d6 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d48c6:	4620      	mov	r0, r4
   d48c8:	f7ff ffea 	bl	d48a0 <_ZN6String12changeBufferEj>
   d48cc:	b120      	cbz	r0, d48d8 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d48ce:	68a3      	ldr	r3, [r4, #8]
   d48d0:	b90b      	cbnz	r3, d48d6 <_ZN6String7reserveEj+0x1e>
   d48d2:	6822      	ldr	r2, [r4, #0]
   d48d4:	7013      	strb	r3, [r2, #0]
   d48d6:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d48d8:	bd10      	pop	{r4, pc}

000d48da <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d48da:	b570      	push	{r4, r5, r6, lr}
   d48dc:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d48de:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d48e0:	4604      	mov	r4, r0
   d48e2:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d48e4:	f7ff ffe8 	bl	d48b8 <_ZN6String7reserveEj>
   d48e8:	b918      	cbnz	r0, d48f2 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d48ea:	4620      	mov	r0, r4
   d48ec:	f7ff ffcd 	bl	d488a <_ZN6String10invalidateEv>
		return *this;
   d48f0:	e009      	b.n	d4906 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d48f2:	462a      	mov	r2, r5
   d48f4:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d48f6:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d48f8:	6820      	ldr	r0, [r4, #0]
   d48fa:	f001 ff57 	bl	d67ac <memcpy>
	buffer[len] = 0;
   d48fe:	6822      	ldr	r2, [r4, #0]
   d4900:	68a3      	ldr	r3, [r4, #8]
   d4902:	2100      	movs	r1, #0
   d4904:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d4906:	4620      	mov	r0, r4
   d4908:	bd70      	pop	{r4, r5, r6, pc}

000d490a <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d490a:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d490c:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d490e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4910:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4912:	6043      	str	r3, [r0, #4]
	len = 0;
   d4914:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4916:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d4918:	460d      	mov	r5, r1
   d491a:	b139      	cbz	r1, d492c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d491c:	4608      	mov	r0, r1
   d491e:	f001 ff9c 	bl	d685a <strlen>
   d4922:	4629      	mov	r1, r5
   d4924:	4602      	mov	r2, r0
   d4926:	4620      	mov	r0, r4
   d4928:	f7ff ffd7 	bl	d48da <_ZN6String4copyEPKcj>
}
   d492c:	4620      	mov	r0, r4
   d492e:	bd38      	pop	{r3, r4, r5, pc}

000d4930 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4930:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4932:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4934:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4936:	689b      	ldr	r3, [r3, #8]
   d4938:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d493a:	68a3      	ldr	r3, [r4, #8]
   d493c:	3b01      	subs	r3, #1
   d493e:	60a3      	str	r3, [r4, #8]
   d4940:	b92b      	cbnz	r3, d494e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110+0x1e>
            _M_destroy();
   d4942:	6823      	ldr	r3, [r4, #0]
   d4944:	4620      	mov	r0, r4
   d4946:	68db      	ldr	r3, [r3, #12]
        }
    }
   d4948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d494c:	4718      	bx	r3
   d494e:	bd10      	pop	{r4, pc}

000d4950 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4950:	680b      	ldr	r3, [r1, #0]
   d4952:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4954:	b113      	cbz	r3, d495c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d4956:	685a      	ldr	r2, [r3, #4]
   d4958:	3201      	adds	r2, #1
   d495a:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d495c:	4770      	bx	lr

000d495e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d495e:	b510      	push	{r4, lr}
   d4960:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d4962:	6800      	ldr	r0, [r0, #0]
   d4964:	b128      	cbz	r0, d4972 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4966:	6843      	ldr	r3, [r0, #4]
   d4968:	3b01      	subs	r3, #1
   d496a:	6043      	str	r3, [r0, #4]
   d496c:	b90b      	cbnz	r3, d4972 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d496e:	f7ff ffdf 	bl	d4930 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4972:	4620      	mov	r0, r4
   d4974:	bd10      	pop	{r4, pc}
	...

000d4978 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4978:	4802      	ldr	r0, [pc, #8]	; (d4984 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d497a:	2300      	movs	r3, #0
   d497c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d497e:	f7ff bd6f 	b.w	d4460 <os_mutex_recursive_create>
   d4982:	bf00      	nop
   d4984:	2003e3b0 	.word	0x2003e3b0

000d4988 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d498a:	4606      	mov	r6, r0
   d498c:	460d      	mov	r5, r1
   d498e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4990:	2400      	movs	r4, #0
  while (size--) {
   d4992:	42bd      	cmp	r5, r7
   d4994:	d00c      	beq.n	d49b0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4996:	6833      	ldr	r3, [r6, #0]
   d4998:	f815 1b01 	ldrb.w	r1, [r5], #1
   d499c:	689b      	ldr	r3, [r3, #8]
   d499e:	4630      	mov	r0, r6
   d49a0:	4798      	blx	r3
     if (chunk>=0)
   d49a2:	2800      	cmp	r0, #0
   d49a4:	db01      	blt.n	d49aa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d49a6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d49a8:	e7f3      	b.n	d4992 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d49aa:	2c00      	cmp	r4, #0
   d49ac:	bf08      	it	eq
   d49ae:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d49b0:	4620      	mov	r0, r4
   d49b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d49b4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d49b4:	b570      	push	{r4, r5, r6, lr}
   d49b6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d49b8:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d49ba:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d49bc:	b149      	cbz	r1, d49d2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d49be:	f001 ff4c 	bl	d685a <strlen>
   d49c2:	682b      	ldr	r3, [r5, #0]
   d49c4:	4602      	mov	r2, r0
   d49c6:	4621      	mov	r1, r4
   d49c8:	4628      	mov	r0, r5
   d49ca:	68db      	ldr	r3, [r3, #12]
    }
   d49cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d49d0:	4718      	bx	r3
    }
   d49d2:	bd70      	pop	{r4, r5, r6, pc}

000d49d4 <_ZN5Print5printEPKc>:
   d49d4:	b508      	push	{r3, lr}
   d49d6:	f7ff ffed 	bl	d49b4 <_ZN5Print5writeEPKc>
   d49da:	bd08      	pop	{r3, pc}

000d49dc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d49dc:	6803      	ldr	r3, [r0, #0]
   d49de:	689b      	ldr	r3, [r3, #8]
   d49e0:	4718      	bx	r3

000d49e2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d49e2:	b530      	push	{r4, r5, lr}
   d49e4:	b08b      	sub	sp, #44	; 0x2c
   d49e6:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d49e8:	2100      	movs	r1, #0
   d49ea:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d49ee:	2a01      	cmp	r2, #1
   d49f0:	bf98      	it	ls
   d49f2:	220a      	movls	r2, #10
   d49f4:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d49f8:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d49fc:	fb05 3312 	mls	r3, r5, r2, r3
   d4a00:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4a04:	2b09      	cmp	r3, #9
   d4a06:	bf94      	ite	ls
   d4a08:	3330      	addls	r3, #48	; 0x30
   d4a0a:	3337      	addhi	r3, #55	; 0x37
   d4a0c:	b2db      	uxtb	r3, r3
   d4a0e:	4621      	mov	r1, r4
   d4a10:	f804 3901 	strb.w	r3, [r4], #-1
   d4a14:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4a16:	2d00      	cmp	r5, #0
   d4a18:	d1ee      	bne.n	d49f8 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4a1a:	f7ff ffcb 	bl	d49b4 <_ZN5Print5writeEPKc>
}
   d4a1e:	b00b      	add	sp, #44	; 0x2c
   d4a20:	bd30      	pop	{r4, r5, pc}

000d4a22 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d4a22:	b410      	push	{r4}
  if (base == 0) return write(n);
   d4a24:	b92a      	cbnz	r2, d4a32 <_ZN5Print5printEmi+0x10>
   d4a26:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d4a28:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d4a2c:	689b      	ldr	r3, [r3, #8]
   d4a2e:	b2c9      	uxtb	r1, r1
   d4a30:	4718      	bx	r3
  else return printNumber(n, base);
   d4a32:	b2d2      	uxtb	r2, r2
}
   d4a34:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d4a38:	f7ff bfd3 	b.w	d49e2 <_ZN5Print11printNumberEmh>

000d4a3c <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d4a3c:	f7ff bff1 	b.w	d4a22 <_ZN5Print5printEmi>

000d4a40 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d4a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4a44:	4607      	mov	r7, r0
   d4a46:	460e      	mov	r6, r1
  if (base == 0) {
   d4a48:	4615      	mov	r5, r2
   d4a4a:	b92a      	cbnz	r2, d4a58 <_ZN5Print5printEli+0x18>
    return write(n);
   d4a4c:	6803      	ldr	r3, [r0, #0]
   d4a4e:	b2c9      	uxtb	r1, r1
   d4a50:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d4a52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d4a56:	4718      	bx	r3
  } else if (base == 10) {
   d4a58:	2a0a      	cmp	r2, #10
   d4a5a:	d102      	bne.n	d4a62 <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d4a5c:	2900      	cmp	r1, #0
   d4a5e:	da01      	bge.n	d4a64 <_ZN5Print5printEli+0x24>
   d4a60:	e004      	b.n	d4a6c <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d4a62:	b2d2      	uxtb	r2, r2
  }
}
   d4a64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d4a68:	f7ff bfbb 	b.w	d49e2 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d4a6c:	212d      	movs	r1, #45	; 0x2d
   d4a6e:	f7ff ffb5 	bl	d49dc <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d4a72:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d4a74:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d4a76:	4271      	negs	r1, r6
   d4a78:	4638      	mov	r0, r7
   d4a7a:	f7ff ffb2 	bl	d49e2 <_ZN5Print11printNumberEmh>
   d4a7e:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d4a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4a84 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d4a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4a88:	ec57 6b10 	vmov	r6, r7, d0
   d4a8c:	4682      	mov	sl, r0
   d4a8e:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d4a90:	ee10 2a10 	vmov	r2, s0
   d4a94:	463b      	mov	r3, r7
   d4a96:	ee10 0a10 	vmov	r0, s0
   d4a9a:	4639      	mov	r1, r7
   d4a9c:	f001 fdca 	bl	d6634 <__aeabi_dcmpun>
   d4aa0:	b108      	cbz	r0, d4aa6 <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4aa2:	4948      	ldr	r1, [pc, #288]	; (d4bc4 <_ZN5Print10printFloatEdh+0x140>)
   d4aa4:	e012      	b.n	d4acc <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d4aa6:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d4aaa:	f04f 32ff 	mov.w	r2, #4294967295
   d4aae:	4b46      	ldr	r3, [pc, #280]	; (d4bc8 <_ZN5Print10printFloatEdh+0x144>)
   d4ab0:	4630      	mov	r0, r6
   d4ab2:	4649      	mov	r1, r9
   d4ab4:	f001 fdbe 	bl	d6634 <__aeabi_dcmpun>
   d4ab8:	b968      	cbnz	r0, d4ad6 <_ZN5Print10printFloatEdh+0x52>
   d4aba:	f04f 32ff 	mov.w	r2, #4294967295
   d4abe:	4b42      	ldr	r3, [pc, #264]	; (d4bc8 <_ZN5Print10printFloatEdh+0x144>)
   d4ac0:	4630      	mov	r0, r6
   d4ac2:	4649      	mov	r1, r9
   d4ac4:	f001 fd98 	bl	d65f8 <__aeabi_dcmple>
   d4ac8:	b928      	cbnz	r0, d4ad6 <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4aca:	4940      	ldr	r1, [pc, #256]	; (d4bcc <_ZN5Print10printFloatEdh+0x148>)
   d4acc:	4650      	mov	r0, sl
   d4ace:	f7ff ff71 	bl	d49b4 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d4ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d4ad6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d4ada:	4b3d      	ldr	r3, [pc, #244]	; (d4bd0 <_ZN5Print10printFloatEdh+0x14c>)
   d4adc:	4630      	mov	r0, r6
   d4ade:	4639      	mov	r1, r7
   d4ae0:	f001 fd9e 	bl	d6620 <__aeabi_dcmpgt>
   d4ae4:	b108      	cbz	r0, d4aea <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4ae6:	493b      	ldr	r1, [pc, #236]	; (d4bd4 <_ZN5Print10printFloatEdh+0x150>)
   d4ae8:	e7f0      	b.n	d4acc <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d4aea:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d4aee:	4b3a      	ldr	r3, [pc, #232]	; (d4bd8 <_ZN5Print10printFloatEdh+0x154>)
   d4af0:	4630      	mov	r0, r6
   d4af2:	4639      	mov	r1, r7
   d4af4:	f001 fd76 	bl	d65e4 <__aeabi_dcmplt>
   d4af8:	2800      	cmp	r0, #0
   d4afa:	d1f4      	bne.n	d4ae6 <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d4afc:	2200      	movs	r2, #0
   d4afe:	2300      	movs	r3, #0
   d4b00:	4630      	mov	r0, r6
   d4b02:	4639      	mov	r1, r7
   d4b04:	f001 fd6e 	bl	d65e4 <__aeabi_dcmplt>
   d4b08:	b140      	cbz	r0, d4b1c <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d4b0a:	212d      	movs	r1, #45	; 0x2d
   d4b0c:	4650      	mov	r0, sl
   d4b0e:	f7ff ff65 	bl	d49dc <_ZN5Print5printEc>
     number = -number;
   d4b12:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d4b16:	4604      	mov	r4, r0
     number = -number;
   d4b18:	461f      	mov	r7, r3
   d4b1a:	e000      	b.n	d4b1e <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d4b1c:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d4b1e:	492f      	ldr	r1, [pc, #188]	; (d4bdc <_ZN5Print10printFloatEdh+0x158>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d4b20:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d4b24:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d4b26:	fa5f f388 	uxtb.w	r3, r8
   d4b2a:	429d      	cmp	r5, r3
   d4b2c:	d906      	bls.n	d4b3c <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d4b2e:	2200      	movs	r2, #0
   d4b30:	4b2b      	ldr	r3, [pc, #172]	; (d4be0 <_ZN5Print10printFloatEdh+0x15c>)
   d4b32:	f001 fc0f 	bl	d6354 <__aeabi_ddiv>
   d4b36:	f108 0801 	add.w	r8, r8, #1
   d4b3a:	e7f4      	b.n	d4b26 <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d4b3c:	4632      	mov	r2, r6
   d4b3e:	463b      	mov	r3, r7
   d4b40:	f001 f92c 	bl	d5d9c <__adddf3>
   d4b44:	460f      	mov	r7, r1
   d4b46:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d4b48:	f001 fdb2 	bl	d66b0 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d4b4c:	220a      	movs	r2, #10
   d4b4e:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d4b50:	4680      	mov	r8, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d4b52:	4650      	mov	r0, sl
   d4b54:	f7ff ff45 	bl	d49e2 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d4b58:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d4b5a:	b37d      	cbz	r5, d4bbc <_ZN5Print10printFloatEdh+0x138>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d4b5c:	4640      	mov	r0, r8
   d4b5e:	f001 fa59 	bl	d6014 <__aeabi_ui2d>
   d4b62:	4602      	mov	r2, r0
   d4b64:	460b      	mov	r3, r1
   d4b66:	4630      	mov	r0, r6
   d4b68:	4639      	mov	r1, r7
   d4b6a:	f001 f915 	bl	d5d98 <__aeabi_dsub>
   d4b6e:	4606      	mov	r6, r0
   d4b70:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4b72:	4650      	mov	r0, sl
   d4b74:	491b      	ldr	r1, [pc, #108]	; (d4be4 <_ZN5Print10printFloatEdh+0x160>)
   d4b76:	f7ff ff1d 	bl	d49b4 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d4b7a:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d4b7c:	4b18      	ldr	r3, [pc, #96]	; (d4be0 <_ZN5Print10printFloatEdh+0x15c>)
   d4b7e:	2200      	movs	r2, #0
   d4b80:	4630      	mov	r0, r6
   d4b82:	4639      	mov	r1, r7
   d4b84:	f001 fabc 	bl	d6100 <__aeabi_dmul>
   d4b88:	460f      	mov	r7, r1
   d4b8a:	4606      	mov	r6, r0
    int toPrint = int(remainder);
   d4b8c:	f001 fd68 	bl	d6660 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d4b90:	220a      	movs	r2, #10
   d4b92:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
   d4b94:	4680      	mov	r8, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d4b96:	4650      	mov	r0, sl
   d4b98:	f7ff ff52 	bl	d4a40 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
   d4b9c:	4404      	add	r4, r0
    remainder -= toPrint;
   d4b9e:	4640      	mov	r0, r8
   d4ba0:	f001 fa48 	bl	d6034 <__aeabi_i2d>
   d4ba4:	4602      	mov	r2, r0
   d4ba6:	460b      	mov	r3, r1
   d4ba8:	4630      	mov	r0, r6
   d4baa:	4639      	mov	r1, r7
   d4bac:	f001 f8f4 	bl	d5d98 <__aeabi_dsub>
   d4bb0:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d4bb2:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d4bb6:	4606      	mov	r6, r0
   d4bb8:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d4bba:	d1df      	bne.n	d4b7c <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d4bbc:	4620      	mov	r0, r4
   d4bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4bc2:	bf00      	nop
   d4bc4:	000d68f8 	.word	0x000d68f8
   d4bc8:	7fefffff 	.word	0x7fefffff
   d4bcc:	000d6902 	.word	0x000d6902
   d4bd0:	41efffff 	.word	0x41efffff
   d4bd4:	000d68fc 	.word	0x000d68fc
   d4bd8:	c1efffff 	.word	0xc1efffff
   d4bdc:	3fe00000 	.word	0x3fe00000
   d4be0:	40240000 	.word	0x40240000
   d4be4:	000d6900 	.word	0x000d6900

000d4be8 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d4be8:	b2c9      	uxtb	r1, r1
   d4bea:	f7ff bf4b 	b.w	d4a84 <_ZN5Print10printFloatEdh>
	...

000d4bf0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4bf0:	4b01      	ldr	r3, [pc, #4]	; (d4bf8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4bf2:	4a02      	ldr	r2, [pc, #8]	; (d4bfc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4bf4:	601a      	str	r2, [r3, #0]
   d4bf6:	4770      	bx	lr
   d4bf8:	2003e3b4 	.word	0x2003e3b4
   d4bfc:	000d6979 	.word	0x000d6979

000d4c00 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4c00:	4b02      	ldr	r3, [pc, #8]	; (d4c0c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4c02:	681a      	ldr	r2, [r3, #0]
   d4c04:	4b02      	ldr	r3, [pc, #8]	; (d4c10 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4c06:	601a      	str	r2, [r3, #0]
   d4c08:	4770      	bx	lr
   d4c0a:	bf00      	nop
   d4c0c:	2003e314 	.word	0x2003e314
   d4c10:	2003e3b8 	.word	0x2003e3b8

000d4c14 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4c14:	2100      	movs	r1, #0
   d4c16:	f7ff bd0b 	b.w	d4630 <system_delay_ms>

000d4c1a <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4c1a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4c1c:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4c1e:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4c20:	b113      	cbz	r3, d4c28 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4c22:	2203      	movs	r2, #3
   d4c24:	4601      	mov	r1, r0
   d4c26:	4798      	blx	r3
    }
   d4c28:	4620      	mov	r0, r4
   d4c2a:	bd10      	pop	{r4, pc}

000d4c2c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4c2c:	b510      	push	{r4, lr}
   d4c2e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4c30:	f7ff fff3 	bl	d4c1a <_ZNSt14_Function_baseD1Ev>
   d4c34:	4620      	mov	r0, r4
   d4c36:	bd10      	pop	{r4, pc}

000d4c38 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d4c38:	b513      	push	{r0, r1, r4, lr}
   d4c3a:	460b      	mov	r3, r1
   d4c3c:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4c3e:	c803      	ldmia	r0, {r0, r1}
   d4c40:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4c44:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4c48:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4c4c:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d4c50:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4c54:	b002      	add	sp, #8
   d4c56:	bd10      	pop	{r4, pc}

000d4c58 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4c58:	4803      	ldr	r0, [pc, #12]	; (d4c68 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4c5a:	4a04      	ldr	r2, [pc, #16]	; (d4c6c <_GLOBAL__sub_I_RGB+0x14>)
   d4c5c:	4904      	ldr	r1, [pc, #16]	; (d4c70 <_GLOBAL__sub_I_RGB+0x18>)
   d4c5e:	2300      	movs	r3, #0
   d4c60:	6083      	str	r3, [r0, #8]
   d4c62:	f000 bf43 	b.w	d5aec <__aeabi_atexit>
   d4c66:	bf00      	nop
   d4c68:	2003e3bc 	.word	0x2003e3bc
   d4c6c:	2003e37c 	.word	0x2003e37c
   d4c70:	000d4c2d 	.word	0x000d4c2d

000d4c74 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d4c74:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4c76:	4b0c      	ldr	r3, [pc, #48]	; (d4ca8 <serialEventRun+0x34>)
   d4c78:	b133      	cbz	r3, d4c88 <serialEventRun+0x14>
   d4c7a:	f000 fbfd 	bl	d5478 <_Z16_fetch_usbserialv>
   d4c7e:	6803      	ldr	r3, [r0, #0]
   d4c80:	691b      	ldr	r3, [r3, #16]
   d4c82:	4798      	blx	r3
   d4c84:	2800      	cmp	r0, #0
   d4c86:	dc09      	bgt.n	d4c9c <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d4c88:	4b08      	ldr	r3, [pc, #32]	; (d4cac <serialEventRun+0x38>)
   d4c8a:	b163      	cbz	r3, d4ca6 <serialEventRun+0x32>
   d4c8c:	f000 fcc2 	bl	d5614 <_Z22__fetch_global_Serial1v>
   d4c90:	6803      	ldr	r3, [r0, #0]
   d4c92:	691b      	ldr	r3, [r3, #16]
   d4c94:	4798      	blx	r3
   d4c96:	2800      	cmp	r0, #0
   d4c98:	dc03      	bgt.n	d4ca2 <serialEventRun+0x2e>
   d4c9a:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d4c9c:	f3af 8000 	nop.w
   d4ca0:	e7f2      	b.n	d4c88 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d4ca2:	f3af 8000 	nop.w
   d4ca6:	bd08      	pop	{r3, pc}
	...

000d4cb0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d4cb0:	b508      	push	{r3, lr}
	serialEventRun();
   d4cb2:	f7ff ffdf 	bl	d4c74 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4cb6:	f7ff fbab 	bl	d4410 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4cba:	4b01      	ldr	r3, [pc, #4]	; (d4cc0 <_post_loop+0x10>)
   d4cbc:	6018      	str	r0, [r3, #0]
   d4cbe:	bd08      	pop	{r3, pc}
   d4cc0:	2003e734 	.word	0x2003e734

000d4cc4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4cc4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4cc6:	2300      	movs	r3, #0
   d4cc8:	9300      	str	r3, [sp, #0]
   d4cca:	461a      	mov	r2, r3
   d4ccc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4cd0:	f7ff fcd0 	bl	d4674 <system_ctrl_set_result>
}
   d4cd4:	b003      	add	sp, #12
   d4cd6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4cdc <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d4cdc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4cde:	8843      	ldrh	r3, [r0, #2]
   d4ce0:	2b0a      	cmp	r3, #10
   d4ce2:	d008      	beq.n	d4cf6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4ce4:	2b50      	cmp	r3, #80	; 0x50
   d4ce6:	d109      	bne.n	d4cfc <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d4ce8:	4b09      	ldr	r3, [pc, #36]	; (d4d10 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4cea:	681b      	ldr	r3, [r3, #0]
   d4cec:	b13b      	cbz	r3, d4cfe <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d4cee:	b003      	add	sp, #12
   d4cf0:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d4cf4:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d4cf6:	f7ff ffe5 	bl	d4cc4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d4cfa:	e006      	b.n	d4d0a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4cfc:	2300      	movs	r3, #0
   d4cfe:	9300      	str	r3, [sp, #0]
   d4d00:	461a      	mov	r2, r3
   d4d02:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4d06:	f7ff fcb5 	bl	d4674 <system_ctrl_set_result>
        break;
    }
}
   d4d0a:	b003      	add	sp, #12
   d4d0c:	f85d fb04 	ldr.w	pc, [sp], #4
   d4d10:	2003e3cc 	.word	0x2003e3cc

000d4d14 <module_user_init_hook>:

void module_user_init_hook()
{
   d4d14:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4d16:	f7ff fb73 	bl	d4400 <HAL_RNG_GetRandomNumber>
   d4d1a:	4604      	mov	r4, r0
    srand(seed);
   d4d1c:	f001 fd5a 	bl	d67d4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4d20:	4b07      	ldr	r3, [pc, #28]	; (d4d40 <module_user_init_hook+0x2c>)
   d4d22:	b113      	cbz	r3, d4d2a <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d4d24:	4620      	mov	r0, r4
   d4d26:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4d2a:	2100      	movs	r1, #0
   d4d2c:	4804      	ldr	r0, [pc, #16]	; (d4d40 <module_user_init_hook+0x2c>)
   d4d2e:	f7ff fd0b 	bl	d4748 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4d32:	2100      	movs	r1, #0
   d4d34:	4803      	ldr	r0, [pc, #12]	; (d4d44 <module_user_init_hook+0x30>)
}
   d4d36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4d3a:	f7ff bc91 	b.w	d4660 <system_ctrl_set_app_request_handler>
   d4d3e:	bf00      	nop
   d4d40:	00000000 	.word	0x00000000
   d4d44:	000d4cdd 	.word	0x000d4cdd

000d4d48 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4d48:	4770      	bx	lr

000d4d4a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d4d4a:	2000      	movs	r0, #0
   d4d4c:	4770      	bx	lr

000d4d4e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4d4e:	b510      	push	{r4, lr}
   d4d50:	2110      	movs	r1, #16
   d4d52:	4604      	mov	r4, r0
   d4d54:	f000 fecf 	bl	d5af6 <_ZdlPvj>
   d4d58:	4620      	mov	r0, r4
   d4d5a:	bd10      	pop	{r4, pc}

000d4d5c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d4d5c:	b508      	push	{r3, lr}
      { delete this; }
   d4d5e:	b108      	cbz	r0, d4d64 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d4d60:	f7ff fff5 	bl	d4d4e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4d64:	bd08      	pop	{r3, pc}

000d4d66 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4d66:	2200      	movs	r2, #0
   d4d68:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d4d6a:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4d6c:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d4d70:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4d72:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d4d76:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d4d78:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4d7a:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4d7c:	680c      	ldr	r4, [r1, #0]
   d4d7e:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d4d80:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d4d82:	bd10      	pop	{r4, pc}

000d4d84 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d4d84:	b510      	push	{r4, lr}
   d4d86:	4604      	mov	r4, r0
    free((void*)msg_);
   d4d88:	6800      	ldr	r0, [r0, #0]
   d4d8a:	f7ff fced 	bl	d4768 <free>
}
   d4d8e:	4620      	mov	r0, r4
   d4d90:	bd10      	pop	{r4, pc}

000d4d92 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d4d92:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4d94:	68c4      	ldr	r4, [r0, #12]
   d4d96:	b1f4      	cbz	r4, d4dd6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d4d98:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4d9a:	2b02      	cmp	r3, #2
   d4d9c:	d103      	bne.n	d4da6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d4d9e:	f104 000c 	add.w	r0, r4, #12
   d4da2:	f7ff ffef 	bl	d4d84 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d4da6:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d4da8:	b135      	cbz	r5, d4db8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4daa:	4628      	mov	r0, r5
   d4dac:	f7ff ff35 	bl	d4c1a <_ZNSt14_Function_baseD1Ev>
   d4db0:	2110      	movs	r1, #16
   d4db2:	4628      	mov	r0, r5
   d4db4:	f000 fe9f 	bl	d5af6 <_ZdlPvj>
   d4db8:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d4dba:	b135      	cbz	r5, d4dca <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d4dbc:	4628      	mov	r0, r5
   d4dbe:	f7ff ff2c 	bl	d4c1a <_ZNSt14_Function_baseD1Ev>
   d4dc2:	2110      	movs	r1, #16
   d4dc4:	4628      	mov	r0, r5
   d4dc6:	f000 fe96 	bl	d5af6 <_ZdlPvj>
   d4dca:	4620      	mov	r0, r4
   d4dcc:	2114      	movs	r1, #20
   d4dce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4dd2:	f000 be90 	b.w	d5af6 <_ZdlPvj>
   d4dd6:	bd38      	pop	{r3, r4, r5, pc}

000d4dd8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d4dd8:	b513      	push	{r0, r1, r4, lr}
   d4dda:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4ddc:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d4de0:	2300      	movs	r3, #0
   d4de2:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4de4:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4de6:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d4de8:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4dea:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d4dec:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4dee:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4df0:	f7ff fdb5 	bl	d495e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4df4:	4620      	mov	r0, r4
   d4df6:	b002      	add	sp, #8
   d4df8:	bd10      	pop	{r4, pc}

000d4dfa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d4dfa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4dfc:	460c      	mov	r4, r1
   d4dfe:	ad02      	add	r5, sp, #8
   d4e00:	f854 3b04 	ldr.w	r3, [r4], #4
   d4e04:	f845 3d08 	str.w	r3, [r5, #-8]!
   d4e08:	4606      	mov	r6, r0
   d4e0a:	460f      	mov	r7, r1
   d4e0c:	a801      	add	r0, sp, #4
   d4e0e:	4621      	mov	r1, r4
   d4e10:	f7ff fd9e 	bl	d4950 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d4e14:	4629      	mov	r1, r5
   d4e16:	4630      	mov	r0, r6
   d4e18:	f7ff ffde 	bl	d4dd8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4e1c:	a801      	add	r0, sp, #4
   d4e1e:	f7ff fd9e 	bl	d495e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4e22:	4620      	mov	r0, r4
   d4e24:	f7ff fd9b 	bl	d495e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d4e28:	4638      	mov	r0, r7
   d4e2a:	2108      	movs	r1, #8
   d4e2c:	f000 fe63 	bl	d5af6 <_ZdlPvj>
        return p;
    }
   d4e30:	4630      	mov	r0, r6
   d4e32:	b003      	add	sp, #12
   d4e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d4e38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4e38:	b538      	push	{r3, r4, r5, lr}
   d4e3a:	2300      	movs	r3, #0
   d4e3c:	4604      	mov	r4, r0
   d4e3e:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4e40:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4e42:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4e44:	f7ff f929 	bl	d409a <_Znwj>
   d4e48:	b128      	cbz	r0, d4e56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d4e4a:	2301      	movs	r3, #1
   d4e4c:	6043      	str	r3, [r0, #4]
   d4e4e:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d4e50:	4b02      	ldr	r3, [pc, #8]	; (d4e5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d4e52:	6003      	str	r3, [r0, #0]
   d4e54:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4e56:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d4e58:	4620      	mov	r0, r4
   d4e5a:	bd38      	pop	{r3, r4, r5, pc}
   d4e5c:	000d6a18 	.word	0x000d6a18

000d4e60 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4e60:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4e62:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4e64:	b90a      	cbnz	r2, d4e6a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d4e66:	f000 fe48 	bl	d5afa <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4e6a:	68c3      	ldr	r3, [r0, #12]
    }
   d4e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4e70:	4718      	bx	r3

000d4e72 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4e72:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4e74:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4e76:	f100 0110 	add.w	r1, r0, #16
   d4e7a:	f7ff fff1 	bl	d4e60 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4e7e:	bd08      	pop	{r3, pc}

000d4e80 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4e80:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4e82:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4e84:	b90a      	cbnz	r2, d4e8a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d4e86:	f000 fe38 	bl	d5afa <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4e8a:	68c3      	ldr	r3, [r0, #12]
    }
   d4e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4e90:	4718      	bx	r3

000d4e92 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4e92:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4e94:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4e96:	f100 0110 	add.w	r1, r0, #16
   d4e9a:	f7ff fff1 	bl	d4e80 <_ZNKSt8functionIFvRKbEEclES1_>
   d4e9e:	bd08      	pop	{r3, pc}

000d4ea0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4ea0:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4ea2:	2300      	movs	r3, #0
   d4ea4:	6083      	str	r3, [r0, #8]
   d4ea6:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4ea8:	4604      	mov	r4, r0
   d4eaa:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4eac:	b12b      	cbz	r3, d4eba <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4eae:	2202      	movs	r2, #2
   d4eb0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4eb2:	68eb      	ldr	r3, [r5, #12]
   d4eb4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4eb6:	68ab      	ldr	r3, [r5, #8]
   d4eb8:	60a3      	str	r3, [r4, #8]
	}
    }
   d4eba:	4620      	mov	r0, r4
   d4ebc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4ec0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d4ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4ec2:	b089      	sub	sp, #36	; 0x24
   d4ec4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d4ec6:	4668      	mov	r0, sp
   d4ec8:	f7ff ff4d 	bl	d4d66 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d4ecc:	2300      	movs	r3, #0
   d4ece:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d4ed2:	f04f 0202 	mov.w	r2, #2
   d4ed6:	e8d4 3f4f 	ldrexb	r3, [r4]
   d4eda:	2b00      	cmp	r3, #0
   d4edc:	d103      	bne.n	d4ee6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d4ede:	e8c4 2f41 	strexb	r1, r2, [r4]
   d4ee2:	2900      	cmp	r1, #0
   d4ee4:	d1f7      	bne.n	d4ed6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d4ee6:	d002      	beq.n	d4eee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d4ee8:	f88d 3008 	strb.w	r3, [sp, #8]
   d4eec:	e063      	b.n	d4fb6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d4eee:	f114 050c 	adds.w	r5, r4, #12
   d4ef2:	d003      	beq.n	d4efc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d4ef4:	4669      	mov	r1, sp
   d4ef6:	4628      	mov	r0, r5
   d4ef8:	f7ff ff35 	bl	d4d66 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4efc:	f3bf 8f5f 	dmb	sy
   d4f00:	2301      	movs	r3, #1
   d4f02:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4f04:	2000      	movs	r0, #0
   d4f06:	f104 0308 	add.w	r3, r4, #8
   d4f0a:	f3bf 8f5f 	dmb	sy
   d4f0e:	e853 6f00 	ldrex	r6, [r3]
   d4f12:	e843 0200 	strex	r2, r0, [r3]
   d4f16:	2a00      	cmp	r2, #0
   d4f18:	d1f9      	bne.n	d4f0e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d4f1a:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d4f1e:	2e00      	cmp	r6, #0
   d4f20:	d049      	beq.n	d4fb6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4f22:	f7ff fb8d 	bl	d4640 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d4f26:	b120      	cbz	r0, d4f32 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4f28:	4629      	mov	r1, r5
   d4f2a:	4630      	mov	r0, r6
   d4f2c:	f7ff ff98 	bl	d4e60 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4f30:	e03a      	b.n	d4fa8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4f32:	4631      	mov	r1, r6
   d4f34:	a802      	add	r0, sp, #8
   d4f36:	f7ff ffb3 	bl	d4ea0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4f3a:	68e0      	ldr	r0, [r4, #12]
   d4f3c:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4f40:	b108      	cbz	r0, d4f46 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d4f42:	f001 fc6f 	bl	d6824 <strdup>
   d4f46:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4f48:	2010      	movs	r0, #16
   d4f4a:	f8ad 501c 	strh.w	r5, [sp, #28]
   d4f4e:	f7ff f8a4 	bl	d409a <_Znwj>
   d4f52:	4605      	mov	r5, r0
   d4f54:	b1e8      	cbz	r0, d4f92 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4f56:	2700      	movs	r7, #0
   d4f58:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4f5a:	2018      	movs	r0, #24
   d4f5c:	f7ff f89d 	bl	d409a <_Znwj>
   d4f60:	4604      	mov	r4, r0
   d4f62:	b188      	cbz	r0, d4f88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4f64:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4f66:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4f68:	a802      	add	r0, sp, #8
   d4f6a:	f7ff fe65 	bl	d4c38 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4f6e:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d4f70:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4f72:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4f74:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d4f76:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4f78:	a906      	add	r1, sp, #24
   d4f7a:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4f7c:	60e3      	str	r3, [r4, #12]
   d4f7e:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4f82:	9205      	str	r2, [sp, #20]
   d4f84:	f7ff feef 	bl	d4d66 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4f88:	4b0d      	ldr	r3, [pc, #52]	; (d4fc0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d4f8a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4f8c:	4b0d      	ldr	r3, [pc, #52]	; (d4fc4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4f8e:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4f90:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d4f92:	a806      	add	r0, sp, #24
   d4f94:	f7ff fef6 	bl	d4d84 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4f98:	a802      	add	r0, sp, #8
   d4f9a:	f7ff fe3e 	bl	d4c1a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4f9e:	2200      	movs	r2, #0
   d4fa0:	4629      	mov	r1, r5
   d4fa2:	4809      	ldr	r0, [pc, #36]	; (d4fc8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d4fa4:	f7ff fb54 	bl	d4650 <application_thread_invoke>
   d4fa8:	4630      	mov	r0, r6
   d4faa:	f7ff fe36 	bl	d4c1a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d4fae:	2110      	movs	r1, #16
   d4fb0:	4630      	mov	r0, r6
   d4fb2:	f000 fda0 	bl	d5af6 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d4fb6:	4668      	mov	r0, sp
   d4fb8:	f7ff fee4 	bl	d4d84 <_ZN8particle5ErrorD1Ev>
    }
   d4fbc:	b009      	add	sp, #36	; 0x24
   d4fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4fc0:	000d4e73 	.word	0x000d4e73
   d4fc4:	000d50e9 	.word	0x000d50e9
   d4fc8:	000d5661 	.word	0x000d5661

000d4fcc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4fd0:	b08b      	sub	sp, #44	; 0x2c
   d4fd2:	4606      	mov	r6, r0
   d4fd4:	460f      	mov	r7, r1
   d4fd6:	4690      	mov	r8, r2
   d4fd8:	4699      	mov	r9, r3
   d4fda:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4fde:	f7ff fba3 	bl	d4728 <spark_cloud_flag_connected>
   d4fe2:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
   d4fe4:	4683      	mov	fp, r0
   d4fe6:	bb30      	cbnz	r0, d5036 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4fe8:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d4fec:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4fee:	a905      	add	r1, sp, #20
   d4ff0:	4628      	mov	r0, r5
   d4ff2:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4ff6:	f7ff feb6 	bl	d4d66 <_ZN8particle5ErrorC1EOS0_>
   d4ffa:	2014      	movs	r0, #20
   d4ffc:	f7ff f84d 	bl	d409a <_Znwj>
   d5000:	4604      	mov	r4, r0
   d5002:	b158      	cbz	r0, d501c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d5004:	2302      	movs	r3, #2
   d5006:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5008:	2301      	movs	r3, #1
   d500a:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d500c:	f8c0 b004 	str.w	fp, [r0, #4]
   d5010:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d5014:	4629      	mov	r1, r5
   d5016:	300c      	adds	r0, #12
   d5018:	f7ff fea5 	bl	d4d66 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d501c:	4630      	mov	r0, r6
   d501e:	4621      	mov	r1, r4
   d5020:	f840 4b04 	str.w	r4, [r0], #4
   d5024:	f7ff ff08 	bl	d4e38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5028:	4628      	mov	r0, r5
   d502a:	f7ff feab 	bl	d4d84 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d502e:	a805      	add	r0, sp, #20
   d5030:	f7ff fea8 	bl	d4d84 <_ZN8particle5ErrorD1Ev>
   d5034:	e052      	b.n	d50dc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5036:	2400      	movs	r4, #0
   d5038:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d503a:	2014      	movs	r0, #20
   d503c:	606c      	str	r4, [r5, #4]
   d503e:	60ac      	str	r4, [r5, #8]
   d5040:	9307      	str	r3, [sp, #28]
   d5042:	f7ff f82a 	bl	d409a <_Znwj>
   d5046:	4601      	mov	r1, r0
   d5048:	b118      	cbz	r0, d5052 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d504a:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d504c:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d504e:	6044      	str	r4, [r0, #4]
   d5050:	6084      	str	r4, [r0, #8]
   d5052:	a804      	add	r0, sp, #16
   d5054:	9103      	str	r1, [sp, #12]
   d5056:	f7ff feef 	bl	d4e38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d505a:	4b22      	ldr	r3, [pc, #136]	; (d50e4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d505c:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d505e:	2008      	movs	r0, #8
   d5060:	f7ff f81b 	bl	d409a <_Znwj>
   d5064:	4604      	mov	r4, r0
   d5066:	b128      	cbz	r0, d5074 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5068:	9b03      	ldr	r3, [sp, #12]
   d506a:	f840 3b04 	str.w	r3, [r0], #4
   d506e:	a904      	add	r1, sp, #16
   d5070:	f7ff fc6e 	bl	d4950 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5074:	9500      	str	r5, [sp, #0]
   d5076:	fa5f f38a 	uxtb.w	r3, sl
   d507a:	464a      	mov	r2, r9
   d507c:	4641      	mov	r1, r8
   d507e:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d5080:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5082:	f7ff fb59 	bl	d4738 <spark_send_event>
   d5086:	b920      	cbnz	r0, d5092 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d5088:	9b03      	ldr	r3, [sp, #12]
   d508a:	785b      	ldrb	r3, [r3, #1]
   d508c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5090:	b183      	cbz	r3, d50b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d5092:	9b03      	ldr	r3, [sp, #12]
   d5094:	9305      	str	r3, [sp, #20]
   d5096:	a904      	add	r1, sp, #16
   d5098:	a806      	add	r0, sp, #24
   d509a:	f7ff fc59 	bl	d4950 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d509e:	a905      	add	r1, sp, #20
   d50a0:	4630      	mov	r0, r6
   d50a2:	f7ff fe99 	bl	d4dd8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d50a6:	a806      	add	r0, sp, #24
   d50a8:	f7ff fc59 	bl	d495e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d50ac:	a804      	add	r0, sp, #16
   d50ae:	f7ff fc56 	bl	d495e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d50b2:	e013      	b.n	d50dc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d50b4:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d50b8:	a905      	add	r1, sp, #20
   d50ba:	a803      	add	r0, sp, #12
   d50bc:	9205      	str	r2, [sp, #20]
   d50be:	f8ad 3018 	strh.w	r3, [sp, #24]
   d50c2:	f7ff fefd 	bl	d4ec0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d50c6:	a805      	add	r0, sp, #20
   d50c8:	f7ff fe5c 	bl	d4d84 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d50cc:	a805      	add	r0, sp, #20
   d50ce:	9909      	ldr	r1, [sp, #36]	; 0x24
   d50d0:	f7ff fe93 	bl	d4dfa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d50d4:	a806      	add	r0, sp, #24
   d50d6:	f7ff fc42 	bl	d495e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d50da:	e7da      	b.n	d5092 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d50dc:	4630      	mov	r0, r6
   d50de:	b00b      	add	sp, #44	; 0x2c
   d50e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d50e4:	000d5259 	.word	0x000d5259

000d50e8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d50e8:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d50ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d50ec:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d50ee:	d006      	beq.n	d50fe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d50f0:	2a03      	cmp	r2, #3
   d50f2:	d017      	beq.n	d5124 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d50f4:	2a01      	cmp	r2, #1
   d50f6:	d122      	bne.n	d513e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d50f8:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d50fa:	6003      	str	r3, [r0, #0]
	      break;
   d50fc:	e01f      	b.n	d513e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d50fe:	2018      	movs	r0, #24
   d5100:	680e      	ldr	r6, [r1, #0]
   d5102:	f7fe ffca 	bl	d409a <_Znwj>
   d5106:	4605      	mov	r5, r0
   d5108:	b150      	cbz	r0, d5120 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d510a:	4631      	mov	r1, r6
   d510c:	f7ff fec8 	bl	d4ea0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5110:	6930      	ldr	r0, [r6, #16]
   d5112:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5116:	b108      	cbz	r0, d511c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d5118:	f001 fb84 	bl	d6824 <strdup>
   d511c:	6128      	str	r0, [r5, #16]
   d511e:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5120:	6025      	str	r5, [r4, #0]
   d5122:	e00c      	b.n	d513e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5124:	6804      	ldr	r4, [r0, #0]
   d5126:	b154      	cbz	r4, d513e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d5128:	f104 0010 	add.w	r0, r4, #16
   d512c:	f7ff fe2a 	bl	d4d84 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5130:	4620      	mov	r0, r4
   d5132:	f7ff fd72 	bl	d4c1a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5136:	2118      	movs	r1, #24
   d5138:	4620      	mov	r0, r4
   d513a:	f000 fcdc 	bl	d5af6 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d513e:	2000      	movs	r0, #0
   d5140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5142 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5142:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5144:	2300      	movs	r3, #0
   d5146:	6083      	str	r3, [r0, #8]
   d5148:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d514a:	4604      	mov	r4, r0
   d514c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d514e:	b12b      	cbz	r3, d515c <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5150:	2202      	movs	r2, #2
   d5152:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5154:	68eb      	ldr	r3, [r5, #12]
   d5156:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5158:	68ab      	ldr	r3, [r5, #8]
   d515a:	60a3      	str	r3, [r4, #8]
	}
    }
   d515c:	4620      	mov	r0, r4
   d515e:	bd38      	pop	{r3, r4, r5, pc}

000d5160 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5160:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5162:	b570      	push	{r4, r5, r6, lr}
   d5164:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5166:	d006      	beq.n	d5176 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d5168:	2a03      	cmp	r2, #3
   d516a:	d011      	beq.n	d5190 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d516c:	2a01      	cmp	r2, #1
   d516e:	d118      	bne.n	d51a2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5170:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5172:	6003      	str	r3, [r0, #0]
	      break;
   d5174:	e015      	b.n	d51a2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5176:	2014      	movs	r0, #20
   d5178:	680e      	ldr	r6, [r1, #0]
   d517a:	f7fe ff8e 	bl	d409a <_Znwj>
   d517e:	4605      	mov	r5, r0
   d5180:	b120      	cbz	r0, d518c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5182:	4631      	mov	r1, r6
   d5184:	f7ff ffdd 	bl	d5142 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d5188:	7c33      	ldrb	r3, [r6, #16]
   d518a:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d518c:	6025      	str	r5, [r4, #0]
   d518e:	e008      	b.n	d51a2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5190:	6804      	ldr	r4, [r0, #0]
   d5192:	b134      	cbz	r4, d51a2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5194:	4620      	mov	r0, r4
   d5196:	f7ff fd40 	bl	d4c1a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d519a:	2114      	movs	r1, #20
   d519c:	4620      	mov	r0, r4
   d519e:	f000 fcaa 	bl	d5af6 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d51a2:	2000      	movs	r0, #0
   d51a4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d51a8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d51a8:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d51aa:	2300      	movs	r3, #0
   d51ac:	b087      	sub	sp, #28
   d51ae:	460c      	mov	r4, r1
   d51b0:	f3bf 8f5f 	dmb	sy
   d51b4:	e850 6f00 	ldrex	r6, [r0]
   d51b8:	e840 3200 	strex	r2, r3, [r0]
   d51bc:	2a00      	cmp	r2, #0
   d51be:	d1f9      	bne.n	d51b4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d51c0:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d51c4:	2e00      	cmp	r6, #0
   d51c6:	d03f      	beq.n	d5248 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d51c8:	4618      	mov	r0, r3
   d51ca:	f7ff fa39 	bl	d4640 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d51ce:	4607      	mov	r7, r0
   d51d0:	b120      	cbz	r0, d51dc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d51d2:	4621      	mov	r1, r4
   d51d4:	4630      	mov	r0, r6
   d51d6:	f7ff fe53 	bl	d4e80 <_ZNKSt8functionIFvRKbEEclES1_>
   d51da:	e02e      	b.n	d523a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d51dc:	4631      	mov	r1, r6
   d51de:	a801      	add	r0, sp, #4
   d51e0:	f7ff ffaf 	bl	d5142 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d51e4:	7823      	ldrb	r3, [r4, #0]
   d51e6:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d51ea:	2010      	movs	r0, #16
   d51ec:	f7fe ff55 	bl	d409a <_Znwj>
   d51f0:	4605      	mov	r5, r0
   d51f2:	b1d0      	cbz	r0, d522a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d51f4:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d51f6:	2014      	movs	r0, #20
   d51f8:	f7fe ff4f 	bl	d409a <_Znwj>
   d51fc:	4604      	mov	r4, r0
   d51fe:	b178      	cbz	r0, d5220 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5200:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5202:	4601      	mov	r1, r0
   d5204:	a801      	add	r0, sp, #4
   d5206:	f7ff fd17 	bl	d4c38 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d520a:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d520c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d520e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5210:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5212:	9203      	str	r2, [sp, #12]
   d5214:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5216:	60e3      	str	r3, [r4, #12]
   d5218:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d521c:	9204      	str	r2, [sp, #16]
   d521e:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5220:	4b0a      	ldr	r3, [pc, #40]	; (d524c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d5222:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5224:	4b0a      	ldr	r3, [pc, #40]	; (d5250 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5226:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5228:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d522a:	a801      	add	r0, sp, #4
   d522c:	f7ff fcf5 	bl	d4c1a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5230:	2200      	movs	r2, #0
   d5232:	4629      	mov	r1, r5
   d5234:	4807      	ldr	r0, [pc, #28]	; (d5254 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d5236:	f7ff fa0b 	bl	d4650 <application_thread_invoke>
   d523a:	4630      	mov	r0, r6
   d523c:	f7ff fced 	bl	d4c1a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5240:	2110      	movs	r1, #16
   d5242:	4630      	mov	r0, r6
   d5244:	f000 fc57 	bl	d5af6 <_ZdlPvj>
        }
    }
   d5248:	b007      	add	sp, #28
   d524a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d524c:	000d4e93 	.word	0x000d4e93
   d5250:	000d5161 	.word	0x000d5161
   d5254:	000d5661 	.word	0x000d5661

000d5258 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5258:	b530      	push	{r4, r5, lr}
   d525a:	b085      	sub	sp, #20
   d525c:	4604      	mov	r4, r0
   d525e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5260:	4668      	mov	r0, sp
   d5262:	4611      	mov	r1, r2
   d5264:	f7ff fdc9 	bl	d4dfa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5268:	b17c      	cbz	r4, d528a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d526a:	b224      	sxth	r4, r4
   d526c:	4628      	mov	r0, r5
   d526e:	b10d      	cbz	r5, d5274 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d5270:	f001 fad8 	bl	d6824 <strdup>
   d5274:	9002      	str	r0, [sp, #8]
   d5276:	a902      	add	r1, sp, #8
   d5278:	4668      	mov	r0, sp
   d527a:	f8ad 400c 	strh.w	r4, [sp, #12]
   d527e:	f7ff fe1f 	bl	d4ec0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5282:	a802      	add	r0, sp, #8
   d5284:	f7ff fd7e 	bl	d4d84 <_ZN8particle5ErrorD1Ev>
   d5288:	e01d      	b.n	d52c6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d528a:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d528c:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5290:	f04f 0201 	mov.w	r2, #1
   d5294:	e8d0 3f4f 	ldrexb	r3, [r0]
   d5298:	42a3      	cmp	r3, r4
   d529a:	d103      	bne.n	d52a4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d529c:	e8c0 2f41 	strexb	r1, r2, [r0]
   d52a0:	2900      	cmp	r1, #0
   d52a2:	d1f7      	bne.n	d5294 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d52a4:	d002      	beq.n	d52ac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d52a6:	f88d 3008 	strb.w	r3, [sp, #8]
   d52aa:	e00c      	b.n	d52c6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d52ac:	f110 010c 	adds.w	r1, r0, #12
   d52b0:	f04f 0301 	mov.w	r3, #1
   d52b4:	bf18      	it	ne
   d52b6:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d52b8:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d52bc:	3004      	adds	r0, #4
   d52be:	f800 3c03 	strb.w	r3, [r0, #-3]
   d52c2:	f7ff ff71 	bl	d51a8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d52c6:	a801      	add	r0, sp, #4
   d52c8:	f7ff fb49 	bl	d495e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d52cc:	b005      	add	sp, #20
   d52ce:	bd30      	pop	{r4, r5, pc}

000d52d0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d52d0:	4770      	bx	lr

000d52d2 <_ZN9IPAddressD0Ev>:
   d52d2:	b510      	push	{r4, lr}
   d52d4:	2118      	movs	r1, #24
   d52d6:	4604      	mov	r4, r0
   d52d8:	f000 fc0d 	bl	d5af6 <_ZdlPvj>
   d52dc:	4620      	mov	r0, r4
   d52de:	bd10      	pop	{r4, pc}

000d52e0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d52e0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d52e2:	7d03      	ldrb	r3, [r0, #20]
   d52e4:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d52e6:	b08d      	sub	sp, #52	; 0x34
   d52e8:	460e      	mov	r6, r1
   d52ea:	f100 0704 	add.w	r7, r0, #4
   d52ee:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d52f2:	d002      	beq.n	d52fa <_ZNK9IPAddress7printToER5Print+0x1a>
   d52f4:	f100 0508 	add.w	r5, r0, #8
   d52f8:	e018      	b.n	d532c <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d52fa:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d52fc:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d52fe:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5302:	232f      	movs	r3, #47	; 0x2f
   d5304:	462a      	mov	r2, r5
   d5306:	200a      	movs	r0, #10
   d5308:	f7ff f8b2 	bl	d4470 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d530c:	4628      	mov	r0, r5
   d530e:	f001 faa4 	bl	d685a <strlen>
   d5312:	6833      	ldr	r3, [r6, #0]
   d5314:	4602      	mov	r2, r0
   d5316:	68db      	ldr	r3, [r3, #12]
   d5318:	4629      	mov	r1, r5
   d531a:	4630      	mov	r0, r6
   d531c:	4798      	blx	r3
   d531e:	e00f      	b.n	d5340 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5320:	b124      	cbz	r4, d532c <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5322:	212e      	movs	r1, #46	; 0x2e
   d5324:	4630      	mov	r0, r6
   d5326:	f7ff fb59 	bl	d49dc <_ZN5Print5printEc>
   d532a:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d532c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5330:	220a      	movs	r2, #10
   d5332:	4630      	mov	r0, r6
   d5334:	f7ff fb82 	bl	d4a3c <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5338:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d533a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d533c:	d1f0      	bne.n	d5320 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d533e:	4620      	mov	r0, r4
    }
    return n;
}
   d5340:	b00d      	add	sp, #52	; 0x34
   d5342:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5344 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5344:	b510      	push	{r4, lr}
   d5346:	4b05      	ldr	r3, [pc, #20]	; (d535c <_ZN9IPAddressC1Ev+0x18>)
   d5348:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d534a:	2211      	movs	r2, #17
   d534c:	f840 3b04 	str.w	r3, [r0], #4
   d5350:	2100      	movs	r1, #0
   d5352:	f001 fa36 	bl	d67c2 <memset>
{
    clear();
}
   d5356:	4620      	mov	r0, r4
   d5358:	bd10      	pop	{r4, pc}
   d535a:	bf00      	nop
   d535c:	000d6a34 	.word	0x000d6a34

000d5360 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5360:	4603      	mov	r3, r0
   d5362:	4a07      	ldr	r2, [pc, #28]	; (d5380 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5364:	b510      	push	{r4, lr}
   d5366:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d536a:	f101 0210 	add.w	r2, r1, #16
   d536e:	f851 4b04 	ldr.w	r4, [r1], #4
   d5372:	f843 4b04 	str.w	r4, [r3], #4
   d5376:	4291      	cmp	r1, r2
   d5378:	d1f9      	bne.n	d536e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d537a:	780a      	ldrb	r2, [r1, #0]
   d537c:	701a      	strb	r2, [r3, #0]
}
   d537e:	bd10      	pop	{r4, pc}
   d5380:	000d6a34 	.word	0x000d6a34

000d5384 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5384:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5386:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d538a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d538e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5392:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5396:	2304      	movs	r3, #4
   d5398:	6041      	str	r1, [r0, #4]
   d539a:	7503      	strb	r3, [r0, #20]
   d539c:	bd10      	pop	{r4, pc}

000d539e <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d539e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d53a0:	780d      	ldrb	r5, [r1, #0]
   d53a2:	788b      	ldrb	r3, [r1, #2]
   d53a4:	784a      	ldrb	r2, [r1, #1]
   d53a6:	78c9      	ldrb	r1, [r1, #3]
   d53a8:	9100      	str	r1, [sp, #0]
   d53aa:	4629      	mov	r1, r5
   d53ac:	f7ff ffea 	bl	d5384 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d53b0:	b003      	add	sp, #12
   d53b2:	bd30      	pop	{r4, r5, pc}

000d53b4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d53b4:	7441      	strb	r1, [r0, #17]
   d53b6:	4770      	bx	lr

000d53b8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d53b8:	4770      	bx	lr

000d53ba <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d53ba:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d53bc:	2100      	movs	r1, #0
   d53be:	7c00      	ldrb	r0, [r0, #16]
   d53c0:	f7ff f916 	bl	d45f0 <HAL_USB_USART_Receive_Data>
}
   d53c4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d53c8:	bf28      	it	cs
   d53ca:	f04f 30ff 	movcs.w	r0, #4294967295
   d53ce:	bd08      	pop	{r3, pc}

000d53d0 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d53d0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d53d2:	2101      	movs	r1, #1
   d53d4:	7c00      	ldrb	r0, [r0, #16]
   d53d6:	f7ff f90b 	bl	d45f0 <HAL_USB_USART_Receive_Data>
}
   d53da:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d53de:	bf28      	it	cs
   d53e0:	f04f 30ff 	movcs.w	r0, #4294967295
   d53e4:	bd08      	pop	{r3, pc}

000d53e6 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d53e6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d53e8:	7c00      	ldrb	r0, [r0, #16]
   d53ea:	f7ff f8f9 	bl	d45e0 <HAL_USB_USART_Available_Data_For_Write>
}
   d53ee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d53f2:	bd08      	pop	{r3, pc}

000d53f4 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d53f4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d53f6:	7c00      	ldrb	r0, [r0, #16]
   d53f8:	f7ff f8ea 	bl	d45d0 <HAL_USB_USART_Available_Data>
}
   d53fc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5400:	bd08      	pop	{r3, pc}

000d5402 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5402:	7c00      	ldrb	r0, [r0, #16]
   d5404:	f7ff b904 	b.w	d4610 <HAL_USB_USART_Flush_Data>

000d5408 <_ZN9USBSerialD0Ev>:
   d5408:	b510      	push	{r4, lr}
   d540a:	2114      	movs	r1, #20
   d540c:	4604      	mov	r4, r0
   d540e:	f000 fb72 	bl	d5af6 <_ZdlPvj>
   d5412:	4620      	mov	r0, r4
   d5414:	bd10      	pop	{r4, pc}

000d5416 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5416:	b538      	push	{r3, r4, r5, lr}
   d5418:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d541a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d541c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d541e:	f7ff f8df 	bl	d45e0 <HAL_USB_USART_Available_Data_For_Write>
   d5422:	2800      	cmp	r0, #0
   d5424:	dc01      	bgt.n	d542a <_ZN9USBSerial5writeEh+0x14>
   d5426:	7c60      	ldrb	r0, [r4, #17]
   d5428:	b128      	cbz	r0, d5436 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d542a:	4629      	mov	r1, r5
   d542c:	7c20      	ldrb	r0, [r4, #16]
   d542e:	f7ff f8e7 	bl	d4600 <HAL_USB_USART_Send_Data>
   d5432:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5436:	bd38      	pop	{r3, r4, r5, pc}

000d5438 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5438:	b510      	push	{r4, lr}
   d543a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d543c:	2300      	movs	r3, #0
   d543e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5440:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5444:	60a3      	str	r3, [r4, #8]
   d5446:	4b05      	ldr	r3, [pc, #20]	; (d545c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5448:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d544a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d544c:	4608      	mov	r0, r1
{
  _serial = serial;
   d544e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5450:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5452:	4611      	mov	r1, r2
   d5454:	f7ff f8ac 	bl	d45b0 <HAL_USB_USART_Init>
}
   d5458:	4620      	mov	r0, r4
   d545a:	bd10      	pop	{r4, pc}
   d545c:	000d6a48 	.word	0x000d6a48

000d5460 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5460:	2200      	movs	r2, #0
   d5462:	7c00      	ldrb	r0, [r0, #16]
   d5464:	f7ff b8ac 	b.w	d45c0 <HAL_USB_USART_Begin>

000d5468 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5468:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d546a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d546c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d546e:	2100      	movs	r1, #0
   d5470:	f001 f9a7 	bl	d67c2 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5474:	4620      	mov	r0, r4
   d5476:	bd10      	pop	{r4, pc}

000d5478 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5478:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d547a:	4d0e      	ldr	r5, [pc, #56]	; (d54b4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d547c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d547e:	a801      	add	r0, sp, #4
   d5480:	f7ff fff2 	bl	d5468 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5484:	6829      	ldr	r1, [r5, #0]
   d5486:	f011 0401 	ands.w	r4, r1, #1
   d548a:	d110      	bne.n	d54ae <_Z16_fetch_usbserialv+0x36>
   d548c:	4628      	mov	r0, r5
   d548e:	f7fe fe0a 	bl	d40a6 <__cxa_guard_acquire>
   d5492:	b160      	cbz	r0, d54ae <_Z16_fetch_usbserialv+0x36>
   d5494:	aa01      	add	r2, sp, #4
   d5496:	4621      	mov	r1, r4
   d5498:	4807      	ldr	r0, [pc, #28]	; (d54b8 <_Z16_fetch_usbserialv+0x40>)
   d549a:	f7ff ffcd 	bl	d5438 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d549e:	4628      	mov	r0, r5
   d54a0:	f7fe fe06 	bl	d40b0 <__cxa_guard_release>
   d54a4:	4a05      	ldr	r2, [pc, #20]	; (d54bc <_Z16_fetch_usbserialv+0x44>)
   d54a6:	4906      	ldr	r1, [pc, #24]	; (d54c0 <_Z16_fetch_usbserialv+0x48>)
   d54a8:	4803      	ldr	r0, [pc, #12]	; (d54b8 <_Z16_fetch_usbserialv+0x40>)
   d54aa:	f000 fb1f 	bl	d5aec <__aeabi_atexit>
	return _usbserial;
}
   d54ae:	4802      	ldr	r0, [pc, #8]	; (d54b8 <_Z16_fetch_usbserialv+0x40>)
   d54b0:	b007      	add	sp, #28
   d54b2:	bd30      	pop	{r4, r5, pc}
   d54b4:	2003e3d0 	.word	0x2003e3d0
   d54b8:	2003e3d4 	.word	0x2003e3d4
   d54bc:	2003e37c 	.word	0x2003e37c
   d54c0:	000d53b9 	.word	0x000d53b9

000d54c4 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d54c4:	2200      	movs	r2, #0
   d54c6:	4611      	mov	r1, r2
   d54c8:	6840      	ldr	r0, [r0, #4]
   d54ca:	f7ff b8f5 	b.w	d46b8 <network_ready>

000d54ce <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d54ce:	2200      	movs	r2, #0
   d54d0:	4611      	mov	r1, r2
   d54d2:	6840      	ldr	r0, [r0, #4]
   d54d4:	f7ff b910 	b.w	d46f8 <network_listening>

000d54d8 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d54d8:	2200      	movs	r2, #0
   d54da:	4611      	mov	r1, r2
   d54dc:	6840      	ldr	r0, [r0, #4]
   d54de:	f7ff b91b 	b.w	d4718 <network_get_listen_timeout>

000d54e2 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d54e2:	2200      	movs	r2, #0
   d54e4:	6840      	ldr	r0, [r0, #4]
   d54e6:	f7ff b90f 	b.w	d4708 <network_set_listen_timeout>

000d54ea <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d54ea:	2200      	movs	r2, #0
   d54ec:	f081 0101 	eor.w	r1, r1, #1
   d54f0:	6840      	ldr	r0, [r0, #4]
   d54f2:	f7ff b8f9 	b.w	d46e8 <network_listen>

000d54f6 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d54f6:	2300      	movs	r3, #0
   d54f8:	461a      	mov	r2, r3
   d54fa:	4619      	mov	r1, r3
   d54fc:	6840      	ldr	r0, [r0, #4]
   d54fe:	f7ff b8eb 	b.w	d46d8 <network_off>

000d5502 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d5502:	2300      	movs	r3, #0
   d5504:	461a      	mov	r2, r3
   d5506:	4619      	mov	r1, r3
   d5508:	6840      	ldr	r0, [r0, #4]
   d550a:	f7ff b8dd 	b.w	d46c8 <network_on>

000d550e <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d550e:	2200      	movs	r2, #0
   d5510:	4611      	mov	r1, r2
   d5512:	6840      	ldr	r0, [r0, #4]
   d5514:	f7ff b8c0 	b.w	d4698 <network_connecting>

000d5518 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5518:	2200      	movs	r2, #0
   d551a:	2102      	movs	r1, #2
   d551c:	6840      	ldr	r0, [r0, #4]
   d551e:	f7ff b8c3 	b.w	d46a8 <network_disconnect>

000d5522 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5522:	2300      	movs	r3, #0
   d5524:	461a      	mov	r2, r3
   d5526:	6840      	ldr	r0, [r0, #4]
   d5528:	f7ff b8ae 	b.w	d4688 <network_connect>

000d552c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d552c:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d552e:	4c08      	ldr	r4, [pc, #32]	; (d5550 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d5530:	2528      	movs	r5, #40	; 0x28
   d5532:	462a      	mov	r2, r5
   d5534:	2100      	movs	r1, #0
   d5536:	4620      	mov	r0, r4
   d5538:	f001 f943 	bl	d67c2 <memset>
        cid = -1;
   d553c:	f04f 33ff 	mov.w	r3, #4294967295
   d5540:	6063      	str	r3, [r4, #4]
   d5542:	4b04      	ldr	r3, [pc, #16]	; (d5554 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d5544:	8025      	strh	r5, [r4, #0]
   d5546:	2204      	movs	r2, #4
   d5548:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d554a:	4a03      	ldr	r2, [pc, #12]	; (d5558 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d554c:	601a      	str	r2, [r3, #0]
   d554e:	bd38      	pop	{r3, r4, r5, pc}
   d5550:	2003e3f0 	.word	0x2003e3f0
   d5554:	2003e3e8 	.word	0x2003e3e8
   d5558:	000d6a78 	.word	0x000d6a78

000d555c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d555c:	4770      	bx	lr

000d555e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d555e:	7441      	strb	r1, [r0, #17]
   d5560:	4770      	bx	lr

000d5562 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5562:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5564:	7c00      	ldrb	r0, [r0, #16]
   d5566:	f7fe ffc3 	bl	d44f0 <HAL_USART_Available_Data_For_Write>
}
   d556a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d556e:	bd08      	pop	{r3, pc}

000d5570 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5570:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5572:	7c00      	ldrb	r0, [r0, #16]
   d5574:	f7fe ff94 	bl	d44a0 <HAL_USART_Available_Data>
}
   d5578:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d557c:	bd08      	pop	{r3, pc}

000d557e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d557e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5580:	7c00      	ldrb	r0, [r0, #16]
   d5582:	f7fe ff9d 	bl	d44c0 <HAL_USART_Peek_Data>
}
   d5586:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d558a:	bf28      	it	cs
   d558c:	f04f 30ff 	movcs.w	r0, #4294967295
   d5590:	bd08      	pop	{r3, pc}

000d5592 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5592:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5594:	7c00      	ldrb	r0, [r0, #16]
   d5596:	f7fe ff8b 	bl	d44b0 <HAL_USART_Read_Data>
}
   d559a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d559e:	bf28      	it	cs
   d55a0:	f04f 30ff 	movcs.w	r0, #4294967295
   d55a4:	bd08      	pop	{r3, pc}

000d55a6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d55a6:	7c00      	ldrb	r0, [r0, #16]
   d55a8:	f7fe bf92 	b.w	d44d0 <HAL_USART_Flush_Data>

000d55ac <_ZN11USARTSerialD0Ev>:
   d55ac:	b510      	push	{r4, lr}
   d55ae:	2114      	movs	r1, #20
   d55b0:	4604      	mov	r4, r0
   d55b2:	f000 faa0 	bl	d5af6 <_ZdlPvj>
   d55b6:	4620      	mov	r0, r4
   d55b8:	bd10      	pop	{r4, pc}

000d55ba <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d55ba:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d55bc:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d55be:	4604      	mov	r4, r0
   d55c0:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d55c2:	b925      	cbnz	r5, d55ce <_ZN11USARTSerial5writeEh+0x14>
   d55c4:	7c00      	ldrb	r0, [r0, #16]
   d55c6:	f7fe ff93 	bl	d44f0 <HAL_USART_Available_Data_For_Write>
   d55ca:	2800      	cmp	r0, #0
   d55cc:	dd05      	ble.n	d55da <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d55ce:	4631      	mov	r1, r6
   d55d0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d55d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d55d6:	f7fe bf5b 	b.w	d4490 <HAL_USART_Write_Data>
  }
  return 0;
}
   d55da:	4628      	mov	r0, r5
   d55dc:	bd70      	pop	{r4, r5, r6, pc}
	...

000d55e0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d55e0:	b510      	push	{r4, lr}
   d55e2:	4604      	mov	r4, r0
   d55e4:	4608      	mov	r0, r1
   d55e6:	4611      	mov	r1, r2
   d55e8:	2200      	movs	r2, #0
   d55ea:	6062      	str	r2, [r4, #4]
   d55ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d55f0:	60a2      	str	r2, [r4, #8]
   d55f2:	4a05      	ldr	r2, [pc, #20]	; (d5608 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d55f4:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d55f6:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d55f8:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d55fa:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d55fc:	461a      	mov	r2, r3
   d55fe:	f7fe ff3f 	bl	d4480 <HAL_USART_Init>
}
   d5602:	4620      	mov	r0, r4
   d5604:	bd10      	pop	{r4, pc}
   d5606:	bf00      	nop
   d5608:	000d6aac 	.word	0x000d6aac

000d560c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d560c:	7c00      	ldrb	r0, [r0, #16]
   d560e:	f7fe bf67 	b.w	d44e0 <HAL_USART_Is_Enabled>
	...

000d5614 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5614:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5616:	4d0c      	ldr	r5, [pc, #48]	; (d5648 <_Z22__fetch_global_Serial1v+0x34>)
   d5618:	6829      	ldr	r1, [r5, #0]
   d561a:	f011 0401 	ands.w	r4, r1, #1
   d561e:	d111      	bne.n	d5644 <_Z22__fetch_global_Serial1v+0x30>
   d5620:	4628      	mov	r0, r5
   d5622:	f7fe fd40 	bl	d40a6 <__cxa_guard_acquire>
   d5626:	b168      	cbz	r0, d5644 <_Z22__fetch_global_Serial1v+0x30>
   d5628:	4a08      	ldr	r2, [pc, #32]	; (d564c <_Z22__fetch_global_Serial1v+0x38>)
   d562a:	4b09      	ldr	r3, [pc, #36]	; (d5650 <_Z22__fetch_global_Serial1v+0x3c>)
   d562c:	4809      	ldr	r0, [pc, #36]	; (d5654 <_Z22__fetch_global_Serial1v+0x40>)
   d562e:	4621      	mov	r1, r4
   d5630:	f7ff ffd6 	bl	d55e0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5634:	4628      	mov	r0, r5
   d5636:	f7fe fd3b 	bl	d40b0 <__cxa_guard_release>
   d563a:	4a07      	ldr	r2, [pc, #28]	; (d5658 <_Z22__fetch_global_Serial1v+0x44>)
   d563c:	4907      	ldr	r1, [pc, #28]	; (d565c <_Z22__fetch_global_Serial1v+0x48>)
   d563e:	4805      	ldr	r0, [pc, #20]	; (d5654 <_Z22__fetch_global_Serial1v+0x40>)
   d5640:	f000 fa54 	bl	d5aec <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5644:	4803      	ldr	r0, [pc, #12]	; (d5654 <_Z22__fetch_global_Serial1v+0x40>)
   d5646:	bd38      	pop	{r3, r4, r5, pc}
   d5648:	2003e4b0 	.word	0x2003e4b0
   d564c:	2003e4b4 	.word	0x2003e4b4
   d5650:	2003e42c 	.word	0x2003e42c
   d5654:	2003e418 	.word	0x2003e418
   d5658:	2003e37c 	.word	0x2003e37c
   d565c:	000d555d 	.word	0x000d555d

000d5660 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5660:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5662:	6883      	ldr	r3, [r0, #8]
   d5664:	4604      	mov	r4, r0
   d5666:	b90b      	cbnz	r3, d566c <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5668:	f000 fa47 	bl	d5afa <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d566c:	68c3      	ldr	r3, [r0, #12]
   d566e:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5670:	68a3      	ldr	r3, [r4, #8]
   d5672:	b11b      	cbz	r3, d567c <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5674:	2203      	movs	r2, #3
   d5676:	4621      	mov	r1, r4
   d5678:	4620      	mov	r0, r4
   d567a:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d567c:	4620      	mov	r0, r4
   d567e:	2110      	movs	r1, #16
}
   d5680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5684:	f000 ba37 	b.w	d5af6 <_ZdlPvj>

000d5688 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d5688:	4770      	bx	lr

000d568a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d568a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d568c:	4606      	mov	r6, r0
   d568e:	4615      	mov	r5, r2
   d5690:	460c      	mov	r4, r1
   d5692:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5694:	42bc      	cmp	r4, r7
   d5696:	d006      	beq.n	d56a6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5698:	6833      	ldr	r3, [r6, #0]
   d569a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d569e:	689b      	ldr	r3, [r3, #8]
   d56a0:	4630      	mov	r0, r6
   d56a2:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d56a4:	e7f6      	b.n	d5694 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d56a6:	4628      	mov	r0, r5
   d56a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d56aa <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d56aa:	2200      	movs	r2, #0
   d56ac:	7c00      	ldrb	r0, [r0, #16]
   d56ae:	f7fe bf47 	b.w	d4540 <HAL_I2C_Write_Data>

000d56b2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d56b2:	2100      	movs	r1, #0
   d56b4:	7c00      	ldrb	r0, [r0, #16]
   d56b6:	f7fe bf4b 	b.w	d4550 <HAL_I2C_Available_Data>

000d56ba <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d56ba:	2100      	movs	r1, #0
   d56bc:	7c00      	ldrb	r0, [r0, #16]
   d56be:	f7fe bf4f 	b.w	d4560 <HAL_I2C_Read_Data>

000d56c2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d56c2:	2100      	movs	r1, #0
   d56c4:	7c00      	ldrb	r0, [r0, #16]
   d56c6:	f7fe bf53 	b.w	d4570 <HAL_I2C_Peek_Data>

000d56ca <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d56ca:	2100      	movs	r1, #0
   d56cc:	7c00      	ldrb	r0, [r0, #16]
   d56ce:	f7fe bf57 	b.w	d4580 <HAL_I2C_Flush_Data>

000d56d2 <_ZN7TwoWireD0Ev>:
   d56d2:	b510      	push	{r4, lr}
   d56d4:	2114      	movs	r1, #20
   d56d6:	4604      	mov	r4, r0
   d56d8:	f000 fa0d 	bl	d5af6 <_ZdlPvj>
   d56dc:	4620      	mov	r0, r4
   d56de:	bd10      	pop	{r4, pc}

000d56e0 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d56e0:	b510      	push	{r4, lr}
   d56e2:	4604      	mov	r4, r0
   d56e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d56e8:	4608      	mov	r0, r1
   d56ea:	60a3      	str	r3, [r4, #8]
   d56ec:	2100      	movs	r1, #0
   d56ee:	4b04      	ldr	r3, [pc, #16]	; (d5700 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d56f0:	7420      	strb	r0, [r4, #16]
   d56f2:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d56f4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d56f6:	f7fe ff53 	bl	d45a0 <HAL_I2C_Init>

}
   d56fa:	4620      	mov	r0, r4
   d56fc:	bd10      	pop	{r4, pc}
   d56fe:	bf00      	nop
   d5700:	000d6adc 	.word	0x000d6adc

000d5704 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d5704:	2300      	movs	r3, #0
   d5706:	461a      	mov	r2, r3
   d5708:	4619      	mov	r1, r3
   d570a:	7c00      	ldrb	r0, [r0, #16]
   d570c:	f7fe bef8 	b.w	d4500 <HAL_I2C_Begin>

000d5710 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
   d5710:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
   d5712:	2400      	movs	r4, #0
   d5714:	7c00      	ldrb	r0, [r0, #16]
   d5716:	9400      	str	r4, [sp, #0]
   d5718:	f7fe fefa 	bl	d4510 <HAL_I2C_Request_Data>
  return result;
}
   d571c:	b2c0      	uxtb	r0, r0
   d571e:	b002      	add	sp, #8
   d5720:	bd10      	pop	{r4, pc}

000d5722 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
   d5722:	2301      	movs	r3, #1
   d5724:	f7ff bff4 	b.w	d5710 <_ZN7TwoWire11requestFromEhhh>

000d5728 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d5728:	2200      	movs	r2, #0
   d572a:	7c00      	ldrb	r0, [r0, #16]
   d572c:	f7fe bef8 	b.w	d4520 <HAL_I2C_Begin_Transmission>

000d5730 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d5730:	2200      	movs	r2, #0
   d5732:	7c00      	ldrb	r0, [r0, #16]
   d5734:	f7fe befc 	b.w	d4530 <HAL_I2C_End_Transmission>

000d5738 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d5738:	2101      	movs	r1, #1
   d573a:	f7ff bff9 	b.w	d5730 <_ZN7TwoWire15endTransmissionEh>

000d573e <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d573e:	2100      	movs	r1, #0
   d5740:	7c00      	ldrb	r0, [r0, #16]
   d5742:	f7fe bf25 	b.w	d4590 <HAL_I2C_Is_Enabled>

000d5746 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5746:	2200      	movs	r2, #0
   d5748:	4611      	mov	r1, r2
   d574a:	6840      	ldr	r0, [r0, #4]
   d574c:	f7fe bfd4 	b.w	d46f8 <network_listening>

000d5750 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5750:	2200      	movs	r2, #0
   d5752:	4611      	mov	r1, r2
   d5754:	6840      	ldr	r0, [r0, #4]
   d5756:	f7fe bfdf 	b.w	d4718 <network_get_listen_timeout>

000d575a <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d575a:	2200      	movs	r2, #0
   d575c:	6840      	ldr	r0, [r0, #4]
   d575e:	f7fe bfd3 	b.w	d4708 <network_set_listen_timeout>

000d5762 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5762:	2200      	movs	r2, #0
   d5764:	f081 0101 	eor.w	r1, r1, #1
   d5768:	6840      	ldr	r0, [r0, #4]
   d576a:	f7fe bfbd 	b.w	d46e8 <network_listen>

000d576e <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d576e:	2300      	movs	r3, #0
   d5770:	461a      	mov	r2, r3
   d5772:	2101      	movs	r1, #1
   d5774:	6840      	ldr	r0, [r0, #4]
   d5776:	f7fe bfaf 	b.w	d46d8 <network_off>

000d577a <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d577a:	2300      	movs	r3, #0
   d577c:	461a      	mov	r2, r3
   d577e:	4619      	mov	r1, r3
   d5780:	6840      	ldr	r0, [r0, #4]
   d5782:	f7fe bfa1 	b.w	d46c8 <network_on>

000d5786 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5786:	2200      	movs	r2, #0
   d5788:	4611      	mov	r1, r2
   d578a:	6840      	ldr	r0, [r0, #4]
   d578c:	f7fe bf94 	b.w	d46b8 <network_ready>

000d5790 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5790:	2200      	movs	r2, #0
   d5792:	4611      	mov	r1, r2
   d5794:	6840      	ldr	r0, [r0, #4]
   d5796:	f7fe bf7f 	b.w	d4698 <network_connecting>

000d579a <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d579a:	2200      	movs	r2, #0
   d579c:	2102      	movs	r1, #2
   d579e:	6840      	ldr	r0, [r0, #4]
   d57a0:	f7fe bf82 	b.w	d46a8 <network_disconnect>

000d57a4 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d57a4:	2300      	movs	r3, #0
   d57a6:	461a      	mov	r2, r3
   d57a8:	6840      	ldr	r0, [r0, #4]
   d57aa:	f7fe bf6d 	b.w	d4688 <network_connect>

000d57ae <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d57ae:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d57b0:	4605      	mov	r5, r0
   d57b2:	b188      	cbz	r0, d57d8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d57b4:	6804      	ldr	r4, [r0, #0]
   d57b6:	b14c      	cbz	r4, d57cc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d57b8:	68a3      	ldr	r3, [r4, #8]
   d57ba:	b11b      	cbz	r3, d57c4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d57bc:	2203      	movs	r2, #3
   d57be:	4621      	mov	r1, r4
   d57c0:	4620      	mov	r0, r4
   d57c2:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d57c4:	2110      	movs	r1, #16
   d57c6:	4620      	mov	r0, r4
   d57c8:	f000 f995 	bl	d5af6 <_ZdlPvj>
   d57cc:	4628      	mov	r0, r5
   d57ce:	2114      	movs	r1, #20
      }
   d57d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d57d4:	f000 b98f 	b.w	d5af6 <_ZdlPvj>
   d57d8:	bd38      	pop	{r3, r4, r5, pc}

000d57da <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d57da:	b110      	cbz	r0, d57e2 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d57dc:	6803      	ldr	r3, [r0, #0]
   d57de:	685b      	ldr	r3, [r3, #4]
   d57e0:	4718      	bx	r3
   d57e2:	4770      	bx	lr

000d57e4 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d57e4:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d57e6:	6803      	ldr	r3, [r0, #0]
   d57e8:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d57ea:	b1bb      	cbz	r3, d581c <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d57ec:	6858      	ldr	r0, [r3, #4]
   d57ee:	f7fe fe17 	bl	d4420 <os_thread_is_current>
   d57f2:	b978      	cbnz	r0, d5814 <_ZN6ThreadD1Ev+0x30>
   d57f4:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d57f6:	7c5a      	ldrb	r2, [r3, #17]
   d57f8:	b912      	cbnz	r2, d5800 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d57fa:	6858      	ldr	r0, [r3, #4]
   d57fc:	f7fe fe18 	bl	d4430 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5800:	6823      	ldr	r3, [r4, #0]
   d5802:	6858      	ldr	r0, [r3, #4]
   d5804:	f7fe fe1c 	bl	d4440 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5808:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d580a:	2300      	movs	r3, #0
   d580c:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d580e:	b128      	cbz	r0, d581c <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5810:	f7ff ffcd 	bl	d57ae <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5814:	6820      	ldr	r0, [r4, #0]
   d5816:	b108      	cbz	r0, d581c <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5818:	f7ff ffc9 	bl	d57ae <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d581c:	4620      	mov	r0, r4
   d581e:	bd10      	pop	{r4, pc}

000d5820 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5820:	b538      	push	{r3, r4, r5, lr}
   d5822:	4b0c      	ldr	r3, [pc, #48]	; (d5854 <_ZN5spark9MeshClassD1Ev+0x34>)
   d5824:	6003      	str	r3, [r0, #0]
   d5826:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5828:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d582c:	b108      	cbz	r0, d5832 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d582e:	f7fe fc38 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5832:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d5836:	b135      	cbz	r5, d5846 <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5838:	4628      	mov	r0, r5
   d583a:	f7ff ffd3 	bl	d57e4 <_ZN6ThreadD1Ev>
   d583e:	2104      	movs	r1, #4
   d5840:	4628      	mov	r0, r5
   d5842:	f000 f958 	bl	d5af6 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5846:	68a0      	ldr	r0, [r4, #8]
   d5848:	b108      	cbz	r0, d584e <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d584a:	f7ff ffc6 	bl	d57da <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d584e:	4620      	mov	r0, r4
   d5850:	bd38      	pop	{r3, r4, r5, pc}
   d5852:	bf00      	nop
   d5854:	000d6b04 	.word	0x000d6b04

000d5858 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5858:	b538      	push	{r3, r4, r5, lr}
   d585a:	4c0e      	ldr	r4, [pc, #56]	; (d5894 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d585c:	4b0e      	ldr	r3, [pc, #56]	; (d5898 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d585e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5860:	2500      	movs	r5, #0
   d5862:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5864:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5868:	6063      	str	r3, [r4, #4]
   d586a:	60a5      	str	r5, [r4, #8]
   d586c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5870:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5874:	f7fe fdf4 	bl	d4460 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5878:	4b08      	ldr	r3, [pc, #32]	; (d589c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d587a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d587e:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d5882:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5884:	4620      	mov	r0, r4
   d5886:	4a06      	ldr	r2, [pc, #24]	; (d58a0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5888:	4906      	ldr	r1, [pc, #24]	; (d58a4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d588a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d588e:	f000 b92d 	b.w	d5aec <__aeabi_atexit>
   d5892:	bf00      	nop
   d5894:	2003e538 	.word	0x2003e538
   d5898:	000d6b38 	.word	0x000d6b38
   d589c:	000d6b04 	.word	0x000d6b04
   d58a0:	2003e37c 	.word	0x2003e37c
   d58a4:	000d5821 	.word	0x000d5821

000d58a8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d58a8:	2300      	movs	r3, #0
   d58aa:	461a      	mov	r2, r3
   d58ac:	6840      	ldr	r0, [r0, #4]
   d58ae:	f7fe beeb 	b.w	d4688 <network_connect>

000d58b2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d58b2:	2200      	movs	r2, #0
   d58b4:	2102      	movs	r1, #2
   d58b6:	6840      	ldr	r0, [r0, #4]
   d58b8:	f7fe bef6 	b.w	d46a8 <network_disconnect>

000d58bc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d58bc:	2200      	movs	r2, #0
   d58be:	4611      	mov	r1, r2
   d58c0:	6840      	ldr	r0, [r0, #4]
   d58c2:	f7fe bee9 	b.w	d4698 <network_connecting>

000d58c6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d58c6:	2200      	movs	r2, #0
   d58c8:	4611      	mov	r1, r2
   d58ca:	6840      	ldr	r0, [r0, #4]
   d58cc:	f7fe bef4 	b.w	d46b8 <network_ready>

000d58d0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d58d0:	2300      	movs	r3, #0
   d58d2:	461a      	mov	r2, r3
   d58d4:	4619      	mov	r1, r3
   d58d6:	6840      	ldr	r0, [r0, #4]
   d58d8:	f7fe bef6 	b.w	d46c8 <network_on>

000d58dc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d58dc:	2300      	movs	r3, #0
   d58de:	461a      	mov	r2, r3
   d58e0:	4619      	mov	r1, r3
   d58e2:	6840      	ldr	r0, [r0, #4]
   d58e4:	f7fe bef8 	b.w	d46d8 <network_off>

000d58e8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d58e8:	2200      	movs	r2, #0
   d58ea:	f081 0101 	eor.w	r1, r1, #1
   d58ee:	6840      	ldr	r0, [r0, #4]
   d58f0:	f7fe befa 	b.w	d46e8 <network_listen>

000d58f4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d58f4:	2200      	movs	r2, #0
   d58f6:	6840      	ldr	r0, [r0, #4]
   d58f8:	f7fe bf06 	b.w	d4708 <network_set_listen_timeout>

000d58fc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d58fc:	2200      	movs	r2, #0
   d58fe:	4611      	mov	r1, r2
   d5900:	6840      	ldr	r0, [r0, #4]
   d5902:	f7fe bf09 	b.w	d4718 <network_get_listen_timeout>

000d5906 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5906:	2200      	movs	r2, #0
   d5908:	4611      	mov	r1, r2
   d590a:	6840      	ldr	r0, [r0, #4]
   d590c:	f7fe bef4 	b.w	d46f8 <network_listening>

000d5910 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5910:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5914:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5916:	b095      	sub	sp, #84	; 0x54
   d5918:	4616      	mov	r6, r2
   d591a:	460d      	mov	r5, r1
   d591c:	4607      	mov	r7, r0
    IPAddress addr;
   d591e:	f7ff fd11 	bl	d5344 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5922:	4621      	mov	r1, r4
   d5924:	2220      	movs	r2, #32
   d5926:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5928:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d592a:	f000 ff4a 	bl	d67c2 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d592e:	2340      	movs	r3, #64	; 0x40
   d5930:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5932:	4621      	mov	r1, r4
   d5934:	466b      	mov	r3, sp
   d5936:	aa0c      	add	r2, sp, #48	; 0x30
   d5938:	4630      	mov	r0, r6
   d593a:	f7fe fd31 	bl	d43a0 <netdb_getaddrinfo>
    if (!r) {
   d593e:	4604      	mov	r4, r0
   d5940:	2800      	cmp	r0, #0
   d5942:	d144      	bne.n	d59ce <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5944:	4602      	mov	r2, r0
   d5946:	2101      	movs	r1, #1
   d5948:	6868      	ldr	r0, [r5, #4]
   d594a:	f7fe feb5 	bl	d46b8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d594e:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5950:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5952:	4622      	mov	r2, r4
   d5954:	6868      	ldr	r0, [r5, #4]
   d5956:	f7fe feaf 	bl	d46b8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d595a:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d595c:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d595e:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5960:	2e00      	cmp	r6, #0
   d5962:	d034      	beq.n	d59ce <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5964:	2900      	cmp	r1, #0
   d5966:	d132      	bne.n	d59ce <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5968:	6873      	ldr	r3, [r6, #4]
   d596a:	2b02      	cmp	r3, #2
   d596c:	d002      	beq.n	d5974 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d596e:	2b0a      	cmp	r3, #10
   d5970:	d009      	beq.n	d5986 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5972:	e02a      	b.n	d59ca <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5974:	f1b8 0f00 	cmp.w	r8, #0
   d5978:	d027      	beq.n	d59ca <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d597a:	6971      	ldr	r1, [r6, #20]
   d597c:	4638      	mov	r0, r7
   d597e:	3104      	adds	r1, #4
   d5980:	f7ff fd0d 	bl	d539e <_ZN9IPAddressaSEPKh>
   d5984:	e020      	b.n	d59c8 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5986:	f1b9 0f00 	cmp.w	r9, #0
   d598a:	d01e      	beq.n	d59ca <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d598c:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d598e:	2211      	movs	r2, #17
   d5990:	a801      	add	r0, sp, #4
   d5992:	f000 ff16 	bl	d67c2 <memset>
                    a.v = 6;
   d5996:	2306      	movs	r3, #6
   d5998:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d599c:	ad01      	add	r5, sp, #4
   d599e:	f104 0308 	add.w	r3, r4, #8
   d59a2:	3418      	adds	r4, #24
   d59a4:	6818      	ldr	r0, [r3, #0]
   d59a6:	6859      	ldr	r1, [r3, #4]
   d59a8:	462a      	mov	r2, r5
   d59aa:	c203      	stmia	r2!, {r0, r1}
   d59ac:	3308      	adds	r3, #8
   d59ae:	42a3      	cmp	r3, r4
   d59b0:	4615      	mov	r5, r2
   d59b2:	d1f7      	bne.n	d59a4 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d59b4:	a901      	add	r1, sp, #4
   d59b6:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d59b8:	ad07      	add	r5, sp, #28
   d59ba:	f7ff fcd1 	bl	d5360 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d59be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d59c0:	1d3c      	adds	r4, r7, #4
   d59c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d59c4:	682b      	ldr	r3, [r5, #0]
   d59c6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d59c8:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d59ca:	69f6      	ldr	r6, [r6, #28]
   d59cc:	e7c8      	b.n	d5960 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d59ce:	9800      	ldr	r0, [sp, #0]
   d59d0:	f7fe fcde 	bl	d4390 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d59d4:	4638      	mov	r0, r7
   d59d6:	b015      	add	sp, #84	; 0x54
   d59d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d59dc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d59dc:	4b02      	ldr	r3, [pc, #8]	; (d59e8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d59de:	4a03      	ldr	r2, [pc, #12]	; (d59ec <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d59e0:	601a      	str	r2, [r3, #0]
   d59e2:	2200      	movs	r2, #0
   d59e4:	605a      	str	r2, [r3, #4]
   d59e6:	4770      	bx	lr
   d59e8:	2003e70c 	.word	0x2003e70c
   d59ec:	000d6b38 	.word	0x000d6b38

000d59f0 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d59f0:	b510      	push	{r4, lr}
   d59f2:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d59f4:	480f      	ldr	r0, [pc, #60]	; (d5a34 <pinAvailable+0x44>)
   d59f6:	f7fe ff31 	bl	d485c <_ZN8SPIClass9isEnabledEv>
   d59fa:	b128      	cbz	r0, d5a08 <pinAvailable+0x18>
   d59fc:	f1a4 030b 	sub.w	r3, r4, #11
   d5a00:	2b02      	cmp	r3, #2
   d5a02:	d801      	bhi.n	d5a08 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d5a04:	2000      	movs	r0, #0
   d5a06:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d5a08:	f000 f850 	bl	d5aac <_Z19__fetch_global_Wirev>
   d5a0c:	f7ff fe97 	bl	d573e <_ZN7TwoWire9isEnabledEv>
   d5a10:	b108      	cbz	r0, d5a16 <pinAvailable+0x26>
   d5a12:	2c01      	cmp	r4, #1
   d5a14:	d9f6      	bls.n	d5a04 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d5a16:	f7ff fdfd 	bl	d5614 <_Z22__fetch_global_Serial1v>
   d5a1a:	f7ff fdf7 	bl	d560c <_ZN11USARTSerial9isEnabledEv>
   d5a1e:	b118      	cbz	r0, d5a28 <pinAvailable+0x38>
   d5a20:	f1a4 0309 	sub.w	r3, r4, #9
   d5a24:	2b01      	cmp	r3, #1
   d5a26:	d9ed      	bls.n	d5a04 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d5a28:	2c23      	cmp	r4, #35	; 0x23
   d5a2a:	bf8c      	ite	hi
   d5a2c:	2000      	movhi	r0, #0
   d5a2e:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d5a30:	bd10      	pop	{r4, pc}
   d5a32:	bf00      	nop
   d5a34:	2003e714 	.word	0x2003e714

000d5a38 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d5a38:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d5a3a:	b510      	push	{r4, lr}
   d5a3c:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d5a3e:	bf9c      	itt	ls
   d5a40:	340e      	addls	r4, #14
   d5a42:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5a44:	4620      	mov	r0, r4
   d5a46:	f7ff ffd3 	bl	d59f0 <pinAvailable>
   d5a4a:	b150      	cbz	r0, d5a62 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d5a4c:	2103      	movs	r1, #3
   d5a4e:	4620      	mov	r0, r4
   d5a50:	f7fe fcb6 	bl	d43c0 <HAL_Validate_Pin_Function>
   d5a54:	2803      	cmp	r0, #3
   d5a56:	d104      	bne.n	d5a62 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d5a58:	4620      	mov	r0, r4
}
   d5a5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d5a5e:	f7fe bcb7 	b.w	d43d0 <HAL_ADC_Read>
}
   d5a62:	2000      	movs	r0, #0
   d5a64:	bd10      	pop	{r4, pc}
	...

000d5a68 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5a68:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5a6a:	4c0c      	ldr	r4, [pc, #48]	; (d5a9c <_GLOBAL__sub_I_SPI+0x34>)
   d5a6c:	4e0c      	ldr	r6, [pc, #48]	; (d5aa0 <_GLOBAL__sub_I_SPI+0x38>)
   d5a6e:	4d0d      	ldr	r5, [pc, #52]	; (d5aa4 <_GLOBAL__sub_I_SPI+0x3c>)
   d5a70:	2100      	movs	r1, #0
   d5a72:	4620      	mov	r0, r4
   d5a74:	f7fe fede 	bl	d4834 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5a78:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5a7a:	4c0b      	ldr	r4, [pc, #44]	; (d5aa8 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5a7c:	4632      	mov	r2, r6
   d5a7e:	4629      	mov	r1, r5
   d5a80:	f000 f834 	bl	d5aec <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5a84:	2101      	movs	r1, #1
   d5a86:	4620      	mov	r0, r4
   d5a88:	f7fe fed4 	bl	d4834 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5a8c:	4632      	mov	r2, r6
   d5a8e:	4629      	mov	r1, r5
   d5a90:	4620      	mov	r0, r4
   d5a92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d5a96:	f000 b829 	b.w	d5aec <__aeabi_atexit>
   d5a9a:	bf00      	nop
   d5a9c:	2003e714 	.word	0x2003e714
   d5aa0:	2003e37c 	.word	0x2003e37c
   d5aa4:	000d4825 	.word	0x000d4825
   d5aa8:	2003e724 	.word	0x2003e724

000d5aac <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d5aac:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d5aae:	4d0b      	ldr	r5, [pc, #44]	; (d5adc <_Z19__fetch_global_Wirev+0x30>)
   d5ab0:	6829      	ldr	r1, [r5, #0]
   d5ab2:	f011 0401 	ands.w	r4, r1, #1
   d5ab6:	d10f      	bne.n	d5ad8 <_Z19__fetch_global_Wirev+0x2c>
   d5ab8:	4628      	mov	r0, r5
   d5aba:	f7fe faf4 	bl	d40a6 <__cxa_guard_acquire>
   d5abe:	b158      	cbz	r0, d5ad8 <_Z19__fetch_global_Wirev+0x2c>
   d5ac0:	4621      	mov	r1, r4
   d5ac2:	4807      	ldr	r0, [pc, #28]	; (d5ae0 <_Z19__fetch_global_Wirev+0x34>)
   d5ac4:	f7ff fe0c 	bl	d56e0 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d5ac8:	4628      	mov	r0, r5
   d5aca:	f7fe faf1 	bl	d40b0 <__cxa_guard_release>
   d5ace:	4a05      	ldr	r2, [pc, #20]	; (d5ae4 <_Z19__fetch_global_Wirev+0x38>)
   d5ad0:	4905      	ldr	r1, [pc, #20]	; (d5ae8 <_Z19__fetch_global_Wirev+0x3c>)
   d5ad2:	4803      	ldr	r0, [pc, #12]	; (d5ae0 <_Z19__fetch_global_Wirev+0x34>)
   d5ad4:	f000 f80a 	bl	d5aec <__aeabi_atexit>
	return wire;
}
   d5ad8:	4801      	ldr	r0, [pc, #4]	; (d5ae0 <_Z19__fetch_global_Wirev+0x34>)
   d5ada:	bd38      	pop	{r3, r4, r5, pc}
   d5adc:	2003e738 	.word	0x2003e738
   d5ae0:	2003e73c 	.word	0x2003e73c
   d5ae4:	2003e37c 	.word	0x2003e37c
   d5ae8:	000d5689 	.word	0x000d5689

000d5aec <__aeabi_atexit>:
   d5aec:	460b      	mov	r3, r1
   d5aee:	4601      	mov	r1, r0
   d5af0:	4618      	mov	r0, r3
   d5af2:	f000 be4d 	b.w	d6790 <__cxa_atexit>

000d5af6 <_ZdlPvj>:
   d5af6:	f7fe bad2 	b.w	d409e <_ZdlPv>

000d5afa <_ZSt25__throw_bad_function_callv>:
   d5afa:	b508      	push	{r3, lr}
   d5afc:	f7fe fe44 	bl	d4788 <abort>

000d5b00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5b00:	4b18      	ldr	r3, [pc, #96]	; (d5b64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5b02:	681a      	ldr	r2, [r3, #0]
   d5b04:	07d1      	lsls	r1, r2, #31
   d5b06:	bf5c      	itt	pl
   d5b08:	2201      	movpl	r2, #1
   d5b0a:	601a      	strpl	r2, [r3, #0]
   d5b0c:	4b16      	ldr	r3, [pc, #88]	; (d5b68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5b0e:	681a      	ldr	r2, [r3, #0]
   d5b10:	07d2      	lsls	r2, r2, #31
   d5b12:	bf5c      	itt	pl
   d5b14:	2201      	movpl	r2, #1
   d5b16:	601a      	strpl	r2, [r3, #0]
   d5b18:	4b14      	ldr	r3, [pc, #80]	; (d5b6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5b1a:	681a      	ldr	r2, [r3, #0]
   d5b1c:	07d0      	lsls	r0, r2, #31
   d5b1e:	bf5c      	itt	pl
   d5b20:	2201      	movpl	r2, #1
   d5b22:	601a      	strpl	r2, [r3, #0]
   d5b24:	4b12      	ldr	r3, [pc, #72]	; (d5b70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5b26:	681a      	ldr	r2, [r3, #0]
   d5b28:	07d1      	lsls	r1, r2, #31
   d5b2a:	bf5c      	itt	pl
   d5b2c:	2201      	movpl	r2, #1
   d5b2e:	601a      	strpl	r2, [r3, #0]
   d5b30:	4b10      	ldr	r3, [pc, #64]	; (d5b74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5b32:	681a      	ldr	r2, [r3, #0]
   d5b34:	07d2      	lsls	r2, r2, #31
   d5b36:	bf5c      	itt	pl
   d5b38:	2201      	movpl	r2, #1
   d5b3a:	601a      	strpl	r2, [r3, #0]
   d5b3c:	4b0e      	ldr	r3, [pc, #56]	; (d5b78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5b3e:	681a      	ldr	r2, [r3, #0]
   d5b40:	07d0      	lsls	r0, r2, #31
   d5b42:	bf5c      	itt	pl
   d5b44:	2201      	movpl	r2, #1
   d5b46:	601a      	strpl	r2, [r3, #0]
   d5b48:	4b0c      	ldr	r3, [pc, #48]	; (d5b7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5b4a:	681a      	ldr	r2, [r3, #0]
   d5b4c:	07d1      	lsls	r1, r2, #31
   d5b4e:	bf5c      	itt	pl
   d5b50:	2201      	movpl	r2, #1
   d5b52:	601a      	strpl	r2, [r3, #0]
   d5b54:	4b0a      	ldr	r3, [pc, #40]	; (d5b80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5b56:	681a      	ldr	r2, [r3, #0]
   d5b58:	07d2      	lsls	r2, r2, #31
   d5b5a:	bf5c      	itt	pl
   d5b5c:	2201      	movpl	r2, #1
   d5b5e:	601a      	strpl	r2, [r3, #0]
   d5b60:	4770      	bx	lr
   d5b62:	bf00      	nop
   d5b64:	2003e76c 	.word	0x2003e76c
   d5b68:	2003e768 	.word	0x2003e768
   d5b6c:	2003e764 	.word	0x2003e764
   d5b70:	2003e760 	.word	0x2003e760
   d5b74:	2003e75c 	.word	0x2003e75c
   d5b78:	2003e758 	.word	0x2003e758
   d5b7c:	2003e754 	.word	0x2003e754
   d5b80:	2003e750 	.word	0x2003e750

000d5b84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5b84:	4b24      	ldr	r3, [pc, #144]	; (d5c18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5b86:	681a      	ldr	r2, [r3, #0]
   d5b88:	07d0      	lsls	r0, r2, #31
   d5b8a:	bf5c      	itt	pl
   d5b8c:	2201      	movpl	r2, #1
   d5b8e:	601a      	strpl	r2, [r3, #0]
   d5b90:	4b22      	ldr	r3, [pc, #136]	; (d5c1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5b92:	681a      	ldr	r2, [r3, #0]
   d5b94:	07d1      	lsls	r1, r2, #31
   d5b96:	bf5c      	itt	pl
   d5b98:	2201      	movpl	r2, #1
   d5b9a:	601a      	strpl	r2, [r3, #0]
   d5b9c:	4b20      	ldr	r3, [pc, #128]	; (d5c20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5b9e:	681a      	ldr	r2, [r3, #0]
   d5ba0:	07d2      	lsls	r2, r2, #31
   d5ba2:	bf5c      	itt	pl
   d5ba4:	2201      	movpl	r2, #1
   d5ba6:	601a      	strpl	r2, [r3, #0]
   d5ba8:	4b1e      	ldr	r3, [pc, #120]	; (d5c24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5baa:	681a      	ldr	r2, [r3, #0]
   d5bac:	07d0      	lsls	r0, r2, #31
   d5bae:	bf5c      	itt	pl
   d5bb0:	2201      	movpl	r2, #1
   d5bb2:	601a      	strpl	r2, [r3, #0]
   d5bb4:	4b1c      	ldr	r3, [pc, #112]	; (d5c28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5bb6:	681a      	ldr	r2, [r3, #0]
   d5bb8:	07d1      	lsls	r1, r2, #31
   d5bba:	bf5c      	itt	pl
   d5bbc:	2201      	movpl	r2, #1
   d5bbe:	601a      	strpl	r2, [r3, #0]
   d5bc0:	4b1a      	ldr	r3, [pc, #104]	; (d5c2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5bc2:	681a      	ldr	r2, [r3, #0]
   d5bc4:	07d2      	lsls	r2, r2, #31
   d5bc6:	bf5c      	itt	pl
   d5bc8:	2201      	movpl	r2, #1
   d5bca:	601a      	strpl	r2, [r3, #0]
   d5bcc:	4b18      	ldr	r3, [pc, #96]	; (d5c30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5bce:	681a      	ldr	r2, [r3, #0]
   d5bd0:	07d0      	lsls	r0, r2, #31
   d5bd2:	bf5c      	itt	pl
   d5bd4:	2201      	movpl	r2, #1
   d5bd6:	601a      	strpl	r2, [r3, #0]
   d5bd8:	4b16      	ldr	r3, [pc, #88]	; (d5c34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5bda:	681a      	ldr	r2, [r3, #0]
   d5bdc:	07d1      	lsls	r1, r2, #31
   d5bde:	bf5c      	itt	pl
   d5be0:	2201      	movpl	r2, #1
   d5be2:	601a      	strpl	r2, [r3, #0]
   d5be4:	4b14      	ldr	r3, [pc, #80]	; (d5c38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5be6:	681a      	ldr	r2, [r3, #0]
   d5be8:	07d2      	lsls	r2, r2, #31
   d5bea:	bf5c      	itt	pl
   d5bec:	2201      	movpl	r2, #1
   d5bee:	601a      	strpl	r2, [r3, #0]
   d5bf0:	4b12      	ldr	r3, [pc, #72]	; (d5c3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5bf2:	681a      	ldr	r2, [r3, #0]
   d5bf4:	07d0      	lsls	r0, r2, #31
   d5bf6:	bf5c      	itt	pl
   d5bf8:	2201      	movpl	r2, #1
   d5bfa:	601a      	strpl	r2, [r3, #0]
   d5bfc:	4b10      	ldr	r3, [pc, #64]	; (d5c40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5bfe:	681a      	ldr	r2, [r3, #0]
   d5c00:	07d1      	lsls	r1, r2, #31
   d5c02:	bf5c      	itt	pl
   d5c04:	2201      	movpl	r2, #1
   d5c06:	601a      	strpl	r2, [r3, #0]
   d5c08:	4b0e      	ldr	r3, [pc, #56]	; (d5c44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5c0a:	681a      	ldr	r2, [r3, #0]
   d5c0c:	07d2      	lsls	r2, r2, #31
   d5c0e:	bf5c      	itt	pl
   d5c10:	2201      	movpl	r2, #1
   d5c12:	601a      	strpl	r2, [r3, #0]
   d5c14:	4770      	bx	lr
   d5c16:	bf00      	nop
   d5c18:	2003e79c 	.word	0x2003e79c
   d5c1c:	2003e798 	.word	0x2003e798
   d5c20:	2003e794 	.word	0x2003e794
   d5c24:	2003e790 	.word	0x2003e790
   d5c28:	2003e78c 	.word	0x2003e78c
   d5c2c:	2003e788 	.word	0x2003e788
   d5c30:	2003e784 	.word	0x2003e784
   d5c34:	2003e780 	.word	0x2003e780
   d5c38:	2003e77c 	.word	0x2003e77c
   d5c3c:	2003e778 	.word	0x2003e778
   d5c40:	2003e774 	.word	0x2003e774
   d5c44:	2003e770 	.word	0x2003e770

000d5c48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5c48:	4b24      	ldr	r3, [pc, #144]	; (d5cdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5c4a:	681a      	ldr	r2, [r3, #0]
   d5c4c:	07d0      	lsls	r0, r2, #31
   d5c4e:	bf5c      	itt	pl
   d5c50:	2201      	movpl	r2, #1
   d5c52:	601a      	strpl	r2, [r3, #0]
   d5c54:	4b22      	ldr	r3, [pc, #136]	; (d5ce0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5c56:	681a      	ldr	r2, [r3, #0]
   d5c58:	07d1      	lsls	r1, r2, #31
   d5c5a:	bf5c      	itt	pl
   d5c5c:	2201      	movpl	r2, #1
   d5c5e:	601a      	strpl	r2, [r3, #0]
   d5c60:	4b20      	ldr	r3, [pc, #128]	; (d5ce4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5c62:	681a      	ldr	r2, [r3, #0]
   d5c64:	07d2      	lsls	r2, r2, #31
   d5c66:	bf5c      	itt	pl
   d5c68:	2201      	movpl	r2, #1
   d5c6a:	601a      	strpl	r2, [r3, #0]
   d5c6c:	4b1e      	ldr	r3, [pc, #120]	; (d5ce8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5c6e:	681a      	ldr	r2, [r3, #0]
   d5c70:	07d0      	lsls	r0, r2, #31
   d5c72:	bf5c      	itt	pl
   d5c74:	2201      	movpl	r2, #1
   d5c76:	601a      	strpl	r2, [r3, #0]
   d5c78:	4b1c      	ldr	r3, [pc, #112]	; (d5cec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5c7a:	681a      	ldr	r2, [r3, #0]
   d5c7c:	07d1      	lsls	r1, r2, #31
   d5c7e:	bf5c      	itt	pl
   d5c80:	2201      	movpl	r2, #1
   d5c82:	601a      	strpl	r2, [r3, #0]
   d5c84:	4b1a      	ldr	r3, [pc, #104]	; (d5cf0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5c86:	681a      	ldr	r2, [r3, #0]
   d5c88:	07d2      	lsls	r2, r2, #31
   d5c8a:	bf5c      	itt	pl
   d5c8c:	2201      	movpl	r2, #1
   d5c8e:	601a      	strpl	r2, [r3, #0]
   d5c90:	4b18      	ldr	r3, [pc, #96]	; (d5cf4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5c92:	681a      	ldr	r2, [r3, #0]
   d5c94:	07d0      	lsls	r0, r2, #31
   d5c96:	bf5c      	itt	pl
   d5c98:	2201      	movpl	r2, #1
   d5c9a:	601a      	strpl	r2, [r3, #0]
   d5c9c:	4b16      	ldr	r3, [pc, #88]	; (d5cf8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5c9e:	681a      	ldr	r2, [r3, #0]
   d5ca0:	07d1      	lsls	r1, r2, #31
   d5ca2:	bf5c      	itt	pl
   d5ca4:	2201      	movpl	r2, #1
   d5ca6:	601a      	strpl	r2, [r3, #0]
   d5ca8:	4b14      	ldr	r3, [pc, #80]	; (d5cfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5caa:	681a      	ldr	r2, [r3, #0]
   d5cac:	07d2      	lsls	r2, r2, #31
   d5cae:	bf5c      	itt	pl
   d5cb0:	2201      	movpl	r2, #1
   d5cb2:	601a      	strpl	r2, [r3, #0]
   d5cb4:	4b12      	ldr	r3, [pc, #72]	; (d5d00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5cb6:	681a      	ldr	r2, [r3, #0]
   d5cb8:	07d0      	lsls	r0, r2, #31
   d5cba:	bf5c      	itt	pl
   d5cbc:	2201      	movpl	r2, #1
   d5cbe:	601a      	strpl	r2, [r3, #0]
   d5cc0:	4b10      	ldr	r3, [pc, #64]	; (d5d04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5cc2:	681a      	ldr	r2, [r3, #0]
   d5cc4:	07d1      	lsls	r1, r2, #31
   d5cc6:	bf5c      	itt	pl
   d5cc8:	2201      	movpl	r2, #1
   d5cca:	601a      	strpl	r2, [r3, #0]
   d5ccc:	4b0e      	ldr	r3, [pc, #56]	; (d5d08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5cce:	681a      	ldr	r2, [r3, #0]
   d5cd0:	07d2      	lsls	r2, r2, #31
   d5cd2:	bf5c      	itt	pl
   d5cd4:	2201      	movpl	r2, #1
   d5cd6:	601a      	strpl	r2, [r3, #0]
   d5cd8:	4770      	bx	lr
   d5cda:	bf00      	nop
   d5cdc:	2003e7cc 	.word	0x2003e7cc
   d5ce0:	2003e7c8 	.word	0x2003e7c8
   d5ce4:	2003e7c4 	.word	0x2003e7c4
   d5ce8:	2003e7c0 	.word	0x2003e7c0
   d5cec:	2003e7bc 	.word	0x2003e7bc
   d5cf0:	2003e7b8 	.word	0x2003e7b8
   d5cf4:	2003e7b4 	.word	0x2003e7b4
   d5cf8:	2003e7b0 	.word	0x2003e7b0
   d5cfc:	2003e7ac 	.word	0x2003e7ac
   d5d00:	2003e7a8 	.word	0x2003e7a8
   d5d04:	2003e7a4 	.word	0x2003e7a4
   d5d08:	2003e7a0 	.word	0x2003e7a0

000d5d0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5d0c:	4b18      	ldr	r3, [pc, #96]	; (d5d70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5d0e:	681a      	ldr	r2, [r3, #0]
   d5d10:	07d1      	lsls	r1, r2, #31
   d5d12:	bf5c      	itt	pl
   d5d14:	2201      	movpl	r2, #1
   d5d16:	601a      	strpl	r2, [r3, #0]
   d5d18:	4b16      	ldr	r3, [pc, #88]	; (d5d74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5d1a:	681a      	ldr	r2, [r3, #0]
   d5d1c:	07d2      	lsls	r2, r2, #31
   d5d1e:	bf5c      	itt	pl
   d5d20:	2201      	movpl	r2, #1
   d5d22:	601a      	strpl	r2, [r3, #0]
   d5d24:	4b14      	ldr	r3, [pc, #80]	; (d5d78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5d26:	681a      	ldr	r2, [r3, #0]
   d5d28:	07d0      	lsls	r0, r2, #31
   d5d2a:	bf5c      	itt	pl
   d5d2c:	2201      	movpl	r2, #1
   d5d2e:	601a      	strpl	r2, [r3, #0]
   d5d30:	4b12      	ldr	r3, [pc, #72]	; (d5d7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5d32:	681a      	ldr	r2, [r3, #0]
   d5d34:	07d1      	lsls	r1, r2, #31
   d5d36:	bf5c      	itt	pl
   d5d38:	2201      	movpl	r2, #1
   d5d3a:	601a      	strpl	r2, [r3, #0]
   d5d3c:	4b10      	ldr	r3, [pc, #64]	; (d5d80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5d3e:	681a      	ldr	r2, [r3, #0]
   d5d40:	07d2      	lsls	r2, r2, #31
   d5d42:	bf5c      	itt	pl
   d5d44:	2201      	movpl	r2, #1
   d5d46:	601a      	strpl	r2, [r3, #0]
   d5d48:	4b0e      	ldr	r3, [pc, #56]	; (d5d84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5d4a:	681a      	ldr	r2, [r3, #0]
   d5d4c:	07d0      	lsls	r0, r2, #31
   d5d4e:	bf5c      	itt	pl
   d5d50:	2201      	movpl	r2, #1
   d5d52:	601a      	strpl	r2, [r3, #0]
   d5d54:	4b0c      	ldr	r3, [pc, #48]	; (d5d88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5d56:	681a      	ldr	r2, [r3, #0]
   d5d58:	07d1      	lsls	r1, r2, #31
   d5d5a:	bf5c      	itt	pl
   d5d5c:	2201      	movpl	r2, #1
   d5d5e:	601a      	strpl	r2, [r3, #0]
   d5d60:	4b0a      	ldr	r3, [pc, #40]	; (d5d8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5d62:	681a      	ldr	r2, [r3, #0]
   d5d64:	07d2      	lsls	r2, r2, #31
   d5d66:	bf5c      	itt	pl
   d5d68:	2201      	movpl	r2, #1
   d5d6a:	601a      	strpl	r2, [r3, #0]
   d5d6c:	4770      	bx	lr
   d5d6e:	bf00      	nop
   d5d70:	2003e7ec 	.word	0x2003e7ec
   d5d74:	2003e7e8 	.word	0x2003e7e8
   d5d78:	2003e7e4 	.word	0x2003e7e4
   d5d7c:	2003e7e0 	.word	0x2003e7e0
   d5d80:	2003e7dc 	.word	0x2003e7dc
   d5d84:	2003e7d8 	.word	0x2003e7d8
   d5d88:	2003e7d4 	.word	0x2003e7d4
   d5d8c:	2003e7d0 	.word	0x2003e7d0

000d5d90 <__aeabi_drsub>:
   d5d90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d5d94:	e002      	b.n	d5d9c <__adddf3>
   d5d96:	bf00      	nop

000d5d98 <__aeabi_dsub>:
   d5d98:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5d9c <__adddf3>:
   d5d9c:	b530      	push	{r4, r5, lr}
   d5d9e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d5da2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d5da6:	ea94 0f05 	teq	r4, r5
   d5daa:	bf08      	it	eq
   d5dac:	ea90 0f02 	teqeq	r0, r2
   d5db0:	bf1f      	itttt	ne
   d5db2:	ea54 0c00 	orrsne.w	ip, r4, r0
   d5db6:	ea55 0c02 	orrsne.w	ip, r5, r2
   d5dba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5dbe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5dc2:	f000 80e2 	beq.w	d5f8a <__adddf3+0x1ee>
   d5dc6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5dca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5dce:	bfb8      	it	lt
   d5dd0:	426d      	neglt	r5, r5
   d5dd2:	dd0c      	ble.n	d5dee <__adddf3+0x52>
   d5dd4:	442c      	add	r4, r5
   d5dd6:	ea80 0202 	eor.w	r2, r0, r2
   d5dda:	ea81 0303 	eor.w	r3, r1, r3
   d5dde:	ea82 0000 	eor.w	r0, r2, r0
   d5de2:	ea83 0101 	eor.w	r1, r3, r1
   d5de6:	ea80 0202 	eor.w	r2, r0, r2
   d5dea:	ea81 0303 	eor.w	r3, r1, r3
   d5dee:	2d36      	cmp	r5, #54	; 0x36
   d5df0:	bf88      	it	hi
   d5df2:	bd30      	pophi	{r4, r5, pc}
   d5df4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5df8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5dfc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d5e00:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d5e04:	d002      	beq.n	d5e0c <__adddf3+0x70>
   d5e06:	4240      	negs	r0, r0
   d5e08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5e0c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d5e10:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5e14:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d5e18:	d002      	beq.n	d5e20 <__adddf3+0x84>
   d5e1a:	4252      	negs	r2, r2
   d5e1c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d5e20:	ea94 0f05 	teq	r4, r5
   d5e24:	f000 80a7 	beq.w	d5f76 <__adddf3+0x1da>
   d5e28:	f1a4 0401 	sub.w	r4, r4, #1
   d5e2c:	f1d5 0e20 	rsbs	lr, r5, #32
   d5e30:	db0d      	blt.n	d5e4e <__adddf3+0xb2>
   d5e32:	fa02 fc0e 	lsl.w	ip, r2, lr
   d5e36:	fa22 f205 	lsr.w	r2, r2, r5
   d5e3a:	1880      	adds	r0, r0, r2
   d5e3c:	f141 0100 	adc.w	r1, r1, #0
   d5e40:	fa03 f20e 	lsl.w	r2, r3, lr
   d5e44:	1880      	adds	r0, r0, r2
   d5e46:	fa43 f305 	asr.w	r3, r3, r5
   d5e4a:	4159      	adcs	r1, r3
   d5e4c:	e00e      	b.n	d5e6c <__adddf3+0xd0>
   d5e4e:	f1a5 0520 	sub.w	r5, r5, #32
   d5e52:	f10e 0e20 	add.w	lr, lr, #32
   d5e56:	2a01      	cmp	r2, #1
   d5e58:	fa03 fc0e 	lsl.w	ip, r3, lr
   d5e5c:	bf28      	it	cs
   d5e5e:	f04c 0c02 	orrcs.w	ip, ip, #2
   d5e62:	fa43 f305 	asr.w	r3, r3, r5
   d5e66:	18c0      	adds	r0, r0, r3
   d5e68:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d5e6c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5e70:	d507      	bpl.n	d5e82 <__adddf3+0xe6>
   d5e72:	f04f 0e00 	mov.w	lr, #0
   d5e76:	f1dc 0c00 	rsbs	ip, ip, #0
   d5e7a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d5e7e:	eb6e 0101 	sbc.w	r1, lr, r1
   d5e82:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d5e86:	d31b      	bcc.n	d5ec0 <__adddf3+0x124>
   d5e88:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d5e8c:	d30c      	bcc.n	d5ea8 <__adddf3+0x10c>
   d5e8e:	0849      	lsrs	r1, r1, #1
   d5e90:	ea5f 0030 	movs.w	r0, r0, rrx
   d5e94:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d5e98:	f104 0401 	add.w	r4, r4, #1
   d5e9c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d5ea0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d5ea4:	f080 809a 	bcs.w	d5fdc <__adddf3+0x240>
   d5ea8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d5eac:	bf08      	it	eq
   d5eae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5eb2:	f150 0000 	adcs.w	r0, r0, #0
   d5eb6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5eba:	ea41 0105 	orr.w	r1, r1, r5
   d5ebe:	bd30      	pop	{r4, r5, pc}
   d5ec0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d5ec4:	4140      	adcs	r0, r0
   d5ec6:	eb41 0101 	adc.w	r1, r1, r1
   d5eca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5ece:	f1a4 0401 	sub.w	r4, r4, #1
   d5ed2:	d1e9      	bne.n	d5ea8 <__adddf3+0x10c>
   d5ed4:	f091 0f00 	teq	r1, #0
   d5ed8:	bf04      	itt	eq
   d5eda:	4601      	moveq	r1, r0
   d5edc:	2000      	moveq	r0, #0
   d5ede:	fab1 f381 	clz	r3, r1
   d5ee2:	bf08      	it	eq
   d5ee4:	3320      	addeq	r3, #32
   d5ee6:	f1a3 030b 	sub.w	r3, r3, #11
   d5eea:	f1b3 0220 	subs.w	r2, r3, #32
   d5eee:	da0c      	bge.n	d5f0a <__adddf3+0x16e>
   d5ef0:	320c      	adds	r2, #12
   d5ef2:	dd08      	ble.n	d5f06 <__adddf3+0x16a>
   d5ef4:	f102 0c14 	add.w	ip, r2, #20
   d5ef8:	f1c2 020c 	rsb	r2, r2, #12
   d5efc:	fa01 f00c 	lsl.w	r0, r1, ip
   d5f00:	fa21 f102 	lsr.w	r1, r1, r2
   d5f04:	e00c      	b.n	d5f20 <__adddf3+0x184>
   d5f06:	f102 0214 	add.w	r2, r2, #20
   d5f0a:	bfd8      	it	le
   d5f0c:	f1c2 0c20 	rsble	ip, r2, #32
   d5f10:	fa01 f102 	lsl.w	r1, r1, r2
   d5f14:	fa20 fc0c 	lsr.w	ip, r0, ip
   d5f18:	bfdc      	itt	le
   d5f1a:	ea41 010c 	orrle.w	r1, r1, ip
   d5f1e:	4090      	lslle	r0, r2
   d5f20:	1ae4      	subs	r4, r4, r3
   d5f22:	bfa2      	ittt	ge
   d5f24:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d5f28:	4329      	orrge	r1, r5
   d5f2a:	bd30      	popge	{r4, r5, pc}
   d5f2c:	ea6f 0404 	mvn.w	r4, r4
   d5f30:	3c1f      	subs	r4, #31
   d5f32:	da1c      	bge.n	d5f6e <__adddf3+0x1d2>
   d5f34:	340c      	adds	r4, #12
   d5f36:	dc0e      	bgt.n	d5f56 <__adddf3+0x1ba>
   d5f38:	f104 0414 	add.w	r4, r4, #20
   d5f3c:	f1c4 0220 	rsb	r2, r4, #32
   d5f40:	fa20 f004 	lsr.w	r0, r0, r4
   d5f44:	fa01 f302 	lsl.w	r3, r1, r2
   d5f48:	ea40 0003 	orr.w	r0, r0, r3
   d5f4c:	fa21 f304 	lsr.w	r3, r1, r4
   d5f50:	ea45 0103 	orr.w	r1, r5, r3
   d5f54:	bd30      	pop	{r4, r5, pc}
   d5f56:	f1c4 040c 	rsb	r4, r4, #12
   d5f5a:	f1c4 0220 	rsb	r2, r4, #32
   d5f5e:	fa20 f002 	lsr.w	r0, r0, r2
   d5f62:	fa01 f304 	lsl.w	r3, r1, r4
   d5f66:	ea40 0003 	orr.w	r0, r0, r3
   d5f6a:	4629      	mov	r1, r5
   d5f6c:	bd30      	pop	{r4, r5, pc}
   d5f6e:	fa21 f004 	lsr.w	r0, r1, r4
   d5f72:	4629      	mov	r1, r5
   d5f74:	bd30      	pop	{r4, r5, pc}
   d5f76:	f094 0f00 	teq	r4, #0
   d5f7a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d5f7e:	bf06      	itte	eq
   d5f80:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d5f84:	3401      	addeq	r4, #1
   d5f86:	3d01      	subne	r5, #1
   d5f88:	e74e      	b.n	d5e28 <__adddf3+0x8c>
   d5f8a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5f8e:	bf18      	it	ne
   d5f90:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5f94:	d029      	beq.n	d5fea <__adddf3+0x24e>
   d5f96:	ea94 0f05 	teq	r4, r5
   d5f9a:	bf08      	it	eq
   d5f9c:	ea90 0f02 	teqeq	r0, r2
   d5fa0:	d005      	beq.n	d5fae <__adddf3+0x212>
   d5fa2:	ea54 0c00 	orrs.w	ip, r4, r0
   d5fa6:	bf04      	itt	eq
   d5fa8:	4619      	moveq	r1, r3
   d5faa:	4610      	moveq	r0, r2
   d5fac:	bd30      	pop	{r4, r5, pc}
   d5fae:	ea91 0f03 	teq	r1, r3
   d5fb2:	bf1e      	ittt	ne
   d5fb4:	2100      	movne	r1, #0
   d5fb6:	2000      	movne	r0, #0
   d5fb8:	bd30      	popne	{r4, r5, pc}
   d5fba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d5fbe:	d105      	bne.n	d5fcc <__adddf3+0x230>
   d5fc0:	0040      	lsls	r0, r0, #1
   d5fc2:	4149      	adcs	r1, r1
   d5fc4:	bf28      	it	cs
   d5fc6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d5fca:	bd30      	pop	{r4, r5, pc}
   d5fcc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d5fd0:	bf3c      	itt	cc
   d5fd2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d5fd6:	bd30      	popcc	{r4, r5, pc}
   d5fd8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5fdc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d5fe0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5fe4:	f04f 0000 	mov.w	r0, #0
   d5fe8:	bd30      	pop	{r4, r5, pc}
   d5fea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5fee:	bf1a      	itte	ne
   d5ff0:	4619      	movne	r1, r3
   d5ff2:	4610      	movne	r0, r2
   d5ff4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d5ff8:	bf1c      	itt	ne
   d5ffa:	460b      	movne	r3, r1
   d5ffc:	4602      	movne	r2, r0
   d5ffe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6002:	bf06      	itte	eq
   d6004:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6008:	ea91 0f03 	teqeq	r1, r3
   d600c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6010:	bd30      	pop	{r4, r5, pc}
   d6012:	bf00      	nop

000d6014 <__aeabi_ui2d>:
   d6014:	f090 0f00 	teq	r0, #0
   d6018:	bf04      	itt	eq
   d601a:	2100      	moveq	r1, #0
   d601c:	4770      	bxeq	lr
   d601e:	b530      	push	{r4, r5, lr}
   d6020:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6024:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6028:	f04f 0500 	mov.w	r5, #0
   d602c:	f04f 0100 	mov.w	r1, #0
   d6030:	e750      	b.n	d5ed4 <__adddf3+0x138>
   d6032:	bf00      	nop

000d6034 <__aeabi_i2d>:
   d6034:	f090 0f00 	teq	r0, #0
   d6038:	bf04      	itt	eq
   d603a:	2100      	moveq	r1, #0
   d603c:	4770      	bxeq	lr
   d603e:	b530      	push	{r4, r5, lr}
   d6040:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6044:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6048:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d604c:	bf48      	it	mi
   d604e:	4240      	negmi	r0, r0
   d6050:	f04f 0100 	mov.w	r1, #0
   d6054:	e73e      	b.n	d5ed4 <__adddf3+0x138>
   d6056:	bf00      	nop

000d6058 <__aeabi_f2d>:
   d6058:	0042      	lsls	r2, r0, #1
   d605a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d605e:	ea4f 0131 	mov.w	r1, r1, rrx
   d6062:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d6066:	bf1f      	itttt	ne
   d6068:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d606c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6070:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6074:	4770      	bxne	lr
   d6076:	f092 0f00 	teq	r2, #0
   d607a:	bf14      	ite	ne
   d607c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6080:	4770      	bxeq	lr
   d6082:	b530      	push	{r4, r5, lr}
   d6084:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6088:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d608c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6090:	e720      	b.n	d5ed4 <__adddf3+0x138>
   d6092:	bf00      	nop

000d6094 <__aeabi_ul2d>:
   d6094:	ea50 0201 	orrs.w	r2, r0, r1
   d6098:	bf08      	it	eq
   d609a:	4770      	bxeq	lr
   d609c:	b530      	push	{r4, r5, lr}
   d609e:	f04f 0500 	mov.w	r5, #0
   d60a2:	e00a      	b.n	d60ba <__aeabi_l2d+0x16>

000d60a4 <__aeabi_l2d>:
   d60a4:	ea50 0201 	orrs.w	r2, r0, r1
   d60a8:	bf08      	it	eq
   d60aa:	4770      	bxeq	lr
   d60ac:	b530      	push	{r4, r5, lr}
   d60ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d60b2:	d502      	bpl.n	d60ba <__aeabi_l2d+0x16>
   d60b4:	4240      	negs	r0, r0
   d60b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d60ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d60be:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d60c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d60c6:	f43f aedc 	beq.w	d5e82 <__adddf3+0xe6>
   d60ca:	f04f 0203 	mov.w	r2, #3
   d60ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d60d2:	bf18      	it	ne
   d60d4:	3203      	addne	r2, #3
   d60d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d60da:	bf18      	it	ne
   d60dc:	3203      	addne	r2, #3
   d60de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d60e2:	f1c2 0320 	rsb	r3, r2, #32
   d60e6:	fa00 fc03 	lsl.w	ip, r0, r3
   d60ea:	fa20 f002 	lsr.w	r0, r0, r2
   d60ee:	fa01 fe03 	lsl.w	lr, r1, r3
   d60f2:	ea40 000e 	orr.w	r0, r0, lr
   d60f6:	fa21 f102 	lsr.w	r1, r1, r2
   d60fa:	4414      	add	r4, r2
   d60fc:	e6c1      	b.n	d5e82 <__adddf3+0xe6>
   d60fe:	bf00      	nop

000d6100 <__aeabi_dmul>:
   d6100:	b570      	push	{r4, r5, r6, lr}
   d6102:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6106:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d610a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d610e:	bf1d      	ittte	ne
   d6110:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6114:	ea94 0f0c 	teqne	r4, ip
   d6118:	ea95 0f0c 	teqne	r5, ip
   d611c:	f000 f8de 	bleq	d62dc <__aeabi_dmul+0x1dc>
   d6120:	442c      	add	r4, r5
   d6122:	ea81 0603 	eor.w	r6, r1, r3
   d6126:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d612a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d612e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d6132:	bf18      	it	ne
   d6134:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6138:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d613c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6140:	d038      	beq.n	d61b4 <__aeabi_dmul+0xb4>
   d6142:	fba0 ce02 	umull	ip, lr, r0, r2
   d6146:	f04f 0500 	mov.w	r5, #0
   d614a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d614e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6152:	fbe0 e503 	umlal	lr, r5, r0, r3
   d6156:	f04f 0600 	mov.w	r6, #0
   d615a:	fbe1 5603 	umlal	r5, r6, r1, r3
   d615e:	f09c 0f00 	teq	ip, #0
   d6162:	bf18      	it	ne
   d6164:	f04e 0e01 	orrne.w	lr, lr, #1
   d6168:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d616c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6170:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6174:	d204      	bcs.n	d6180 <__aeabi_dmul+0x80>
   d6176:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d617a:	416d      	adcs	r5, r5
   d617c:	eb46 0606 	adc.w	r6, r6, r6
   d6180:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6184:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6188:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d618c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6190:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6194:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6198:	bf88      	it	hi
   d619a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d619e:	d81e      	bhi.n	d61de <__aeabi_dmul+0xde>
   d61a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d61a4:	bf08      	it	eq
   d61a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d61aa:	f150 0000 	adcs.w	r0, r0, #0
   d61ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d61b2:	bd70      	pop	{r4, r5, r6, pc}
   d61b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d61b8:	ea46 0101 	orr.w	r1, r6, r1
   d61bc:	ea40 0002 	orr.w	r0, r0, r2
   d61c0:	ea81 0103 	eor.w	r1, r1, r3
   d61c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d61c8:	bfc2      	ittt	gt
   d61ca:	ebd4 050c 	rsbsgt	r5, r4, ip
   d61ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d61d2:	bd70      	popgt	{r4, r5, r6, pc}
   d61d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d61d8:	f04f 0e00 	mov.w	lr, #0
   d61dc:	3c01      	subs	r4, #1
   d61de:	f300 80ab 	bgt.w	d6338 <__aeabi_dmul+0x238>
   d61e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d61e6:	bfde      	ittt	le
   d61e8:	2000      	movle	r0, #0
   d61ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d61ee:	bd70      	pople	{r4, r5, r6, pc}
   d61f0:	f1c4 0400 	rsb	r4, r4, #0
   d61f4:	3c20      	subs	r4, #32
   d61f6:	da35      	bge.n	d6264 <__aeabi_dmul+0x164>
   d61f8:	340c      	adds	r4, #12
   d61fa:	dc1b      	bgt.n	d6234 <__aeabi_dmul+0x134>
   d61fc:	f104 0414 	add.w	r4, r4, #20
   d6200:	f1c4 0520 	rsb	r5, r4, #32
   d6204:	fa00 f305 	lsl.w	r3, r0, r5
   d6208:	fa20 f004 	lsr.w	r0, r0, r4
   d620c:	fa01 f205 	lsl.w	r2, r1, r5
   d6210:	ea40 0002 	orr.w	r0, r0, r2
   d6214:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6218:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d621c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6220:	fa21 f604 	lsr.w	r6, r1, r4
   d6224:	eb42 0106 	adc.w	r1, r2, r6
   d6228:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d622c:	bf08      	it	eq
   d622e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6232:	bd70      	pop	{r4, r5, r6, pc}
   d6234:	f1c4 040c 	rsb	r4, r4, #12
   d6238:	f1c4 0520 	rsb	r5, r4, #32
   d623c:	fa00 f304 	lsl.w	r3, r0, r4
   d6240:	fa20 f005 	lsr.w	r0, r0, r5
   d6244:	fa01 f204 	lsl.w	r2, r1, r4
   d6248:	ea40 0002 	orr.w	r0, r0, r2
   d624c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6250:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6254:	f141 0100 	adc.w	r1, r1, #0
   d6258:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d625c:	bf08      	it	eq
   d625e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6262:	bd70      	pop	{r4, r5, r6, pc}
   d6264:	f1c4 0520 	rsb	r5, r4, #32
   d6268:	fa00 f205 	lsl.w	r2, r0, r5
   d626c:	ea4e 0e02 	orr.w	lr, lr, r2
   d6270:	fa20 f304 	lsr.w	r3, r0, r4
   d6274:	fa01 f205 	lsl.w	r2, r1, r5
   d6278:	ea43 0302 	orr.w	r3, r3, r2
   d627c:	fa21 f004 	lsr.w	r0, r1, r4
   d6280:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6284:	fa21 f204 	lsr.w	r2, r1, r4
   d6288:	ea20 0002 	bic.w	r0, r0, r2
   d628c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6290:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6294:	bf08      	it	eq
   d6296:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d629a:	bd70      	pop	{r4, r5, r6, pc}
   d629c:	f094 0f00 	teq	r4, #0
   d62a0:	d10f      	bne.n	d62c2 <__aeabi_dmul+0x1c2>
   d62a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d62a6:	0040      	lsls	r0, r0, #1
   d62a8:	eb41 0101 	adc.w	r1, r1, r1
   d62ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d62b0:	bf08      	it	eq
   d62b2:	3c01      	subeq	r4, #1
   d62b4:	d0f7      	beq.n	d62a6 <__aeabi_dmul+0x1a6>
   d62b6:	ea41 0106 	orr.w	r1, r1, r6
   d62ba:	f095 0f00 	teq	r5, #0
   d62be:	bf18      	it	ne
   d62c0:	4770      	bxne	lr
   d62c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d62c6:	0052      	lsls	r2, r2, #1
   d62c8:	eb43 0303 	adc.w	r3, r3, r3
   d62cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d62d0:	bf08      	it	eq
   d62d2:	3d01      	subeq	r5, #1
   d62d4:	d0f7      	beq.n	d62c6 <__aeabi_dmul+0x1c6>
   d62d6:	ea43 0306 	orr.w	r3, r3, r6
   d62da:	4770      	bx	lr
   d62dc:	ea94 0f0c 	teq	r4, ip
   d62e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d62e4:	bf18      	it	ne
   d62e6:	ea95 0f0c 	teqne	r5, ip
   d62ea:	d00c      	beq.n	d6306 <__aeabi_dmul+0x206>
   d62ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d62f0:	bf18      	it	ne
   d62f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d62f6:	d1d1      	bne.n	d629c <__aeabi_dmul+0x19c>
   d62f8:	ea81 0103 	eor.w	r1, r1, r3
   d62fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6300:	f04f 0000 	mov.w	r0, #0
   d6304:	bd70      	pop	{r4, r5, r6, pc}
   d6306:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d630a:	bf06      	itte	eq
   d630c:	4610      	moveq	r0, r2
   d630e:	4619      	moveq	r1, r3
   d6310:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6314:	d019      	beq.n	d634a <__aeabi_dmul+0x24a>
   d6316:	ea94 0f0c 	teq	r4, ip
   d631a:	d102      	bne.n	d6322 <__aeabi_dmul+0x222>
   d631c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6320:	d113      	bne.n	d634a <__aeabi_dmul+0x24a>
   d6322:	ea95 0f0c 	teq	r5, ip
   d6326:	d105      	bne.n	d6334 <__aeabi_dmul+0x234>
   d6328:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d632c:	bf1c      	itt	ne
   d632e:	4610      	movne	r0, r2
   d6330:	4619      	movne	r1, r3
   d6332:	d10a      	bne.n	d634a <__aeabi_dmul+0x24a>
   d6334:	ea81 0103 	eor.w	r1, r1, r3
   d6338:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d633c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6340:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6344:	f04f 0000 	mov.w	r0, #0
   d6348:	bd70      	pop	{r4, r5, r6, pc}
   d634a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d634e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d6352:	bd70      	pop	{r4, r5, r6, pc}

000d6354 <__aeabi_ddiv>:
   d6354:	b570      	push	{r4, r5, r6, lr}
   d6356:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d635a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d635e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6362:	bf1d      	ittte	ne
   d6364:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6368:	ea94 0f0c 	teqne	r4, ip
   d636c:	ea95 0f0c 	teqne	r5, ip
   d6370:	f000 f8a7 	bleq	d64c2 <__aeabi_ddiv+0x16e>
   d6374:	eba4 0405 	sub.w	r4, r4, r5
   d6378:	ea81 0e03 	eor.w	lr, r1, r3
   d637c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6380:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6384:	f000 8088 	beq.w	d6498 <__aeabi_ddiv+0x144>
   d6388:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d638c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6390:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6394:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6398:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d639c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d63a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d63a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d63a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d63ac:	429d      	cmp	r5, r3
   d63ae:	bf08      	it	eq
   d63b0:	4296      	cmpeq	r6, r2
   d63b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d63b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d63ba:	d202      	bcs.n	d63c2 <__aeabi_ddiv+0x6e>
   d63bc:	085b      	lsrs	r3, r3, #1
   d63be:	ea4f 0232 	mov.w	r2, r2, rrx
   d63c2:	1ab6      	subs	r6, r6, r2
   d63c4:	eb65 0503 	sbc.w	r5, r5, r3
   d63c8:	085b      	lsrs	r3, r3, #1
   d63ca:	ea4f 0232 	mov.w	r2, r2, rrx
   d63ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d63d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d63d6:	ebb6 0e02 	subs.w	lr, r6, r2
   d63da:	eb75 0e03 	sbcs.w	lr, r5, r3
   d63de:	bf22      	ittt	cs
   d63e0:	1ab6      	subcs	r6, r6, r2
   d63e2:	4675      	movcs	r5, lr
   d63e4:	ea40 000c 	orrcs.w	r0, r0, ip
   d63e8:	085b      	lsrs	r3, r3, #1
   d63ea:	ea4f 0232 	mov.w	r2, r2, rrx
   d63ee:	ebb6 0e02 	subs.w	lr, r6, r2
   d63f2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d63f6:	bf22      	ittt	cs
   d63f8:	1ab6      	subcs	r6, r6, r2
   d63fa:	4675      	movcs	r5, lr
   d63fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6400:	085b      	lsrs	r3, r3, #1
   d6402:	ea4f 0232 	mov.w	r2, r2, rrx
   d6406:	ebb6 0e02 	subs.w	lr, r6, r2
   d640a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d640e:	bf22      	ittt	cs
   d6410:	1ab6      	subcs	r6, r6, r2
   d6412:	4675      	movcs	r5, lr
   d6414:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6418:	085b      	lsrs	r3, r3, #1
   d641a:	ea4f 0232 	mov.w	r2, r2, rrx
   d641e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6422:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6426:	bf22      	ittt	cs
   d6428:	1ab6      	subcs	r6, r6, r2
   d642a:	4675      	movcs	r5, lr
   d642c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6430:	ea55 0e06 	orrs.w	lr, r5, r6
   d6434:	d018      	beq.n	d6468 <__aeabi_ddiv+0x114>
   d6436:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d643a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d643e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6442:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d6446:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d644a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d644e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d6452:	d1c0      	bne.n	d63d6 <__aeabi_ddiv+0x82>
   d6454:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6458:	d10b      	bne.n	d6472 <__aeabi_ddiv+0x11e>
   d645a:	ea41 0100 	orr.w	r1, r1, r0
   d645e:	f04f 0000 	mov.w	r0, #0
   d6462:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d6466:	e7b6      	b.n	d63d6 <__aeabi_ddiv+0x82>
   d6468:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d646c:	bf04      	itt	eq
   d646e:	4301      	orreq	r1, r0
   d6470:	2000      	moveq	r0, #0
   d6472:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6476:	bf88      	it	hi
   d6478:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d647c:	f63f aeaf 	bhi.w	d61de <__aeabi_dmul+0xde>
   d6480:	ebb5 0c03 	subs.w	ip, r5, r3
   d6484:	bf04      	itt	eq
   d6486:	ebb6 0c02 	subseq.w	ip, r6, r2
   d648a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d648e:	f150 0000 	adcs.w	r0, r0, #0
   d6492:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6496:	bd70      	pop	{r4, r5, r6, pc}
   d6498:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d649c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d64a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d64a4:	bfc2      	ittt	gt
   d64a6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d64aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d64ae:	bd70      	popgt	{r4, r5, r6, pc}
   d64b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d64b4:	f04f 0e00 	mov.w	lr, #0
   d64b8:	3c01      	subs	r4, #1
   d64ba:	e690      	b.n	d61de <__aeabi_dmul+0xde>
   d64bc:	ea45 0e06 	orr.w	lr, r5, r6
   d64c0:	e68d      	b.n	d61de <__aeabi_dmul+0xde>
   d64c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d64c6:	ea94 0f0c 	teq	r4, ip
   d64ca:	bf08      	it	eq
   d64cc:	ea95 0f0c 	teqeq	r5, ip
   d64d0:	f43f af3b 	beq.w	d634a <__aeabi_dmul+0x24a>
   d64d4:	ea94 0f0c 	teq	r4, ip
   d64d8:	d10a      	bne.n	d64f0 <__aeabi_ddiv+0x19c>
   d64da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d64de:	f47f af34 	bne.w	d634a <__aeabi_dmul+0x24a>
   d64e2:	ea95 0f0c 	teq	r5, ip
   d64e6:	f47f af25 	bne.w	d6334 <__aeabi_dmul+0x234>
   d64ea:	4610      	mov	r0, r2
   d64ec:	4619      	mov	r1, r3
   d64ee:	e72c      	b.n	d634a <__aeabi_dmul+0x24a>
   d64f0:	ea95 0f0c 	teq	r5, ip
   d64f4:	d106      	bne.n	d6504 <__aeabi_ddiv+0x1b0>
   d64f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d64fa:	f43f aefd 	beq.w	d62f8 <__aeabi_dmul+0x1f8>
   d64fe:	4610      	mov	r0, r2
   d6500:	4619      	mov	r1, r3
   d6502:	e722      	b.n	d634a <__aeabi_dmul+0x24a>
   d6504:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6508:	bf18      	it	ne
   d650a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d650e:	f47f aec5 	bne.w	d629c <__aeabi_dmul+0x19c>
   d6512:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d6516:	f47f af0d 	bne.w	d6334 <__aeabi_dmul+0x234>
   d651a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d651e:	f47f aeeb 	bne.w	d62f8 <__aeabi_dmul+0x1f8>
   d6522:	e712      	b.n	d634a <__aeabi_dmul+0x24a>

000d6524 <__gedf2>:
   d6524:	f04f 3cff 	mov.w	ip, #4294967295
   d6528:	e006      	b.n	d6538 <__cmpdf2+0x4>
   d652a:	bf00      	nop

000d652c <__ledf2>:
   d652c:	f04f 0c01 	mov.w	ip, #1
   d6530:	e002      	b.n	d6538 <__cmpdf2+0x4>
   d6532:	bf00      	nop

000d6534 <__cmpdf2>:
   d6534:	f04f 0c01 	mov.w	ip, #1
   d6538:	f84d cd04 	str.w	ip, [sp, #-4]!
   d653c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6540:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6544:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6548:	bf18      	it	ne
   d654a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d654e:	d01b      	beq.n	d6588 <__cmpdf2+0x54>
   d6550:	b001      	add	sp, #4
   d6552:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d6556:	bf0c      	ite	eq
   d6558:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d655c:	ea91 0f03 	teqne	r1, r3
   d6560:	bf02      	ittt	eq
   d6562:	ea90 0f02 	teqeq	r0, r2
   d6566:	2000      	moveq	r0, #0
   d6568:	4770      	bxeq	lr
   d656a:	f110 0f00 	cmn.w	r0, #0
   d656e:	ea91 0f03 	teq	r1, r3
   d6572:	bf58      	it	pl
   d6574:	4299      	cmppl	r1, r3
   d6576:	bf08      	it	eq
   d6578:	4290      	cmpeq	r0, r2
   d657a:	bf2c      	ite	cs
   d657c:	17d8      	asrcs	r0, r3, #31
   d657e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d6582:	f040 0001 	orr.w	r0, r0, #1
   d6586:	4770      	bx	lr
   d6588:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d658c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6590:	d102      	bne.n	d6598 <__cmpdf2+0x64>
   d6592:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6596:	d107      	bne.n	d65a8 <__cmpdf2+0x74>
   d6598:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d659c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d65a0:	d1d6      	bne.n	d6550 <__cmpdf2+0x1c>
   d65a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d65a6:	d0d3      	beq.n	d6550 <__cmpdf2+0x1c>
   d65a8:	f85d 0b04 	ldr.w	r0, [sp], #4
   d65ac:	4770      	bx	lr
   d65ae:	bf00      	nop

000d65b0 <__aeabi_cdrcmple>:
   d65b0:	4684      	mov	ip, r0
   d65b2:	4610      	mov	r0, r2
   d65b4:	4662      	mov	r2, ip
   d65b6:	468c      	mov	ip, r1
   d65b8:	4619      	mov	r1, r3
   d65ba:	4663      	mov	r3, ip
   d65bc:	e000      	b.n	d65c0 <__aeabi_cdcmpeq>
   d65be:	bf00      	nop

000d65c0 <__aeabi_cdcmpeq>:
   d65c0:	b501      	push	{r0, lr}
   d65c2:	f7ff ffb7 	bl	d6534 <__cmpdf2>
   d65c6:	2800      	cmp	r0, #0
   d65c8:	bf48      	it	mi
   d65ca:	f110 0f00 	cmnmi.w	r0, #0
   d65ce:	bd01      	pop	{r0, pc}

000d65d0 <__aeabi_dcmpeq>:
   d65d0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d65d4:	f7ff fff4 	bl	d65c0 <__aeabi_cdcmpeq>
   d65d8:	bf0c      	ite	eq
   d65da:	2001      	moveq	r0, #1
   d65dc:	2000      	movne	r0, #0
   d65de:	f85d fb08 	ldr.w	pc, [sp], #8
   d65e2:	bf00      	nop

000d65e4 <__aeabi_dcmplt>:
   d65e4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d65e8:	f7ff ffea 	bl	d65c0 <__aeabi_cdcmpeq>
   d65ec:	bf34      	ite	cc
   d65ee:	2001      	movcc	r0, #1
   d65f0:	2000      	movcs	r0, #0
   d65f2:	f85d fb08 	ldr.w	pc, [sp], #8
   d65f6:	bf00      	nop

000d65f8 <__aeabi_dcmple>:
   d65f8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d65fc:	f7ff ffe0 	bl	d65c0 <__aeabi_cdcmpeq>
   d6600:	bf94      	ite	ls
   d6602:	2001      	movls	r0, #1
   d6604:	2000      	movhi	r0, #0
   d6606:	f85d fb08 	ldr.w	pc, [sp], #8
   d660a:	bf00      	nop

000d660c <__aeabi_dcmpge>:
   d660c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6610:	f7ff ffce 	bl	d65b0 <__aeabi_cdrcmple>
   d6614:	bf94      	ite	ls
   d6616:	2001      	movls	r0, #1
   d6618:	2000      	movhi	r0, #0
   d661a:	f85d fb08 	ldr.w	pc, [sp], #8
   d661e:	bf00      	nop

000d6620 <__aeabi_dcmpgt>:
   d6620:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6624:	f7ff ffc4 	bl	d65b0 <__aeabi_cdrcmple>
   d6628:	bf34      	ite	cc
   d662a:	2001      	movcc	r0, #1
   d662c:	2000      	movcs	r0, #0
   d662e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6632:	bf00      	nop

000d6634 <__aeabi_dcmpun>:
   d6634:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6638:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d663c:	d102      	bne.n	d6644 <__aeabi_dcmpun+0x10>
   d663e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6642:	d10a      	bne.n	d665a <__aeabi_dcmpun+0x26>
   d6644:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6648:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d664c:	d102      	bne.n	d6654 <__aeabi_dcmpun+0x20>
   d664e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6652:	d102      	bne.n	d665a <__aeabi_dcmpun+0x26>
   d6654:	f04f 0000 	mov.w	r0, #0
   d6658:	4770      	bx	lr
   d665a:	f04f 0001 	mov.w	r0, #1
   d665e:	4770      	bx	lr

000d6660 <__aeabi_d2iz>:
   d6660:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6664:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6668:	d215      	bcs.n	d6696 <__aeabi_d2iz+0x36>
   d666a:	d511      	bpl.n	d6690 <__aeabi_d2iz+0x30>
   d666c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6670:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6674:	d912      	bls.n	d669c <__aeabi_d2iz+0x3c>
   d6676:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d667a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d667e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6682:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6686:	fa23 f002 	lsr.w	r0, r3, r2
   d668a:	bf18      	it	ne
   d668c:	4240      	negne	r0, r0
   d668e:	4770      	bx	lr
   d6690:	f04f 0000 	mov.w	r0, #0
   d6694:	4770      	bx	lr
   d6696:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d669a:	d105      	bne.n	d66a8 <__aeabi_d2iz+0x48>
   d669c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d66a0:	bf08      	it	eq
   d66a2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d66a6:	4770      	bx	lr
   d66a8:	f04f 0000 	mov.w	r0, #0
   d66ac:	4770      	bx	lr
   d66ae:	bf00      	nop

000d66b0 <__aeabi_d2uiz>:
   d66b0:	004a      	lsls	r2, r1, #1
   d66b2:	d211      	bcs.n	d66d8 <__aeabi_d2uiz+0x28>
   d66b4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d66b8:	d211      	bcs.n	d66de <__aeabi_d2uiz+0x2e>
   d66ba:	d50d      	bpl.n	d66d8 <__aeabi_d2uiz+0x28>
   d66bc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d66c0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d66c4:	d40e      	bmi.n	d66e4 <__aeabi_d2uiz+0x34>
   d66c6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d66ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d66ce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d66d2:	fa23 f002 	lsr.w	r0, r3, r2
   d66d6:	4770      	bx	lr
   d66d8:	f04f 0000 	mov.w	r0, #0
   d66dc:	4770      	bx	lr
   d66de:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d66e2:	d102      	bne.n	d66ea <__aeabi_d2uiz+0x3a>
   d66e4:	f04f 30ff 	mov.w	r0, #4294967295
   d66e8:	4770      	bx	lr
   d66ea:	f04f 0000 	mov.w	r0, #0
   d66ee:	4770      	bx	lr

000d66f0 <__aeabi_d2f>:
   d66f0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d66f4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d66f8:	bf24      	itt	cs
   d66fa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d66fe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d6702:	d90d      	bls.n	d6720 <__aeabi_d2f+0x30>
   d6704:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d6708:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d670c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d6710:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d6714:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d6718:	bf08      	it	eq
   d671a:	f020 0001 	biceq.w	r0, r0, #1
   d671e:	4770      	bx	lr
   d6720:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d6724:	d121      	bne.n	d676a <__aeabi_d2f+0x7a>
   d6726:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d672a:	bfbc      	itt	lt
   d672c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d6730:	4770      	bxlt	lr
   d6732:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6736:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d673a:	f1c2 0218 	rsb	r2, r2, #24
   d673e:	f1c2 0c20 	rsb	ip, r2, #32
   d6742:	fa10 f30c 	lsls.w	r3, r0, ip
   d6746:	fa20 f002 	lsr.w	r0, r0, r2
   d674a:	bf18      	it	ne
   d674c:	f040 0001 	orrne.w	r0, r0, #1
   d6750:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6754:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d6758:	fa03 fc0c 	lsl.w	ip, r3, ip
   d675c:	ea40 000c 	orr.w	r0, r0, ip
   d6760:	fa23 f302 	lsr.w	r3, r3, r2
   d6764:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d6768:	e7cc      	b.n	d6704 <__aeabi_d2f+0x14>
   d676a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d676e:	d107      	bne.n	d6780 <__aeabi_d2f+0x90>
   d6770:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d6774:	bf1e      	ittt	ne
   d6776:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d677a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d677e:	4770      	bxne	lr
   d6780:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d6784:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d6788:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d678c:	4770      	bx	lr
   d678e:	bf00      	nop

000d6790 <__cxa_atexit>:
   d6790:	b510      	push	{r4, lr}
   d6792:	4c05      	ldr	r4, [pc, #20]	; (d67a8 <__cxa_atexit+0x18>)
   d6794:	4613      	mov	r3, r2
   d6796:	b12c      	cbz	r4, d67a4 <__cxa_atexit+0x14>
   d6798:	460a      	mov	r2, r1
   d679a:	4601      	mov	r1, r0
   d679c:	2002      	movs	r0, #2
   d679e:	f3af 8000 	nop.w
   d67a2:	bd10      	pop	{r4, pc}
   d67a4:	4620      	mov	r0, r4
   d67a6:	bd10      	pop	{r4, pc}
   d67a8:	00000000 	.word	0x00000000

000d67ac <memcpy>:
   d67ac:	b510      	push	{r4, lr}
   d67ae:	1e43      	subs	r3, r0, #1
   d67b0:	440a      	add	r2, r1
   d67b2:	4291      	cmp	r1, r2
   d67b4:	d004      	beq.n	d67c0 <memcpy+0x14>
   d67b6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d67ba:	f803 4f01 	strb.w	r4, [r3, #1]!
   d67be:	e7f8      	b.n	d67b2 <memcpy+0x6>
   d67c0:	bd10      	pop	{r4, pc}

000d67c2 <memset>:
   d67c2:	4402      	add	r2, r0
   d67c4:	4603      	mov	r3, r0
   d67c6:	4293      	cmp	r3, r2
   d67c8:	d002      	beq.n	d67d0 <memset+0xe>
   d67ca:	f803 1b01 	strb.w	r1, [r3], #1
   d67ce:	e7fa      	b.n	d67c6 <memset+0x4>
   d67d0:	4770      	bx	lr
	...

000d67d4 <srand>:
   d67d4:	b538      	push	{r3, r4, r5, lr}
   d67d6:	4b12      	ldr	r3, [pc, #72]	; (d6820 <srand+0x4c>)
   d67d8:	681c      	ldr	r4, [r3, #0]
   d67da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d67dc:	4605      	mov	r5, r0
   d67de:	b9d3      	cbnz	r3, d6816 <srand+0x42>
   d67e0:	2018      	movs	r0, #24
   d67e2:	f7fd ffb9 	bl	d4758 <malloc>
   d67e6:	f243 330e 	movw	r3, #13070	; 0x330e
   d67ea:	63a0      	str	r0, [r4, #56]	; 0x38
   d67ec:	8003      	strh	r3, [r0, #0]
   d67ee:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d67f2:	8043      	strh	r3, [r0, #2]
   d67f4:	f241 2334 	movw	r3, #4660	; 0x1234
   d67f8:	8083      	strh	r3, [r0, #4]
   d67fa:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d67fe:	80c3      	strh	r3, [r0, #6]
   d6800:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6804:	8103      	strh	r3, [r0, #8]
   d6806:	2305      	movs	r3, #5
   d6808:	8143      	strh	r3, [r0, #10]
   d680a:	230b      	movs	r3, #11
   d680c:	8183      	strh	r3, [r0, #12]
   d680e:	2201      	movs	r2, #1
   d6810:	2300      	movs	r3, #0
   d6812:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6816:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6818:	2200      	movs	r2, #0
   d681a:	611d      	str	r5, [r3, #16]
   d681c:	615a      	str	r2, [r3, #20]
   d681e:	bd38      	pop	{r3, r4, r5, pc}
   d6820:	2003e378 	.word	0x2003e378

000d6824 <strdup>:
   d6824:	4b02      	ldr	r3, [pc, #8]	; (d6830 <strdup+0xc>)
   d6826:	4601      	mov	r1, r0
   d6828:	6818      	ldr	r0, [r3, #0]
   d682a:	f000 b803 	b.w	d6834 <_strdup_r>
   d682e:	bf00      	nop
   d6830:	2003e378 	.word	0x2003e378

000d6834 <_strdup_r>:
   d6834:	b570      	push	{r4, r5, r6, lr}
   d6836:	4606      	mov	r6, r0
   d6838:	4608      	mov	r0, r1
   d683a:	460c      	mov	r4, r1
   d683c:	f000 f80d 	bl	d685a <strlen>
   d6840:	1c45      	adds	r5, r0, #1
   d6842:	4629      	mov	r1, r5
   d6844:	4630      	mov	r0, r6
   d6846:	f7fd ffa7 	bl	d4798 <_malloc_r>
   d684a:	4606      	mov	r6, r0
   d684c:	b118      	cbz	r0, d6856 <_strdup_r+0x22>
   d684e:	462a      	mov	r2, r5
   d6850:	4621      	mov	r1, r4
   d6852:	f7ff ffab 	bl	d67ac <memcpy>
   d6856:	4630      	mov	r0, r6
   d6858:	bd70      	pop	{r4, r5, r6, pc}

000d685a <strlen>:
   d685a:	4603      	mov	r3, r0
   d685c:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6860:	2a00      	cmp	r2, #0
   d6862:	d1fb      	bne.n	d685c <strlen+0x2>
   d6864:	1a18      	subs	r0, r3, r0
   d6866:	3801      	subs	r0, #1
   d6868:	4770      	bx	lr

000d686a <link_code_end>:
	...

000d686c <dynalib_user>:
   d686c:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d687c:	0000 0000 7774 6c69 6f69 735f 736d 5300     ....twilio_sms.S
   d688c:	6e65 6964 676e 654d 7373 6761 0065 6f59     endingMessage.Yo
   d689c:	7275 6320 6968 646c 6920 2073 6e69 7420     ur child is in t
   d68ac:	6568 6320 7261 0021                         he car!.

000d68b4 <_ZTVN5spark13EthernetClassE>:
	...
   d68bc:	4807 000d 47fd 000d 47f3 000d 47e9 000d     .H...G...G...G..
   d68cc:	47dd 000d 47d1 000d 47c5 000d 47bd 000d     .G...G...G...G..
   d68dc:	47b3 000d 47a9 000d 5911 000d               .G...G...Y..

000d68e8 <_ZTV8SPIClass>:
	...
   d68f0:	4825 000d 4827 000d 616e 006e 766f 0066     %H..'H..nan.ovf.
   d6900:	002e 6e69 0066 6162 6475 5300 7265 6169     ..inf.baud.Seria
   d6910:	006c 6553 6972 6c61 0031 7974 6570 7000     l.Serial1.type.p
   d6920:	7261 6d61 6300 646d 6900 0064 6e68 0064     aram.cmd.id.hnd.
   d6930:	7473 6d72 6600 6c69 0074 766c 006c 6461     strm.filt.lvl.ad
   d6940:	4864 6e61 6c64 7265 7200 6d65 766f 4865     dHandler.removeH
   d6950:	6e61 6c64 7265 6500 756e 486d 6e61 6c64     andler.enumHandl
   d6960:	7265 0073 534a 4e4f 7453 6572 6d61 6f4c     ers.JSONStreamLo
   d6970:	4867 6e61 6c64 7265 6100 7070 2500 3130     gHandler.app.%01
   d6980:	7530 0020 205d 2500 0064 202c 2800 3a29     0u .] .%d., .():
   d6990:	0020 5b20 6300 646f 2065 203d 2500 0069      . [.code = .%i.
   d69a0:	6564 6174 6c69 2073 203d 0d00 000a 6e6c     details = ....ln
   d69b0:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
   d69c0:	6f6e 656e 7400 6172 6563 6900 666e 006f     none.trace.info.
   d69d0:	6177 6e72 6500 7272 726f 7000 6e61 6369     warn.error.panic
   d69e0:	6100 6c6c 5a00 2500 302b 6433 253a 3230     .all.Z.%+03d:%02
   d69f0:	0075 5925 252d 2d6d 6425 2554 3a48 4d25     u.%Y-%m-%dT%H:%M
   d6a00:	253a 2553 007a 7361 7463 6d69 0065 0000     :%S%z.asctime...

000d6a10 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d6a18:	4d49 000d 4d4f 000d 4d93 000d 4d5d 000d     IM..OM...M..]M..
   d6a28:	4d4b 000d                                   KM..

000d6a2c <_ZTV9IPAddress>:
	...
   d6a34:	52e1 000d 52d1 000d 52d3 000d               .R...R...R..

000d6a40 <_ZTV9USBSerial>:
	...
   d6a48:	53b9 000d 5409 000d 5417 000d 4989 000d     .S...T...T...I..
   d6a58:	53f5 000d 53bb 000d 53d1 000d 5403 000d     .S...S...S...T..
   d6a68:	53e7 000d 53b5 000d                         .S...S..

000d6a70 <_ZTVN5spark13CellularClassE>:
	...
   d6a78:	5523 000d 5519 000d 550f 000d 54c5 000d     #U...U...U...T..
   d6a88:	5503 000d 54f7 000d 54eb 000d 54e3 000d     .U...T...T...T..
   d6a98:	54d9 000d 54cf 000d 5911 000d               .T...T...Y..

000d6aa4 <_ZTV11USARTSerial>:
	...
   d6aac:	555d 000d 55ad 000d 55bb 000d 4989 000d     ]U...U...U...I..
   d6abc:	5571 000d 5593 000d 557f 000d 55a7 000d     qU...U...U...U..
   d6acc:	555f 000d 5563 000d                         _U..cU..

000d6ad4 <_ZTV7TwoWire>:
	...
   d6adc:	5689 000d 56d3 000d 56ab 000d 568b 000d     .V...V...V...V..
   d6aec:	56b3 000d 56bb 000d 56c3 000d 56cb 000d     .V...V...V...V..

000d6afc <_ZTVN5spark9MeshClassE>:
	...
   d6b04:	57a5 000d 579b 000d 5791 000d 5787 000d     .W...W...W...W..
   d6b14:	577b 000d 576f 000d 5763 000d 575b 000d     {W..oW..cW..[W..
   d6b24:	5751 000d 5747 000d 5911 000d               QW..GW...Y..

000d6b30 <_ZTVN5spark12NetworkClassE>:
	...
   d6b38:	58a9 000d 58b3 000d 58bd 000d 58c7 000d     .X...X...X...X..
   d6b48:	58d1 000d 58dd 000d 58e9 000d 58f5 000d     .X...X...X...X..
   d6b58:	58fd 000d 5907 000d 5911 000d               .X...Y...Y..

000d6b64 <__sf_fake_stdin>:
	...

000d6b84 <__sf_fake_stdout>:
	...

000d6ba4 <__sf_fake_stderr>:
	...
   d6bc4:	0043                                        C.

000d6bc6 <link_const_variable_data_end>:
	...

000d6bc8 <link_constructors_location>:
   d6bc8:	000d41b5 	.word	0x000d41b5
   d6bcc:	000d438d 	.word	0x000d438d
   d6bd0:	000d4811 	.word	0x000d4811
   d6bd4:	000d4865 	.word	0x000d4865
   d6bd8:	000d4979 	.word	0x000d4979
   d6bdc:	000d4bf1 	.word	0x000d4bf1
   d6be0:	000d4c01 	.word	0x000d4c01
   d6be4:	000d4c59 	.word	0x000d4c59
   d6be8:	000d552d 	.word	0x000d552d
   d6bec:	000d5859 	.word	0x000d5859
   d6bf0:	000d59dd 	.word	0x000d59dd
   d6bf4:	000d5a69 	.word	0x000d5a69
   d6bf8:	000d5b01 	.word	0x000d5b01
   d6bfc:	000d5b85 	.word	0x000d5b85
   d6c00:	000d5c49 	.word	0x000d5c49
   d6c04:	000d5d0d 	.word	0x000d5d0d

000d6c08 <link_constructors_end>:
	...
