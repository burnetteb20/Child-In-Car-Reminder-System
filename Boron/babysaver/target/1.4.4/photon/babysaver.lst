
c:/Users/BryceBurnette/Documents/ParticleProjects/babysaver/target/1.4.4/photon/babysaver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003004  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a3020  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  20000000  080a3024  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000060c  20000068  20000068  00030068  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a308c  080a308c  0002308c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a30b4  080a30b4  000230b4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000a35f4  00000000  00000000  000230b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000e3da  00000000  00000000  000c66ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000128bf  00000000  00000000  000d4a86  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001bf0  00000000  00000000  000e7345  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002ed0  00000000  00000000  000e8f35  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00022814  00000000  00000000  000ebe05  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001fda6  00000000  00000000  0010e619  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a4637  00000000  00000000  0012e3bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000b1cc  00000000  00000000  001d29f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 fcdd 	bl	80a29ec <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 fce2 	bl	80a2a02 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a3024 	.word	0x080a3024
 80a004c:	20000068 	.word	0x20000068
 80a0050:	20000068 	.word	0x20000068
 80a0054:	20000674 	.word	0x20000674
 80a0058:	20000674 	.word	0x20000674

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f000 fe33 	bl	80a0cc8 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a2fe0 	.word	0x080a2fe0
 80a0084:	080a3014 	.word	0x080a3014

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b814 	b.w	80a00b4 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f85d 	bl	80a014c <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f000 bdd9 	b.w	80a0c4c <_post_loop>

080a009a <_Znwj>:
 80a009a:	f000 bb4f 	b.w	80a073c <malloc>

080a009e <_ZdlPv>:
 80a009e:	f000 bb55 	b.w	80a074c <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <setup>:
void setup() 
{
  //initialize all the arrays to be filled with zero
  for (int thisReading = 0; thisReading < usbReadings; thisReading++) 
  {
    usb[thisReading] = 0;
 80a00b4:	4a09      	ldr	r2, [pc, #36]	; (80a00dc <setup+0x28>)
 80a00b6:	2300      	movs	r3, #0
  }

  for (int thisReading = 0; thisReading < childReadings; thisReading++) 
  {
    child[thisReading] = 0;
 80a00b8:	4909      	ldr	r1, [pc, #36]	; (80a00e0 <setup+0x2c>)
void setup() 
{
  //initialize all the arrays to be filled with zero
  for (int thisReading = 0; thisReading < usbReadings; thisReading++) 
  {
    usb[thisReading] = 0;
 80a00ba:	6013      	str	r3, [r2, #0]
 80a00bc:	6053      	str	r3, [r2, #4]
 80a00be:	2200      	movs	r2, #0
  }

  for (int thisReading = 0; thisReading < childReadings; thisReading++) 
  {
    child[thisReading] = 0;
 80a00c0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  for (int thisReading = 0; thisReading < usbReadings; thisReading++) 
  {
    usb[thisReading] = 0;
  }

  for (int thisReading = 0; thisReading < childReadings; thisReading++) 
 80a00c4:	3201      	adds	r2, #1
 80a00c6:	2a0a      	cmp	r2, #10
 80a00c8:	d1fa      	bne.n	80a00c0 <setup+0xc>
    child[thisReading] = 0;
  }

  for (int thisReading = 0; thisReading < tempReadings; thisReading++) 
  {
    temp[thisReading] = 0;
 80a00ca:	4906      	ldr	r1, [pc, #24]	; (80a00e4 <setup+0x30>)
 80a00cc:	2200      	movs	r2, #0
 80a00ce:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  for (int thisReading = 0; thisReading < childReadings; thisReading++) 
  {
    child[thisReading] = 0;
  }

  for (int thisReading = 0; thisReading < tempReadings; thisReading++) 
 80a00d2:	3201      	adds	r2, #1
 80a00d4:	2a0a      	cmp	r2, #10
 80a00d6:	d1fa      	bne.n	80a00ce <setup+0x1a>
  {
    temp[thisReading] = 0;
  }
}
 80a00d8:	4770      	bx	lr
 80a00da:	bf00      	nop
 80a00dc:	200000cc 	.word	0x200000cc
 80a00e0:	200000d8 	.word	0x200000d8
 80a00e4:	20000084 	.word	0x20000084

080a00e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a00e8:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a00ea:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a00ec:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a00ee:	b17c      	cbz	r4, 80a0110 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a00f0:	6863      	ldr	r3, [r4, #4]
 80a00f2:	3b01      	subs	r3, #1
 80a00f4:	6063      	str	r3, [r4, #4]
 80a00f6:	b95b      	cbnz	r3, 80a0110 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a00f8:	6823      	ldr	r3, [r4, #0]
 80a00fa:	4620      	mov	r0, r4
 80a00fc:	689b      	ldr	r3, [r3, #8]
 80a00fe:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0100:	68a3      	ldr	r3, [r4, #8]
 80a0102:	3b01      	subs	r3, #1
 80a0104:	60a3      	str	r3, [r4, #8]
 80a0106:	b91b      	cbnz	r3, 80a0110 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a0108:	6823      	ldr	r3, [r4, #0]
 80a010a:	4620      	mov	r0, r4
 80a010c:	68db      	ldr	r3, [r3, #12]
 80a010e:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a0110:	4628      	mov	r0, r5
 80a0112:	bd38      	pop	{r3, r4, r5, pc}

080a0114 <_Z11sendMessageRK6String>:
{
  return rand() % (maxVal-minVal+1) + minVal;
}

void sendMessage(const String& body)            //function that triggers twilio webhook
{
 80a0114:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a0116:	4b0a      	ldr	r3, [pc, #40]	; (80a0140 <_Z11sendMessageRK6String+0x2c>)
 80a0118:	6802      	ldr	r2, [r0, #0]
 80a011a:	781b      	ldrb	r3, [r3, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a011c:	4909      	ldr	r1, [pc, #36]	; (80a0144 <_Z11sendMessageRK6String+0x30>)
 80a011e:	f88d 3000 	strb.w	r3, [sp]
 80a0122:	a802      	add	r0, sp, #8
 80a0124:	233c      	movs	r3, #60	; 0x3c
 80a0126:	f000 ff3d 	bl	80a0fa4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a012a:	a803      	add	r0, sp, #12
 80a012c:	f7ff ffdc 	bl	80a00e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  Particle.publish("twilio_sms", body, PRIVATE);
  Serial.print("SendingMessage");
 80a0130:	f001 f98a 	bl	80a1448 <_Z16_fetch_usbserialv>
 80a0134:	4904      	ldr	r1, [pc, #16]	; (80a0148 <_Z11sendMessageRK6String+0x34>)
 80a0136:	f000 fbd1 	bl	80a08dc <_ZN5Print5printEPKc>
}
 80a013a:	b005      	add	sp, #20
 80a013c:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0140:	2000007c 	.word	0x2000007c
 80a0144:	080a2b34 	.word	0x080a2b34
 80a0148:	080a2b3f 	.word	0x080a2b3f

080a014c <loop>:
  }
}

// loop() runs over and over again, as quickly as it can execute.
void loop() 
{
 80a014c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  delay(5000);
}

int randomNumber(int minVal, int maxVal)              //function to generate random values within a range
{
  return rand() % (maxVal-minVal+1) + minVal;
 80a0150:	f002 fc88 	bl	80a2a64 <rand>
 80a0154:	4cab      	ldr	r4, [pc, #684]	; (80a0404 <loop+0x2b8>)
  Serial.print("temperature");
  Serial.println("tempVal");

  //check if the child is in the seat

  childTotal = childTotal - child[childIndex];  //drop the last value
 80a0156:	f8df 8310 	ldr.w	r8, [pc, #784]	; 80a0468 <loop+0x31c>
  delay(5000);
}

int randomNumber(int minVal, int maxVal)              //function to generate random values within a range
{
  return rand() % (maxVal-minVal+1) + minVal;
 80a015a:	4004      	ands	r4, r0
 80a015c:	2c00      	cmp	r4, #0
 80a015e:	bfbe      	ittt	lt
 80a0160:	f104 34ff 	addlt.w	r4, r4, #4294967295
 80a0164:	f064 0401 	ornlt	r4, r4, #1
 80a0168:	3401      	addlt	r4, #1

// loop() runs over and over again, as quickly as it can execute.
void loop() 
{
  int carOn = randomNumber(0, 1);       //generate random value for if the car is on
  Serial.print("car val");
 80a016a:	f001 f96d 	bl	80a1448 <_Z16_fetch_usbserialv>
 80a016e:	49a6      	ldr	r1, [pc, #664]	; (80a0408 <loop+0x2bc>)
 80a0170:	f000 fbb4 	bl	80a08dc <_ZN5Print5printEPKc>
  Serial.println(carOn);
 80a0174:	f001 f968 	bl	80a1448 <_Z16_fetch_usbserialv>
 80a0178:	220a      	movs	r2, #10
 80a017a:	4621      	mov	r1, r4
 80a017c:	f000 fc19 	bl	80a09b2 <_ZN5Print7printlnEii>
  delay(5000);
}

int randomNumber(int minVal, int maxVal)              //function to generate random values within a range
{
  return rand() % (maxVal-minVal+1) + minVal;
 80a0180:	f002 fc70 	bl	80a2a64 <rand>
 80a0184:	2306      	movs	r3, #6
 80a0186:	fb90 f7f3 	sdiv	r7, r0, r3
 80a018a:	fb07 0713 	mls	r7, r7, r3, r0
{
  int carOn = randomNumber(0, 1);       //generate random value for if the car is on
  Serial.print("car val");
  Serial.println(carOn);
  int childVal = randomNumber(0, 5);    //generate random value for if the child is in the car
  Serial.print("child val");
 80a018e:	f001 f95b 	bl	80a1448 <_Z16_fetch_usbserialv>
 80a0192:	499e      	ldr	r1, [pc, #632]	; (80a040c <loop+0x2c0>)
 80a0194:	f000 fba2 	bl	80a08dc <_ZN5Print5printEPKc>
  Serial.println(childVal);
 80a0198:	f001 f956 	bl	80a1448 <_Z16_fetch_usbserialv>
 80a019c:	220a      	movs	r2, #10
 80a019e:	4639      	mov	r1, r7
 80a01a0:	f000 fc07 	bl	80a09b2 <_ZN5Print7printlnEii>
  delay(5000);
}

int randomNumber(int minVal, int maxVal)              //function to generate random values within a range
{
  return rand() % (maxVal-minVal+1) + minVal;
 80a01a4:	f002 fc5e 	bl	80a2a64 <rand>
 80a01a8:	4606      	mov	r6, r0
  Serial.println(carOn);
  int childVal = randomNumber(0, 5);    //generate random value for if the child is in the car
  Serial.print("child val");
  Serial.println(childVal);
  int tempVal = randomNumber(70, 150);  //generate random value for the temperature reading
  Serial.print("temperature");
 80a01aa:	f001 f94d 	bl	80a1448 <_Z16_fetch_usbserialv>
 80a01ae:	4998      	ldr	r1, [pc, #608]	; (80a0410 <loop+0x2c4>)
 80a01b0:	f000 fb94 	bl	80a08dc <_ZN5Print5printEPKc>
  Serial.println("tempVal");
 80a01b4:	f001 f948 	bl	80a1448 <_Z16_fetch_usbserialv>
 80a01b8:	4996      	ldr	r1, [pc, #600]	; (80a0414 <loop+0x2c8>)
 80a01ba:	f000 fba2 	bl	80a0902 <_ZN5Print7printlnEPKc>

  //check if the child is in the seat

  childTotal = childTotal - child[childIndex];  //drop the last value
 80a01be:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 80a046c <loop+0x320>
 80a01c2:	f8d8 5000 	ldr.w	r5, [r8]
 80a01c6:	f8df a2a8 	ldr.w	sl, [pc, #680]	; 80a0470 <loop+0x324>
 80a01ca:	f8d9 0000 	ldr.w	r0, [r9]
 80a01ce:	f85a 1025 	ldr.w	r1, [sl, r5, lsl #2]
 80a01d2:	f002 f92d 	bl	80a2430 <__aeabi_fsub>
 80a01d6:	4683      	mov	fp, r0
  child[childIndex] = childVal;                 //get the current value
 80a01d8:	4638      	mov	r0, r7
 80a01da:	f002 f9df 	bl	80a259c <__aeabi_i2f>
 80a01de:	4601      	mov	r1, r0
 80a01e0:	f84a 0025 	str.w	r0, [sl, r5, lsl #2]
  childTotal = childTotal + child[childIndex];  //add to total
 80a01e4:	4658      	mov	r0, fp
 80a01e6:	f002 f925 	bl	80a2434 <__addsf3>
  childIndex++;                                 //increment the index
 80a01ea:	3501      	adds	r5, #1

  if (childIndex >= childReadings)  // ...wrap around to the beginning:
 80a01ec:	2d09      	cmp	r5, #9
  {
    childIndex = 0;  
 80a01ee:	bfca      	itet	gt
 80a01f0:	2300      	movgt	r3, #0
  //check if the child is in the seat

  childTotal = childTotal - child[childIndex];  //drop the last value
  child[childIndex] = childVal;                 //get the current value
  childTotal = childTotal + child[childIndex];  //add to total
  childIndex++;                                 //increment the index
 80a01f2:	f8c8 5000 	strle.w	r5, [r8]

  if (childIndex >= childReadings)  // ...wrap around to the beginning:
  {
    childIndex = 0;  
 80a01f6:	f8c8 3000 	strgt.w	r3, [r8]
  }

  childAverage = childTotal / childReadings;    //get the running average
 80a01fa:	4987      	ldr	r1, [pc, #540]	; (80a0418 <loop+0x2cc>)

  //check if the child is in the seat

  childTotal = childTotal - child[childIndex];  //drop the last value
  child[childIndex] = childVal;                 //get the current value
  childTotal = childTotal + child[childIndex];  //add to total
 80a01fc:	f8c9 0000 	str.w	r0, [r9]
  if (childIndex >= childReadings)  // ...wrap around to the beginning:
  {
    childIndex = 0;  
  }

  childAverage = childTotal / childReadings;    //get the running average
 80a0200:	f002 fad4 	bl	80a27ac <__aeabi_fdiv>
 80a0204:	4d85      	ldr	r5, [pc, #532]	; (80a041c <loop+0x2d0>)
 80a0206:	6028      	str	r0, [r5, #0]
  Serial.print("The child average is:  ");
 80a0208:	f001 f91e 	bl	80a1448 <_Z16_fetch_usbserialv>
 80a020c:	4984      	ldr	r1, [pc, #528]	; (80a0420 <loop+0x2d4>)
 80a020e:	f000 fb65 	bl	80a08dc <_ZN5Print5printEPKc>
  Serial.println(childAverage);
 80a0212:	f001 f919 	bl	80a1448 <_Z16_fetch_usbserialv>
 80a0216:	4607      	mov	r7, r0
 80a0218:	6828      	ldr	r0, [r5, #0]
 80a021a:	f001 fdb9 	bl	80a1d90 <__aeabi_f2d>
 80a021e:	2302      	movs	r3, #2
 80a0220:	9300      	str	r3, [sp, #0]
 80a0222:	4602      	mov	r2, r0
 80a0224:	460b      	mov	r3, r1
 80a0226:	4638      	mov	r0, r7
 80a0228:	f000 fc81 	bl	80a0b2e <_ZN5Print7printlnEdi>

  if (childAverage < 3)                         //if the child is in the seat
 80a022c:	497d      	ldr	r1, [pc, #500]	; (80a0424 <loop+0x2d8>)
 80a022e:	6828      	ldr	r0, [r5, #0]
 80a0230:	f002 fba6 	bl	80a2980 <__aeabi_fcmplt>
 80a0234:	2800      	cmp	r0, #0
 80a0236:	f000 80dd 	beq.w	80a03f4 <loop+0x2a8>
  {
    Serial.println("child in car");
 80a023a:	f001 f905 	bl	80a1448 <_Z16_fetch_usbserialv>
 80a023e:	497a      	ldr	r1, [pc, #488]	; (80a0428 <loop+0x2dc>)
 80a0240:	f000 fb5f 	bl	80a0902 <_ZN5Print7printlnEPKc>

      //car on/off check

      usb[usbIndex] = carOn;  //read the value
 80a0244:	4620      	mov	r0, r4
 80a0246:	f002 f9a9 	bl	80a259c <__aeabi_i2f>
 80a024a:	f8df 8228 	ldr.w	r8, [pc, #552]	; 80a0474 <loop+0x328>
 80a024e:	4d77      	ldr	r5, [pc, #476]	; (80a042c <loop+0x2e0>)
 80a0250:	f8d8 7000 	ldr.w	r7, [r8]
 80a0254:	462c      	mov	r4, r5
 80a0256:	f845 0027 	str.w	r0, [r5, r7, lsl #2]
      usbIndex++;   //increase the index
 80a025a:	3701      	adds	r7, #1

      if (usbIndex >= usbReadings)  // ...wrap around to the beginning:
 80a025c:	2f01      	cmp	r7, #1
      {
        usbIndex = 0;  
 80a025e:	bfca      	itet	gt
 80a0260:	2300      	movgt	r3, #0
    Serial.println("child in car");

      //car on/off check

      usb[usbIndex] = carOn;  //read the value
      usbIndex++;   //increase the index
 80a0262:	f8c8 7000 	strle.w	r7, [r8]

      if (usbIndex >= usbReadings)  // ...wrap around to the beginning:
      {
        usbIndex = 0;  
 80a0266:	f8c8 3000 	strgt.w	r3, [r8]
      }

      Serial.print("the usb array is:  ");
 80a026a:	f001 f8ed 	bl	80a1448 <_Z16_fetch_usbserialv>
 80a026e:	4970      	ldr	r1, [pc, #448]	; (80a0430 <loop+0x2e4>)
 80a0270:	f000 fb34 	bl	80a08dc <_ZN5Print5printEPKc>
      Serial.print(usb[0]);
 80a0274:	f001 f8e8 	bl	80a1448 <_Z16_fetch_usbserialv>
 80a0278:	4607      	mov	r7, r0
 80a027a:	6828      	ldr	r0, [r5, #0]
 80a027c:	f001 fd88 	bl	80a1d90 <__aeabi_f2d>
 80a0280:	2502      	movs	r5, #2
 80a0282:	4602      	mov	r2, r0
 80a0284:	460b      	mov	r3, r1
 80a0286:	4638      	mov	r0, r7
 80a0288:	9500      	str	r5, [sp, #0]
 80a028a:	f000 fc4b 	bl	80a0b24 <_ZN5Print5printEdi>
      Serial.println(usb[1]);
 80a028e:	f001 f8db 	bl	80a1448 <_Z16_fetch_usbserialv>
 80a0292:	4607      	mov	r7, r0
 80a0294:	6860      	ldr	r0, [r4, #4]
 80a0296:	f001 fd7b 	bl	80a1d90 <__aeabi_f2d>
 80a029a:	9500      	str	r5, [sp, #0]
 80a029c:	4602      	mov	r2, r0
 80a029e:	460b      	mov	r3, r1
 80a02a0:	4638      	mov	r0, r7
 80a02a2:	f000 fc44 	bl	80a0b2e <_ZN5Print7printlnEdi>

      if (usb[0] == 1 && usb[1] == 0)   //check to see if the car went from on to off
 80a02a6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a02aa:	6820      	ldr	r0, [r4, #0]
 80a02ac:	f002 fb5e 	bl	80a296c <__aeabi_fcmpeq>
 80a02b0:	b168      	cbz	r0, 80a02ce <loop+0x182>
 80a02b2:	4b5e      	ldr	r3, [pc, #376]	; (80a042c <loop+0x2e0>)
 80a02b4:	2100      	movs	r1, #0
 80a02b6:	6858      	ldr	r0, [r3, #4]
 80a02b8:	f002 fb58 	bl	80a296c <__aeabi_fcmpeq>
 80a02bc:	b138      	cbz	r0, 80a02ce <loop+0x182>
      {
        sendMessage(body);
 80a02be:	485d      	ldr	r0, [pc, #372]	; (80a0434 <loop+0x2e8>)
 80a02c0:	f7ff ff28 	bl	80a0114 <_Z11sendMessageRK6String>
        Serial.println("Sending message because car turned off");
 80a02c4:	f001 f8c0 	bl	80a1448 <_Z16_fetch_usbserialv>
 80a02c8:	495b      	ldr	r1, [pc, #364]	; (80a0438 <loop+0x2ec>)
 80a02ca:	f000 fb1a 	bl	80a0902 <_ZN5Print7printlnEPKc>
      }

    //check if the temperature is too hot or rising too fast

    tempTotal = tempTotal - temp[tempIndex];    //drop the last value
 80a02ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80a0478 <loop+0x32c>
 80a02d2:	4c5a      	ldr	r4, [pc, #360]	; (80a043c <loop+0x2f0>)
 80a02d4:	f8d8 5000 	ldr.w	r5, [r8]
 80a02d8:	4f59      	ldr	r7, [pc, #356]	; (80a0440 <loop+0x2f4>)
 80a02da:	f854 1025 	ldr.w	r1, [r4, r5, lsl #2]
 80a02de:	6838      	ldr	r0, [r7, #0]
 80a02e0:	f002 f8a6 	bl	80a2430 <__aeabi_fsub>
 80a02e4:	4681      	mov	r9, r0
    temp[tempIndex] = tempVal;                  //get the current value
 80a02e6:	2051      	movs	r0, #81	; 0x51
 80a02e8:	fb96 f3f0 	sdiv	r3, r6, r0
 80a02ec:	fb00 6013 	mls	r0, r0, r3, r6
 80a02f0:	3046      	adds	r0, #70	; 0x46
 80a02f2:	f002 f953 	bl	80a259c <__aeabi_i2f>
 80a02f6:	4601      	mov	r1, r0
 80a02f8:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
    tempTotal = tempTotal + temp[tempIndex];    //add to total
 80a02fc:	4648      	mov	r0, r9
 80a02fe:	f002 f899 	bl	80a2434 <__addsf3>
    tempIndex++;                                //increment the index
 80a0302:	3501      	adds	r5, #1

    if (tempIndex >= tempReadings)  // ...wrap around to the beginning:
 80a0304:	2d09      	cmp	r5, #9
    {
      tempIndex = 0;  
 80a0306:	bfca      	itet	gt
 80a0308:	2300      	movgt	r3, #0
    //check if the temperature is too hot or rising too fast

    tempTotal = tempTotal - temp[tempIndex];    //drop the last value
    temp[tempIndex] = tempVal;                  //get the current value
    tempTotal = tempTotal + temp[tempIndex];    //add to total
    tempIndex++;                                //increment the index
 80a030a:	f8c8 5000 	strle.w	r5, [r8]

    if (tempIndex >= tempReadings)  // ...wrap around to the beginning:
    {
      tempIndex = 0;  
 80a030e:	f8c8 3000 	strgt.w	r3, [r8]

    //check if the temperature is too hot or rising too fast

    tempTotal = tempTotal - temp[tempIndex];    //drop the last value
    temp[tempIndex] = tempVal;                  //get the current value
    tempTotal = tempTotal + temp[tempIndex];    //add to total
 80a0312:	6038      	str	r0, [r7, #0]
    if (tempIndex >= tempReadings)  // ...wrap around to the beginning:
    {
      tempIndex = 0;  
    }

    Serial.print("The first and last readings in the temp array:  ");
 80a0314:	f001 f898 	bl	80a1448 <_Z16_fetch_usbserialv>
 80a0318:	494a      	ldr	r1, [pc, #296]	; (80a0444 <loop+0x2f8>)
 80a031a:	f000 fadf 	bl	80a08dc <_ZN5Print5printEPKc>
    Serial.print(temp[0]);
 80a031e:	f001 f893 	bl	80a1448 <_Z16_fetch_usbserialv>
 80a0322:	4606      	mov	r6, r0
 80a0324:	6820      	ldr	r0, [r4, #0]
 80a0326:	f001 fd33 	bl	80a1d90 <__aeabi_f2d>
 80a032a:	2502      	movs	r5, #2
 80a032c:	4602      	mov	r2, r0
 80a032e:	460b      	mov	r3, r1
 80a0330:	4630      	mov	r0, r6
 80a0332:	9500      	str	r5, [sp, #0]
 80a0334:	f000 fbf6 	bl	80a0b24 <_ZN5Print5printEdi>
    Serial.println(temp[tempReadings - 1]);
 80a0338:	f001 f886 	bl	80a1448 <_Z16_fetch_usbserialv>
 80a033c:	4606      	mov	r6, r0
 80a033e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a0340:	f001 fd26 	bl	80a1d90 <__aeabi_f2d>
 80a0344:	9500      	str	r5, [sp, #0]
 80a0346:	4602      	mov	r2, r0
 80a0348:	460b      	mov	r3, r1
 80a034a:	4630      	mov	r0, r6
 80a034c:	f000 fbef 	bl	80a0b2e <_ZN5Print7printlnEdi>

    if (temp[tempReadings - 1] - temp[0] >= 10)     //if temperature is rising too fast
 80a0350:	6821      	ldr	r1, [r4, #0]
 80a0352:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a0354:	f002 f86c 	bl	80a2430 <__aeabi_fsub>
 80a0358:	492f      	ldr	r1, [pc, #188]	; (80a0418 <loop+0x2cc>)
 80a035a:	f002 fb25 	bl	80a29a8 <__aeabi_fcmpge>
 80a035e:	b120      	cbz	r0, 80a036a <loop+0x21e>
    {
      //send Critical message
      Serial.println("The temperature is rising too fast");
 80a0360:	f001 f872 	bl	80a1448 <_Z16_fetch_usbserialv>
 80a0364:	4938      	ldr	r1, [pc, #224]	; (80a0448 <loop+0x2fc>)
 80a0366:	f000 facc 	bl	80a0902 <_ZN5Print7printlnEPKc>
    }

    tempAverage = tempTotal / tempReadings;     //calculate the running average
 80a036a:	492b      	ldr	r1, [pc, #172]	; (80a0418 <loop+0x2cc>)
 80a036c:	6838      	ldr	r0, [r7, #0]
 80a036e:	f002 fa1d 	bl	80a27ac <__aeabi_fdiv>
 80a0372:	4c36      	ldr	r4, [pc, #216]	; (80a044c <loop+0x300>)
 80a0374:	6020      	str	r0, [r4, #0]
    Serial.print("The temp average is:  ");
 80a0376:	f001 f867 	bl	80a1448 <_Z16_fetch_usbserialv>
 80a037a:	4935      	ldr	r1, [pc, #212]	; (80a0450 <loop+0x304>)
 80a037c:	f000 faae 	bl	80a08dc <_ZN5Print5printEPKc>
    Serial.println(tempAverage);
 80a0380:	f001 f862 	bl	80a1448 <_Z16_fetch_usbserialv>
 80a0384:	4605      	mov	r5, r0
 80a0386:	6820      	ldr	r0, [r4, #0]
 80a0388:	f001 fd02 	bl	80a1d90 <__aeabi_f2d>
 80a038c:	2302      	movs	r3, #2
 80a038e:	9300      	str	r3, [sp, #0]
 80a0390:	4602      	mov	r2, r0
 80a0392:	460b      	mov	r3, r1
 80a0394:	4628      	mov	r0, r5
 80a0396:	f000 fbca 	bl	80a0b2e <_ZN5Print7printlnEdi>

    if (tempAverage >= 80 && tempAverage < 90)  //if the temp is too hot
 80a039a:	6825      	ldr	r5, [r4, #0]
 80a039c:	492d      	ldr	r1, [pc, #180]	; (80a0454 <loop+0x308>)
 80a039e:	4628      	mov	r0, r5
 80a03a0:	f002 fb02 	bl	80a29a8 <__aeabi_fcmpge>
 80a03a4:	b160      	cbz	r0, 80a03c0 <loop+0x274>
 80a03a6:	492c      	ldr	r1, [pc, #176]	; (80a0458 <loop+0x30c>)
 80a03a8:	4628      	mov	r0, r5
 80a03aa:	f002 fae9 	bl	80a2980 <__aeabi_fcmplt>
 80a03ae:	b138      	cbz	r0, 80a03c0 <loop+0x274>
    {
      sendMessage(body);
 80a03b0:	4820      	ldr	r0, [pc, #128]	; (80a0434 <loop+0x2e8>)
 80a03b2:	f7ff feaf 	bl	80a0114 <_Z11sendMessageRK6String>
      Serial.println("Sending message because temperature is too hot");
 80a03b6:	f001 f847 	bl	80a1448 <_Z16_fetch_usbserialv>
 80a03ba:	4928      	ldr	r1, [pc, #160]	; (80a045c <loop+0x310>)
 80a03bc:	f000 faa1 	bl	80a0902 <_ZN5Print7printlnEPKc>
    }

    if (tempAverage >= 90 && tempAverage < 100) //if the temp is way too hot
 80a03c0:	6825      	ldr	r5, [r4, #0]
 80a03c2:	4925      	ldr	r1, [pc, #148]	; (80a0458 <loop+0x30c>)
 80a03c4:	4628      	mov	r0, r5
 80a03c6:	f002 faef 	bl	80a29a8 <__aeabi_fcmpge>
 80a03ca:	b148      	cbz	r0, 80a03e0 <loop+0x294>
 80a03cc:	4924      	ldr	r1, [pc, #144]	; (80a0460 <loop+0x314>)
 80a03ce:	4628      	mov	r0, r5
 80a03d0:	f002 fad6 	bl	80a2980 <__aeabi_fcmplt>
 80a03d4:	b120      	cbz	r0, 80a03e0 <loop+0x294>
    {
      //send Critical message
      Serial.println("Sending message because temp is critical");
 80a03d6:	f001 f837 	bl	80a1448 <_Z16_fetch_usbserialv>
 80a03da:	4922      	ldr	r1, [pc, #136]	; (80a0464 <loop+0x318>)
 80a03dc:	f000 fa91 	bl	80a0902 <_ZN5Print7printlnEPKc>
    }

    if (tempAverage >= 100)
 80a03e0:	491f      	ldr	r1, [pc, #124]	; (80a0460 <loop+0x314>)
 80a03e2:	6820      	ldr	r0, [r4, #0]
 80a03e4:	f002 fae0 	bl	80a29a8 <__aeabi_fcmpge>
 80a03e8:	b120      	cbz	r0, 80a03f4 <loop+0x2a8>
    {
      //send message on loop
      Serial.println("Sending message because temp is critical");
 80a03ea:	f001 f82d 	bl	80a1448 <_Z16_fetch_usbserialv>
 80a03ee:	491d      	ldr	r1, [pc, #116]	; (80a0464 <loop+0x318>)
 80a03f0:	f000 fa87 	bl	80a0902 <_ZN5Print7printlnEPKc>

    }
  }
  delay(5000);
 80a03f4:	f241 3088 	movw	r0, #5000	; 0x1388
}
 80a03f8:	b003      	add	sp, #12
 80a03fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      //send message on loop
      Serial.println("Sending message because temp is critical");

    }
  }
  delay(5000);
 80a03fe:	f000 bbc3 	b.w	80a0b88 <delay>
 80a0402:	bf00      	nop
 80a0404:	80000001 	.word	0x80000001
 80a0408:	080a2b4e 	.word	0x080a2b4e
 80a040c:	080a2b56 	.word	0x080a2b56
 80a0410:	080a2b60 	.word	0x080a2b60
 80a0414:	080a2b6c 	.word	0x080a2b6c
 80a0418:	41200000 	.word	0x41200000
 80a041c:	20000074 	.word	0x20000074
 80a0420:	080a2b74 	.word	0x080a2b74
 80a0424:	40400000 	.word	0x40400000
 80a0428:	080a2b8c 	.word	0x080a2b8c
 80a042c:	200000cc 	.word	0x200000cc
 80a0430:	080a2b99 	.word	0x080a2b99
 80a0434:	200000ac 	.word	0x200000ac
 80a0438:	080a2bad 	.word	0x080a2bad
 80a043c:	20000084 	.word	0x20000084
 80a0440:	20000078 	.word	0x20000078
 80a0444:	080a2bd4 	.word	0x080a2bd4
 80a0448:	080a2c05 	.word	0x080a2c05
 80a044c:	20000080 	.word	0x20000080
 80a0450:	080a2c28 	.word	0x080a2c28
 80a0454:	42a00000 	.word	0x42a00000
 80a0458:	42b40000 	.word	0x42b40000
 80a045c:	080a2c3f 	.word	0x080a2c3f
 80a0460:	42c80000 	.word	0x42c80000
 80a0464:	080a2c6e 	.word	0x080a2c6e
 80a0468:	200000d4 	.word	0x200000d4
 80a046c:	20000100 	.word	0x20000100
 80a0470:	200000d8 	.word	0x200000d8
 80a0474:	20000070 	.word	0x20000070
 80a0478:	2000006c 	.word	0x2000006c

080a047c <_GLOBAL__sub_I_body>:

void sendMessageCritical(const String& bodyCritical)  //function that sends triggers a critical twilio webhook
{
  Particle.publish("twilio_sms_critical", bodyCritical, PRIVATE);
  Serial.println("Sending Critical Message");
 80a047c:	b570      	push	{r4, r5, r6, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a047e:	4b0e      	ldr	r3, [pc, #56]	; (80a04b8 <_GLOBAL__sub_I_body+0x3c>)
 * Description:
 * Author:
 * Date:
 */

String body = "Your child is in the car";  //body of SMS message to send
 80a0480:	4c0e      	ldr	r4, [pc, #56]	; (80a04bc <_GLOBAL__sub_I_body+0x40>)
 80a0482:	2201      	movs	r2, #1
 80a0484:	701a      	strb	r2, [r3, #0]
 80a0486:	4e0e      	ldr	r6, [pc, #56]	; (80a04c0 <_GLOBAL__sub_I_body+0x44>)
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0488:	f000 f824 	bl	80a04d4 <HAL_Pin_Map>
 80a048c:	4d0d      	ldr	r5, [pc, #52]	; (80a04c4 <_GLOBAL__sub_I_body+0x48>)
 80a048e:	490e      	ldr	r1, [pc, #56]	; (80a04c8 <_GLOBAL__sub_I_body+0x4c>)
 80a0490:	4620      	mov	r0, r4
 80a0492:	f000 f9ea 	bl	80a086a <_ZN6StringC1EPK19__FlashStringHelper>
 80a0496:	4620      	mov	r0, r4
String bodyCritical = "Your child is in the car and it is too hot! Call 911 if necessary. Please send respons message of anything and go get them"; //body of critical sms prompting response
 80a0498:	4c0c      	ldr	r4, [pc, #48]	; (80a04cc <_GLOBAL__sub_I_body+0x50>)
 * Description:
 * Author:
 * Date:
 */

String body = "Your child is in the car";  //body of SMS message to send
 80a049a:	4632      	mov	r2, r6
 80a049c:	4629      	mov	r1, r5
 80a049e:	f001 f9c1 	bl	80a1824 <__aeabi_atexit>
String bodyCritical = "Your child is in the car and it is too hot! Call 911 if necessary. Please send respons message of anything and go get them"; //body of critical sms prompting response
 80a04a2:	490b      	ldr	r1, [pc, #44]	; (80a04d0 <_GLOBAL__sub_I_body+0x54>)
 80a04a4:	4620      	mov	r0, r4
 80a04a6:	f000 f9e0 	bl	80a086a <_ZN6StringC1EPK19__FlashStringHelper>
 80a04aa:	4632      	mov	r2, r6
 80a04ac:	4629      	mov	r1, r5
 80a04ae:	4620      	mov	r0, r4

void sendMessageCritical(const String& bodyCritical)  //function that sends triggers a critical twilio webhook
{
  Particle.publish("twilio_sms_critical", bodyCritical, PRIVATE);
  Serial.println("Sending Critical Message");
 80a04b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 * Author:
 * Date:
 */

String body = "Your child is in the car";  //body of SMS message to send
String bodyCritical = "Your child is in the car and it is too hot! Call 911 if necessary. Please send respons message of anything and go get them"; //body of critical sms prompting response
 80a04b4:	f001 b9b6 	b.w	80a1824 <__aeabi_atexit>
 80a04b8:	2000007c 	.word	0x2000007c
 80a04bc:	200000ac 	.word	0x200000ac
 80a04c0:	20000068 	.word	0x20000068
 80a04c4:	080a07dd 	.word	0x080a07dd
 80a04c8:	080a2cc4 	.word	0x080a2cc4
 80a04cc:	200000bc 	.word	0x200000bc
 80a04d0:	080a2cdd 	.word	0x080a2cdd

080a04d4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a04d4:	b508      	push	{r3, lr}
 80a04d6:	4b02      	ldr	r3, [pc, #8]	; (80a04e0 <HAL_Pin_Map+0xc>)
 80a04d8:	681b      	ldr	r3, [r3, #0]
 80a04da:	681b      	ldr	r3, [r3, #0]
 80a04dc:	9301      	str	r3, [sp, #4]
 80a04de:	bd08      	pop	{r3, pc}
 80a04e0:	080601b0 	.word	0x080601b0

080a04e4 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a04e4:	b508      	push	{r3, lr}
 80a04e6:	4b02      	ldr	r3, [pc, #8]	; (80a04f0 <HAL_SPI_Init+0xc>)
 80a04e8:	681b      	ldr	r3, [r3, #0]
 80a04ea:	69db      	ldr	r3, [r3, #28]
 80a04ec:	9301      	str	r3, [sp, #4]
 80a04ee:	bd08      	pop	{r3, pc}
 80a04f0:	080601b4 	.word	0x080601b4

080a04f4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a04f4:	b508      	push	{r3, lr}
 80a04f6:	4b02      	ldr	r3, [pc, #8]	; (80a0500 <HAL_RNG_GetRandomNumber+0xc>)
 80a04f8:	681b      	ldr	r3, [r3, #0]
 80a04fa:	685b      	ldr	r3, [r3, #4]
 80a04fc:	9301      	str	r3, [sp, #4]
 80a04fe:	bd08      	pop	{r3, pc}
 80a0500:	0806019c 	.word	0x0806019c

080a0504 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0504:	b508      	push	{r3, lr}
 80a0506:	4b02      	ldr	r3, [pc, #8]	; (80a0510 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0508:	681b      	ldr	r3, [r3, #0]
 80a050a:	695b      	ldr	r3, [r3, #20]
 80a050c:	9301      	str	r3, [sp, #4]
 80a050e:	bd08      	pop	{r3, pc}
 80a0510:	0806019c 	.word	0x0806019c

080a0514 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a0514:	b508      	push	{r3, lr}
 80a0516:	4b02      	ldr	r3, [pc, #8]	; (80a0520 <os_mutex_create+0xc>)
 80a0518:	681b      	ldr	r3, [r3, #0]
 80a051a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a051c:	9301      	str	r3, [sp, #4]
 80a051e:	bd08      	pop	{r3, pc}
 80a0520:	080601d0 	.word	0x080601d0

080a0524 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0524:	b508      	push	{r3, lr}
 80a0526:	4b02      	ldr	r3, [pc, #8]	; (80a0530 <HAL_USART_Init+0xc>)
 80a0528:	681b      	ldr	r3, [r3, #0]
 80a052a:	699b      	ldr	r3, [r3, #24]
 80a052c:	9301      	str	r3, [sp, #4]
 80a052e:	bd08      	pop	{r3, pc}
 80a0530:	080601c4 	.word	0x080601c4

080a0534 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0534:	b508      	push	{r3, lr}
 80a0536:	4b02      	ldr	r3, [pc, #8]	; (80a0540 <HAL_USART_Write_Data+0xc>)
 80a0538:	681b      	ldr	r3, [r3, #0]
 80a053a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a053c:	9301      	str	r3, [sp, #4]
 80a053e:	bd08      	pop	{r3, pc}
 80a0540:	080601c4 	.word	0x080601c4

080a0544 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0544:	b508      	push	{r3, lr}
 80a0546:	4b02      	ldr	r3, [pc, #8]	; (80a0550 <HAL_USART_Available_Data+0xc>)
 80a0548:	681b      	ldr	r3, [r3, #0]
 80a054a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a054c:	9301      	str	r3, [sp, #4]
 80a054e:	bd08      	pop	{r3, pc}
 80a0550:	080601c4 	.word	0x080601c4

080a0554 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a0554:	b508      	push	{r3, lr}
 80a0556:	4b02      	ldr	r3, [pc, #8]	; (80a0560 <HAL_USART_Read_Data+0xc>)
 80a0558:	681b      	ldr	r3, [r3, #0]
 80a055a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a055c:	9301      	str	r3, [sp, #4]
 80a055e:	bd08      	pop	{r3, pc}
 80a0560:	080601c4 	.word	0x080601c4

080a0564 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0564:	b508      	push	{r3, lr}
 80a0566:	4b02      	ldr	r3, [pc, #8]	; (80a0570 <HAL_USART_Peek_Data+0xc>)
 80a0568:	681b      	ldr	r3, [r3, #0]
 80a056a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a056c:	9301      	str	r3, [sp, #4]
 80a056e:	bd08      	pop	{r3, pc}
 80a0570:	080601c4 	.word	0x080601c4

080a0574 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a0574:	b508      	push	{r3, lr}
 80a0576:	4b02      	ldr	r3, [pc, #8]	; (80a0580 <HAL_USART_Flush_Data+0xc>)
 80a0578:	681b      	ldr	r3, [r3, #0]
 80a057a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a057c:	9301      	str	r3, [sp, #4]
 80a057e:	bd08      	pop	{r3, pc}
 80a0580:	080601c4 	.word	0x080601c4

080a0584 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a0584:	b508      	push	{r3, lr}
 80a0586:	4b02      	ldr	r3, [pc, #8]	; (80a0590 <HAL_USART_Available_Data_For_Write+0xc>)
 80a0588:	681b      	ldr	r3, [r3, #0]
 80a058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a058c:	9301      	str	r3, [sp, #4]
 80a058e:	bd08      	pop	{r3, pc}
 80a0590:	080601c4 	.word	0x080601c4

080a0594 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0594:	b508      	push	{r3, lr}
 80a0596:	4b02      	ldr	r3, [pc, #8]	; (80a05a0 <HAL_USB_USART_Init+0xc>)
 80a0598:	681b      	ldr	r3, [r3, #0]
 80a059a:	681b      	ldr	r3, [r3, #0]
 80a059c:	9301      	str	r3, [sp, #4]
 80a059e:	bd08      	pop	{r3, pc}
 80a05a0:	080601d8 	.word	0x080601d8

080a05a4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a05a4:	b508      	push	{r3, lr}
 80a05a6:	4b02      	ldr	r3, [pc, #8]	; (80a05b0 <HAL_USB_USART_Available_Data+0xc>)
 80a05a8:	681b      	ldr	r3, [r3, #0]
 80a05aa:	691b      	ldr	r3, [r3, #16]
 80a05ac:	9301      	str	r3, [sp, #4]
 80a05ae:	bd08      	pop	{r3, pc}
 80a05b0:	080601d8 	.word	0x080601d8

080a05b4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a05b4:	b508      	push	{r3, lr}
 80a05b6:	4b02      	ldr	r3, [pc, #8]	; (80a05c0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a05b8:	681b      	ldr	r3, [r3, #0]
 80a05ba:	695b      	ldr	r3, [r3, #20]
 80a05bc:	9301      	str	r3, [sp, #4]
 80a05be:	bd08      	pop	{r3, pc}
 80a05c0:	080601d8 	.word	0x080601d8

080a05c4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a05c4:	b508      	push	{r3, lr}
 80a05c6:	4b02      	ldr	r3, [pc, #8]	; (80a05d0 <HAL_USB_USART_Receive_Data+0xc>)
 80a05c8:	681b      	ldr	r3, [r3, #0]
 80a05ca:	699b      	ldr	r3, [r3, #24]
 80a05cc:	9301      	str	r3, [sp, #4]
 80a05ce:	bd08      	pop	{r3, pc}
 80a05d0:	080601d8 	.word	0x080601d8

080a05d4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a05d4:	b508      	push	{r3, lr}
 80a05d6:	4b02      	ldr	r3, [pc, #8]	; (80a05e0 <HAL_USB_USART_Send_Data+0xc>)
 80a05d8:	681b      	ldr	r3, [r3, #0]
 80a05da:	69db      	ldr	r3, [r3, #28]
 80a05dc:	9301      	str	r3, [sp, #4]
 80a05de:	bd08      	pop	{r3, pc}
 80a05e0:	080601d8 	.word	0x080601d8

080a05e4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a05e4:	b508      	push	{r3, lr}
 80a05e6:	4b02      	ldr	r3, [pc, #8]	; (80a05f0 <HAL_USB_USART_Flush_Data+0xc>)
 80a05e8:	681b      	ldr	r3, [r3, #0]
 80a05ea:	6a1b      	ldr	r3, [r3, #32]
 80a05ec:	9301      	str	r3, [sp, #4]
 80a05ee:	bd08      	pop	{r3, pc}
 80a05f0:	080601d8 	.word	0x080601d8

080a05f4 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a05f4:	b508      	push	{r3, lr}
 80a05f6:	4b02      	ldr	r3, [pc, #8]	; (80a0600 <inet_gethostbyname+0xc>)
 80a05f8:	681b      	ldr	r3, [r3, #0]
 80a05fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a05fc:	9301      	str	r3, [sp, #4]
 80a05fe:	bd08      	pop	{r3, pc}
 80a0600:	080601c0 	.word	0x080601c0

080a0604 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0604:	b508      	push	{r3, lr}
 80a0606:	4b02      	ldr	r3, [pc, #8]	; (80a0610 <set_system_mode+0xc>)
 80a0608:	681b      	ldr	r3, [r3, #0]
 80a060a:	685b      	ldr	r3, [r3, #4]
 80a060c:	9301      	str	r3, [sp, #4]
 80a060e:	bd08      	pop	{r3, pc}
 80a0610:	080601a4 	.word	0x080601a4

080a0614 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0614:	b508      	push	{r3, lr}
 80a0616:	4b02      	ldr	r3, [pc, #8]	; (80a0620 <system_delay_ms+0xc>)
 80a0618:	681b      	ldr	r3, [r3, #0]
 80a061a:	695b      	ldr	r3, [r3, #20]
 80a061c:	9301      	str	r3, [sp, #4]
 80a061e:	bd08      	pop	{r3, pc}
 80a0620:	080601a4 	.word	0x080601a4

080a0624 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a0624:	b508      	push	{r3, lr}
 80a0626:	4b02      	ldr	r3, [pc, #8]	; (80a0630 <application_thread_current+0xc>)
 80a0628:	681b      	ldr	r3, [r3, #0]
 80a062a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a062c:	9301      	str	r3, [sp, #4]
 80a062e:	bd08      	pop	{r3, pc}
 80a0630:	080601a4 	.word	0x080601a4

080a0634 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a0634:	b508      	push	{r3, lr}
 80a0636:	4b02      	ldr	r3, [pc, #8]	; (80a0640 <application_thread_invoke+0xc>)
 80a0638:	681b      	ldr	r3, [r3, #0]
 80a063a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a063c:	9301      	str	r3, [sp, #4]
 80a063e:	bd08      	pop	{r3, pc}
 80a0640:	080601a4 	.word	0x080601a4

080a0644 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0644:	b508      	push	{r3, lr}
 80a0646:	4b03      	ldr	r3, [pc, #12]	; (80a0654 <system_ctrl_set_app_request_handler+0x10>)
 80a0648:	681b      	ldr	r3, [r3, #0]
 80a064a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a064e:	9301      	str	r3, [sp, #4]
 80a0650:	bd08      	pop	{r3, pc}
 80a0652:	0000      	.short	0x0000
 80a0654:	080601a4 	.word	0x080601a4

080a0658 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0658:	b508      	push	{r3, lr}
 80a065a:	4b03      	ldr	r3, [pc, #12]	; (80a0668 <system_ctrl_set_result+0x10>)
 80a065c:	681b      	ldr	r3, [r3, #0]
 80a065e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0662:	9301      	str	r3, [sp, #4]
 80a0664:	bd08      	pop	{r3, pc}
 80a0666:	0000      	.short	0x0000
 80a0668:	080601a4 	.word	0x080601a4

080a066c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a066c:	b508      	push	{r3, lr}
 80a066e:	4b02      	ldr	r3, [pc, #8]	; (80a0678 <network_connect+0xc>)
 80a0670:	681b      	ldr	r3, [r3, #0]
 80a0672:	685b      	ldr	r3, [r3, #4]
 80a0674:	9301      	str	r3, [sp, #4]
 80a0676:	bd08      	pop	{r3, pc}
 80a0678:	080601c8 	.word	0x080601c8

080a067c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a067c:	b508      	push	{r3, lr}
 80a067e:	4b02      	ldr	r3, [pc, #8]	; (80a0688 <network_connecting+0xc>)
 80a0680:	681b      	ldr	r3, [r3, #0]
 80a0682:	689b      	ldr	r3, [r3, #8]
 80a0684:	9301      	str	r3, [sp, #4]
 80a0686:	bd08      	pop	{r3, pc}
 80a0688:	080601c8 	.word	0x080601c8

080a068c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a068c:	b508      	push	{r3, lr}
 80a068e:	4b02      	ldr	r3, [pc, #8]	; (80a0698 <network_disconnect+0xc>)
 80a0690:	681b      	ldr	r3, [r3, #0]
 80a0692:	68db      	ldr	r3, [r3, #12]
 80a0694:	9301      	str	r3, [sp, #4]
 80a0696:	bd08      	pop	{r3, pc}
 80a0698:	080601c8 	.word	0x080601c8

080a069c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a069c:	b508      	push	{r3, lr}
 80a069e:	4b02      	ldr	r3, [pc, #8]	; (80a06a8 <network_ready+0xc>)
 80a06a0:	681b      	ldr	r3, [r3, #0]
 80a06a2:	691b      	ldr	r3, [r3, #16]
 80a06a4:	9301      	str	r3, [sp, #4]
 80a06a6:	bd08      	pop	{r3, pc}
 80a06a8:	080601c8 	.word	0x080601c8

080a06ac <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a06ac:	b508      	push	{r3, lr}
 80a06ae:	4b02      	ldr	r3, [pc, #8]	; (80a06b8 <network_on+0xc>)
 80a06b0:	681b      	ldr	r3, [r3, #0]
 80a06b2:	695b      	ldr	r3, [r3, #20]
 80a06b4:	9301      	str	r3, [sp, #4]
 80a06b6:	bd08      	pop	{r3, pc}
 80a06b8:	080601c8 	.word	0x080601c8

080a06bc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a06bc:	b508      	push	{r3, lr}
 80a06be:	4b02      	ldr	r3, [pc, #8]	; (80a06c8 <network_off+0xc>)
 80a06c0:	681b      	ldr	r3, [r3, #0]
 80a06c2:	699b      	ldr	r3, [r3, #24]
 80a06c4:	9301      	str	r3, [sp, #4]
 80a06c6:	bd08      	pop	{r3, pc}
 80a06c8:	080601c8 	.word	0x080601c8

080a06cc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a06cc:	b508      	push	{r3, lr}
 80a06ce:	4b02      	ldr	r3, [pc, #8]	; (80a06d8 <network_listen+0xc>)
 80a06d0:	681b      	ldr	r3, [r3, #0]
 80a06d2:	69db      	ldr	r3, [r3, #28]
 80a06d4:	9301      	str	r3, [sp, #4]
 80a06d6:	bd08      	pop	{r3, pc}
 80a06d8:	080601c8 	.word	0x080601c8

080a06dc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a06dc:	b508      	push	{r3, lr}
 80a06de:	4b02      	ldr	r3, [pc, #8]	; (80a06e8 <network_listening+0xc>)
 80a06e0:	681b      	ldr	r3, [r3, #0]
 80a06e2:	6a1b      	ldr	r3, [r3, #32]
 80a06e4:	9301      	str	r3, [sp, #4]
 80a06e6:	bd08      	pop	{r3, pc}
 80a06e8:	080601c8 	.word	0x080601c8

080a06ec <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a06ec:	b508      	push	{r3, lr}
 80a06ee:	4b02      	ldr	r3, [pc, #8]	; (80a06f8 <network_set_listen_timeout+0xc>)
 80a06f0:	681b      	ldr	r3, [r3, #0]
 80a06f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a06f4:	9301      	str	r3, [sp, #4]
 80a06f6:	bd08      	pop	{r3, pc}
 80a06f8:	080601c8 	.word	0x080601c8

080a06fc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a06fc:	b508      	push	{r3, lr}
 80a06fe:	4b02      	ldr	r3, [pc, #8]	; (80a0708 <network_get_listen_timeout+0xc>)
 80a0700:	681b      	ldr	r3, [r3, #0]
 80a0702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0704:	9301      	str	r3, [sp, #4]
 80a0706:	bd08      	pop	{r3, pc}
 80a0708:	080601c8 	.word	0x080601c8

080a070c <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a070c:	b508      	push	{r3, lr}
 80a070e:	4b02      	ldr	r3, [pc, #8]	; (80a0718 <spark_cloud_flag_connected+0xc>)
 80a0710:	681b      	ldr	r3, [r3, #0]
 80a0712:	695b      	ldr	r3, [r3, #20]
 80a0714:	9301      	str	r3, [sp, #4]
 80a0716:	bd08      	pop	{r3, pc}
 80a0718:	080601cc 	.word	0x080601cc

080a071c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a071c:	b508      	push	{r3, lr}
 80a071e:	4b02      	ldr	r3, [pc, #8]	; (80a0728 <spark_send_event+0xc>)
 80a0720:	681b      	ldr	r3, [r3, #0]
 80a0722:	6a1b      	ldr	r3, [r3, #32]
 80a0724:	9301      	str	r3, [sp, #4]
 80a0726:	bd08      	pop	{r3, pc}
 80a0728:	080601cc 	.word	0x080601cc

080a072c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a072c:	b508      	push	{r3, lr}
 80a072e:	4b02      	ldr	r3, [pc, #8]	; (80a0738 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0730:	681b      	ldr	r3, [r3, #0]
 80a0732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0734:	9301      	str	r3, [sp, #4]
 80a0736:	bd08      	pop	{r3, pc}
 80a0738:	080601cc 	.word	0x080601cc

080a073c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a073c:	b508      	push	{r3, lr}
 80a073e:	4b02      	ldr	r3, [pc, #8]	; (80a0748 <malloc+0xc>)
 80a0740:	681b      	ldr	r3, [r3, #0]
 80a0742:	681b      	ldr	r3, [r3, #0]
 80a0744:	9301      	str	r3, [sp, #4]
 80a0746:	bd08      	pop	{r3, pc}
 80a0748:	080601a0 	.word	0x080601a0

080a074c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a074c:	b508      	push	{r3, lr}
 80a074e:	4b02      	ldr	r3, [pc, #8]	; (80a0758 <free+0xc>)
 80a0750:	681b      	ldr	r3, [r3, #0]
 80a0752:	685b      	ldr	r3, [r3, #4]
 80a0754:	9301      	str	r3, [sp, #4]
 80a0756:	bd08      	pop	{r3, pc}
 80a0758:	080601a0 	.word	0x080601a0

080a075c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a075c:	b508      	push	{r3, lr}
 80a075e:	4b02      	ldr	r3, [pc, #8]	; (80a0768 <realloc+0xc>)
 80a0760:	681b      	ldr	r3, [r3, #0]
 80a0762:	689b      	ldr	r3, [r3, #8]
 80a0764:	9301      	str	r3, [sp, #4]
 80a0766:	bd08      	pop	{r3, pc}
 80a0768:	080601a0 	.word	0x080601a0

080a076c <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a076c:	b508      	push	{r3, lr}
 80a076e:	4b02      	ldr	r3, [pc, #8]	; (80a0778 <abort+0xc>)
 80a0770:	681b      	ldr	r3, [r3, #0]
 80a0772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0774:	9301      	str	r3, [sp, #4]
 80a0776:	bd08      	pop	{r3, pc}
 80a0778:	080601a0 	.word	0x080601a0

080a077c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a077c:	b508      	push	{r3, lr}
 80a077e:	4b02      	ldr	r3, [pc, #8]	; (80a0788 <_malloc_r+0xc>)
 80a0780:	681b      	ldr	r3, [r3, #0]
 80a0782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0784:	9301      	str	r3, [sp, #4]
 80a0786:	bd08      	pop	{r3, pc}
 80a0788:	080601a0 	.word	0x080601a0

080a078c <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a078c:	4770      	bx	lr

080a078e <_ZN8SPIClassD0Ev>:
 80a078e:	b510      	push	{r4, lr}
 80a0790:	4604      	mov	r4, r0
 80a0792:	2110      	movs	r1, #16
 80a0794:	f001 f84b 	bl	80a182e <_ZdlPvj>
 80a0798:	4620      	mov	r0, r4
 80a079a:	bd10      	pop	{r4, pc}

080a079c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a079c:	b570      	push	{r4, r5, r6, lr}
 80a079e:	4604      	mov	r4, r0
 80a07a0:	460e      	mov	r6, r1
 80a07a2:	4b07      	ldr	r3, [pc, #28]	; (80a07c0 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a07a4:	2500      	movs	r5, #0
 80a07a6:	6003      	str	r3, [r0, #0]
 80a07a8:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a07ac:	f7ff feb2 	bl	80a0514 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a07b0:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a07b2:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a07b4:	f7ff fe96 	bl	80a04e4 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a07b8:	60a5      	str	r5, [r4, #8]
}
 80a07ba:	4620      	mov	r0, r4
 80a07bc:	bd70      	pop	{r4, r5, r6, pc}
 80a07be:	bf00      	nop
 80a07c0:	080a2d60 	.word	0x080a2d60

080a07c4 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a07c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a07c8:	4b03      	ldr	r3, [pc, #12]	; (80a07d8 <_GLOBAL__sub_I_System+0x14>)
 80a07ca:	2000      	movs	r0, #0
 80a07cc:	7018      	strb	r0, [r3, #0]
 80a07ce:	8058      	strh	r0, [r3, #2]
 80a07d0:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a07d2:	f7ff bf17 	b.w	80a0604 <set_system_mode>
 80a07d6:	bf00      	nop
 80a07d8:	20000104 	.word	0x20000104

080a07dc <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a07dc:	b510      	push	{r4, lr}
 80a07de:	4604      	mov	r4, r0
{
	free(buffer);
 80a07e0:	6800      	ldr	r0, [r0, #0]
 80a07e2:	f7ff ffb3 	bl	80a074c <free>
}
 80a07e6:	4620      	mov	r0, r4
 80a07e8:	bd10      	pop	{r4, pc}

080a07ea <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a07ea:	b510      	push	{r4, lr}
 80a07ec:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a07ee:	6800      	ldr	r0, [r0, #0]
 80a07f0:	b108      	cbz	r0, 80a07f6 <_ZN6String10invalidateEv+0xc>
 80a07f2:	f7ff ffab 	bl	80a074c <free>
	buffer = NULL;
 80a07f6:	2300      	movs	r3, #0
 80a07f8:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a07fa:	60a3      	str	r3, [r4, #8]
 80a07fc:	6063      	str	r3, [r4, #4]
 80a07fe:	bd10      	pop	{r4, pc}

080a0800 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a0800:	b538      	push	{r3, r4, r5, lr}
 80a0802:	4604      	mov	r4, r0
 80a0804:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a0806:	6800      	ldr	r0, [r0, #0]
 80a0808:	3101      	adds	r1, #1
 80a080a:	f7ff ffa7 	bl	80a075c <realloc>
	if (newbuffer) {
 80a080e:	b110      	cbz	r0, 80a0816 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a0810:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a0814:	2001      	movs	r0, #1
	}
	return 0;
}
 80a0816:	bd38      	pop	{r3, r4, r5, pc}

080a0818 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a0818:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a081a:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a081c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a081e:	b113      	cbz	r3, 80a0826 <_ZN6String7reserveEj+0xe>
 80a0820:	6843      	ldr	r3, [r0, #4]
 80a0822:	428b      	cmp	r3, r1
 80a0824:	d207      	bcs.n	80a0836 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a0826:	4620      	mov	r0, r4
 80a0828:	f7ff ffea 	bl	80a0800 <_ZN6String12changeBufferEj>
 80a082c:	b120      	cbz	r0, 80a0838 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a082e:	68a3      	ldr	r3, [r4, #8]
 80a0830:	b90b      	cbnz	r3, 80a0836 <_ZN6String7reserveEj+0x1e>
 80a0832:	6822      	ldr	r2, [r4, #0]
 80a0834:	7013      	strb	r3, [r2, #0]
 80a0836:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a0838:	bd10      	pop	{r4, pc}

080a083a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a083a:	b570      	push	{r4, r5, r6, lr}
 80a083c:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a083e:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0840:	4604      	mov	r4, r0
 80a0842:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a0844:	f7ff ffe8 	bl	80a0818 <_ZN6String7reserveEj>
 80a0848:	b918      	cbnz	r0, 80a0852 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a084a:	4620      	mov	r0, r4
 80a084c:	f7ff ffcd 	bl	80a07ea <_ZN6String10invalidateEv>
		return *this;
 80a0850:	e009      	b.n	80a0866 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a0852:	462a      	mov	r2, r5
 80a0854:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a0856:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a0858:	6820      	ldr	r0, [r4, #0]
 80a085a:	f002 f8c7 	bl	80a29ec <memcpy>
	buffer[len] = 0;
 80a085e:	6822      	ldr	r2, [r4, #0]
 80a0860:	68a3      	ldr	r3, [r4, #8]
 80a0862:	2100      	movs	r1, #0
 80a0864:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a0866:	4620      	mov	r0, r4
 80a0868:	bd70      	pop	{r4, r5, r6, pc}

080a086a <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a086a:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a086c:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a086e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a0870:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a0872:	6043      	str	r3, [r0, #4]
	len = 0;
 80a0874:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a0876:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a0878:	460d      	mov	r5, r1
 80a087a:	b139      	cbz	r1, 80a088c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a087c:	4608      	mov	r0, r1
 80a087e:	f002 f946 	bl	80a2b0e <strlen>
 80a0882:	4629      	mov	r1, r5
 80a0884:	4602      	mov	r2, r0
 80a0886:	4620      	mov	r0, r4
 80a0888:	f7ff ffd7 	bl	80a083a <_ZN6String4copyEPKcj>
}
 80a088c:	4620      	mov	r0, r4
 80a088e:	bd38      	pop	{r3, r4, r5, pc}

080a0890 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0892:	4606      	mov	r6, r0
 80a0894:	460d      	mov	r5, r1
 80a0896:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a0898:	2400      	movs	r4, #0
  while (size--) {
 80a089a:	42bd      	cmp	r5, r7
 80a089c:	d00c      	beq.n	80a08b8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a089e:	6833      	ldr	r3, [r6, #0]
 80a08a0:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a08a4:	689b      	ldr	r3, [r3, #8]
 80a08a6:	4630      	mov	r0, r6
 80a08a8:	4798      	blx	r3
     if (chunk>=0)
 80a08aa:	2800      	cmp	r0, #0
 80a08ac:	db01      	blt.n	80a08b2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a08ae:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a08b0:	e7f3      	b.n	80a089a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a08b2:	2c00      	cmp	r4, #0
 80a08b4:	bf08      	it	eq
 80a08b6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a08b8:	4620      	mov	r0, r4
 80a08ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a08bc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a08bc:	b570      	push	{r4, r5, r6, lr}
 80a08be:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a08c0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a08c2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a08c4:	b149      	cbz	r1, 80a08da <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a08c6:	f002 f922 	bl	80a2b0e <strlen>
 80a08ca:	682b      	ldr	r3, [r5, #0]
 80a08cc:	4602      	mov	r2, r0
 80a08ce:	4621      	mov	r1, r4
 80a08d0:	4628      	mov	r0, r5
    }
 80a08d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a08d6:	68db      	ldr	r3, [r3, #12]
 80a08d8:	4718      	bx	r3
    }
 80a08da:	bd70      	pop	{r4, r5, r6, pc}

080a08dc <_ZN5Print5printEPKc>:
 80a08dc:	b508      	push	{r3, lr}
 80a08de:	f7ff ffed 	bl	80a08bc <_ZN5Print5writeEPKc>
 80a08e2:	bd08      	pop	{r3, pc}

080a08e4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a08e4:	6803      	ldr	r3, [r0, #0]
 80a08e6:	689b      	ldr	r3, [r3, #8]
 80a08e8:	4718      	bx	r3

080a08ea <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a08ea:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a08ec:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a08ee:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a08f0:	f7ff fff8 	bl	80a08e4 <_ZN5Print5printEc>
  n += print('\n');
 80a08f4:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a08f6:	4604      	mov	r4, r0
  n += print('\n');
 80a08f8:	4628      	mov	r0, r5
 80a08fa:	f7ff fff3 	bl	80a08e4 <_ZN5Print5printEc>
  return n;
}
 80a08fe:	4420      	add	r0, r4
 80a0900:	bd38      	pop	{r3, r4, r5, pc}

080a0902 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a0902:	b538      	push	{r3, r4, r5, lr}
 80a0904:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a0906:	f7ff ffd9 	bl	80a08bc <_ZN5Print5writeEPKc>
 80a090a:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a090c:	4628      	mov	r0, r5
 80a090e:	f7ff ffec 	bl	80a08ea <_ZN5Print7printlnEv>
  return n;
}
 80a0912:	4420      	add	r0, r4
 80a0914:	bd38      	pop	{r3, r4, r5, pc}

080a0916 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0916:	2a01      	cmp	r2, #1
 80a0918:	bf98      	it	ls
 80a091a:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a091c:	b530      	push	{r4, r5, lr}
 80a091e:	460b      	mov	r3, r1
 80a0920:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0922:	2100      	movs	r1, #0
 80a0924:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a0928:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a092c:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a0930:	fb05 3312 	mls	r3, r5, r2, r3
 80a0934:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0936:	2b09      	cmp	r3, #9
 80a0938:	bf94      	ite	ls
 80a093a:	3330      	addls	r3, #48	; 0x30
 80a093c:	3337      	addhi	r3, #55	; 0x37
 80a093e:	b2db      	uxtb	r3, r3
 80a0940:	4621      	mov	r1, r4
 80a0942:	f804 3901 	strb.w	r3, [r4], #-1
 80a0946:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a0948:	2d00      	cmp	r5, #0
 80a094a:	d1ef      	bne.n	80a092c <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a094c:	f7ff ffb6 	bl	80a08bc <_ZN5Print5writeEPKc>
}
 80a0950:	b00b      	add	sp, #44	; 0x2c
 80a0952:	bd30      	pop	{r4, r5, pc}

080a0954 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a0954:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a0956:	b922      	cbnz	r2, 80a0962 <_ZN5Print5printEmi+0xe>
 80a0958:	6803      	ldr	r3, [r0, #0]
 80a095a:	b2c9      	uxtb	r1, r1
 80a095c:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a095e:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a0960:	4718      	bx	r3
  else return printNumber(n, base);
 80a0962:	b2d2      	uxtb	r2, r2
}
 80a0964:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a0966:	f7ff bfd6 	b.w	80a0916 <_ZN5Print11printNumberEmh>

080a096a <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a096a:	f7ff bff3 	b.w	80a0954 <_ZN5Print5printEmi>

080a096e <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a096e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0972:	4607      	mov	r7, r0
 80a0974:	460e      	mov	r6, r1
  if (base == 0) {
 80a0976:	4615      	mov	r5, r2
 80a0978:	b92a      	cbnz	r2, 80a0986 <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a097a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a097e:	6803      	ldr	r3, [r0, #0]
 80a0980:	b2c9      	uxtb	r1, r1
 80a0982:	689b      	ldr	r3, [r3, #8]
 80a0984:	4718      	bx	r3
  } else if (base == 10) {
 80a0986:	2a0a      	cmp	r2, #10
 80a0988:	d102      	bne.n	80a0990 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a098a:	2900      	cmp	r1, #0
 80a098c:	da01      	bge.n	80a0992 <_ZN5Print5printEli+0x24>
 80a098e:	e004      	b.n	80a099a <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a0990:	b2d2      	uxtb	r2, r2
  }
}
 80a0992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a0996:	f7ff bfbe 	b.w	80a0916 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a099a:	212d      	movs	r1, #45	; 0x2d
 80a099c:	f7ff ffa2 	bl	80a08e4 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a09a0:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a09a2:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a09a4:	4271      	negs	r1, r6
 80a09a6:	4638      	mov	r0, r7
 80a09a8:	f7ff ffb5 	bl	80a0916 <_ZN5Print11printNumberEmh>
 80a09ac:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a09ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a09b2 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 80a09b2:	b538      	push	{r3, r4, r5, lr}
 80a09b4:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a09b6:	f7ff ffda 	bl	80a096e <_ZN5Print5printEli>
 80a09ba:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
 80a09bc:	4628      	mov	r0, r5
 80a09be:	f7ff ff94 	bl	80a08ea <_ZN5Print7printlnEv>
  return n;
}
 80a09c2:	4420      	add	r0, r4
 80a09c4:	bd38      	pop	{r3, r4, r5, pc}
	...

080a09c8 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a09c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a09cc:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a09ce:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a09d0:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a09d2:	4617      	mov	r7, r2
 80a09d4:	461e      	mov	r6, r3
 80a09d6:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a09da:	f001 fcc7 	bl	80a236c <__aeabi_dcmpun>
 80a09de:	b108      	cbz	r0, 80a09e4 <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a09e0:	4947      	ldr	r1, [pc, #284]	; (80a0b00 <_ZN5Print10printFloatEdh+0x138>)
 80a09e2:	e012      	b.n	80a0a0a <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a09e4:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80a09e8:	f04f 32ff 	mov.w	r2, #4294967295
 80a09ec:	4b45      	ldr	r3, [pc, #276]	; (80a0b04 <_ZN5Print10printFloatEdh+0x13c>)
 80a09ee:	4638      	mov	r0, r7
 80a09f0:	4621      	mov	r1, r4
 80a09f2:	f001 fcbb 	bl	80a236c <__aeabi_dcmpun>
 80a09f6:	b968      	cbnz	r0, 80a0a14 <_ZN5Print10printFloatEdh+0x4c>
 80a09f8:	f04f 32ff 	mov.w	r2, #4294967295
 80a09fc:	4b41      	ldr	r3, [pc, #260]	; (80a0b04 <_ZN5Print10printFloatEdh+0x13c>)
 80a09fe:	4638      	mov	r0, r7
 80a0a00:	4621      	mov	r1, r4
 80a0a02:	f001 fc95 	bl	80a2330 <__aeabi_dcmple>
 80a0a06:	b928      	cbnz	r0, 80a0a14 <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a0a08:	493f      	ldr	r1, [pc, #252]	; (80a0b08 <_ZN5Print10printFloatEdh+0x140>)
 80a0a0a:	4640      	mov	r0, r8
 80a0a0c:	f7ff ff56 	bl	80a08bc <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a0a10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a0a14:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a0a18:	4b3c      	ldr	r3, [pc, #240]	; (80a0b0c <_ZN5Print10printFloatEdh+0x144>)
 80a0a1a:	4638      	mov	r0, r7
 80a0a1c:	4631      	mov	r1, r6
 80a0a1e:	f001 fc9b 	bl	80a2358 <__aeabi_dcmpgt>
 80a0a22:	b108      	cbz	r0, 80a0a28 <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a0a24:	493a      	ldr	r1, [pc, #232]	; (80a0b10 <_ZN5Print10printFloatEdh+0x148>)
 80a0a26:	e7f0      	b.n	80a0a0a <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a0a28:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a0a2c:	4b39      	ldr	r3, [pc, #228]	; (80a0b14 <_ZN5Print10printFloatEdh+0x14c>)
 80a0a2e:	4638      	mov	r0, r7
 80a0a30:	4631      	mov	r1, r6
 80a0a32:	f001 fc73 	bl	80a231c <__aeabi_dcmplt>
 80a0a36:	2800      	cmp	r0, #0
 80a0a38:	d1f4      	bne.n	80a0a24 <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 80a0a3a:	2200      	movs	r2, #0
 80a0a3c:	2300      	movs	r3, #0
 80a0a3e:	4638      	mov	r0, r7
 80a0a40:	4631      	mov	r1, r6
 80a0a42:	f001 fc6b 	bl	80a231c <__aeabi_dcmplt>
 80a0a46:	b138      	cbz	r0, 80a0a58 <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 80a0a48:	212d      	movs	r1, #45	; 0x2d
 80a0a4a:	4640      	mov	r0, r8
 80a0a4c:	f7ff ff4a 	bl	80a08e4 <_ZN5Print5printEc>
     number = -number;
 80a0a50:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 80a0a54:	4604      	mov	r4, r0
 80a0a56:	e000      	b.n	80a0a5a <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a0a58:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a0a5a:	492f      	ldr	r1, [pc, #188]	; (80a0b18 <_ZN5Print10printFloatEdh+0x150>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a0a5c:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a0a60:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 80a0a62:	fa5f f389 	uxtb.w	r3, r9
 80a0a66:	429d      	cmp	r5, r3
 80a0a68:	d906      	bls.n	80a0a78 <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 80a0a6a:	2200      	movs	r2, #0
 80a0a6c:	4b2b      	ldr	r3, [pc, #172]	; (80a0b1c <_ZN5Print10printFloatEdh+0x154>)
 80a0a6e:	f001 fb0d 	bl	80a208c <__aeabi_ddiv>
 80a0a72:	f109 0901 	add.w	r9, r9, #1
 80a0a76:	e7f4      	b.n	80a0a62 <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 80a0a78:	463a      	mov	r2, r7
 80a0a7a:	4633      	mov	r3, r6
 80a0a7c:	f001 f82a 	bl	80a1ad4 <__adddf3>
 80a0a80:	460f      	mov	r7, r1
 80a0a82:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a0a84:	f001 fcb0 	bl	80a23e8 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a0a88:	220a      	movs	r2, #10
 80a0a8a:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a0a8c:	4681      	mov	r9, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a0a8e:	4640      	mov	r0, r8
 80a0a90:	f7ff ff41 	bl	80a0916 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a0a94:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 80a0a96:	b37d      	cbz	r5, 80a0af8 <_ZN5Print10printFloatEdh+0x130>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 80a0a98:	4648      	mov	r0, r9
 80a0a9a:	f001 f957 	bl	80a1d4c <__aeabi_ui2d>
 80a0a9e:	4602      	mov	r2, r0
 80a0aa0:	460b      	mov	r3, r1
 80a0aa2:	4630      	mov	r0, r6
 80a0aa4:	4639      	mov	r1, r7
 80a0aa6:	f001 f813 	bl	80a1ad0 <__aeabi_dsub>
 80a0aaa:	4606      	mov	r6, r0
 80a0aac:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a0aae:	4640      	mov	r0, r8
 80a0ab0:	491b      	ldr	r1, [pc, #108]	; (80a0b20 <_ZN5Print10printFloatEdh+0x158>)
 80a0ab2:	f7ff ff03 	bl	80a08bc <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 80a0ab6:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 80a0ab8:	4b18      	ldr	r3, [pc, #96]	; (80a0b1c <_ZN5Print10printFloatEdh+0x154>)
 80a0aba:	2200      	movs	r2, #0
 80a0abc:	4630      	mov	r0, r6
 80a0abe:	4639      	mov	r1, r7
 80a0ac0:	f001 f9ba 	bl	80a1e38 <__aeabi_dmul>
 80a0ac4:	460f      	mov	r7, r1
 80a0ac6:	4606      	mov	r6, r0
    int toPrint = int(remainder);
 80a0ac8:	f001 fc66 	bl	80a2398 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a0acc:	220a      	movs	r2, #10
 80a0ace:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
 80a0ad0:	4681      	mov	r9, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a0ad2:	4640      	mov	r0, r8
 80a0ad4:	f7ff ff4b 	bl	80a096e <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
 80a0ad8:	4404      	add	r4, r0
    remainder -= toPrint;
 80a0ada:	4648      	mov	r0, r9
 80a0adc:	f001 f946 	bl	80a1d6c <__aeabi_i2d>
 80a0ae0:	4602      	mov	r2, r0
 80a0ae2:	460b      	mov	r3, r1
 80a0ae4:	4630      	mov	r0, r6
 80a0ae6:	4639      	mov	r1, r7
 80a0ae8:	f000 fff2 	bl	80a1ad0 <__aeabi_dsub>
 80a0aec:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a0aee:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 80a0af2:	4606      	mov	r6, r0
 80a0af4:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a0af6:	d1df      	bne.n	80a0ab8 <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a0af8:	4620      	mov	r0, r4
 80a0afa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a0afe:	bf00      	nop
 80a0b00:	080a2d68 	.word	0x080a2d68
 80a0b04:	7fefffff 	.word	0x7fefffff
 80a0b08:	080a2d72 	.word	0x080a2d72
 80a0b0c:	41efffff 	.word	0x41efffff
 80a0b10:	080a2d6c 	.word	0x080a2d6c
 80a0b14:	c1efffff 	.word	0xc1efffff
 80a0b18:	3fe00000 	.word	0x3fe00000
 80a0b1c:	40240000 	.word	0x40240000
 80a0b20:	080a2d70 	.word	0x080a2d70

080a0b24 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a0b24:	f89d 1000 	ldrb.w	r1, [sp]
 80a0b28:	9100      	str	r1, [sp, #0]
 80a0b2a:	f7ff bf4d 	b.w	80a09c8 <_ZN5Print10printFloatEdh>

080a0b2e <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 80a0b2e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a0b30:	f89d 1018 	ldrb.w	r1, [sp, #24]
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 80a0b34:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a0b36:	9100      	str	r1, [sp, #0]
 80a0b38:	f7ff ff46 	bl	80a09c8 <_ZN5Print10printFloatEdh>
 80a0b3c:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
 80a0b3e:	4628      	mov	r0, r5
 80a0b40:	f7ff fed3 	bl	80a08ea <_ZN5Print7printlnEv>
  return n;
}
 80a0b44:	4420      	add	r0, r4
 80a0b46:	b003      	add	sp, #12
 80a0b48:	bd30      	pop	{r4, r5, pc}

080a0b4a <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a0b4a:	2300      	movs	r3, #0
 80a0b4c:	461a      	mov	r2, r3
 80a0b4e:	4619      	mov	r1, r3
 80a0b50:	6840      	ldr	r0, [r0, #4]
 80a0b52:	f7ff bdab 	b.w	80a06ac <network_on>

080a0b56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a0b56:	680b      	ldr	r3, [r1, #0]
 80a0b58:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a0b5a:	b113      	cbz	r3, 80a0b62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a0b5c:	685a      	ldr	r2, [r3, #4]
 80a0b5e:	3201      	adds	r2, #1
 80a0b60:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a0b62:	4770      	bx	lr

080a0b64 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0b64:	4a01      	ldr	r2, [pc, #4]	; (80a0b6c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0b66:	4b02      	ldr	r3, [pc, #8]	; (80a0b70 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0b68:	601a      	str	r2, [r3, #0]
 80a0b6a:	4770      	bx	lr
 80a0b6c:	080a2dec 	.word	0x080a2dec
 80a0b70:	2000010c 	.word	0x2000010c

080a0b74 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0b74:	4b02      	ldr	r3, [pc, #8]	; (80a0b80 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a0b76:	681a      	ldr	r2, [r3, #0]
 80a0b78:	4b02      	ldr	r3, [pc, #8]	; (80a0b84 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a0b7a:	601a      	str	r2, [r3, #0]
 80a0b7c:	4770      	bx	lr
 80a0b7e:	bf00      	nop
 80a0b80:	20000000 	.word	0x20000000
 80a0b84:	20000110 	.word	0x20000110

080a0b88 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0b88:	2100      	movs	r1, #0
 80a0b8a:	f7ff bd43 	b.w	80a0614 <system_delay_ms>

080a0b8e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0b8e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0b90:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0b92:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a0b94:	b113      	cbz	r3, 80a0b9c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0b96:	2203      	movs	r2, #3
 80a0b98:	4601      	mov	r1, r0
 80a0b9a:	4798      	blx	r3
    }
 80a0b9c:	4620      	mov	r0, r4
 80a0b9e:	bd10      	pop	{r4, pc}

080a0ba0 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a0ba0:	b510      	push	{r4, lr}
 80a0ba2:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0ba4:	f7ff fff3 	bl	80a0b8e <_ZNSt14_Function_baseD1Ev>
 80a0ba8:	4620      	mov	r0, r4
 80a0baa:	bd10      	pop	{r4, pc}

080a0bac <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a0bac:	b513      	push	{r0, r1, r4, lr}
 80a0bae:	460b      	mov	r3, r1
 80a0bb0:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0bb2:	c803      	ldmia	r0, {r0, r1}
 80a0bb4:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a0bb8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a0bbc:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a0bc0:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a0bc4:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a0bc8:	b002      	add	sp, #8
 80a0bca:	bd10      	pop	{r4, pc}

080a0bcc <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0bcc:	4803      	ldr	r0, [pc, #12]	; (80a0bdc <_GLOBAL__sub_I_RGB+0x10>)
 80a0bce:	2300      	movs	r3, #0
 80a0bd0:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a0bd2:	4a03      	ldr	r2, [pc, #12]	; (80a0be0 <_GLOBAL__sub_I_RGB+0x14>)
 80a0bd4:	4903      	ldr	r1, [pc, #12]	; (80a0be4 <_GLOBAL__sub_I_RGB+0x18>)
 80a0bd6:	f000 be25 	b.w	80a1824 <__aeabi_atexit>
 80a0bda:	bf00      	nop
 80a0bdc:	20000114 	.word	0x20000114
 80a0be0:	20000068 	.word	0x20000068
 80a0be4:	080a0ba1 	.word	0x080a0ba1

080a0be8 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a0be8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a0bea:	4b14      	ldr	r3, [pc, #80]	; (80a0c3c <serialEventRun+0x54>)
 80a0bec:	b133      	cbz	r3, 80a0bfc <serialEventRun+0x14>
 80a0bee:	f000 fc2b 	bl	80a1448 <_Z16_fetch_usbserialv>
 80a0bf2:	6803      	ldr	r3, [r0, #0]
 80a0bf4:	691b      	ldr	r3, [r3, #16]
 80a0bf6:	4798      	blx	r3
 80a0bf8:	2800      	cmp	r0, #0
 80a0bfa:	dc16      	bgt.n	80a0c2a <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a0bfc:	4b10      	ldr	r3, [pc, #64]	; (80a0c40 <serialEventRun+0x58>)
 80a0bfe:	b133      	cbz	r3, 80a0c0e <serialEventRun+0x26>
 80a0c00:	f000 fcdc 	bl	80a15bc <_Z22__fetch_global_Serial1v>
 80a0c04:	6803      	ldr	r3, [r0, #0]
 80a0c06:	691b      	ldr	r3, [r3, #16]
 80a0c08:	4798      	blx	r3
 80a0c0a:	2800      	cmp	r0, #0
 80a0c0c:	dc10      	bgt.n	80a0c30 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a0c0e:	4b0d      	ldr	r3, [pc, #52]	; (80a0c44 <serialEventRun+0x5c>)
 80a0c10:	b10b      	cbz	r3, 80a0c16 <serialEventRun+0x2e>
 80a0c12:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a0c16:	4b0c      	ldr	r3, [pc, #48]	; (80a0c48 <serialEventRun+0x60>)
 80a0c18:	b17b      	cbz	r3, 80a0c3a <serialEventRun+0x52>
 80a0c1a:	f000 fc51 	bl	80a14c0 <_Z17_fetch_usbserial1v>
 80a0c1e:	6803      	ldr	r3, [r0, #0]
 80a0c20:	691b      	ldr	r3, [r3, #16]
 80a0c22:	4798      	blx	r3
 80a0c24:	2800      	cmp	r0, #0
 80a0c26:	dc06      	bgt.n	80a0c36 <serialEventRun+0x4e>
 80a0c28:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a0c2a:	f3af 8000 	nop.w
 80a0c2e:	e7e5      	b.n	80a0bfc <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a0c30:	f3af 8000 	nop.w
 80a0c34:	e7eb      	b.n	80a0c0e <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a0c36:	f3af 8000 	nop.w
 80a0c3a:	bd08      	pop	{r3, pc}
	...

080a0c4c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a0c4c:	b508      	push	{r3, lr}
	serialEventRun();
 80a0c4e:	f7ff ffcb 	bl	80a0be8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0c52:	f7ff fc57 	bl	80a0504 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0c56:	4b01      	ldr	r3, [pc, #4]	; (80a0c5c <_post_loop+0x10>)
 80a0c58:	6018      	str	r0, [r3, #0]
 80a0c5a:	bd08      	pop	{r3, pc}
 80a0c5c:	200005b8 	.word	0x200005b8

080a0c60 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0c60:	4802      	ldr	r0, [pc, #8]	; (80a0c6c <_Z33system_initialize_user_backup_ramv+0xc>)
 80a0c62:	4a03      	ldr	r2, [pc, #12]	; (80a0c70 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a0c64:	4903      	ldr	r1, [pc, #12]	; (80a0c74 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a0c66:	1a12      	subs	r2, r2, r0
 80a0c68:	f001 bec0 	b.w	80a29ec <memcpy>
 80a0c6c:	40024000 	.word	0x40024000
 80a0c70:	40024004 	.word	0x40024004
 80a0c74:	080a3020 	.word	0x080a3020

080a0c78 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a0c78:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0c7a:	2300      	movs	r3, #0
 80a0c7c:	9300      	str	r3, [sp, #0]
 80a0c7e:	461a      	mov	r2, r3
 80a0c80:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0c84:	f7ff fce8 	bl	80a0658 <system_ctrl_set_result>
}
 80a0c88:	b003      	add	sp, #12
 80a0c8a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a0c90 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a0c90:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a0c92:	8843      	ldrh	r3, [r0, #2]
 80a0c94:	2b0a      	cmp	r3, #10
 80a0c96:	d008      	beq.n	80a0caa <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a0c98:	2b50      	cmp	r3, #80	; 0x50
 80a0c9a:	d109      	bne.n	80a0cb0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a0c9c:	4b09      	ldr	r3, [pc, #36]	; (80a0cc4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a0c9e:	681b      	ldr	r3, [r3, #0]
 80a0ca0:	b13b      	cbz	r3, 80a0cb2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a0ca2:	b003      	add	sp, #12
 80a0ca4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a0ca8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a0caa:	f7ff ffe5 	bl	80a0c78 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a0cae:	e006      	b.n	80a0cbe <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0cb0:	2300      	movs	r3, #0
 80a0cb2:	9300      	str	r3, [sp, #0]
 80a0cb4:	461a      	mov	r2, r3
 80a0cb6:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0cba:	f7ff fccd 	bl	80a0658 <system_ctrl_set_result>
        break;
    }
}
 80a0cbe:	b003      	add	sp, #12
 80a0cc0:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0cc4:	20000124 	.word	0x20000124

080a0cc8 <module_user_init_hook>:

void module_user_init_hook()
{
 80a0cc8:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a0cca:	4c10      	ldr	r4, [pc, #64]	; (80a0d0c <module_user_init_hook+0x44>)
 80a0ccc:	4d10      	ldr	r5, [pc, #64]	; (80a0d10 <module_user_init_hook+0x48>)
 80a0cce:	6823      	ldr	r3, [r4, #0]
 80a0cd0:	42ab      	cmp	r3, r5
 80a0cd2:	4b10      	ldr	r3, [pc, #64]	; (80a0d14 <module_user_init_hook+0x4c>)
 80a0cd4:	bf0c      	ite	eq
 80a0cd6:	2201      	moveq	r2, #1
 80a0cd8:	2200      	movne	r2, #0
 80a0cda:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a0cdc:	d002      	beq.n	80a0ce4 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a0cde:	f7ff ffbf 	bl	80a0c60 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a0ce2:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a0ce4:	f7ff fc06 	bl	80a04f4 <HAL_RNG_GetRandomNumber>
 80a0ce8:	4604      	mov	r4, r0
    srand(seed);
 80a0cea:	f001 fe93 	bl	80a2a14 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a0cee:	4b0a      	ldr	r3, [pc, #40]	; (80a0d18 <module_user_init_hook+0x50>)
 80a0cf0:	b113      	cbz	r3, 80a0cf8 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a0cf2:	4620      	mov	r0, r4
 80a0cf4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a0cf8:	2100      	movs	r1, #0
 80a0cfa:	4807      	ldr	r0, [pc, #28]	; (80a0d18 <module_user_init_hook+0x50>)
 80a0cfc:	f7ff fd16 	bl	80a072c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a0d00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a0d04:	2100      	movs	r1, #0
 80a0d06:	4805      	ldr	r0, [pc, #20]	; (80a0d1c <module_user_init_hook+0x54>)
 80a0d08:	f7ff bc9c 	b.w	80a0644 <system_ctrl_set_app_request_handler>
 80a0d0c:	40024000 	.word	0x40024000
 80a0d10:	9a271c1e 	.word	0x9a271c1e
 80a0d14:	20000128 	.word	0x20000128
 80a0d18:	00000000 	.word	0x00000000
 80a0d1c:	080a0c91 	.word	0x080a0c91

080a0d20 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a0d20:	4770      	bx	lr

080a0d22 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a0d22:	2000      	movs	r0, #0
 80a0d24:	4770      	bx	lr

080a0d26 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a0d26:	b510      	push	{r4, lr}
 80a0d28:	4604      	mov	r4, r0
 80a0d2a:	2110      	movs	r1, #16
 80a0d2c:	f000 fd7f 	bl	80a182e <_ZdlPvj>
 80a0d30:	4620      	mov	r0, r4
 80a0d32:	bd10      	pop	{r4, pc}

080a0d34 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a0d34:	b508      	push	{r3, lr}
      { delete this; }
 80a0d36:	b108      	cbz	r0, 80a0d3c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a0d38:	f7ff fff5 	bl	80a0d26 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a0d3c:	bd08      	pop	{r3, pc}

080a0d3e <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a0d3e:	2200      	movs	r2, #0
 80a0d40:	6002      	str	r2, [r0, #0]
 80a0d42:	f64f 729c 	movw	r2, #65436	; 0xff9c
 80a0d46:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a0d48:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0d4a:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 80a0d4e:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0d50:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0d52:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a0d54:	680c      	ldr	r4, [r1, #0]
 80a0d56:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0d58:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a0d5a:	bd10      	pop	{r4, pc}

080a0d5c <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a0d5c:	b510      	push	{r4, lr}
 80a0d5e:	4604      	mov	r4, r0
    free((void*)msg_);
 80a0d60:	6800      	ldr	r0, [r0, #0]
 80a0d62:	f7ff fcf3 	bl	80a074c <free>
}
 80a0d66:	4620      	mov	r0, r4
 80a0d68:	bd10      	pop	{r4, pc}

080a0d6a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80a0d6a:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a0d6c:	68c4      	ldr	r4, [r0, #12]
 80a0d6e:	b1f4      	cbz	r4, 80a0dae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a0d70:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a0d72:	2b02      	cmp	r3, #2
 80a0d74:	d103      	bne.n	80a0d7e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a0d76:	f104 000c 	add.w	r0, r4, #12
 80a0d7a:	f7ff ffef 	bl	80a0d5c <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a0d7e:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80a0d80:	b135      	cbz	r5, 80a0d90 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0d82:	4628      	mov	r0, r5
 80a0d84:	f7ff ff03 	bl	80a0b8e <_ZNSt14_Function_baseD1Ev>
 80a0d88:	2110      	movs	r1, #16
 80a0d8a:	4628      	mov	r0, r5
 80a0d8c:	f000 fd4f 	bl	80a182e <_ZdlPvj>
 80a0d90:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a0d92:	b135      	cbz	r5, 80a0da2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a0d94:	4628      	mov	r0, r5
 80a0d96:	f7ff fefa 	bl	80a0b8e <_ZNSt14_Function_baseD1Ev>
 80a0d9a:	2110      	movs	r1, #16
 80a0d9c:	4628      	mov	r0, r5
 80a0d9e:	f000 fd46 	bl	80a182e <_ZdlPvj>
 80a0da2:	4620      	mov	r0, r4
 80a0da4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a0da8:	2114      	movs	r1, #20
 80a0daa:	f000 bd40 	b.w	80a182e <_ZdlPvj>
 80a0dae:	bd38      	pop	{r3, r4, r5, pc}

080a0db0 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80a0db0:	b513      	push	{r0, r1, r4, lr}
 80a0db2:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a0db4:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80a0db8:	2300      	movs	r3, #0
 80a0dba:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a0dbc:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a0dbe:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a0dc0:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0dc2:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a0dc4:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a0dc6:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0dc8:	f7ff f98e 	bl	80a00e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0dcc:	4620      	mov	r0, r4
 80a0dce:	b002      	add	sp, #8
 80a0dd0:	bd10      	pop	{r4, pc}

080a0dd2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a0dd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0dd4:	460c      	mov	r4, r1
 80a0dd6:	4606      	mov	r6, r0
 80a0dd8:	460f      	mov	r7, r1
 80a0dda:	f854 3b04 	ldr.w	r3, [r4], #4
 80a0dde:	ad02      	add	r5, sp, #8
 80a0de0:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a0de4:	4621      	mov	r1, r4
 80a0de6:	a801      	add	r0, sp, #4
 80a0de8:	f7ff feb5 	bl	80a0b56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a0dec:	4629      	mov	r1, r5
 80a0dee:	4630      	mov	r0, r6
 80a0df0:	f7ff ffde 	bl	80a0db0 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0df4:	a801      	add	r0, sp, #4
 80a0df6:	f7ff f977 	bl	80a00e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0dfa:	4620      	mov	r0, r4
 80a0dfc:	f7ff f974 	bl	80a00e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a0e00:	4638      	mov	r0, r7
 80a0e02:	2108      	movs	r1, #8
 80a0e04:	f000 fd13 	bl	80a182e <_ZdlPvj>
        return p;
    }
 80a0e08:	4630      	mov	r0, r6
 80a0e0a:	b003      	add	sp, #12
 80a0e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080a0e10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a0e10:	b538      	push	{r3, r4, r5, lr}
 80a0e12:	2300      	movs	r3, #0
 80a0e14:	4604      	mov	r4, r0
 80a0e16:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0e18:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a0e1a:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0e1c:	f7ff f93d 	bl	80a009a <_Znwj>
 80a0e20:	b128      	cbz	r0, 80a0e2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a0e22:	2301      	movs	r3, #1
 80a0e24:	6043      	str	r3, [r0, #4]
 80a0e26:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a0e28:	4b02      	ldr	r3, [pc, #8]	; (80a0e34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a0e2a:	60c5      	str	r5, [r0, #12]
 80a0e2c:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0e2e:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 80a0e30:	4620      	mov	r0, r4
 80a0e32:	bd38      	pop	{r3, r4, r5, pc}
 80a0e34:	080a2e8c 	.word	0x080a2e8c

080a0e38 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0e38:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a0e3a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0e3c:	b90a      	cbnz	r2, 80a0e42 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a0e3e:	f000 fcf8 	bl	80a1832 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0e42:	68c3      	ldr	r3, [r0, #12]
    }
 80a0e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0e48:	4718      	bx	r3

080a0e4a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a0e4a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0e4c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a0e4e:	f100 0110 	add.w	r1, r0, #16
 80a0e52:	f7ff fff1 	bl	80a0e38 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a0e56:	bd08      	pop	{r3, pc}

080a0e58 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0e58:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a0e5a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0e5c:	b90a      	cbnz	r2, 80a0e62 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a0e5e:	f000 fce8 	bl	80a1832 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0e62:	68c3      	ldr	r3, [r0, #12]
    }
 80a0e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0e68:	4718      	bx	r3

080a0e6a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a0e6a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0e6c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a0e6e:	f100 0110 	add.w	r1, r0, #16
 80a0e72:	f7ff fff1 	bl	80a0e58 <_ZNKSt8functionIFvRKbEEclES1_>
 80a0e76:	bd08      	pop	{r3, pc}

080a0e78 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0e78:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0e7a:	2300      	movs	r3, #0
 80a0e7c:	6083      	str	r3, [r0, #8]
 80a0e7e:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0e80:	4604      	mov	r4, r0
 80a0e82:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a0e84:	b12b      	cbz	r3, 80a0e92 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a0e86:	2202      	movs	r2, #2
 80a0e88:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a0e8a:	68eb      	ldr	r3, [r5, #12]
 80a0e8c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a0e8e:	68ab      	ldr	r3, [r5, #8]
 80a0e90:	60a3      	str	r3, [r4, #8]
	}
    }
 80a0e92:	4620      	mov	r0, r4
 80a0e94:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0e98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80a0e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0e9a:	b089      	sub	sp, #36	; 0x24
 80a0e9c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a0e9e:	4668      	mov	r0, sp
 80a0ea0:	f7ff ff4d 	bl	80a0d3e <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a0ea4:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a0ea8:	2300      	movs	r3, #0
 80a0eaa:	f88d 3008 	strb.w	r3, [sp, #8]
 80a0eae:	e8d4 3f4f 	ldrexb	r3, [r4]
 80a0eb2:	2b00      	cmp	r3, #0
 80a0eb4:	d103      	bne.n	80a0ebe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 80a0eb6:	e8c4 2f41 	strexb	r1, r2, [r4]
 80a0eba:	2900      	cmp	r1, #0
 80a0ebc:	d1f7      	bne.n	80a0eae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 80a0ebe:	d002      	beq.n	80a0ec6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 80a0ec0:	f88d 3008 	strb.w	r3, [sp, #8]
 80a0ec4:	e063      	b.n	80a0f8e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80a0ec6:	f114 050c 	adds.w	r5, r4, #12
 80a0eca:	d003      	beq.n	80a0ed4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 80a0ecc:	4669      	mov	r1, sp
 80a0ece:	4628      	mov	r0, r5
 80a0ed0:	f7ff ff35 	bl	80a0d3e <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a0ed4:	f3bf 8f5f 	dmb	sy
 80a0ed8:	2301      	movs	r3, #1
 80a0eda:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a0edc:	f3bf 8f5f 	dmb	sy
 80a0ee0:	f104 0308 	add.w	r3, r4, #8
 80a0ee4:	2000      	movs	r0, #0
 80a0ee6:	e853 6f00 	ldrex	r6, [r3]
 80a0eea:	e843 0200 	strex	r2, r0, [r3]
 80a0eee:	2a00      	cmp	r2, #0
 80a0ef0:	d1f9      	bne.n	80a0ee6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 80a0ef2:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a0ef6:	2e00      	cmp	r6, #0
 80a0ef8:	d049      	beq.n	80a0f8e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a0efa:	f7ff fb93 	bl	80a0624 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a0efe:	b120      	cbz	r0, 80a0f0a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a0f00:	4629      	mov	r1, r5
 80a0f02:	4630      	mov	r0, r6
 80a0f04:	f7ff ff98 	bl	80a0e38 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a0f08:	e03a      	b.n	80a0f80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a0f0a:	4631      	mov	r1, r6
 80a0f0c:	a802      	add	r0, sp, #8
 80a0f0e:	f7ff ffb3 	bl	80a0e78 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a0f12:	68e0      	ldr	r0, [r4, #12]
 80a0f14:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a0f18:	b108      	cbz	r0, 80a0f1e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 80a0f1a:	f001 fddd 	bl	80a2ad8 <strdup>
 80a0f1e:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a0f20:	2010      	movs	r0, #16
 80a0f22:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a0f26:	f7ff f8b8 	bl	80a009a <_Znwj>
 80a0f2a:	4605      	mov	r5, r0
 80a0f2c:	b1e8      	cbz	r0, 80a0f6a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0f2e:	2700      	movs	r7, #0
 80a0f30:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0f32:	2018      	movs	r0, #24
 80a0f34:	f7ff f8b1 	bl	80a009a <_Znwj>
 80a0f38:	4604      	mov	r4, r0
 80a0f3a:	b188      	cbz	r0, 80a0f60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a0f3c:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0f3e:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a0f40:	a802      	add	r0, sp, #8
 80a0f42:	f7ff fe33 	bl	80a0bac <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0f46:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a0f48:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0f4a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0f4c:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a0f4e:	9204      	str	r2, [sp, #16]
 80a0f50:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a0f52:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a0f54:	60e3      	str	r3, [r4, #12]
 80a0f56:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0f5a:	9205      	str	r2, [sp, #20]
 80a0f5c:	f7ff feef 	bl	80a0d3e <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0f60:	4b0d      	ldr	r3, [pc, #52]	; (80a0f98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0f62:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0f64:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a0f66:	4b0d      	ldr	r3, [pc, #52]	; (80a0f9c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 80a0f68:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 80a0f6a:	a806      	add	r0, sp, #24
 80a0f6c:	f7ff fef6 	bl	80a0d5c <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0f70:	a802      	add	r0, sp, #8
 80a0f72:	f7ff fe0c 	bl	80a0b8e <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a0f76:	2200      	movs	r2, #0
 80a0f78:	4629      	mov	r1, r5
 80a0f7a:	4809      	ldr	r0, [pc, #36]	; (80a0fa0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 80a0f7c:	f7ff fb5a 	bl	80a0634 <application_thread_invoke>
 80a0f80:	4630      	mov	r0, r6
 80a0f82:	f7ff fe04 	bl	80a0b8e <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a0f86:	2110      	movs	r1, #16
 80a0f88:	4630      	mov	r0, r6
 80a0f8a:	f000 fc50 	bl	80a182e <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 80a0f8e:	4668      	mov	r0, sp
 80a0f90:	f7ff fee4 	bl	80a0d5c <_ZN8particle5ErrorD1Ev>
    }
 80a0f94:	b009      	add	sp, #36	; 0x24
 80a0f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0f98:	080a0e4b 	.word	0x080a0e4b
 80a0f9c:	080a10c1 	.word	0x080a10c1
 80a0fa0:	080a1609 	.word	0x080a1609

080a0fa4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a0fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0fa8:	b08b      	sub	sp, #44	; 0x2c
 80a0faa:	4606      	mov	r6, r0
 80a0fac:	460f      	mov	r7, r1
 80a0fae:	4690      	mov	r8, r2
 80a0fb0:	4699      	mov	r9, r3
 80a0fb2:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a0fb6:	f7ff fba9 	bl	80a070c <spark_cloud_flag_connected>
 80a0fba:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
 80a0fbc:	4683      	mov	fp, r0
 80a0fbe:	bb30      	cbnz	r0, 80a100e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a0fc0:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a0fc4:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a0fc6:	a905      	add	r1, sp, #20
 80a0fc8:	4628      	mov	r0, r5
 80a0fca:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a0fce:	f7ff feb6 	bl	80a0d3e <_ZN8particle5ErrorC1EOS0_>
 80a0fd2:	2014      	movs	r0, #20
 80a0fd4:	f7ff f861 	bl	80a009a <_Znwj>
 80a0fd8:	4604      	mov	r4, r0
 80a0fda:	b158      	cbz	r0, 80a0ff4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a0fdc:	2302      	movs	r3, #2
 80a0fde:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a0fe0:	2301      	movs	r3, #1
 80a0fe2:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a0fe4:	f8c0 b004 	str.w	fp, [r0, #4]
 80a0fe8:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 80a0fec:	4629      	mov	r1, r5
 80a0fee:	300c      	adds	r0, #12
 80a0ff0:	f7ff fea5 	bl	80a0d3e <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a0ff4:	4630      	mov	r0, r6
 80a0ff6:	4621      	mov	r1, r4
 80a0ff8:	f840 4b04 	str.w	r4, [r0], #4
 80a0ffc:	f7ff ff08 	bl	80a0e10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a1000:	4628      	mov	r0, r5
 80a1002:	f7ff feab 	bl	80a0d5c <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a1006:	a805      	add	r0, sp, #20
 80a1008:	f7ff fea8 	bl	80a0d5c <_ZN8particle5ErrorD1Ev>
 80a100c:	e052      	b.n	80a10b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a100e:	2400      	movs	r4, #0
 80a1010:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a1012:	2014      	movs	r0, #20
 80a1014:	606c      	str	r4, [r5, #4]
 80a1016:	60ac      	str	r4, [r5, #8]
 80a1018:	9307      	str	r3, [sp, #28]
 80a101a:	f7ff f83e 	bl	80a009a <_Znwj>
 80a101e:	4601      	mov	r1, r0
 80a1020:	b118      	cbz	r0, 80a102a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 80a1022:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a1024:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a1026:	6044      	str	r4, [r0, #4]
 80a1028:	6084      	str	r4, [r0, #8]
 80a102a:	a804      	add	r0, sp, #16
 80a102c:	9103      	str	r1, [sp, #12]
 80a102e:	f7ff feef 	bl	80a0e10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80a1032:	4b22      	ldr	r3, [pc, #136]	; (80a10bc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a1034:	2008      	movs	r0, #8
 80a1036:	9308      	str	r3, [sp, #32]
 80a1038:	f7ff f82f 	bl	80a009a <_Znwj>
 80a103c:	4604      	mov	r4, r0
 80a103e:	b128      	cbz	r0, 80a104c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1040:	9b03      	ldr	r3, [sp, #12]
 80a1042:	a904      	add	r1, sp, #16
 80a1044:	f840 3b04 	str.w	r3, [r0], #4
 80a1048:	f7ff fd85 	bl	80a0b56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a104c:	9500      	str	r5, [sp, #0]
 80a104e:	fa5f f38a 	uxtb.w	r3, sl
 80a1052:	464a      	mov	r2, r9
 80a1054:	4641      	mov	r1, r8
 80a1056:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80a1058:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a105a:	f7ff fb5f 	bl	80a071c <spark_send_event>
 80a105e:	b920      	cbnz	r0, 80a106a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a1060:	9b03      	ldr	r3, [sp, #12]
 80a1062:	785b      	ldrb	r3, [r3, #1]
 80a1064:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a1068:	b183      	cbz	r3, 80a108c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 80a106a:	9b03      	ldr	r3, [sp, #12]
 80a106c:	a904      	add	r1, sp, #16
 80a106e:	a806      	add	r0, sp, #24
 80a1070:	9305      	str	r3, [sp, #20]
 80a1072:	f7ff fd70 	bl	80a0b56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a1076:	a905      	add	r1, sp, #20
 80a1078:	4630      	mov	r0, r6
 80a107a:	f7ff fe99 	bl	80a0db0 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a107e:	a806      	add	r0, sp, #24
 80a1080:	f7ff f832 	bl	80a00e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1084:	a804      	add	r0, sp, #16
 80a1086:	f7ff f82f 	bl	80a00e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a108a:	e013      	b.n	80a10b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 80a108c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80a1090:	a905      	add	r1, sp, #20
 80a1092:	a803      	add	r0, sp, #12
 80a1094:	9205      	str	r2, [sp, #20]
 80a1096:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a109a:	f7ff fefd 	bl	80a0e98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a109e:	a805      	add	r0, sp, #20
 80a10a0:	f7ff fe5c 	bl	80a0d5c <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a10a4:	a805      	add	r0, sp, #20
 80a10a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a10a8:	f7ff fe93 	bl	80a0dd2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 80a10ac:	a806      	add	r0, sp, #24
 80a10ae:	f7ff f81b 	bl	80a00e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a10b2:	e7da      	b.n	80a106a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 80a10b4:	4630      	mov	r0, r6
 80a10b6:	b00b      	add	sp, #44	; 0x2c
 80a10b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a10bc:	080a1231 	.word	0x080a1231

080a10c0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a10c0:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a10c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a10c4:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a10c6:	d006      	beq.n	80a10d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a10c8:	2a03      	cmp	r2, #3
 80a10ca:	d017      	beq.n	80a10fc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80a10cc:	2a01      	cmp	r2, #1
 80a10ce:	d122      	bne.n	80a1116 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a10d0:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a10d2:	6003      	str	r3, [r0, #0]
	      break;
 80a10d4:	e01f      	b.n	80a1116 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a10d6:	2018      	movs	r0, #24
 80a10d8:	680e      	ldr	r6, [r1, #0]
 80a10da:	f7fe ffde 	bl	80a009a <_Znwj>
 80a10de:	4605      	mov	r5, r0
 80a10e0:	b150      	cbz	r0, 80a10f8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a10e2:	4631      	mov	r1, r6
 80a10e4:	f7ff fec8 	bl	80a0e78 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a10e8:	6930      	ldr	r0, [r6, #16]
 80a10ea:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a10ee:	b108      	cbz	r0, 80a10f4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80a10f0:	f001 fcf2 	bl	80a2ad8 <strdup>
 80a10f4:	6128      	str	r0, [r5, #16]
 80a10f6:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a10f8:	6025      	str	r5, [r4, #0]
 80a10fa:	e00c      	b.n	80a1116 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a10fc:	6804      	ldr	r4, [r0, #0]
 80a10fe:	b154      	cbz	r4, 80a1116 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 80a1100:	f104 0010 	add.w	r0, r4, #16
 80a1104:	f7ff fe2a 	bl	80a0d5c <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1108:	4620      	mov	r0, r4
 80a110a:	f7ff fd40 	bl	80a0b8e <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a110e:	2118      	movs	r1, #24
 80a1110:	4620      	mov	r0, r4
 80a1112:	f000 fb8c 	bl	80a182e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a1116:	2000      	movs	r0, #0
 80a1118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a111a <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a111a:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a111c:	2300      	movs	r3, #0
 80a111e:	6083      	str	r3, [r0, #8]
 80a1120:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1122:	4604      	mov	r4, r0
 80a1124:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a1126:	b12b      	cbz	r3, 80a1134 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1128:	2202      	movs	r2, #2
 80a112a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a112c:	68eb      	ldr	r3, [r5, #12]
 80a112e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a1130:	68ab      	ldr	r3, [r5, #8]
 80a1132:	60a3      	str	r3, [r4, #8]
	}
    }
 80a1134:	4620      	mov	r0, r4
 80a1136:	bd38      	pop	{r3, r4, r5, pc}

080a1138 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1138:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a113a:	b570      	push	{r4, r5, r6, lr}
 80a113c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a113e:	d006      	beq.n	80a114e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80a1140:	2a03      	cmp	r2, #3
 80a1142:	d011      	beq.n	80a1168 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80a1144:	2a01      	cmp	r2, #1
 80a1146:	d118      	bne.n	80a117a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1148:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a114a:	6003      	str	r3, [r0, #0]
	      break;
 80a114c:	e015      	b.n	80a117a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a114e:	2014      	movs	r0, #20
 80a1150:	680e      	ldr	r6, [r1, #0]
 80a1152:	f7fe ffa2 	bl	80a009a <_Znwj>
 80a1156:	4605      	mov	r5, r0
 80a1158:	b120      	cbz	r0, 80a1164 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a115a:	4631      	mov	r1, r6
 80a115c:	f7ff ffdd 	bl	80a111a <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a1160:	7c33      	ldrb	r3, [r6, #16]
 80a1162:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1164:	6025      	str	r5, [r4, #0]
 80a1166:	e008      	b.n	80a117a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1168:	6804      	ldr	r4, [r0, #0]
 80a116a:	b134      	cbz	r4, 80a117a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a116c:	4620      	mov	r0, r4
 80a116e:	f7ff fd0e 	bl	80a0b8e <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1172:	2114      	movs	r1, #20
 80a1174:	4620      	mov	r0, r4
 80a1176:	f000 fb5a 	bl	80a182e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a117a:	2000      	movs	r0, #0
 80a117c:	bd70      	pop	{r4, r5, r6, pc}
	...

080a1180 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a1180:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1182:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a1184:	f3bf 8f5f 	dmb	sy
 80a1188:	b087      	sub	sp, #28
 80a118a:	2300      	movs	r3, #0
 80a118c:	e850 6f00 	ldrex	r6, [r0]
 80a1190:	e840 3200 	strex	r2, r3, [r0]
 80a1194:	2a00      	cmp	r2, #0
 80a1196:	d1f9      	bne.n	80a118c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a1198:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a119c:	2e00      	cmp	r6, #0
 80a119e:	d03f      	beq.n	80a1220 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a11a0:	4618      	mov	r0, r3
 80a11a2:	f7ff fa3f 	bl	80a0624 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a11a6:	4607      	mov	r7, r0
 80a11a8:	b120      	cbz	r0, 80a11b4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a11aa:	4621      	mov	r1, r4
 80a11ac:	4630      	mov	r0, r6
 80a11ae:	f7ff fe53 	bl	80a0e58 <_ZNKSt8functionIFvRKbEEclES1_>
 80a11b2:	e02e      	b.n	80a1212 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a11b4:	4631      	mov	r1, r6
 80a11b6:	a801      	add	r0, sp, #4
 80a11b8:	f7ff ffaf 	bl	80a111a <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a11bc:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a11be:	2010      	movs	r0, #16
 80a11c0:	f88d 3014 	strb.w	r3, [sp, #20]
 80a11c4:	f7fe ff69 	bl	80a009a <_Znwj>
 80a11c8:	4605      	mov	r5, r0
 80a11ca:	b1d0      	cbz	r0, 80a1202 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a11cc:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a11ce:	2014      	movs	r0, #20
 80a11d0:	f7fe ff63 	bl	80a009a <_Znwj>
 80a11d4:	4604      	mov	r4, r0
 80a11d6:	b178      	cbz	r0, 80a11f8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a11d8:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a11da:	4601      	mov	r1, r0
 80a11dc:	a801      	add	r0, sp, #4
 80a11de:	f7ff fce5 	bl	80a0bac <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a11e2:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a11e4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a11e6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a11e8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a11ea:	9203      	str	r2, [sp, #12]
 80a11ec:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a11ee:	60e3      	str	r3, [r4, #12]
 80a11f0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a11f4:	9204      	str	r2, [sp, #16]
 80a11f6:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a11f8:	4b0a      	ldr	r3, [pc, #40]	; (80a1224 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a11fa:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a11fc:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a11fe:	4b0a      	ldr	r3, [pc, #40]	; (80a1228 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a1200:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1202:	a801      	add	r0, sp, #4
 80a1204:	f7ff fcc3 	bl	80a0b8e <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1208:	2200      	movs	r2, #0
 80a120a:	4629      	mov	r1, r5
 80a120c:	4807      	ldr	r0, [pc, #28]	; (80a122c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a120e:	f7ff fa11 	bl	80a0634 <application_thread_invoke>
 80a1212:	4630      	mov	r0, r6
 80a1214:	f7ff fcbb 	bl	80a0b8e <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a1218:	2110      	movs	r1, #16
 80a121a:	4630      	mov	r0, r6
 80a121c:	f000 fb07 	bl	80a182e <_ZdlPvj>
        }
    }
 80a1220:	b007      	add	sp, #28
 80a1222:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1224:	080a0e6b 	.word	0x080a0e6b
 80a1228:	080a1139 	.word	0x080a1139
 80a122c:	080a1609 	.word	0x080a1609

080a1230 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a1230:	b530      	push	{r4, r5, lr}
 80a1232:	4604      	mov	r4, r0
 80a1234:	b085      	sub	sp, #20
 80a1236:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a1238:	4668      	mov	r0, sp
 80a123a:	4611      	mov	r1, r2
 80a123c:	f7ff fdc9 	bl	80a0dd2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a1240:	b17c      	cbz	r4, 80a1262 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a1242:	b224      	sxth	r4, r4
 80a1244:	4628      	mov	r0, r5
 80a1246:	b10d      	cbz	r5, 80a124c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80a1248:	f001 fc46 	bl	80a2ad8 <strdup>
 80a124c:	9002      	str	r0, [sp, #8]
 80a124e:	a902      	add	r1, sp, #8
 80a1250:	4668      	mov	r0, sp
 80a1252:	f8ad 400c 	strh.w	r4, [sp, #12]
 80a1256:	f7ff fe1f 	bl	80a0e98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a125a:	a802      	add	r0, sp, #8
 80a125c:	f7ff fd7e 	bl	80a0d5c <_ZN8particle5ErrorD1Ev>
 80a1260:	e01d      	b.n	80a129e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a1262:	f04f 0201 	mov.w	r2, #1
 80a1266:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a1268:	f88d 4008 	strb.w	r4, [sp, #8]
 80a126c:	e8d0 3f4f 	ldrexb	r3, [r0]
 80a1270:	42a3      	cmp	r3, r4
 80a1272:	d103      	bne.n	80a127c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80a1274:	e8c0 2f41 	strexb	r1, r2, [r0]
 80a1278:	2900      	cmp	r1, #0
 80a127a:	d1f7      	bne.n	80a126c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80a127c:	d002      	beq.n	80a1284 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80a127e:	f88d 3008 	strb.w	r3, [sp, #8]
 80a1282:	e00c      	b.n	80a129e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80a1284:	f110 010c 	adds.w	r1, r0, #12
 80a1288:	f04f 0301 	mov.w	r3, #1
 80a128c:	bf18      	it	ne
 80a128e:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a1290:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80a1294:	3004      	adds	r0, #4
 80a1296:	f800 3c03 	strb.w	r3, [r0, #-3]
 80a129a:	f7ff ff71 	bl	80a1180 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a129e:	a801      	add	r0, sp, #4
 80a12a0:	f7fe ff22 	bl	80a00e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80a12a4:	b005      	add	sp, #20
 80a12a6:	bd30      	pop	{r4, r5, pc}

080a12a8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a12a8:	4770      	bx	lr

080a12aa <_ZN9IPAddressD0Ev>:
 80a12aa:	b510      	push	{r4, lr}
 80a12ac:	4604      	mov	r4, r0
 80a12ae:	2118      	movs	r1, #24
 80a12b0:	f000 fabd 	bl	80a182e <_ZdlPvj>
 80a12b4:	4620      	mov	r0, r4
 80a12b6:	bd10      	pop	{r4, pc}

080a12b8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a12b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a12ba:	460f      	mov	r7, r1
 80a12bc:	f100 0608 	add.w	r6, r0, #8
 80a12c0:	1d05      	adds	r5, r0, #4
 80a12c2:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a12c4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a12c8:	220a      	movs	r2, #10
 80a12ca:	4638      	mov	r0, r7
 80a12cc:	f7ff fb4d 	bl	80a096a <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a12d0:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a12d2:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a12d4:	d007      	beq.n	80a12e6 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a12d6:	2c00      	cmp	r4, #0
 80a12d8:	d0f4      	beq.n	80a12c4 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a12da:	212e      	movs	r1, #46	; 0x2e
 80a12dc:	4638      	mov	r0, r7
 80a12de:	f7ff fb01 	bl	80a08e4 <_ZN5Print5printEc>
 80a12e2:	4404      	add	r4, r0
 80a12e4:	e7ee      	b.n	80a12c4 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a12e6:	4620      	mov	r0, r4
 80a12e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a12ec <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a12ec:	b510      	push	{r4, lr}
 80a12ee:	4604      	mov	r4, r0
 80a12f0:	4b04      	ldr	r3, [pc, #16]	; (80a1304 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a12f2:	2211      	movs	r2, #17
 80a12f4:	f840 3b04 	str.w	r3, [r0], #4
 80a12f8:	2100      	movs	r1, #0
 80a12fa:	f001 fb82 	bl	80a2a02 <memset>
{
    clear();
}
 80a12fe:	4620      	mov	r0, r4
 80a1300:	bd10      	pop	{r4, pc}
 80a1302:	bf00      	nop
 80a1304:	080a2ea8 	.word	0x080a2ea8

080a1308 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1308:	4603      	mov	r3, r0
 80a130a:	4a07      	ldr	r2, [pc, #28]	; (80a1328 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a130c:	b510      	push	{r4, lr}
 80a130e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a1312:	f101 0210 	add.w	r2, r1, #16
 80a1316:	f851 4b04 	ldr.w	r4, [r1], #4
 80a131a:	4291      	cmp	r1, r2
 80a131c:	f843 4b04 	str.w	r4, [r3], #4
 80a1320:	d1f9      	bne.n	80a1316 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a1322:	780a      	ldrb	r2, [r1, #0]
 80a1324:	701a      	strb	r2, [r3, #0]
}
 80a1326:	bd10      	pop	{r4, pc}
 80a1328:	080a2ea8 	.word	0x080a2ea8

080a132c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a132c:	4a02      	ldr	r2, [pc, #8]	; (80a1338 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a132e:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1330:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a1332:	2204      	movs	r2, #4
 80a1334:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a1336:	4770      	bx	lr
 80a1338:	080a2ea8 	.word	0x080a2ea8

080a133c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a133c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a133e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1342:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a1346:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a134a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a134e:	2304      	movs	r3, #4
 80a1350:	6041      	str	r1, [r0, #4]
 80a1352:	7503      	strb	r3, [r0, #20]
 80a1354:	bd10      	pop	{r4, pc}
	...

080a1358 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1358:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a135a:	4d04      	ldr	r5, [pc, #16]	; (80a136c <_ZN9IPAddressC1Ehhhh+0x14>)
 80a135c:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a135e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1362:	9500      	str	r5, [sp, #0]
 80a1364:	f7ff ffea 	bl	80a133c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1368:	b003      	add	sp, #12
 80a136a:	bd30      	pop	{r4, r5, pc}
 80a136c:	080a2ea8 	.word	0x080a2ea8

080a1370 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1370:	7441      	strb	r1, [r0, #17]
 80a1372:	4770      	bx	lr

080a1374 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a1374:	4770      	bx	lr

080a1376 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a1376:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a1378:	2100      	movs	r1, #0
 80a137a:	7c00      	ldrb	r0, [r0, #16]
 80a137c:	f7ff f922 	bl	80a05c4 <HAL_USB_USART_Receive_Data>
}
 80a1380:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1384:	bf28      	it	cs
 80a1386:	f04f 30ff 	movcs.w	r0, #4294967295
 80a138a:	bd08      	pop	{r3, pc}

080a138c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a138c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a138e:	2101      	movs	r1, #1
 80a1390:	7c00      	ldrb	r0, [r0, #16]
 80a1392:	f7ff f917 	bl	80a05c4 <HAL_USB_USART_Receive_Data>
}
 80a1396:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a139a:	bf28      	it	cs
 80a139c:	f04f 30ff 	movcs.w	r0, #4294967295
 80a13a0:	bd08      	pop	{r3, pc}

080a13a2 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a13a2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a13a4:	7c00      	ldrb	r0, [r0, #16]
 80a13a6:	f7ff f905 	bl	80a05b4 <HAL_USB_USART_Available_Data_For_Write>
}
 80a13aa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a13ae:	bd08      	pop	{r3, pc}

080a13b0 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a13b0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a13b2:	7c00      	ldrb	r0, [r0, #16]
 80a13b4:	f7ff f8f6 	bl	80a05a4 <HAL_USB_USART_Available_Data>
}
 80a13b8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a13bc:	bd08      	pop	{r3, pc}

080a13be <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a13be:	7c00      	ldrb	r0, [r0, #16]
 80a13c0:	f7ff b910 	b.w	80a05e4 <HAL_USB_USART_Flush_Data>

080a13c4 <_ZN9USBSerialD0Ev>:
 80a13c4:	b510      	push	{r4, lr}
 80a13c6:	4604      	mov	r4, r0
 80a13c8:	2114      	movs	r1, #20
 80a13ca:	f000 fa30 	bl	80a182e <_ZdlPvj>
 80a13ce:	4620      	mov	r0, r4
 80a13d0:	bd10      	pop	{r4, pc}

080a13d2 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a13d2:	b538      	push	{r3, r4, r5, lr}
 80a13d4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a13d6:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a13d8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a13da:	f7ff f8eb 	bl	80a05b4 <HAL_USB_USART_Available_Data_For_Write>
 80a13de:	2800      	cmp	r0, #0
 80a13e0:	dc01      	bgt.n	80a13e6 <_ZN9USBSerial5writeEh+0x14>
 80a13e2:	7c60      	ldrb	r0, [r4, #17]
 80a13e4:	b128      	cbz	r0, 80a13f2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a13e6:	4629      	mov	r1, r5
 80a13e8:	7c20      	ldrb	r0, [r4, #16]
 80a13ea:	f7ff f8f3 	bl	80a05d4 <HAL_USB_USART_Send_Data>
 80a13ee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a13f2:	bd38      	pop	{r3, r4, r5, pc}

080a13f4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a13f4:	b510      	push	{r4, lr}
 80a13f6:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a13f8:	2300      	movs	r3, #0
 80a13fa:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a13fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1400:	60a3      	str	r3, [r4, #8]
 80a1402:	4b05      	ldr	r3, [pc, #20]	; (80a1418 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a1404:	4608      	mov	r0, r1
 80a1406:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a1408:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a140a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a140c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a140e:	4611      	mov	r1, r2
 80a1410:	f7ff f8c0 	bl	80a0594 <HAL_USB_USART_Init>
}
 80a1414:	4620      	mov	r0, r4
 80a1416:	bd10      	pop	{r4, pc}
 80a1418:	080a2ebc 	.word	0x080a2ebc

080a141c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a141c:	b510      	push	{r4, lr}
 80a141e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1420:	2214      	movs	r2, #20
 80a1422:	2100      	movs	r1, #0
 80a1424:	f001 faed 	bl	80a2a02 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1428:	4b05      	ldr	r3, [pc, #20]	; (80a1440 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a142a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a142c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a142e:	4b05      	ldr	r3, [pc, #20]	; (80a1444 <_Z19acquireSerialBufferv+0x28>)
 80a1430:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1432:	f240 1301 	movw	r3, #257	; 0x101
 80a1436:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1438:	2381      	movs	r3, #129	; 0x81
 80a143a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a143c:	bd10      	pop	{r4, pc}
 80a143e:	bf00      	nop
 80a1440:	200001b1 	.word	0x200001b1
 80a1444:	20000130 	.word	0x20000130

080a1448 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a1448:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a144a:	4d0e      	ldr	r5, [pc, #56]	; (80a1484 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a144c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a144e:	a801      	add	r0, sp, #4
 80a1450:	f7ff ffe4 	bl	80a141c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1454:	6829      	ldr	r1, [r5, #0]
 80a1456:	f011 0401 	ands.w	r4, r1, #1
 80a145a:	d110      	bne.n	80a147e <_Z16_fetch_usbserialv+0x36>
 80a145c:	4628      	mov	r0, r5
 80a145e:	f7fe fe20 	bl	80a00a2 <__cxa_guard_acquire>
 80a1462:	b160      	cbz	r0, 80a147e <_Z16_fetch_usbserialv+0x36>
 80a1464:	aa01      	add	r2, sp, #4
 80a1466:	4621      	mov	r1, r4
 80a1468:	4807      	ldr	r0, [pc, #28]	; (80a1488 <_Z16_fetch_usbserialv+0x40>)
 80a146a:	f7ff ffc3 	bl	80a13f4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a146e:	4628      	mov	r0, r5
 80a1470:	f7fe fe1c 	bl	80a00ac <__cxa_guard_release>
 80a1474:	4a05      	ldr	r2, [pc, #20]	; (80a148c <_Z16_fetch_usbserialv+0x44>)
 80a1476:	4906      	ldr	r1, [pc, #24]	; (80a1490 <_Z16_fetch_usbserialv+0x48>)
 80a1478:	4803      	ldr	r0, [pc, #12]	; (80a1488 <_Z16_fetch_usbserialv+0x40>)
 80a147a:	f000 f9d3 	bl	80a1824 <__aeabi_atexit>
	return _usbserial;
}
 80a147e:	4802      	ldr	r0, [pc, #8]	; (80a1488 <_Z16_fetch_usbserialv+0x40>)
 80a1480:	b007      	add	sp, #28
 80a1482:	bd30      	pop	{r4, r5, pc}
 80a1484:	2000012c 	.word	0x2000012c
 80a1488:	200002b4 	.word	0x200002b4
 80a148c:	20000068 	.word	0x20000068
 80a1490:	080a1375 	.word	0x080a1375

080a1494 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a1494:	b510      	push	{r4, lr}
 80a1496:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1498:	2214      	movs	r2, #20
 80a149a:	2100      	movs	r1, #0
 80a149c:	f001 fab1 	bl	80a2a02 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a14a0:	4b05      	ldr	r3, [pc, #20]	; (80a14b8 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a14a2:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a14a4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a14a6:	4b05      	ldr	r3, [pc, #20]	; (80a14bc <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a14a8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a14aa:	f240 1301 	movw	r3, #257	; 0x101
 80a14ae:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a14b0:	2381      	movs	r3, #129	; 0x81
 80a14b2:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a14b4:	bd10      	pop	{r4, pc}
 80a14b6:	bf00      	nop
 80a14b8:	20000364 	.word	0x20000364
 80a14bc:	200002cc 	.word	0x200002cc

080a14c0 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a14c0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a14c2:	4c0e      	ldr	r4, [pc, #56]	; (80a14fc <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a14c4:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a14c6:	a801      	add	r0, sp, #4
 80a14c8:	f7ff ffe4 	bl	80a1494 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a14cc:	6823      	ldr	r3, [r4, #0]
 80a14ce:	07db      	lsls	r3, r3, #31
 80a14d0:	d410      	bmi.n	80a14f4 <_Z17_fetch_usbserial1v+0x34>
 80a14d2:	4620      	mov	r0, r4
 80a14d4:	f7fe fde5 	bl	80a00a2 <__cxa_guard_acquire>
 80a14d8:	b160      	cbz	r0, 80a14f4 <_Z17_fetch_usbserial1v+0x34>
 80a14da:	aa01      	add	r2, sp, #4
 80a14dc:	2101      	movs	r1, #1
 80a14de:	4808      	ldr	r0, [pc, #32]	; (80a1500 <_Z17_fetch_usbserial1v+0x40>)
 80a14e0:	f7ff ff88 	bl	80a13f4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a14e4:	4620      	mov	r0, r4
 80a14e6:	f7fe fde1 	bl	80a00ac <__cxa_guard_release>
 80a14ea:	4a06      	ldr	r2, [pc, #24]	; (80a1504 <_Z17_fetch_usbserial1v+0x44>)
 80a14ec:	4906      	ldr	r1, [pc, #24]	; (80a1508 <_Z17_fetch_usbserial1v+0x48>)
 80a14ee:	4804      	ldr	r0, [pc, #16]	; (80a1500 <_Z17_fetch_usbserial1v+0x40>)
 80a14f0:	f000 f998 	bl	80a1824 <__aeabi_atexit>
  return _usbserial1;
}
 80a14f4:	4802      	ldr	r0, [pc, #8]	; (80a1500 <_Z17_fetch_usbserial1v+0x40>)
 80a14f6:	b006      	add	sp, #24
 80a14f8:	bd10      	pop	{r4, pc}
 80a14fa:	bf00      	nop
 80a14fc:	200002c8 	.word	0x200002c8
 80a1500:	20000350 	.word	0x20000350
 80a1504:	20000068 	.word	0x20000068
 80a1508:	080a1375 	.word	0x080a1375

080a150c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a150c:	4770      	bx	lr

080a150e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a150e:	7441      	strb	r1, [r0, #17]
 80a1510:	4770      	bx	lr

080a1512 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a1512:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a1514:	7c00      	ldrb	r0, [r0, #16]
 80a1516:	f7ff f835 	bl	80a0584 <HAL_USART_Available_Data_For_Write>
}
 80a151a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a151e:	bd08      	pop	{r3, pc}

080a1520 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a1520:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a1522:	7c00      	ldrb	r0, [r0, #16]
 80a1524:	f7ff f80e 	bl	80a0544 <HAL_USART_Available_Data>
}
 80a1528:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a152c:	bd08      	pop	{r3, pc}

080a152e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a152e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a1530:	7c00      	ldrb	r0, [r0, #16]
 80a1532:	f7ff f817 	bl	80a0564 <HAL_USART_Peek_Data>
}
 80a1536:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a153a:	bf28      	it	cs
 80a153c:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1540:	bd08      	pop	{r3, pc}

080a1542 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a1542:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a1544:	7c00      	ldrb	r0, [r0, #16]
 80a1546:	f7ff f805 	bl	80a0554 <HAL_USART_Read_Data>
}
 80a154a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a154e:	bf28      	it	cs
 80a1550:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1554:	bd08      	pop	{r3, pc}

080a1556 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a1556:	7c00      	ldrb	r0, [r0, #16]
 80a1558:	f7ff b80c 	b.w	80a0574 <HAL_USART_Flush_Data>

080a155c <_ZN11USARTSerialD0Ev>:
 80a155c:	b510      	push	{r4, lr}
 80a155e:	4604      	mov	r4, r0
 80a1560:	2114      	movs	r1, #20
 80a1562:	f000 f964 	bl	80a182e <_ZdlPvj>
 80a1566:	4620      	mov	r0, r4
 80a1568:	bd10      	pop	{r4, pc}

080a156a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a156a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a156c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a156e:	4604      	mov	r4, r0
 80a1570:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1572:	b925      	cbnz	r5, 80a157e <_ZN11USARTSerial5writeEh+0x14>
 80a1574:	7c00      	ldrb	r0, [r0, #16]
 80a1576:	f7ff f805 	bl	80a0584 <HAL_USART_Available_Data_For_Write>
 80a157a:	2800      	cmp	r0, #0
 80a157c:	dd05      	ble.n	80a158a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a157e:	4631      	mov	r1, r6
 80a1580:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a1582:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1586:	f7fe bfd5 	b.w	80a0534 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a158a:	4628      	mov	r0, r5
 80a158c:	bd70      	pop	{r4, r5, r6, pc}
	...

080a1590 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1590:	b510      	push	{r4, lr}
 80a1592:	4604      	mov	r4, r0
 80a1594:	4608      	mov	r0, r1
 80a1596:	4611      	mov	r1, r2
 80a1598:	2200      	movs	r2, #0
 80a159a:	6062      	str	r2, [r4, #4]
 80a159c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a15a0:	60a2      	str	r2, [r4, #8]
 80a15a2:	4a05      	ldr	r2, [pc, #20]	; (80a15b8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a15a4:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a15a6:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a15a8:	2201      	movs	r2, #1
 80a15aa:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a15ac:	461a      	mov	r2, r3
 80a15ae:	f7fe ffb9 	bl	80a0524 <HAL_USART_Init>
}
 80a15b2:	4620      	mov	r0, r4
 80a15b4:	bd10      	pop	{r4, pc}
 80a15b6:	bf00      	nop
 80a15b8:	080a2eec 	.word	0x080a2eec

080a15bc <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a15bc:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a15be:	4d0c      	ldr	r5, [pc, #48]	; (80a15f0 <_Z22__fetch_global_Serial1v+0x34>)
 80a15c0:	6829      	ldr	r1, [r5, #0]
 80a15c2:	f011 0401 	ands.w	r4, r1, #1
 80a15c6:	d111      	bne.n	80a15ec <_Z22__fetch_global_Serial1v+0x30>
 80a15c8:	4628      	mov	r0, r5
 80a15ca:	f7fe fd6a 	bl	80a00a2 <__cxa_guard_acquire>
 80a15ce:	b168      	cbz	r0, 80a15ec <_Z22__fetch_global_Serial1v+0x30>
 80a15d0:	4a08      	ldr	r2, [pc, #32]	; (80a15f4 <_Z22__fetch_global_Serial1v+0x38>)
 80a15d2:	4621      	mov	r1, r4
 80a15d4:	4b08      	ldr	r3, [pc, #32]	; (80a15f8 <_Z22__fetch_global_Serial1v+0x3c>)
 80a15d6:	4809      	ldr	r0, [pc, #36]	; (80a15fc <_Z22__fetch_global_Serial1v+0x40>)
 80a15d8:	f7ff ffda 	bl	80a1590 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a15dc:	4628      	mov	r0, r5
 80a15de:	f7fe fd65 	bl	80a00ac <__cxa_guard_release>
 80a15e2:	4a07      	ldr	r2, [pc, #28]	; (80a1600 <_Z22__fetch_global_Serial1v+0x44>)
 80a15e4:	4907      	ldr	r1, [pc, #28]	; (80a1604 <_Z22__fetch_global_Serial1v+0x48>)
 80a15e6:	4805      	ldr	r0, [pc, #20]	; (80a15fc <_Z22__fetch_global_Serial1v+0x40>)
 80a15e8:	f000 f91c 	bl	80a1824 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a15ec:	4803      	ldr	r0, [pc, #12]	; (80a15fc <_Z22__fetch_global_Serial1v+0x40>)
 80a15ee:	bd38      	pop	{r3, r4, r5, pc}
 80a15f0:	20000500 	.word	0x20000500
 80a15f4:	20000504 	.word	0x20000504
 80a15f8:	2000047c 	.word	0x2000047c
 80a15fc:	20000468 	.word	0x20000468
 80a1600:	20000068 	.word	0x20000068
 80a1604:	080a150d 	.word	0x080a150d

080a1608 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a1608:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a160a:	6883      	ldr	r3, [r0, #8]
 80a160c:	4604      	mov	r4, r0
 80a160e:	b90b      	cbnz	r3, 80a1614 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a1610:	f000 f90f 	bl	80a1832 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1614:	68c3      	ldr	r3, [r0, #12]
 80a1616:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a1618:	68a3      	ldr	r3, [r4, #8]
 80a161a:	b11b      	cbz	r3, 80a1624 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a161c:	2203      	movs	r2, #3
 80a161e:	4621      	mov	r1, r4
 80a1620:	4620      	mov	r0, r4
 80a1622:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a1624:	4620      	mov	r0, r4
}
 80a1626:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a162a:	2110      	movs	r1, #16
 80a162c:	f000 b8ff 	b.w	80a182e <_ZdlPvj>

080a1630 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a1630:	2200      	movs	r2, #0
 80a1632:	4611      	mov	r1, r2
 80a1634:	6840      	ldr	r0, [r0, #4]
 80a1636:	f7ff b831 	b.w	80a069c <network_ready>

080a163a <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a163a:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a163c:	4616      	mov	r6, r2
 80a163e:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a1640:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1642:	460f      	mov	r7, r1
 80a1644:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a1646:	2100      	movs	r1, #0
 80a1648:	a803      	add	r0, sp, #12
 80a164a:	f001 f9da 	bl	80a2a02 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a164e:	4630      	mov	r0, r6
 80a1650:	f001 fa5d 	bl	80a2b0e <strlen>
 80a1654:	2500      	movs	r5, #0
 80a1656:	9500      	str	r5, [sp, #0]
 80a1658:	b281      	uxth	r1, r0
 80a165a:	687b      	ldr	r3, [r7, #4]
 80a165c:	aa03      	add	r2, sp, #12
 80a165e:	4630      	mov	r0, r6
 80a1660:	f7fe ffc8 	bl	80a05f4 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1664:	b120      	cbz	r0, 80a1670 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a1666:	4629      	mov	r1, r5
 80a1668:	4620      	mov	r0, r4
 80a166a:	f7ff fe5f 	bl	80a132c <_ZN9IPAddressC1Em>
 80a166e:	e003      	b.n	80a1678 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a1670:	a903      	add	r1, sp, #12
 80a1672:	4620      	mov	r0, r4
 80a1674:	f7ff fe48 	bl	80a1308 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a1678:	4620      	mov	r0, r4
 80a167a:	b009      	add	sp, #36	; 0x24
 80a167c:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a167e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a167e:	2200      	movs	r2, #0
 80a1680:	4611      	mov	r1, r2
 80a1682:	6840      	ldr	r0, [r0, #4]
 80a1684:	f7ff b82a 	b.w	80a06dc <network_listening>

080a1688 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a1688:	2200      	movs	r2, #0
 80a168a:	4611      	mov	r1, r2
 80a168c:	6840      	ldr	r0, [r0, #4]
 80a168e:	f7ff b835 	b.w	80a06fc <network_get_listen_timeout>

080a1692 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a1692:	2200      	movs	r2, #0
 80a1694:	6840      	ldr	r0, [r0, #4]
 80a1696:	f7ff b829 	b.w	80a06ec <network_set_listen_timeout>

080a169a <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a169a:	2200      	movs	r2, #0
 80a169c:	f081 0101 	eor.w	r1, r1, #1
 80a16a0:	6840      	ldr	r0, [r0, #4]
 80a16a2:	f7ff b813 	b.w	80a06cc <network_listen>

080a16a6 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a16a6:	2300      	movs	r3, #0
 80a16a8:	461a      	mov	r2, r3
 80a16aa:	4619      	mov	r1, r3
 80a16ac:	6840      	ldr	r0, [r0, #4]
 80a16ae:	f7ff b805 	b.w	80a06bc <network_off>

080a16b2 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a16b2:	2200      	movs	r2, #0
 80a16b4:	4611      	mov	r1, r2
 80a16b6:	6840      	ldr	r0, [r0, #4]
 80a16b8:	f7fe bfe0 	b.w	80a067c <network_connecting>

080a16bc <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a16bc:	2200      	movs	r2, #0
 80a16be:	2102      	movs	r1, #2
 80a16c0:	6840      	ldr	r0, [r0, #4]
 80a16c2:	f7fe bfe3 	b.w	80a068c <network_disconnect>

080a16c6 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a16c6:	2300      	movs	r3, #0
 80a16c8:	461a      	mov	r2, r3
 80a16ca:	6840      	ldr	r0, [r0, #4]
 80a16cc:	f7fe bfce 	b.w	80a066c <network_connect>

080a16d0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a16d0:	4b02      	ldr	r3, [pc, #8]	; (80a16dc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a16d2:	2204      	movs	r2, #4
 80a16d4:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a16d6:	4a02      	ldr	r2, [pc, #8]	; (80a16e0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a16d8:	601a      	str	r2, [r3, #0]
 80a16da:	4770      	bx	lr
 80a16dc:	20000588 	.word	0x20000588
 80a16e0:	080a2f1c 	.word	0x080a2f1c

080a16e4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a16e4:	2300      	movs	r3, #0
 80a16e6:	461a      	mov	r2, r3
 80a16e8:	6840      	ldr	r0, [r0, #4]
 80a16ea:	f7fe bfbf 	b.w	80a066c <network_connect>

080a16ee <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a16ee:	2200      	movs	r2, #0
 80a16f0:	2102      	movs	r1, #2
 80a16f2:	6840      	ldr	r0, [r0, #4]
 80a16f4:	f7fe bfca 	b.w	80a068c <network_disconnect>

080a16f8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a16f8:	2200      	movs	r2, #0
 80a16fa:	4611      	mov	r1, r2
 80a16fc:	6840      	ldr	r0, [r0, #4]
 80a16fe:	f7fe bfbd 	b.w	80a067c <network_connecting>

080a1702 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a1702:	2200      	movs	r2, #0
 80a1704:	4611      	mov	r1, r2
 80a1706:	6840      	ldr	r0, [r0, #4]
 80a1708:	f7fe bfc8 	b.w	80a069c <network_ready>

080a170c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a170c:	2300      	movs	r3, #0
 80a170e:	461a      	mov	r2, r3
 80a1710:	4619      	mov	r1, r3
 80a1712:	6840      	ldr	r0, [r0, #4]
 80a1714:	f7fe bfca 	b.w	80a06ac <network_on>

080a1718 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a1718:	2300      	movs	r3, #0
 80a171a:	461a      	mov	r2, r3
 80a171c:	4619      	mov	r1, r3
 80a171e:	6840      	ldr	r0, [r0, #4]
 80a1720:	f7fe bfcc 	b.w	80a06bc <network_off>

080a1724 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a1724:	2200      	movs	r2, #0
 80a1726:	f081 0101 	eor.w	r1, r1, #1
 80a172a:	6840      	ldr	r0, [r0, #4]
 80a172c:	f7fe bfce 	b.w	80a06cc <network_listen>

080a1730 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a1730:	2200      	movs	r2, #0
 80a1732:	6840      	ldr	r0, [r0, #4]
 80a1734:	f7fe bfda 	b.w	80a06ec <network_set_listen_timeout>

080a1738 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a1738:	2200      	movs	r2, #0
 80a173a:	4611      	mov	r1, r2
 80a173c:	6840      	ldr	r0, [r0, #4]
 80a173e:	f7fe bfdd 	b.w	80a06fc <network_get_listen_timeout>

080a1742 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a1742:	2200      	movs	r2, #0
 80a1744:	4611      	mov	r1, r2
 80a1746:	6840      	ldr	r0, [r0, #4]
 80a1748:	f7fe bfc8 	b.w	80a06dc <network_listening>

080a174c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a174c:	b570      	push	{r4, r5, r6, lr}
 80a174e:	4616      	mov	r6, r2
 80a1750:	b08e      	sub	sp, #56	; 0x38
 80a1752:	4604      	mov	r4, r0
    IPAddress addr;
 80a1754:	a808      	add	r0, sp, #32
 80a1756:	f7ff fdc9 	bl	80a12ec <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a175a:	2211      	movs	r2, #17
 80a175c:	2100      	movs	r1, #0
 80a175e:	a803      	add	r0, sp, #12
 80a1760:	f001 f94f 	bl	80a2a02 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1764:	4630      	mov	r0, r6
 80a1766:	f001 f9d2 	bl	80a2b0e <strlen>
 80a176a:	2500      	movs	r5, #0
 80a176c:	4b0a      	ldr	r3, [pc, #40]	; (80a1798 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a176e:	9500      	str	r5, [sp, #0]
 80a1770:	b281      	uxth	r1, r0
 80a1772:	685b      	ldr	r3, [r3, #4]
 80a1774:	aa03      	add	r2, sp, #12
 80a1776:	4630      	mov	r0, r6
 80a1778:	f7fe ff3c 	bl	80a05f4 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a177c:	b120      	cbz	r0, 80a1788 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a177e:	4629      	mov	r1, r5
 80a1780:	4620      	mov	r0, r4
 80a1782:	f7ff fdd3 	bl	80a132c <_ZN9IPAddressC1Em>
 80a1786:	e003      	b.n	80a1790 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a1788:	a903      	add	r1, sp, #12
 80a178a:	4620      	mov	r0, r4
 80a178c:	f7ff fdbc 	bl	80a1308 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a1790:	4620      	mov	r0, r4
 80a1792:	b00e      	add	sp, #56	; 0x38
 80a1794:	bd70      	pop	{r4, r5, r6, pc}
 80a1796:	bf00      	nop
 80a1798:	20000588 	.word	0x20000588

080a179c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a179c:	4b02      	ldr	r3, [pc, #8]	; (80a17a8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a179e:	4a03      	ldr	r2, [pc, #12]	; (80a17ac <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a17a0:	601a      	str	r2, [r3, #0]
 80a17a2:	2200      	movs	r2, #0
 80a17a4:	605a      	str	r2, [r3, #4]
 80a17a6:	4770      	bx	lr
 80a17a8:	20000590 	.word	0x20000590
 80a17ac:	080a2f50 	.word	0x080a2f50

080a17b0 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a17b0:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a17b2:	4c0c      	ldr	r4, [pc, #48]	; (80a17e4 <_GLOBAL__sub_I_SPI+0x34>)
 80a17b4:	4e0c      	ldr	r6, [pc, #48]	; (80a17e8 <_GLOBAL__sub_I_SPI+0x38>)
 80a17b6:	4d0d      	ldr	r5, [pc, #52]	; (80a17ec <_GLOBAL__sub_I_SPI+0x3c>)
 80a17b8:	2100      	movs	r1, #0
 80a17ba:	4620      	mov	r0, r4
 80a17bc:	f7fe ffee 	bl	80a079c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a17c0:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a17c2:	4c0b      	ldr	r4, [pc, #44]	; (80a17f0 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a17c4:	4632      	mov	r2, r6
 80a17c6:	4629      	mov	r1, r5
 80a17c8:	f000 f82c 	bl	80a1824 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a17cc:	2101      	movs	r1, #1
 80a17ce:	4620      	mov	r0, r4
 80a17d0:	f7fe ffe4 	bl	80a079c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a17d4:	4632      	mov	r2, r6
 80a17d6:	4629      	mov	r1, r5
 80a17d8:	4620      	mov	r0, r4
 80a17da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a17de:	f000 b821 	b.w	80a1824 <__aeabi_atexit>
 80a17e2:	bf00      	nop
 80a17e4:	20000598 	.word	0x20000598
 80a17e8:	20000068 	.word	0x20000068
 80a17ec:	080a078d 	.word	0x080a078d
 80a17f0:	200005a8 	.word	0x200005a8

080a17f4 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a17f4:	b513      	push	{r0, r1, r4, lr}
 80a17f6:	4c08      	ldr	r4, [pc, #32]	; (80a1818 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a17f8:	2300      	movs	r3, #0
 80a17fa:	461a      	mov	r2, r3
 80a17fc:	4619      	mov	r1, r3
 80a17fe:	9300      	str	r3, [sp, #0]
 80a1800:	4620      	mov	r0, r4
 80a1802:	f7ff fda9 	bl	80a1358 <_ZN9IPAddressC1Ehhhh>
 80a1806:	4620      	mov	r0, r4
 80a1808:	4a04      	ldr	r2, [pc, #16]	; (80a181c <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a180a:	4905      	ldr	r1, [pc, #20]	; (80a1820 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a180c:	b002      	add	sp, #8
 80a180e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1812:	f000 b807 	b.w	80a1824 <__aeabi_atexit>
 80a1816:	bf00      	nop
 80a1818:	200005bc 	.word	0x200005bc
 80a181c:	20000068 	.word	0x20000068
 80a1820:	080a12a9 	.word	0x080a12a9

080a1824 <__aeabi_atexit>:
 80a1824:	460b      	mov	r3, r1
 80a1826:	4601      	mov	r1, r0
 80a1828:	4618      	mov	r0, r3
 80a182a:	f001 b8d1 	b.w	80a29d0 <__cxa_atexit>

080a182e <_ZdlPvj>:
 80a182e:	f7fe bc36 	b.w	80a009e <_ZdlPv>

080a1832 <_ZSt25__throw_bad_function_callv>:
 80a1832:	b508      	push	{r3, lr}
 80a1834:	f7fe ff9a 	bl	80a076c <abort>

080a1838 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1838:	4b18      	ldr	r3, [pc, #96]	; (80a189c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a183a:	681a      	ldr	r2, [r3, #0]
 80a183c:	07d1      	lsls	r1, r2, #31
 80a183e:	bf5c      	itt	pl
 80a1840:	2201      	movpl	r2, #1
 80a1842:	601a      	strpl	r2, [r3, #0]
 80a1844:	4b16      	ldr	r3, [pc, #88]	; (80a18a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1846:	681a      	ldr	r2, [r3, #0]
 80a1848:	07d2      	lsls	r2, r2, #31
 80a184a:	bf5c      	itt	pl
 80a184c:	2201      	movpl	r2, #1
 80a184e:	601a      	strpl	r2, [r3, #0]
 80a1850:	4b14      	ldr	r3, [pc, #80]	; (80a18a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1852:	681a      	ldr	r2, [r3, #0]
 80a1854:	07d0      	lsls	r0, r2, #31
 80a1856:	bf5c      	itt	pl
 80a1858:	2201      	movpl	r2, #1
 80a185a:	601a      	strpl	r2, [r3, #0]
 80a185c:	4b12      	ldr	r3, [pc, #72]	; (80a18a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a185e:	681a      	ldr	r2, [r3, #0]
 80a1860:	07d1      	lsls	r1, r2, #31
 80a1862:	bf5c      	itt	pl
 80a1864:	2201      	movpl	r2, #1
 80a1866:	601a      	strpl	r2, [r3, #0]
 80a1868:	4b10      	ldr	r3, [pc, #64]	; (80a18ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a186a:	681a      	ldr	r2, [r3, #0]
 80a186c:	07d2      	lsls	r2, r2, #31
 80a186e:	bf5c      	itt	pl
 80a1870:	2201      	movpl	r2, #1
 80a1872:	601a      	strpl	r2, [r3, #0]
 80a1874:	4b0e      	ldr	r3, [pc, #56]	; (80a18b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1876:	681a      	ldr	r2, [r3, #0]
 80a1878:	07d0      	lsls	r0, r2, #31
 80a187a:	bf5c      	itt	pl
 80a187c:	2201      	movpl	r2, #1
 80a187e:	601a      	strpl	r2, [r3, #0]
 80a1880:	4b0c      	ldr	r3, [pc, #48]	; (80a18b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1882:	681a      	ldr	r2, [r3, #0]
 80a1884:	07d1      	lsls	r1, r2, #31
 80a1886:	bf5c      	itt	pl
 80a1888:	2201      	movpl	r2, #1
 80a188a:	601a      	strpl	r2, [r3, #0]
 80a188c:	4b0a      	ldr	r3, [pc, #40]	; (80a18b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a188e:	681a      	ldr	r2, [r3, #0]
 80a1890:	07d2      	lsls	r2, r2, #31
 80a1892:	bf5c      	itt	pl
 80a1894:	2201      	movpl	r2, #1
 80a1896:	601a      	strpl	r2, [r3, #0]
 80a1898:	4770      	bx	lr
 80a189a:	bf00      	nop
 80a189c:	200005f0 	.word	0x200005f0
 80a18a0:	200005ec 	.word	0x200005ec
 80a18a4:	200005e8 	.word	0x200005e8
 80a18a8:	200005e4 	.word	0x200005e4
 80a18ac:	200005e0 	.word	0x200005e0
 80a18b0:	200005dc 	.word	0x200005dc
 80a18b4:	200005d8 	.word	0x200005d8
 80a18b8:	200005d4 	.word	0x200005d4

080a18bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a18bc:	4b24      	ldr	r3, [pc, #144]	; (80a1950 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a18be:	681a      	ldr	r2, [r3, #0]
 80a18c0:	07d0      	lsls	r0, r2, #31
 80a18c2:	bf5c      	itt	pl
 80a18c4:	2201      	movpl	r2, #1
 80a18c6:	601a      	strpl	r2, [r3, #0]
 80a18c8:	4b22      	ldr	r3, [pc, #136]	; (80a1954 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a18ca:	681a      	ldr	r2, [r3, #0]
 80a18cc:	07d1      	lsls	r1, r2, #31
 80a18ce:	bf5c      	itt	pl
 80a18d0:	2201      	movpl	r2, #1
 80a18d2:	601a      	strpl	r2, [r3, #0]
 80a18d4:	4b20      	ldr	r3, [pc, #128]	; (80a1958 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a18d6:	681a      	ldr	r2, [r3, #0]
 80a18d8:	07d2      	lsls	r2, r2, #31
 80a18da:	bf5c      	itt	pl
 80a18dc:	2201      	movpl	r2, #1
 80a18de:	601a      	strpl	r2, [r3, #0]
 80a18e0:	4b1e      	ldr	r3, [pc, #120]	; (80a195c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a18e2:	681a      	ldr	r2, [r3, #0]
 80a18e4:	07d0      	lsls	r0, r2, #31
 80a18e6:	bf5c      	itt	pl
 80a18e8:	2201      	movpl	r2, #1
 80a18ea:	601a      	strpl	r2, [r3, #0]
 80a18ec:	4b1c      	ldr	r3, [pc, #112]	; (80a1960 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a18ee:	681a      	ldr	r2, [r3, #0]
 80a18f0:	07d1      	lsls	r1, r2, #31
 80a18f2:	bf5c      	itt	pl
 80a18f4:	2201      	movpl	r2, #1
 80a18f6:	601a      	strpl	r2, [r3, #0]
 80a18f8:	4b1a      	ldr	r3, [pc, #104]	; (80a1964 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a18fa:	681a      	ldr	r2, [r3, #0]
 80a18fc:	07d2      	lsls	r2, r2, #31
 80a18fe:	bf5c      	itt	pl
 80a1900:	2201      	movpl	r2, #1
 80a1902:	601a      	strpl	r2, [r3, #0]
 80a1904:	4b18      	ldr	r3, [pc, #96]	; (80a1968 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a1906:	681a      	ldr	r2, [r3, #0]
 80a1908:	07d0      	lsls	r0, r2, #31
 80a190a:	bf5c      	itt	pl
 80a190c:	2201      	movpl	r2, #1
 80a190e:	601a      	strpl	r2, [r3, #0]
 80a1910:	4b16      	ldr	r3, [pc, #88]	; (80a196c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a1912:	681a      	ldr	r2, [r3, #0]
 80a1914:	07d1      	lsls	r1, r2, #31
 80a1916:	bf5c      	itt	pl
 80a1918:	2201      	movpl	r2, #1
 80a191a:	601a      	strpl	r2, [r3, #0]
 80a191c:	4b14      	ldr	r3, [pc, #80]	; (80a1970 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a191e:	681a      	ldr	r2, [r3, #0]
 80a1920:	07d2      	lsls	r2, r2, #31
 80a1922:	bf5c      	itt	pl
 80a1924:	2201      	movpl	r2, #1
 80a1926:	601a      	strpl	r2, [r3, #0]
 80a1928:	4b12      	ldr	r3, [pc, #72]	; (80a1974 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a192a:	681a      	ldr	r2, [r3, #0]
 80a192c:	07d0      	lsls	r0, r2, #31
 80a192e:	bf5c      	itt	pl
 80a1930:	2201      	movpl	r2, #1
 80a1932:	601a      	strpl	r2, [r3, #0]
 80a1934:	4b10      	ldr	r3, [pc, #64]	; (80a1978 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a1936:	681a      	ldr	r2, [r3, #0]
 80a1938:	07d1      	lsls	r1, r2, #31
 80a193a:	bf5c      	itt	pl
 80a193c:	2201      	movpl	r2, #1
 80a193e:	601a      	strpl	r2, [r3, #0]
 80a1940:	4b0e      	ldr	r3, [pc, #56]	; (80a197c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a1942:	681a      	ldr	r2, [r3, #0]
 80a1944:	07d2      	lsls	r2, r2, #31
 80a1946:	bf5c      	itt	pl
 80a1948:	2201      	movpl	r2, #1
 80a194a:	601a      	strpl	r2, [r3, #0]
 80a194c:	4770      	bx	lr
 80a194e:	bf00      	nop
 80a1950:	20000620 	.word	0x20000620
 80a1954:	2000061c 	.word	0x2000061c
 80a1958:	20000618 	.word	0x20000618
 80a195c:	20000614 	.word	0x20000614
 80a1960:	20000610 	.word	0x20000610
 80a1964:	2000060c 	.word	0x2000060c
 80a1968:	20000608 	.word	0x20000608
 80a196c:	20000604 	.word	0x20000604
 80a1970:	20000600 	.word	0x20000600
 80a1974:	200005fc 	.word	0x200005fc
 80a1978:	200005f8 	.word	0x200005f8
 80a197c:	200005f4 	.word	0x200005f4

080a1980 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a1980:	4b24      	ldr	r3, [pc, #144]	; (80a1a14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a1982:	681a      	ldr	r2, [r3, #0]
 80a1984:	07d0      	lsls	r0, r2, #31
 80a1986:	bf5c      	itt	pl
 80a1988:	2201      	movpl	r2, #1
 80a198a:	601a      	strpl	r2, [r3, #0]
 80a198c:	4b22      	ldr	r3, [pc, #136]	; (80a1a18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a198e:	681a      	ldr	r2, [r3, #0]
 80a1990:	07d1      	lsls	r1, r2, #31
 80a1992:	bf5c      	itt	pl
 80a1994:	2201      	movpl	r2, #1
 80a1996:	601a      	strpl	r2, [r3, #0]
 80a1998:	4b20      	ldr	r3, [pc, #128]	; (80a1a1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a199a:	681a      	ldr	r2, [r3, #0]
 80a199c:	07d2      	lsls	r2, r2, #31
 80a199e:	bf5c      	itt	pl
 80a19a0:	2201      	movpl	r2, #1
 80a19a2:	601a      	strpl	r2, [r3, #0]
 80a19a4:	4b1e      	ldr	r3, [pc, #120]	; (80a1a20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a19a6:	681a      	ldr	r2, [r3, #0]
 80a19a8:	07d0      	lsls	r0, r2, #31
 80a19aa:	bf5c      	itt	pl
 80a19ac:	2201      	movpl	r2, #1
 80a19ae:	601a      	strpl	r2, [r3, #0]
 80a19b0:	4b1c      	ldr	r3, [pc, #112]	; (80a1a24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a19b2:	681a      	ldr	r2, [r3, #0]
 80a19b4:	07d1      	lsls	r1, r2, #31
 80a19b6:	bf5c      	itt	pl
 80a19b8:	2201      	movpl	r2, #1
 80a19ba:	601a      	strpl	r2, [r3, #0]
 80a19bc:	4b1a      	ldr	r3, [pc, #104]	; (80a1a28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a19be:	681a      	ldr	r2, [r3, #0]
 80a19c0:	07d2      	lsls	r2, r2, #31
 80a19c2:	bf5c      	itt	pl
 80a19c4:	2201      	movpl	r2, #1
 80a19c6:	601a      	strpl	r2, [r3, #0]
 80a19c8:	4b18      	ldr	r3, [pc, #96]	; (80a1a2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a19ca:	681a      	ldr	r2, [r3, #0]
 80a19cc:	07d0      	lsls	r0, r2, #31
 80a19ce:	bf5c      	itt	pl
 80a19d0:	2201      	movpl	r2, #1
 80a19d2:	601a      	strpl	r2, [r3, #0]
 80a19d4:	4b16      	ldr	r3, [pc, #88]	; (80a1a30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a19d6:	681a      	ldr	r2, [r3, #0]
 80a19d8:	07d1      	lsls	r1, r2, #31
 80a19da:	bf5c      	itt	pl
 80a19dc:	2201      	movpl	r2, #1
 80a19de:	601a      	strpl	r2, [r3, #0]
 80a19e0:	4b14      	ldr	r3, [pc, #80]	; (80a1a34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a19e2:	681a      	ldr	r2, [r3, #0]
 80a19e4:	07d2      	lsls	r2, r2, #31
 80a19e6:	bf5c      	itt	pl
 80a19e8:	2201      	movpl	r2, #1
 80a19ea:	601a      	strpl	r2, [r3, #0]
 80a19ec:	4b12      	ldr	r3, [pc, #72]	; (80a1a38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a19ee:	681a      	ldr	r2, [r3, #0]
 80a19f0:	07d0      	lsls	r0, r2, #31
 80a19f2:	bf5c      	itt	pl
 80a19f4:	2201      	movpl	r2, #1
 80a19f6:	601a      	strpl	r2, [r3, #0]
 80a19f8:	4b10      	ldr	r3, [pc, #64]	; (80a1a3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a19fa:	681a      	ldr	r2, [r3, #0]
 80a19fc:	07d1      	lsls	r1, r2, #31
 80a19fe:	bf5c      	itt	pl
 80a1a00:	2201      	movpl	r2, #1
 80a1a02:	601a      	strpl	r2, [r3, #0]
 80a1a04:	4b0e      	ldr	r3, [pc, #56]	; (80a1a40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a1a06:	681a      	ldr	r2, [r3, #0]
 80a1a08:	07d2      	lsls	r2, r2, #31
 80a1a0a:	bf5c      	itt	pl
 80a1a0c:	2201      	movpl	r2, #1
 80a1a0e:	601a      	strpl	r2, [r3, #0]
 80a1a10:	4770      	bx	lr
 80a1a12:	bf00      	nop
 80a1a14:	20000650 	.word	0x20000650
 80a1a18:	2000064c 	.word	0x2000064c
 80a1a1c:	20000648 	.word	0x20000648
 80a1a20:	20000644 	.word	0x20000644
 80a1a24:	20000640 	.word	0x20000640
 80a1a28:	2000063c 	.word	0x2000063c
 80a1a2c:	20000638 	.word	0x20000638
 80a1a30:	20000634 	.word	0x20000634
 80a1a34:	20000630 	.word	0x20000630
 80a1a38:	2000062c 	.word	0x2000062c
 80a1a3c:	20000628 	.word	0x20000628
 80a1a40:	20000624 	.word	0x20000624

080a1a44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1a44:	4b18      	ldr	r3, [pc, #96]	; (80a1aa8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1a46:	681a      	ldr	r2, [r3, #0]
 80a1a48:	07d1      	lsls	r1, r2, #31
 80a1a4a:	bf5c      	itt	pl
 80a1a4c:	2201      	movpl	r2, #1
 80a1a4e:	601a      	strpl	r2, [r3, #0]
 80a1a50:	4b16      	ldr	r3, [pc, #88]	; (80a1aac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1a52:	681a      	ldr	r2, [r3, #0]
 80a1a54:	07d2      	lsls	r2, r2, #31
 80a1a56:	bf5c      	itt	pl
 80a1a58:	2201      	movpl	r2, #1
 80a1a5a:	601a      	strpl	r2, [r3, #0]
 80a1a5c:	4b14      	ldr	r3, [pc, #80]	; (80a1ab0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1a5e:	681a      	ldr	r2, [r3, #0]
 80a1a60:	07d0      	lsls	r0, r2, #31
 80a1a62:	bf5c      	itt	pl
 80a1a64:	2201      	movpl	r2, #1
 80a1a66:	601a      	strpl	r2, [r3, #0]
 80a1a68:	4b12      	ldr	r3, [pc, #72]	; (80a1ab4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1a6a:	681a      	ldr	r2, [r3, #0]
 80a1a6c:	07d1      	lsls	r1, r2, #31
 80a1a6e:	bf5c      	itt	pl
 80a1a70:	2201      	movpl	r2, #1
 80a1a72:	601a      	strpl	r2, [r3, #0]
 80a1a74:	4b10      	ldr	r3, [pc, #64]	; (80a1ab8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1a76:	681a      	ldr	r2, [r3, #0]
 80a1a78:	07d2      	lsls	r2, r2, #31
 80a1a7a:	bf5c      	itt	pl
 80a1a7c:	2201      	movpl	r2, #1
 80a1a7e:	601a      	strpl	r2, [r3, #0]
 80a1a80:	4b0e      	ldr	r3, [pc, #56]	; (80a1abc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1a82:	681a      	ldr	r2, [r3, #0]
 80a1a84:	07d0      	lsls	r0, r2, #31
 80a1a86:	bf5c      	itt	pl
 80a1a88:	2201      	movpl	r2, #1
 80a1a8a:	601a      	strpl	r2, [r3, #0]
 80a1a8c:	4b0c      	ldr	r3, [pc, #48]	; (80a1ac0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1a8e:	681a      	ldr	r2, [r3, #0]
 80a1a90:	07d1      	lsls	r1, r2, #31
 80a1a92:	bf5c      	itt	pl
 80a1a94:	2201      	movpl	r2, #1
 80a1a96:	601a      	strpl	r2, [r3, #0]
 80a1a98:	4b0a      	ldr	r3, [pc, #40]	; (80a1ac4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1a9a:	681a      	ldr	r2, [r3, #0]
 80a1a9c:	07d2      	lsls	r2, r2, #31
 80a1a9e:	bf5c      	itt	pl
 80a1aa0:	2201      	movpl	r2, #1
 80a1aa2:	601a      	strpl	r2, [r3, #0]
 80a1aa4:	4770      	bx	lr
 80a1aa6:	bf00      	nop
 80a1aa8:	20000670 	.word	0x20000670
 80a1aac:	2000066c 	.word	0x2000066c
 80a1ab0:	20000668 	.word	0x20000668
 80a1ab4:	20000664 	.word	0x20000664
 80a1ab8:	20000660 	.word	0x20000660
 80a1abc:	2000065c 	.word	0x2000065c
 80a1ac0:	20000658 	.word	0x20000658
 80a1ac4:	20000654 	.word	0x20000654

080a1ac8 <__aeabi_drsub>:
 80a1ac8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a1acc:	e002      	b.n	80a1ad4 <__adddf3>
 80a1ace:	bf00      	nop

080a1ad0 <__aeabi_dsub>:
 80a1ad0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a1ad4 <__adddf3>:
 80a1ad4:	b530      	push	{r4, r5, lr}
 80a1ad6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a1ada:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a1ade:	ea94 0f05 	teq	r4, r5
 80a1ae2:	bf08      	it	eq
 80a1ae4:	ea90 0f02 	teqeq	r0, r2
 80a1ae8:	bf1f      	itttt	ne
 80a1aea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a1aee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a1af2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a1af6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a1afa:	f000 80e2 	beq.w	80a1cc2 <__adddf3+0x1ee>
 80a1afe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a1b02:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a1b06:	bfb8      	it	lt
 80a1b08:	426d      	neglt	r5, r5
 80a1b0a:	dd0c      	ble.n	80a1b26 <__adddf3+0x52>
 80a1b0c:	442c      	add	r4, r5
 80a1b0e:	ea80 0202 	eor.w	r2, r0, r2
 80a1b12:	ea81 0303 	eor.w	r3, r1, r3
 80a1b16:	ea82 0000 	eor.w	r0, r2, r0
 80a1b1a:	ea83 0101 	eor.w	r1, r3, r1
 80a1b1e:	ea80 0202 	eor.w	r2, r0, r2
 80a1b22:	ea81 0303 	eor.w	r3, r1, r3
 80a1b26:	2d36      	cmp	r5, #54	; 0x36
 80a1b28:	bf88      	it	hi
 80a1b2a:	bd30      	pophi	{r4, r5, pc}
 80a1b2c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a1b30:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a1b34:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a1b38:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a1b3c:	d002      	beq.n	80a1b44 <__adddf3+0x70>
 80a1b3e:	4240      	negs	r0, r0
 80a1b40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1b44:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a1b48:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a1b4c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a1b50:	d002      	beq.n	80a1b58 <__adddf3+0x84>
 80a1b52:	4252      	negs	r2, r2
 80a1b54:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a1b58:	ea94 0f05 	teq	r4, r5
 80a1b5c:	f000 80a7 	beq.w	80a1cae <__adddf3+0x1da>
 80a1b60:	f1a4 0401 	sub.w	r4, r4, #1
 80a1b64:	f1d5 0e20 	rsbs	lr, r5, #32
 80a1b68:	db0d      	blt.n	80a1b86 <__adddf3+0xb2>
 80a1b6a:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a1b6e:	fa22 f205 	lsr.w	r2, r2, r5
 80a1b72:	1880      	adds	r0, r0, r2
 80a1b74:	f141 0100 	adc.w	r1, r1, #0
 80a1b78:	fa03 f20e 	lsl.w	r2, r3, lr
 80a1b7c:	1880      	adds	r0, r0, r2
 80a1b7e:	fa43 f305 	asr.w	r3, r3, r5
 80a1b82:	4159      	adcs	r1, r3
 80a1b84:	e00e      	b.n	80a1ba4 <__adddf3+0xd0>
 80a1b86:	f1a5 0520 	sub.w	r5, r5, #32
 80a1b8a:	f10e 0e20 	add.w	lr, lr, #32
 80a1b8e:	2a01      	cmp	r2, #1
 80a1b90:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a1b94:	bf28      	it	cs
 80a1b96:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a1b9a:	fa43 f305 	asr.w	r3, r3, r5
 80a1b9e:	18c0      	adds	r0, r0, r3
 80a1ba0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a1ba4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1ba8:	d507      	bpl.n	80a1bba <__adddf3+0xe6>
 80a1baa:	f04f 0e00 	mov.w	lr, #0
 80a1bae:	f1dc 0c00 	rsbs	ip, ip, #0
 80a1bb2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a1bb6:	eb6e 0101 	sbc.w	r1, lr, r1
 80a1bba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a1bbe:	d31b      	bcc.n	80a1bf8 <__adddf3+0x124>
 80a1bc0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a1bc4:	d30c      	bcc.n	80a1be0 <__adddf3+0x10c>
 80a1bc6:	0849      	lsrs	r1, r1, #1
 80a1bc8:	ea5f 0030 	movs.w	r0, r0, rrx
 80a1bcc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a1bd0:	f104 0401 	add.w	r4, r4, #1
 80a1bd4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a1bd8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a1bdc:	f080 809a 	bcs.w	80a1d14 <__adddf3+0x240>
 80a1be0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a1be4:	bf08      	it	eq
 80a1be6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a1bea:	f150 0000 	adcs.w	r0, r0, #0
 80a1bee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a1bf2:	ea41 0105 	orr.w	r1, r1, r5
 80a1bf6:	bd30      	pop	{r4, r5, pc}
 80a1bf8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a1bfc:	4140      	adcs	r0, r0
 80a1bfe:	eb41 0101 	adc.w	r1, r1, r1
 80a1c02:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a1c06:	f1a4 0401 	sub.w	r4, r4, #1
 80a1c0a:	d1e9      	bne.n	80a1be0 <__adddf3+0x10c>
 80a1c0c:	f091 0f00 	teq	r1, #0
 80a1c10:	bf04      	itt	eq
 80a1c12:	4601      	moveq	r1, r0
 80a1c14:	2000      	moveq	r0, #0
 80a1c16:	fab1 f381 	clz	r3, r1
 80a1c1a:	bf08      	it	eq
 80a1c1c:	3320      	addeq	r3, #32
 80a1c1e:	f1a3 030b 	sub.w	r3, r3, #11
 80a1c22:	f1b3 0220 	subs.w	r2, r3, #32
 80a1c26:	da0c      	bge.n	80a1c42 <__adddf3+0x16e>
 80a1c28:	320c      	adds	r2, #12
 80a1c2a:	dd08      	ble.n	80a1c3e <__adddf3+0x16a>
 80a1c2c:	f102 0c14 	add.w	ip, r2, #20
 80a1c30:	f1c2 020c 	rsb	r2, r2, #12
 80a1c34:	fa01 f00c 	lsl.w	r0, r1, ip
 80a1c38:	fa21 f102 	lsr.w	r1, r1, r2
 80a1c3c:	e00c      	b.n	80a1c58 <__adddf3+0x184>
 80a1c3e:	f102 0214 	add.w	r2, r2, #20
 80a1c42:	bfd8      	it	le
 80a1c44:	f1c2 0c20 	rsble	ip, r2, #32
 80a1c48:	fa01 f102 	lsl.w	r1, r1, r2
 80a1c4c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a1c50:	bfdc      	itt	le
 80a1c52:	ea41 010c 	orrle.w	r1, r1, ip
 80a1c56:	4090      	lslle	r0, r2
 80a1c58:	1ae4      	subs	r4, r4, r3
 80a1c5a:	bfa2      	ittt	ge
 80a1c5c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a1c60:	4329      	orrge	r1, r5
 80a1c62:	bd30      	popge	{r4, r5, pc}
 80a1c64:	ea6f 0404 	mvn.w	r4, r4
 80a1c68:	3c1f      	subs	r4, #31
 80a1c6a:	da1c      	bge.n	80a1ca6 <__adddf3+0x1d2>
 80a1c6c:	340c      	adds	r4, #12
 80a1c6e:	dc0e      	bgt.n	80a1c8e <__adddf3+0x1ba>
 80a1c70:	f104 0414 	add.w	r4, r4, #20
 80a1c74:	f1c4 0220 	rsb	r2, r4, #32
 80a1c78:	fa20 f004 	lsr.w	r0, r0, r4
 80a1c7c:	fa01 f302 	lsl.w	r3, r1, r2
 80a1c80:	ea40 0003 	orr.w	r0, r0, r3
 80a1c84:	fa21 f304 	lsr.w	r3, r1, r4
 80a1c88:	ea45 0103 	orr.w	r1, r5, r3
 80a1c8c:	bd30      	pop	{r4, r5, pc}
 80a1c8e:	f1c4 040c 	rsb	r4, r4, #12
 80a1c92:	f1c4 0220 	rsb	r2, r4, #32
 80a1c96:	fa20 f002 	lsr.w	r0, r0, r2
 80a1c9a:	fa01 f304 	lsl.w	r3, r1, r4
 80a1c9e:	ea40 0003 	orr.w	r0, r0, r3
 80a1ca2:	4629      	mov	r1, r5
 80a1ca4:	bd30      	pop	{r4, r5, pc}
 80a1ca6:	fa21 f004 	lsr.w	r0, r1, r4
 80a1caa:	4629      	mov	r1, r5
 80a1cac:	bd30      	pop	{r4, r5, pc}
 80a1cae:	f094 0f00 	teq	r4, #0
 80a1cb2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a1cb6:	bf06      	itte	eq
 80a1cb8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a1cbc:	3401      	addeq	r4, #1
 80a1cbe:	3d01      	subne	r5, #1
 80a1cc0:	e74e      	b.n	80a1b60 <__adddf3+0x8c>
 80a1cc2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a1cc6:	bf18      	it	ne
 80a1cc8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a1ccc:	d029      	beq.n	80a1d22 <__adddf3+0x24e>
 80a1cce:	ea94 0f05 	teq	r4, r5
 80a1cd2:	bf08      	it	eq
 80a1cd4:	ea90 0f02 	teqeq	r0, r2
 80a1cd8:	d005      	beq.n	80a1ce6 <__adddf3+0x212>
 80a1cda:	ea54 0c00 	orrs.w	ip, r4, r0
 80a1cde:	bf04      	itt	eq
 80a1ce0:	4619      	moveq	r1, r3
 80a1ce2:	4610      	moveq	r0, r2
 80a1ce4:	bd30      	pop	{r4, r5, pc}
 80a1ce6:	ea91 0f03 	teq	r1, r3
 80a1cea:	bf1e      	ittt	ne
 80a1cec:	2100      	movne	r1, #0
 80a1cee:	2000      	movne	r0, #0
 80a1cf0:	bd30      	popne	{r4, r5, pc}
 80a1cf2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a1cf6:	d105      	bne.n	80a1d04 <__adddf3+0x230>
 80a1cf8:	0040      	lsls	r0, r0, #1
 80a1cfa:	4149      	adcs	r1, r1
 80a1cfc:	bf28      	it	cs
 80a1cfe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a1d02:	bd30      	pop	{r4, r5, pc}
 80a1d04:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a1d08:	bf3c      	itt	cc
 80a1d0a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a1d0e:	bd30      	popcc	{r4, r5, pc}
 80a1d10:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1d14:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a1d18:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a1d1c:	f04f 0000 	mov.w	r0, #0
 80a1d20:	bd30      	pop	{r4, r5, pc}
 80a1d22:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a1d26:	bf1a      	itte	ne
 80a1d28:	4619      	movne	r1, r3
 80a1d2a:	4610      	movne	r0, r2
 80a1d2c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a1d30:	bf1c      	itt	ne
 80a1d32:	460b      	movne	r3, r1
 80a1d34:	4602      	movne	r2, r0
 80a1d36:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a1d3a:	bf06      	itte	eq
 80a1d3c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a1d40:	ea91 0f03 	teqeq	r1, r3
 80a1d44:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a1d48:	bd30      	pop	{r4, r5, pc}
 80a1d4a:	bf00      	nop

080a1d4c <__aeabi_ui2d>:
 80a1d4c:	f090 0f00 	teq	r0, #0
 80a1d50:	bf04      	itt	eq
 80a1d52:	2100      	moveq	r1, #0
 80a1d54:	4770      	bxeq	lr
 80a1d56:	b530      	push	{r4, r5, lr}
 80a1d58:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1d5c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1d60:	f04f 0500 	mov.w	r5, #0
 80a1d64:	f04f 0100 	mov.w	r1, #0
 80a1d68:	e750      	b.n	80a1c0c <__adddf3+0x138>
 80a1d6a:	bf00      	nop

080a1d6c <__aeabi_i2d>:
 80a1d6c:	f090 0f00 	teq	r0, #0
 80a1d70:	bf04      	itt	eq
 80a1d72:	2100      	moveq	r1, #0
 80a1d74:	4770      	bxeq	lr
 80a1d76:	b530      	push	{r4, r5, lr}
 80a1d78:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1d7c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1d80:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a1d84:	bf48      	it	mi
 80a1d86:	4240      	negmi	r0, r0
 80a1d88:	f04f 0100 	mov.w	r1, #0
 80a1d8c:	e73e      	b.n	80a1c0c <__adddf3+0x138>
 80a1d8e:	bf00      	nop

080a1d90 <__aeabi_f2d>:
 80a1d90:	0042      	lsls	r2, r0, #1
 80a1d92:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a1d96:	ea4f 0131 	mov.w	r1, r1, rrx
 80a1d9a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a1d9e:	bf1f      	itttt	ne
 80a1da0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a1da4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a1da8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a1dac:	4770      	bxne	lr
 80a1dae:	f092 0f00 	teq	r2, #0
 80a1db2:	bf14      	ite	ne
 80a1db4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a1db8:	4770      	bxeq	lr
 80a1dba:	b530      	push	{r4, r5, lr}
 80a1dbc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a1dc0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1dc4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a1dc8:	e720      	b.n	80a1c0c <__adddf3+0x138>
 80a1dca:	bf00      	nop

080a1dcc <__aeabi_ul2d>:
 80a1dcc:	ea50 0201 	orrs.w	r2, r0, r1
 80a1dd0:	bf08      	it	eq
 80a1dd2:	4770      	bxeq	lr
 80a1dd4:	b530      	push	{r4, r5, lr}
 80a1dd6:	f04f 0500 	mov.w	r5, #0
 80a1dda:	e00a      	b.n	80a1df2 <__aeabi_l2d+0x16>

080a1ddc <__aeabi_l2d>:
 80a1ddc:	ea50 0201 	orrs.w	r2, r0, r1
 80a1de0:	bf08      	it	eq
 80a1de2:	4770      	bxeq	lr
 80a1de4:	b530      	push	{r4, r5, lr}
 80a1de6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a1dea:	d502      	bpl.n	80a1df2 <__aeabi_l2d+0x16>
 80a1dec:	4240      	negs	r0, r0
 80a1dee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1df2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1df6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1dfa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a1dfe:	f43f aedc 	beq.w	80a1bba <__adddf3+0xe6>
 80a1e02:	f04f 0203 	mov.w	r2, #3
 80a1e06:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a1e0a:	bf18      	it	ne
 80a1e0c:	3203      	addne	r2, #3
 80a1e0e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a1e12:	bf18      	it	ne
 80a1e14:	3203      	addne	r2, #3
 80a1e16:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a1e1a:	f1c2 0320 	rsb	r3, r2, #32
 80a1e1e:	fa00 fc03 	lsl.w	ip, r0, r3
 80a1e22:	fa20 f002 	lsr.w	r0, r0, r2
 80a1e26:	fa01 fe03 	lsl.w	lr, r1, r3
 80a1e2a:	ea40 000e 	orr.w	r0, r0, lr
 80a1e2e:	fa21 f102 	lsr.w	r1, r1, r2
 80a1e32:	4414      	add	r4, r2
 80a1e34:	e6c1      	b.n	80a1bba <__adddf3+0xe6>
 80a1e36:	bf00      	nop

080a1e38 <__aeabi_dmul>:
 80a1e38:	b570      	push	{r4, r5, r6, lr}
 80a1e3a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a1e3e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a1e42:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a1e46:	bf1d      	ittte	ne
 80a1e48:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a1e4c:	ea94 0f0c 	teqne	r4, ip
 80a1e50:	ea95 0f0c 	teqne	r5, ip
 80a1e54:	f000 f8de 	bleq	80a2014 <__aeabi_dmul+0x1dc>
 80a1e58:	442c      	add	r4, r5
 80a1e5a:	ea81 0603 	eor.w	r6, r1, r3
 80a1e5e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a1e62:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a1e66:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a1e6a:	bf18      	it	ne
 80a1e6c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a1e70:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a1e74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a1e78:	d038      	beq.n	80a1eec <__aeabi_dmul+0xb4>
 80a1e7a:	fba0 ce02 	umull	ip, lr, r0, r2
 80a1e7e:	f04f 0500 	mov.w	r5, #0
 80a1e82:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a1e86:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a1e8a:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a1e8e:	f04f 0600 	mov.w	r6, #0
 80a1e92:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a1e96:	f09c 0f00 	teq	ip, #0
 80a1e9a:	bf18      	it	ne
 80a1e9c:	f04e 0e01 	orrne.w	lr, lr, #1
 80a1ea0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a1ea4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a1ea8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a1eac:	d204      	bcs.n	80a1eb8 <__aeabi_dmul+0x80>
 80a1eae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a1eb2:	416d      	adcs	r5, r5
 80a1eb4:	eb46 0606 	adc.w	r6, r6, r6
 80a1eb8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a1ebc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a1ec0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a1ec4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a1ec8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a1ecc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a1ed0:	bf88      	it	hi
 80a1ed2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a1ed6:	d81e      	bhi.n	80a1f16 <__aeabi_dmul+0xde>
 80a1ed8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a1edc:	bf08      	it	eq
 80a1ede:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a1ee2:	f150 0000 	adcs.w	r0, r0, #0
 80a1ee6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a1eea:	bd70      	pop	{r4, r5, r6, pc}
 80a1eec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a1ef0:	ea46 0101 	orr.w	r1, r6, r1
 80a1ef4:	ea40 0002 	orr.w	r0, r0, r2
 80a1ef8:	ea81 0103 	eor.w	r1, r1, r3
 80a1efc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a1f00:	bfc2      	ittt	gt
 80a1f02:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a1f06:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a1f0a:	bd70      	popgt	{r4, r5, r6, pc}
 80a1f0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a1f10:	f04f 0e00 	mov.w	lr, #0
 80a1f14:	3c01      	subs	r4, #1
 80a1f16:	f300 80ab 	bgt.w	80a2070 <__aeabi_dmul+0x238>
 80a1f1a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a1f1e:	bfde      	ittt	le
 80a1f20:	2000      	movle	r0, #0
 80a1f22:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a1f26:	bd70      	pople	{r4, r5, r6, pc}
 80a1f28:	f1c4 0400 	rsb	r4, r4, #0
 80a1f2c:	3c20      	subs	r4, #32
 80a1f2e:	da35      	bge.n	80a1f9c <__aeabi_dmul+0x164>
 80a1f30:	340c      	adds	r4, #12
 80a1f32:	dc1b      	bgt.n	80a1f6c <__aeabi_dmul+0x134>
 80a1f34:	f104 0414 	add.w	r4, r4, #20
 80a1f38:	f1c4 0520 	rsb	r5, r4, #32
 80a1f3c:	fa00 f305 	lsl.w	r3, r0, r5
 80a1f40:	fa20 f004 	lsr.w	r0, r0, r4
 80a1f44:	fa01 f205 	lsl.w	r2, r1, r5
 80a1f48:	ea40 0002 	orr.w	r0, r0, r2
 80a1f4c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a1f50:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a1f54:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a1f58:	fa21 f604 	lsr.w	r6, r1, r4
 80a1f5c:	eb42 0106 	adc.w	r1, r2, r6
 80a1f60:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a1f64:	bf08      	it	eq
 80a1f66:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a1f6a:	bd70      	pop	{r4, r5, r6, pc}
 80a1f6c:	f1c4 040c 	rsb	r4, r4, #12
 80a1f70:	f1c4 0520 	rsb	r5, r4, #32
 80a1f74:	fa00 f304 	lsl.w	r3, r0, r4
 80a1f78:	fa20 f005 	lsr.w	r0, r0, r5
 80a1f7c:	fa01 f204 	lsl.w	r2, r1, r4
 80a1f80:	ea40 0002 	orr.w	r0, r0, r2
 80a1f84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a1f88:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a1f8c:	f141 0100 	adc.w	r1, r1, #0
 80a1f90:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a1f94:	bf08      	it	eq
 80a1f96:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a1f9a:	bd70      	pop	{r4, r5, r6, pc}
 80a1f9c:	f1c4 0520 	rsb	r5, r4, #32
 80a1fa0:	fa00 f205 	lsl.w	r2, r0, r5
 80a1fa4:	ea4e 0e02 	orr.w	lr, lr, r2
 80a1fa8:	fa20 f304 	lsr.w	r3, r0, r4
 80a1fac:	fa01 f205 	lsl.w	r2, r1, r5
 80a1fb0:	ea43 0302 	orr.w	r3, r3, r2
 80a1fb4:	fa21 f004 	lsr.w	r0, r1, r4
 80a1fb8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a1fbc:	fa21 f204 	lsr.w	r2, r1, r4
 80a1fc0:	ea20 0002 	bic.w	r0, r0, r2
 80a1fc4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a1fc8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a1fcc:	bf08      	it	eq
 80a1fce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a1fd2:	bd70      	pop	{r4, r5, r6, pc}
 80a1fd4:	f094 0f00 	teq	r4, #0
 80a1fd8:	d10f      	bne.n	80a1ffa <__aeabi_dmul+0x1c2>
 80a1fda:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a1fde:	0040      	lsls	r0, r0, #1
 80a1fe0:	eb41 0101 	adc.w	r1, r1, r1
 80a1fe4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a1fe8:	bf08      	it	eq
 80a1fea:	3c01      	subeq	r4, #1
 80a1fec:	d0f7      	beq.n	80a1fde <__aeabi_dmul+0x1a6>
 80a1fee:	ea41 0106 	orr.w	r1, r1, r6
 80a1ff2:	f095 0f00 	teq	r5, #0
 80a1ff6:	bf18      	it	ne
 80a1ff8:	4770      	bxne	lr
 80a1ffa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a1ffe:	0052      	lsls	r2, r2, #1
 80a2000:	eb43 0303 	adc.w	r3, r3, r3
 80a2004:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a2008:	bf08      	it	eq
 80a200a:	3d01      	subeq	r5, #1
 80a200c:	d0f7      	beq.n	80a1ffe <__aeabi_dmul+0x1c6>
 80a200e:	ea43 0306 	orr.w	r3, r3, r6
 80a2012:	4770      	bx	lr
 80a2014:	ea94 0f0c 	teq	r4, ip
 80a2018:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a201c:	bf18      	it	ne
 80a201e:	ea95 0f0c 	teqne	r5, ip
 80a2022:	d00c      	beq.n	80a203e <__aeabi_dmul+0x206>
 80a2024:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2028:	bf18      	it	ne
 80a202a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a202e:	d1d1      	bne.n	80a1fd4 <__aeabi_dmul+0x19c>
 80a2030:	ea81 0103 	eor.w	r1, r1, r3
 80a2034:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2038:	f04f 0000 	mov.w	r0, #0
 80a203c:	bd70      	pop	{r4, r5, r6, pc}
 80a203e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2042:	bf06      	itte	eq
 80a2044:	4610      	moveq	r0, r2
 80a2046:	4619      	moveq	r1, r3
 80a2048:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a204c:	d019      	beq.n	80a2082 <__aeabi_dmul+0x24a>
 80a204e:	ea94 0f0c 	teq	r4, ip
 80a2052:	d102      	bne.n	80a205a <__aeabi_dmul+0x222>
 80a2054:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a2058:	d113      	bne.n	80a2082 <__aeabi_dmul+0x24a>
 80a205a:	ea95 0f0c 	teq	r5, ip
 80a205e:	d105      	bne.n	80a206c <__aeabi_dmul+0x234>
 80a2060:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a2064:	bf1c      	itt	ne
 80a2066:	4610      	movne	r0, r2
 80a2068:	4619      	movne	r1, r3
 80a206a:	d10a      	bne.n	80a2082 <__aeabi_dmul+0x24a>
 80a206c:	ea81 0103 	eor.w	r1, r1, r3
 80a2070:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2074:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a2078:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a207c:	f04f 0000 	mov.w	r0, #0
 80a2080:	bd70      	pop	{r4, r5, r6, pc}
 80a2082:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a2086:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a208a:	bd70      	pop	{r4, r5, r6, pc}

080a208c <__aeabi_ddiv>:
 80a208c:	b570      	push	{r4, r5, r6, lr}
 80a208e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2092:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a2096:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a209a:	bf1d      	ittte	ne
 80a209c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a20a0:	ea94 0f0c 	teqne	r4, ip
 80a20a4:	ea95 0f0c 	teqne	r5, ip
 80a20a8:	f000 f8a7 	bleq	80a21fa <__aeabi_ddiv+0x16e>
 80a20ac:	eba4 0405 	sub.w	r4, r4, r5
 80a20b0:	ea81 0e03 	eor.w	lr, r1, r3
 80a20b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a20b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a20bc:	f000 8088 	beq.w	80a21d0 <__aeabi_ddiv+0x144>
 80a20c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a20c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a20c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a20cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a20d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a20d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a20d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a20dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a20e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a20e4:	429d      	cmp	r5, r3
 80a20e6:	bf08      	it	eq
 80a20e8:	4296      	cmpeq	r6, r2
 80a20ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a20ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a20f2:	d202      	bcs.n	80a20fa <__aeabi_ddiv+0x6e>
 80a20f4:	085b      	lsrs	r3, r3, #1
 80a20f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a20fa:	1ab6      	subs	r6, r6, r2
 80a20fc:	eb65 0503 	sbc.w	r5, r5, r3
 80a2100:	085b      	lsrs	r3, r3, #1
 80a2102:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2106:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a210a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a210e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2112:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2116:	bf22      	ittt	cs
 80a2118:	1ab6      	subcs	r6, r6, r2
 80a211a:	4675      	movcs	r5, lr
 80a211c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a2120:	085b      	lsrs	r3, r3, #1
 80a2122:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2126:	ebb6 0e02 	subs.w	lr, r6, r2
 80a212a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a212e:	bf22      	ittt	cs
 80a2130:	1ab6      	subcs	r6, r6, r2
 80a2132:	4675      	movcs	r5, lr
 80a2134:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a2138:	085b      	lsrs	r3, r3, #1
 80a213a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a213e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2142:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2146:	bf22      	ittt	cs
 80a2148:	1ab6      	subcs	r6, r6, r2
 80a214a:	4675      	movcs	r5, lr
 80a214c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a2150:	085b      	lsrs	r3, r3, #1
 80a2152:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2156:	ebb6 0e02 	subs.w	lr, r6, r2
 80a215a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a215e:	bf22      	ittt	cs
 80a2160:	1ab6      	subcs	r6, r6, r2
 80a2162:	4675      	movcs	r5, lr
 80a2164:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a2168:	ea55 0e06 	orrs.w	lr, r5, r6
 80a216c:	d018      	beq.n	80a21a0 <__aeabi_ddiv+0x114>
 80a216e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a2172:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a2176:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a217a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a217e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a2182:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a2186:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a218a:	d1c0      	bne.n	80a210e <__aeabi_ddiv+0x82>
 80a218c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2190:	d10b      	bne.n	80a21aa <__aeabi_ddiv+0x11e>
 80a2192:	ea41 0100 	orr.w	r1, r1, r0
 80a2196:	f04f 0000 	mov.w	r0, #0
 80a219a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a219e:	e7b6      	b.n	80a210e <__aeabi_ddiv+0x82>
 80a21a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a21a4:	bf04      	itt	eq
 80a21a6:	4301      	orreq	r1, r0
 80a21a8:	2000      	moveq	r0, #0
 80a21aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a21ae:	bf88      	it	hi
 80a21b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a21b4:	f63f aeaf 	bhi.w	80a1f16 <__aeabi_dmul+0xde>
 80a21b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80a21bc:	bf04      	itt	eq
 80a21be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a21c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a21c6:	f150 0000 	adcs.w	r0, r0, #0
 80a21ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a21ce:	bd70      	pop	{r4, r5, r6, pc}
 80a21d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a21d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a21d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a21dc:	bfc2      	ittt	gt
 80a21de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a21e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a21e6:	bd70      	popgt	{r4, r5, r6, pc}
 80a21e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a21ec:	f04f 0e00 	mov.w	lr, #0
 80a21f0:	3c01      	subs	r4, #1
 80a21f2:	e690      	b.n	80a1f16 <__aeabi_dmul+0xde>
 80a21f4:	ea45 0e06 	orr.w	lr, r5, r6
 80a21f8:	e68d      	b.n	80a1f16 <__aeabi_dmul+0xde>
 80a21fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a21fe:	ea94 0f0c 	teq	r4, ip
 80a2202:	bf08      	it	eq
 80a2204:	ea95 0f0c 	teqeq	r5, ip
 80a2208:	f43f af3b 	beq.w	80a2082 <__aeabi_dmul+0x24a>
 80a220c:	ea94 0f0c 	teq	r4, ip
 80a2210:	d10a      	bne.n	80a2228 <__aeabi_ddiv+0x19c>
 80a2212:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2216:	f47f af34 	bne.w	80a2082 <__aeabi_dmul+0x24a>
 80a221a:	ea95 0f0c 	teq	r5, ip
 80a221e:	f47f af25 	bne.w	80a206c <__aeabi_dmul+0x234>
 80a2222:	4610      	mov	r0, r2
 80a2224:	4619      	mov	r1, r3
 80a2226:	e72c      	b.n	80a2082 <__aeabi_dmul+0x24a>
 80a2228:	ea95 0f0c 	teq	r5, ip
 80a222c:	d106      	bne.n	80a223c <__aeabi_ddiv+0x1b0>
 80a222e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a2232:	f43f aefd 	beq.w	80a2030 <__aeabi_dmul+0x1f8>
 80a2236:	4610      	mov	r0, r2
 80a2238:	4619      	mov	r1, r3
 80a223a:	e722      	b.n	80a2082 <__aeabi_dmul+0x24a>
 80a223c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2240:	bf18      	it	ne
 80a2242:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2246:	f47f aec5 	bne.w	80a1fd4 <__aeabi_dmul+0x19c>
 80a224a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a224e:	f47f af0d 	bne.w	80a206c <__aeabi_dmul+0x234>
 80a2252:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a2256:	f47f aeeb 	bne.w	80a2030 <__aeabi_dmul+0x1f8>
 80a225a:	e712      	b.n	80a2082 <__aeabi_dmul+0x24a>

080a225c <__gedf2>:
 80a225c:	f04f 3cff 	mov.w	ip, #4294967295
 80a2260:	e006      	b.n	80a2270 <__cmpdf2+0x4>
 80a2262:	bf00      	nop

080a2264 <__ledf2>:
 80a2264:	f04f 0c01 	mov.w	ip, #1
 80a2268:	e002      	b.n	80a2270 <__cmpdf2+0x4>
 80a226a:	bf00      	nop

080a226c <__cmpdf2>:
 80a226c:	f04f 0c01 	mov.w	ip, #1
 80a2270:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a2274:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2278:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a227c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2280:	bf18      	it	ne
 80a2282:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a2286:	d01b      	beq.n	80a22c0 <__cmpdf2+0x54>
 80a2288:	b001      	add	sp, #4
 80a228a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a228e:	bf0c      	ite	eq
 80a2290:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a2294:	ea91 0f03 	teqne	r1, r3
 80a2298:	bf02      	ittt	eq
 80a229a:	ea90 0f02 	teqeq	r0, r2
 80a229e:	2000      	moveq	r0, #0
 80a22a0:	4770      	bxeq	lr
 80a22a2:	f110 0f00 	cmn.w	r0, #0
 80a22a6:	ea91 0f03 	teq	r1, r3
 80a22aa:	bf58      	it	pl
 80a22ac:	4299      	cmppl	r1, r3
 80a22ae:	bf08      	it	eq
 80a22b0:	4290      	cmpeq	r0, r2
 80a22b2:	bf2c      	ite	cs
 80a22b4:	17d8      	asrcs	r0, r3, #31
 80a22b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a22ba:	f040 0001 	orr.w	r0, r0, #1
 80a22be:	4770      	bx	lr
 80a22c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a22c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a22c8:	d102      	bne.n	80a22d0 <__cmpdf2+0x64>
 80a22ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a22ce:	d107      	bne.n	80a22e0 <__cmpdf2+0x74>
 80a22d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a22d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a22d8:	d1d6      	bne.n	80a2288 <__cmpdf2+0x1c>
 80a22da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a22de:	d0d3      	beq.n	80a2288 <__cmpdf2+0x1c>
 80a22e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a22e4:	4770      	bx	lr
 80a22e6:	bf00      	nop

080a22e8 <__aeabi_cdrcmple>:
 80a22e8:	4684      	mov	ip, r0
 80a22ea:	4610      	mov	r0, r2
 80a22ec:	4662      	mov	r2, ip
 80a22ee:	468c      	mov	ip, r1
 80a22f0:	4619      	mov	r1, r3
 80a22f2:	4663      	mov	r3, ip
 80a22f4:	e000      	b.n	80a22f8 <__aeabi_cdcmpeq>
 80a22f6:	bf00      	nop

080a22f8 <__aeabi_cdcmpeq>:
 80a22f8:	b501      	push	{r0, lr}
 80a22fa:	f7ff ffb7 	bl	80a226c <__cmpdf2>
 80a22fe:	2800      	cmp	r0, #0
 80a2300:	bf48      	it	mi
 80a2302:	f110 0f00 	cmnmi.w	r0, #0
 80a2306:	bd01      	pop	{r0, pc}

080a2308 <__aeabi_dcmpeq>:
 80a2308:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a230c:	f7ff fff4 	bl	80a22f8 <__aeabi_cdcmpeq>
 80a2310:	bf0c      	ite	eq
 80a2312:	2001      	moveq	r0, #1
 80a2314:	2000      	movne	r0, #0
 80a2316:	f85d fb08 	ldr.w	pc, [sp], #8
 80a231a:	bf00      	nop

080a231c <__aeabi_dcmplt>:
 80a231c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2320:	f7ff ffea 	bl	80a22f8 <__aeabi_cdcmpeq>
 80a2324:	bf34      	ite	cc
 80a2326:	2001      	movcc	r0, #1
 80a2328:	2000      	movcs	r0, #0
 80a232a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a232e:	bf00      	nop

080a2330 <__aeabi_dcmple>:
 80a2330:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2334:	f7ff ffe0 	bl	80a22f8 <__aeabi_cdcmpeq>
 80a2338:	bf94      	ite	ls
 80a233a:	2001      	movls	r0, #1
 80a233c:	2000      	movhi	r0, #0
 80a233e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2342:	bf00      	nop

080a2344 <__aeabi_dcmpge>:
 80a2344:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2348:	f7ff ffce 	bl	80a22e8 <__aeabi_cdrcmple>
 80a234c:	bf94      	ite	ls
 80a234e:	2001      	movls	r0, #1
 80a2350:	2000      	movhi	r0, #0
 80a2352:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2356:	bf00      	nop

080a2358 <__aeabi_dcmpgt>:
 80a2358:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a235c:	f7ff ffc4 	bl	80a22e8 <__aeabi_cdrcmple>
 80a2360:	bf34      	ite	cc
 80a2362:	2001      	movcc	r0, #1
 80a2364:	2000      	movcs	r0, #0
 80a2366:	f85d fb08 	ldr.w	pc, [sp], #8
 80a236a:	bf00      	nop

080a236c <__aeabi_dcmpun>:
 80a236c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2370:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2374:	d102      	bne.n	80a237c <__aeabi_dcmpun+0x10>
 80a2376:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a237a:	d10a      	bne.n	80a2392 <__aeabi_dcmpun+0x26>
 80a237c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2380:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2384:	d102      	bne.n	80a238c <__aeabi_dcmpun+0x20>
 80a2386:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a238a:	d102      	bne.n	80a2392 <__aeabi_dcmpun+0x26>
 80a238c:	f04f 0000 	mov.w	r0, #0
 80a2390:	4770      	bx	lr
 80a2392:	f04f 0001 	mov.w	r0, #1
 80a2396:	4770      	bx	lr

080a2398 <__aeabi_d2iz>:
 80a2398:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a239c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a23a0:	d215      	bcs.n	80a23ce <__aeabi_d2iz+0x36>
 80a23a2:	d511      	bpl.n	80a23c8 <__aeabi_d2iz+0x30>
 80a23a4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a23a8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a23ac:	d912      	bls.n	80a23d4 <__aeabi_d2iz+0x3c>
 80a23ae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a23b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a23b6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a23ba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a23be:	fa23 f002 	lsr.w	r0, r3, r2
 80a23c2:	bf18      	it	ne
 80a23c4:	4240      	negne	r0, r0
 80a23c6:	4770      	bx	lr
 80a23c8:	f04f 0000 	mov.w	r0, #0
 80a23cc:	4770      	bx	lr
 80a23ce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a23d2:	d105      	bne.n	80a23e0 <__aeabi_d2iz+0x48>
 80a23d4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a23d8:	bf08      	it	eq
 80a23da:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a23de:	4770      	bx	lr
 80a23e0:	f04f 0000 	mov.w	r0, #0
 80a23e4:	4770      	bx	lr
 80a23e6:	bf00      	nop

080a23e8 <__aeabi_d2uiz>:
 80a23e8:	004a      	lsls	r2, r1, #1
 80a23ea:	d211      	bcs.n	80a2410 <__aeabi_d2uiz+0x28>
 80a23ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a23f0:	d211      	bcs.n	80a2416 <__aeabi_d2uiz+0x2e>
 80a23f2:	d50d      	bpl.n	80a2410 <__aeabi_d2uiz+0x28>
 80a23f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a23f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a23fc:	d40e      	bmi.n	80a241c <__aeabi_d2uiz+0x34>
 80a23fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a2402:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a2406:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a240a:	fa23 f002 	lsr.w	r0, r3, r2
 80a240e:	4770      	bx	lr
 80a2410:	f04f 0000 	mov.w	r0, #0
 80a2414:	4770      	bx	lr
 80a2416:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a241a:	d102      	bne.n	80a2422 <__aeabi_d2uiz+0x3a>
 80a241c:	f04f 30ff 	mov.w	r0, #4294967295
 80a2420:	4770      	bx	lr
 80a2422:	f04f 0000 	mov.w	r0, #0
 80a2426:	4770      	bx	lr

080a2428 <__aeabi_frsub>:
 80a2428:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a242c:	e002      	b.n	80a2434 <__addsf3>
 80a242e:	bf00      	nop

080a2430 <__aeabi_fsub>:
 80a2430:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a2434 <__addsf3>:
 80a2434:	0042      	lsls	r2, r0, #1
 80a2436:	bf1f      	itttt	ne
 80a2438:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a243c:	ea92 0f03 	teqne	r2, r3
 80a2440:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a2444:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a2448:	d06a      	beq.n	80a2520 <__addsf3+0xec>
 80a244a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a244e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a2452:	bfc1      	itttt	gt
 80a2454:	18d2      	addgt	r2, r2, r3
 80a2456:	4041      	eorgt	r1, r0
 80a2458:	4048      	eorgt	r0, r1
 80a245a:	4041      	eorgt	r1, r0
 80a245c:	bfb8      	it	lt
 80a245e:	425b      	neglt	r3, r3
 80a2460:	2b19      	cmp	r3, #25
 80a2462:	bf88      	it	hi
 80a2464:	4770      	bxhi	lr
 80a2466:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a246a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a246e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a2472:	bf18      	it	ne
 80a2474:	4240      	negne	r0, r0
 80a2476:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a247a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a247e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a2482:	bf18      	it	ne
 80a2484:	4249      	negne	r1, r1
 80a2486:	ea92 0f03 	teq	r2, r3
 80a248a:	d03f      	beq.n	80a250c <__addsf3+0xd8>
 80a248c:	f1a2 0201 	sub.w	r2, r2, #1
 80a2490:	fa41 fc03 	asr.w	ip, r1, r3
 80a2494:	eb10 000c 	adds.w	r0, r0, ip
 80a2498:	f1c3 0320 	rsb	r3, r3, #32
 80a249c:	fa01 f103 	lsl.w	r1, r1, r3
 80a24a0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a24a4:	d502      	bpl.n	80a24ac <__addsf3+0x78>
 80a24a6:	4249      	negs	r1, r1
 80a24a8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a24ac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a24b0:	d313      	bcc.n	80a24da <__addsf3+0xa6>
 80a24b2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a24b6:	d306      	bcc.n	80a24c6 <__addsf3+0x92>
 80a24b8:	0840      	lsrs	r0, r0, #1
 80a24ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80a24be:	f102 0201 	add.w	r2, r2, #1
 80a24c2:	2afe      	cmp	r2, #254	; 0xfe
 80a24c4:	d251      	bcs.n	80a256a <__addsf3+0x136>
 80a24c6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a24ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a24ce:	bf08      	it	eq
 80a24d0:	f020 0001 	biceq.w	r0, r0, #1
 80a24d4:	ea40 0003 	orr.w	r0, r0, r3
 80a24d8:	4770      	bx	lr
 80a24da:	0049      	lsls	r1, r1, #1
 80a24dc:	eb40 0000 	adc.w	r0, r0, r0
 80a24e0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a24e4:	f1a2 0201 	sub.w	r2, r2, #1
 80a24e8:	d1ed      	bne.n	80a24c6 <__addsf3+0x92>
 80a24ea:	fab0 fc80 	clz	ip, r0
 80a24ee:	f1ac 0c08 	sub.w	ip, ip, #8
 80a24f2:	ebb2 020c 	subs.w	r2, r2, ip
 80a24f6:	fa00 f00c 	lsl.w	r0, r0, ip
 80a24fa:	bfaa      	itet	ge
 80a24fc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a2500:	4252      	neglt	r2, r2
 80a2502:	4318      	orrge	r0, r3
 80a2504:	bfbc      	itt	lt
 80a2506:	40d0      	lsrlt	r0, r2
 80a2508:	4318      	orrlt	r0, r3
 80a250a:	4770      	bx	lr
 80a250c:	f092 0f00 	teq	r2, #0
 80a2510:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a2514:	bf06      	itte	eq
 80a2516:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a251a:	3201      	addeq	r2, #1
 80a251c:	3b01      	subne	r3, #1
 80a251e:	e7b5      	b.n	80a248c <__addsf3+0x58>
 80a2520:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a2524:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a2528:	bf18      	it	ne
 80a252a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a252e:	d021      	beq.n	80a2574 <__addsf3+0x140>
 80a2530:	ea92 0f03 	teq	r2, r3
 80a2534:	d004      	beq.n	80a2540 <__addsf3+0x10c>
 80a2536:	f092 0f00 	teq	r2, #0
 80a253a:	bf08      	it	eq
 80a253c:	4608      	moveq	r0, r1
 80a253e:	4770      	bx	lr
 80a2540:	ea90 0f01 	teq	r0, r1
 80a2544:	bf1c      	itt	ne
 80a2546:	2000      	movne	r0, #0
 80a2548:	4770      	bxne	lr
 80a254a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a254e:	d104      	bne.n	80a255a <__addsf3+0x126>
 80a2550:	0040      	lsls	r0, r0, #1
 80a2552:	bf28      	it	cs
 80a2554:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a2558:	4770      	bx	lr
 80a255a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a255e:	bf3c      	itt	cc
 80a2560:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a2564:	4770      	bxcc	lr
 80a2566:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a256a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a256e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2572:	4770      	bx	lr
 80a2574:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a2578:	bf16      	itet	ne
 80a257a:	4608      	movne	r0, r1
 80a257c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a2580:	4601      	movne	r1, r0
 80a2582:	0242      	lsls	r2, r0, #9
 80a2584:	bf06      	itte	eq
 80a2586:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a258a:	ea90 0f01 	teqeq	r0, r1
 80a258e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a2592:	4770      	bx	lr

080a2594 <__aeabi_ui2f>:
 80a2594:	f04f 0300 	mov.w	r3, #0
 80a2598:	e004      	b.n	80a25a4 <__aeabi_i2f+0x8>
 80a259a:	bf00      	nop

080a259c <__aeabi_i2f>:
 80a259c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a25a0:	bf48      	it	mi
 80a25a2:	4240      	negmi	r0, r0
 80a25a4:	ea5f 0c00 	movs.w	ip, r0
 80a25a8:	bf08      	it	eq
 80a25aa:	4770      	bxeq	lr
 80a25ac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a25b0:	4601      	mov	r1, r0
 80a25b2:	f04f 0000 	mov.w	r0, #0
 80a25b6:	e01c      	b.n	80a25f2 <__aeabi_l2f+0x2a>

080a25b8 <__aeabi_ul2f>:
 80a25b8:	ea50 0201 	orrs.w	r2, r0, r1
 80a25bc:	bf08      	it	eq
 80a25be:	4770      	bxeq	lr
 80a25c0:	f04f 0300 	mov.w	r3, #0
 80a25c4:	e00a      	b.n	80a25dc <__aeabi_l2f+0x14>
 80a25c6:	bf00      	nop

080a25c8 <__aeabi_l2f>:
 80a25c8:	ea50 0201 	orrs.w	r2, r0, r1
 80a25cc:	bf08      	it	eq
 80a25ce:	4770      	bxeq	lr
 80a25d0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a25d4:	d502      	bpl.n	80a25dc <__aeabi_l2f+0x14>
 80a25d6:	4240      	negs	r0, r0
 80a25d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a25dc:	ea5f 0c01 	movs.w	ip, r1
 80a25e0:	bf02      	ittt	eq
 80a25e2:	4684      	moveq	ip, r0
 80a25e4:	4601      	moveq	r1, r0
 80a25e6:	2000      	moveq	r0, #0
 80a25e8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a25ec:	bf08      	it	eq
 80a25ee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a25f2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a25f6:	fabc f28c 	clz	r2, ip
 80a25fa:	3a08      	subs	r2, #8
 80a25fc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a2600:	db10      	blt.n	80a2624 <__aeabi_l2f+0x5c>
 80a2602:	fa01 fc02 	lsl.w	ip, r1, r2
 80a2606:	4463      	add	r3, ip
 80a2608:	fa00 fc02 	lsl.w	ip, r0, r2
 80a260c:	f1c2 0220 	rsb	r2, r2, #32
 80a2610:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a2614:	fa20 f202 	lsr.w	r2, r0, r2
 80a2618:	eb43 0002 	adc.w	r0, r3, r2
 80a261c:	bf08      	it	eq
 80a261e:	f020 0001 	biceq.w	r0, r0, #1
 80a2622:	4770      	bx	lr
 80a2624:	f102 0220 	add.w	r2, r2, #32
 80a2628:	fa01 fc02 	lsl.w	ip, r1, r2
 80a262c:	f1c2 0220 	rsb	r2, r2, #32
 80a2630:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a2634:	fa21 f202 	lsr.w	r2, r1, r2
 80a2638:	eb43 0002 	adc.w	r0, r3, r2
 80a263c:	bf08      	it	eq
 80a263e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a2642:	4770      	bx	lr

080a2644 <__aeabi_fmul>:
 80a2644:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2648:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a264c:	bf1e      	ittt	ne
 80a264e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a2652:	ea92 0f0c 	teqne	r2, ip
 80a2656:	ea93 0f0c 	teqne	r3, ip
 80a265a:	d06f      	beq.n	80a273c <__aeabi_fmul+0xf8>
 80a265c:	441a      	add	r2, r3
 80a265e:	ea80 0c01 	eor.w	ip, r0, r1
 80a2662:	0240      	lsls	r0, r0, #9
 80a2664:	bf18      	it	ne
 80a2666:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a266a:	d01e      	beq.n	80a26aa <__aeabi_fmul+0x66>
 80a266c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a2670:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a2674:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a2678:	fba0 3101 	umull	r3, r1, r0, r1
 80a267c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a2680:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a2684:	bf3e      	ittt	cc
 80a2686:	0049      	lslcc	r1, r1, #1
 80a2688:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a268c:	005b      	lslcc	r3, r3, #1
 80a268e:	ea40 0001 	orr.w	r0, r0, r1
 80a2692:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a2696:	2afd      	cmp	r2, #253	; 0xfd
 80a2698:	d81d      	bhi.n	80a26d6 <__aeabi_fmul+0x92>
 80a269a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a269e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a26a2:	bf08      	it	eq
 80a26a4:	f020 0001 	biceq.w	r0, r0, #1
 80a26a8:	4770      	bx	lr
 80a26aa:	f090 0f00 	teq	r0, #0
 80a26ae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a26b2:	bf08      	it	eq
 80a26b4:	0249      	lsleq	r1, r1, #9
 80a26b6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a26ba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a26be:	3a7f      	subs	r2, #127	; 0x7f
 80a26c0:	bfc2      	ittt	gt
 80a26c2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a26c6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a26ca:	4770      	bxgt	lr
 80a26cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a26d0:	f04f 0300 	mov.w	r3, #0
 80a26d4:	3a01      	subs	r2, #1
 80a26d6:	dc5d      	bgt.n	80a2794 <__aeabi_fmul+0x150>
 80a26d8:	f112 0f19 	cmn.w	r2, #25
 80a26dc:	bfdc      	itt	le
 80a26de:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a26e2:	4770      	bxle	lr
 80a26e4:	f1c2 0200 	rsb	r2, r2, #0
 80a26e8:	0041      	lsls	r1, r0, #1
 80a26ea:	fa21 f102 	lsr.w	r1, r1, r2
 80a26ee:	f1c2 0220 	rsb	r2, r2, #32
 80a26f2:	fa00 fc02 	lsl.w	ip, r0, r2
 80a26f6:	ea5f 0031 	movs.w	r0, r1, rrx
 80a26fa:	f140 0000 	adc.w	r0, r0, #0
 80a26fe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a2702:	bf08      	it	eq
 80a2704:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a2708:	4770      	bx	lr
 80a270a:	f092 0f00 	teq	r2, #0
 80a270e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a2712:	bf02      	ittt	eq
 80a2714:	0040      	lsleq	r0, r0, #1
 80a2716:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a271a:	3a01      	subeq	r2, #1
 80a271c:	d0f9      	beq.n	80a2712 <__aeabi_fmul+0xce>
 80a271e:	ea40 000c 	orr.w	r0, r0, ip
 80a2722:	f093 0f00 	teq	r3, #0
 80a2726:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a272a:	bf02      	ittt	eq
 80a272c:	0049      	lsleq	r1, r1, #1
 80a272e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a2732:	3b01      	subeq	r3, #1
 80a2734:	d0f9      	beq.n	80a272a <__aeabi_fmul+0xe6>
 80a2736:	ea41 010c 	orr.w	r1, r1, ip
 80a273a:	e78f      	b.n	80a265c <__aeabi_fmul+0x18>
 80a273c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a2740:	ea92 0f0c 	teq	r2, ip
 80a2744:	bf18      	it	ne
 80a2746:	ea93 0f0c 	teqne	r3, ip
 80a274a:	d00a      	beq.n	80a2762 <__aeabi_fmul+0x11e>
 80a274c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a2750:	bf18      	it	ne
 80a2752:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a2756:	d1d8      	bne.n	80a270a <__aeabi_fmul+0xc6>
 80a2758:	ea80 0001 	eor.w	r0, r0, r1
 80a275c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a2760:	4770      	bx	lr
 80a2762:	f090 0f00 	teq	r0, #0
 80a2766:	bf17      	itett	ne
 80a2768:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a276c:	4608      	moveq	r0, r1
 80a276e:	f091 0f00 	teqne	r1, #0
 80a2772:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a2776:	d014      	beq.n	80a27a2 <__aeabi_fmul+0x15e>
 80a2778:	ea92 0f0c 	teq	r2, ip
 80a277c:	d101      	bne.n	80a2782 <__aeabi_fmul+0x13e>
 80a277e:	0242      	lsls	r2, r0, #9
 80a2780:	d10f      	bne.n	80a27a2 <__aeabi_fmul+0x15e>
 80a2782:	ea93 0f0c 	teq	r3, ip
 80a2786:	d103      	bne.n	80a2790 <__aeabi_fmul+0x14c>
 80a2788:	024b      	lsls	r3, r1, #9
 80a278a:	bf18      	it	ne
 80a278c:	4608      	movne	r0, r1
 80a278e:	d108      	bne.n	80a27a2 <__aeabi_fmul+0x15e>
 80a2790:	ea80 0001 	eor.w	r0, r0, r1
 80a2794:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a2798:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a279c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a27a0:	4770      	bx	lr
 80a27a2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a27a6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a27aa:	4770      	bx	lr

080a27ac <__aeabi_fdiv>:
 80a27ac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a27b0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a27b4:	bf1e      	ittt	ne
 80a27b6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a27ba:	ea92 0f0c 	teqne	r2, ip
 80a27be:	ea93 0f0c 	teqne	r3, ip
 80a27c2:	d069      	beq.n	80a2898 <__aeabi_fdiv+0xec>
 80a27c4:	eba2 0203 	sub.w	r2, r2, r3
 80a27c8:	ea80 0c01 	eor.w	ip, r0, r1
 80a27cc:	0249      	lsls	r1, r1, #9
 80a27ce:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a27d2:	d037      	beq.n	80a2844 <__aeabi_fdiv+0x98>
 80a27d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a27d8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a27dc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a27e0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a27e4:	428b      	cmp	r3, r1
 80a27e6:	bf38      	it	cc
 80a27e8:	005b      	lslcc	r3, r3, #1
 80a27ea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a27ee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a27f2:	428b      	cmp	r3, r1
 80a27f4:	bf24      	itt	cs
 80a27f6:	1a5b      	subcs	r3, r3, r1
 80a27f8:	ea40 000c 	orrcs.w	r0, r0, ip
 80a27fc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a2800:	bf24      	itt	cs
 80a2802:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a2806:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a280a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a280e:	bf24      	itt	cs
 80a2810:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a2814:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a2818:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a281c:	bf24      	itt	cs
 80a281e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a2822:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a2826:	011b      	lsls	r3, r3, #4
 80a2828:	bf18      	it	ne
 80a282a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a282e:	d1e0      	bne.n	80a27f2 <__aeabi_fdiv+0x46>
 80a2830:	2afd      	cmp	r2, #253	; 0xfd
 80a2832:	f63f af50 	bhi.w	80a26d6 <__aeabi_fmul+0x92>
 80a2836:	428b      	cmp	r3, r1
 80a2838:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a283c:	bf08      	it	eq
 80a283e:	f020 0001 	biceq.w	r0, r0, #1
 80a2842:	4770      	bx	lr
 80a2844:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a2848:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a284c:	327f      	adds	r2, #127	; 0x7f
 80a284e:	bfc2      	ittt	gt
 80a2850:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a2854:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a2858:	4770      	bxgt	lr
 80a285a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a285e:	f04f 0300 	mov.w	r3, #0
 80a2862:	3a01      	subs	r2, #1
 80a2864:	e737      	b.n	80a26d6 <__aeabi_fmul+0x92>
 80a2866:	f092 0f00 	teq	r2, #0
 80a286a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a286e:	bf02      	ittt	eq
 80a2870:	0040      	lsleq	r0, r0, #1
 80a2872:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a2876:	3a01      	subeq	r2, #1
 80a2878:	d0f9      	beq.n	80a286e <__aeabi_fdiv+0xc2>
 80a287a:	ea40 000c 	orr.w	r0, r0, ip
 80a287e:	f093 0f00 	teq	r3, #0
 80a2882:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a2886:	bf02      	ittt	eq
 80a2888:	0049      	lsleq	r1, r1, #1
 80a288a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a288e:	3b01      	subeq	r3, #1
 80a2890:	d0f9      	beq.n	80a2886 <__aeabi_fdiv+0xda>
 80a2892:	ea41 010c 	orr.w	r1, r1, ip
 80a2896:	e795      	b.n	80a27c4 <__aeabi_fdiv+0x18>
 80a2898:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a289c:	ea92 0f0c 	teq	r2, ip
 80a28a0:	d108      	bne.n	80a28b4 <__aeabi_fdiv+0x108>
 80a28a2:	0242      	lsls	r2, r0, #9
 80a28a4:	f47f af7d 	bne.w	80a27a2 <__aeabi_fmul+0x15e>
 80a28a8:	ea93 0f0c 	teq	r3, ip
 80a28ac:	f47f af70 	bne.w	80a2790 <__aeabi_fmul+0x14c>
 80a28b0:	4608      	mov	r0, r1
 80a28b2:	e776      	b.n	80a27a2 <__aeabi_fmul+0x15e>
 80a28b4:	ea93 0f0c 	teq	r3, ip
 80a28b8:	d104      	bne.n	80a28c4 <__aeabi_fdiv+0x118>
 80a28ba:	024b      	lsls	r3, r1, #9
 80a28bc:	f43f af4c 	beq.w	80a2758 <__aeabi_fmul+0x114>
 80a28c0:	4608      	mov	r0, r1
 80a28c2:	e76e      	b.n	80a27a2 <__aeabi_fmul+0x15e>
 80a28c4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a28c8:	bf18      	it	ne
 80a28ca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a28ce:	d1ca      	bne.n	80a2866 <__aeabi_fdiv+0xba>
 80a28d0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a28d4:	f47f af5c 	bne.w	80a2790 <__aeabi_fmul+0x14c>
 80a28d8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a28dc:	f47f af3c 	bne.w	80a2758 <__aeabi_fmul+0x114>
 80a28e0:	e75f      	b.n	80a27a2 <__aeabi_fmul+0x15e>
 80a28e2:	bf00      	nop

080a28e4 <__gesf2>:
 80a28e4:	f04f 3cff 	mov.w	ip, #4294967295
 80a28e8:	e006      	b.n	80a28f8 <__cmpsf2+0x4>
 80a28ea:	bf00      	nop

080a28ec <__lesf2>:
 80a28ec:	f04f 0c01 	mov.w	ip, #1
 80a28f0:	e002      	b.n	80a28f8 <__cmpsf2+0x4>
 80a28f2:	bf00      	nop

080a28f4 <__cmpsf2>:
 80a28f4:	f04f 0c01 	mov.w	ip, #1
 80a28f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a28fc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a2900:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a2904:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a2908:	bf18      	it	ne
 80a290a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a290e:	d011      	beq.n	80a2934 <__cmpsf2+0x40>
 80a2910:	b001      	add	sp, #4
 80a2912:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a2916:	bf18      	it	ne
 80a2918:	ea90 0f01 	teqne	r0, r1
 80a291c:	bf58      	it	pl
 80a291e:	ebb2 0003 	subspl.w	r0, r2, r3
 80a2922:	bf88      	it	hi
 80a2924:	17c8      	asrhi	r0, r1, #31
 80a2926:	bf38      	it	cc
 80a2928:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a292c:	bf18      	it	ne
 80a292e:	f040 0001 	orrne.w	r0, r0, #1
 80a2932:	4770      	bx	lr
 80a2934:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a2938:	d102      	bne.n	80a2940 <__cmpsf2+0x4c>
 80a293a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a293e:	d105      	bne.n	80a294c <__cmpsf2+0x58>
 80a2940:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a2944:	d1e4      	bne.n	80a2910 <__cmpsf2+0x1c>
 80a2946:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a294a:	d0e1      	beq.n	80a2910 <__cmpsf2+0x1c>
 80a294c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a2950:	4770      	bx	lr
 80a2952:	bf00      	nop

080a2954 <__aeabi_cfrcmple>:
 80a2954:	4684      	mov	ip, r0
 80a2956:	4608      	mov	r0, r1
 80a2958:	4661      	mov	r1, ip
 80a295a:	e7ff      	b.n	80a295c <__aeabi_cfcmpeq>

080a295c <__aeabi_cfcmpeq>:
 80a295c:	b50f      	push	{r0, r1, r2, r3, lr}
 80a295e:	f7ff ffc9 	bl	80a28f4 <__cmpsf2>
 80a2962:	2800      	cmp	r0, #0
 80a2964:	bf48      	it	mi
 80a2966:	f110 0f00 	cmnmi.w	r0, #0
 80a296a:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a296c <__aeabi_fcmpeq>:
 80a296c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2970:	f7ff fff4 	bl	80a295c <__aeabi_cfcmpeq>
 80a2974:	bf0c      	ite	eq
 80a2976:	2001      	moveq	r0, #1
 80a2978:	2000      	movne	r0, #0
 80a297a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a297e:	bf00      	nop

080a2980 <__aeabi_fcmplt>:
 80a2980:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2984:	f7ff ffea 	bl	80a295c <__aeabi_cfcmpeq>
 80a2988:	bf34      	ite	cc
 80a298a:	2001      	movcc	r0, #1
 80a298c:	2000      	movcs	r0, #0
 80a298e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2992:	bf00      	nop

080a2994 <__aeabi_fcmple>:
 80a2994:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2998:	f7ff ffe0 	bl	80a295c <__aeabi_cfcmpeq>
 80a299c:	bf94      	ite	ls
 80a299e:	2001      	movls	r0, #1
 80a29a0:	2000      	movhi	r0, #0
 80a29a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a29a6:	bf00      	nop

080a29a8 <__aeabi_fcmpge>:
 80a29a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a29ac:	f7ff ffd2 	bl	80a2954 <__aeabi_cfrcmple>
 80a29b0:	bf94      	ite	ls
 80a29b2:	2001      	movls	r0, #1
 80a29b4:	2000      	movhi	r0, #0
 80a29b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a29ba:	bf00      	nop

080a29bc <__aeabi_fcmpgt>:
 80a29bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a29c0:	f7ff ffc8 	bl	80a2954 <__aeabi_cfrcmple>
 80a29c4:	bf34      	ite	cc
 80a29c6:	2001      	movcc	r0, #1
 80a29c8:	2000      	movcs	r0, #0
 80a29ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80a29ce:	bf00      	nop

080a29d0 <__cxa_atexit>:
 80a29d0:	b510      	push	{r4, lr}
 80a29d2:	4c05      	ldr	r4, [pc, #20]	; (80a29e8 <__cxa_atexit+0x18>)
 80a29d4:	4613      	mov	r3, r2
 80a29d6:	b12c      	cbz	r4, 80a29e4 <__cxa_atexit+0x14>
 80a29d8:	460a      	mov	r2, r1
 80a29da:	4601      	mov	r1, r0
 80a29dc:	2002      	movs	r0, #2
 80a29de:	f3af 8000 	nop.w
 80a29e2:	bd10      	pop	{r4, pc}
 80a29e4:	4620      	mov	r0, r4
 80a29e6:	bd10      	pop	{r4, pc}
 80a29e8:	00000000 	.word	0x00000000

080a29ec <memcpy>:
 80a29ec:	b510      	push	{r4, lr}
 80a29ee:	1e43      	subs	r3, r0, #1
 80a29f0:	440a      	add	r2, r1
 80a29f2:	4291      	cmp	r1, r2
 80a29f4:	d004      	beq.n	80a2a00 <memcpy+0x14>
 80a29f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a29fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a29fe:	e7f8      	b.n	80a29f2 <memcpy+0x6>
 80a2a00:	bd10      	pop	{r4, pc}

080a2a02 <memset>:
 80a2a02:	4603      	mov	r3, r0
 80a2a04:	4402      	add	r2, r0
 80a2a06:	4293      	cmp	r3, r2
 80a2a08:	d002      	beq.n	80a2a10 <memset+0xe>
 80a2a0a:	f803 1b01 	strb.w	r1, [r3], #1
 80a2a0e:	e7fa      	b.n	80a2a06 <memset+0x4>
 80a2a10:	4770      	bx	lr
	...

080a2a14 <srand>:
 80a2a14:	b538      	push	{r3, r4, r5, lr}
 80a2a16:	4b12      	ldr	r3, [pc, #72]	; (80a2a60 <srand+0x4c>)
 80a2a18:	4605      	mov	r5, r0
 80a2a1a:	681c      	ldr	r4, [r3, #0]
 80a2a1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2a1e:	b9d3      	cbnz	r3, 80a2a56 <srand+0x42>
 80a2a20:	2018      	movs	r0, #24
 80a2a22:	f7fd fe8b 	bl	80a073c <malloc>
 80a2a26:	f243 330e 	movw	r3, #13070	; 0x330e
 80a2a2a:	63a0      	str	r0, [r4, #56]	; 0x38
 80a2a2c:	8003      	strh	r3, [r0, #0]
 80a2a2e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a2a32:	8043      	strh	r3, [r0, #2]
 80a2a34:	f241 2334 	movw	r3, #4660	; 0x1234
 80a2a38:	8083      	strh	r3, [r0, #4]
 80a2a3a:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a2a3e:	80c3      	strh	r3, [r0, #6]
 80a2a40:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a2a44:	8103      	strh	r3, [r0, #8]
 80a2a46:	2305      	movs	r3, #5
 80a2a48:	8143      	strh	r3, [r0, #10]
 80a2a4a:	230b      	movs	r3, #11
 80a2a4c:	8183      	strh	r3, [r0, #12]
 80a2a4e:	2201      	movs	r2, #1
 80a2a50:	2300      	movs	r3, #0
 80a2a52:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a2a56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2a58:	2200      	movs	r2, #0
 80a2a5a:	611d      	str	r5, [r3, #16]
 80a2a5c:	615a      	str	r2, [r3, #20]
 80a2a5e:	bd38      	pop	{r3, r4, r5, pc}
 80a2a60:	20000064 	.word	0x20000064

080a2a64 <rand>:
 80a2a64:	4b19      	ldr	r3, [pc, #100]	; (80a2acc <rand+0x68>)
 80a2a66:	b510      	push	{r4, lr}
 80a2a68:	681c      	ldr	r4, [r3, #0]
 80a2a6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2a6c:	b9d3      	cbnz	r3, 80a2aa4 <rand+0x40>
 80a2a6e:	2018      	movs	r0, #24
 80a2a70:	f7fd fe64 	bl	80a073c <malloc>
 80a2a74:	f243 330e 	movw	r3, #13070	; 0x330e
 80a2a78:	63a0      	str	r0, [r4, #56]	; 0x38
 80a2a7a:	8003      	strh	r3, [r0, #0]
 80a2a7c:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a2a80:	8043      	strh	r3, [r0, #2]
 80a2a82:	f241 2334 	movw	r3, #4660	; 0x1234
 80a2a86:	8083      	strh	r3, [r0, #4]
 80a2a88:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a2a8c:	80c3      	strh	r3, [r0, #6]
 80a2a8e:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a2a92:	8103      	strh	r3, [r0, #8]
 80a2a94:	2305      	movs	r3, #5
 80a2a96:	8143      	strh	r3, [r0, #10]
 80a2a98:	230b      	movs	r3, #11
 80a2a9a:	8183      	strh	r3, [r0, #12]
 80a2a9c:	2201      	movs	r2, #1
 80a2a9e:	2300      	movs	r3, #0
 80a2aa0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a2aa4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a2aa6:	4c0a      	ldr	r4, [pc, #40]	; (80a2ad0 <rand+0x6c>)
 80a2aa8:	690b      	ldr	r3, [r1, #16]
 80a2aaa:	6948      	ldr	r0, [r1, #20]
 80a2aac:	435c      	muls	r4, r3
 80a2aae:	4a09      	ldr	r2, [pc, #36]	; (80a2ad4 <rand+0x70>)
 80a2ab0:	fb02 4000 	mla	r0, r2, r0, r4
 80a2ab4:	fba3 2302 	umull	r2, r3, r3, r2
 80a2ab8:	3201      	adds	r2, #1
 80a2aba:	4403      	add	r3, r0
 80a2abc:	f143 0300 	adc.w	r3, r3, #0
 80a2ac0:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80a2ac4:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 80a2ac8:	bd10      	pop	{r4, pc}
 80a2aca:	bf00      	nop
 80a2acc:	20000064 	.word	0x20000064
 80a2ad0:	5851f42d 	.word	0x5851f42d
 80a2ad4:	4c957f2d 	.word	0x4c957f2d

080a2ad8 <strdup>:
 80a2ad8:	4b02      	ldr	r3, [pc, #8]	; (80a2ae4 <strdup+0xc>)
 80a2ada:	4601      	mov	r1, r0
 80a2adc:	6818      	ldr	r0, [r3, #0]
 80a2ade:	f000 b803 	b.w	80a2ae8 <_strdup_r>
 80a2ae2:	bf00      	nop
 80a2ae4:	20000064 	.word	0x20000064

080a2ae8 <_strdup_r>:
 80a2ae8:	b570      	push	{r4, r5, r6, lr}
 80a2aea:	4606      	mov	r6, r0
 80a2aec:	4608      	mov	r0, r1
 80a2aee:	460c      	mov	r4, r1
 80a2af0:	f000 f80d 	bl	80a2b0e <strlen>
 80a2af4:	1c45      	adds	r5, r0, #1
 80a2af6:	4629      	mov	r1, r5
 80a2af8:	4630      	mov	r0, r6
 80a2afa:	f7fd fe3f 	bl	80a077c <_malloc_r>
 80a2afe:	4606      	mov	r6, r0
 80a2b00:	b118      	cbz	r0, 80a2b0a <_strdup_r+0x22>
 80a2b02:	462a      	mov	r2, r5
 80a2b04:	4621      	mov	r1, r4
 80a2b06:	f7ff ff71 	bl	80a29ec <memcpy>
 80a2b0a:	4630      	mov	r0, r6
 80a2b0c:	bd70      	pop	{r4, r5, r6, pc}

080a2b0e <strlen>:
 80a2b0e:	4603      	mov	r3, r0
 80a2b10:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a2b14:	2a00      	cmp	r2, #0
 80a2b16:	d1fb      	bne.n	80a2b10 <strlen+0x2>
 80a2b18:	1a18      	subs	r0, r3, r0
 80a2b1a:	3801      	subs	r0, #1
 80a2b1c:	4770      	bx	lr

080a2b1e <link_code_end>:
	...

080a2b20 <dynalib_user>:
 80a2b20:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a2b30:	0000 0000 7774 6c69 6f69 735f 736d 5300     ....twilio_sms.S
 80a2b40:	6e65 6964 676e 654d 7373 6761 0065 6163     endingMessage.ca
 80a2b50:	2072 6176 006c 6863 6c69 2064 6176 006c     r val.child val.
 80a2b60:	6574 706d 7265 7461 7275 0065 6574 706d     temperature.temp
 80a2b70:	6156 006c 6854 2065 6863 6c69 2064 7661     Val.The child av
 80a2b80:	7265 6761 2065 7369 203a 0020 6863 6c69     erage is:  .chil
 80a2b90:	2064 6e69 6320 7261 7400 6568 7520 6273     d in car.the usb
 80a2ba0:	6120 7272 7961 6920 3a73 2020 5300 6e65      array is:  .Sen
 80a2bb0:	6964 676e 6d20 7365 6173 6567 6220 6365     ding message bec
 80a2bc0:	7561 6573 6320 7261 7420 7275 656e 2064     ause car turned 
 80a2bd0:	666f 0066 6854 2065 6966 7372 2074 6e61     off.The first an
 80a2be0:	2064 616c 7473 7220 6165 6964 676e 2073     d last readings 
 80a2bf0:	6e69 7420 6568 7420 6d65 2070 7261 6172     in the temp arra
 80a2c00:	3a79 2020 5400 6568 7420 6d65 6570 6172     y:  .The tempera
 80a2c10:	7574 6572 6920 2073 6972 6973 676e 7420     ture is rising t
 80a2c20:	6f6f 6620 7361 0074 6854 2065 6574 706d     oo fast.The temp
 80a2c30:	6120 6576 6172 6567 6920 3a73 2020 5300      average is:  .S
 80a2c40:	6e65 6964 676e 6d20 7365 6173 6567 6220     ending message b
 80a2c50:	6365 7561 6573 7420 6d65 6570 6172 7574     ecause temperatu
 80a2c60:	6572 6920 2073 6f74 206f 6f68 0074 6553     re is too hot.Se
 80a2c70:	646e 6e69 2067 656d 7373 6761 2065 6562     nding message be
 80a2c80:	6163 7375 2065 6574 706d 6920 2073 7263     cause temp is cr
 80a2c90:	7469 6369 6c61 7400 6977 696c 5f6f 6d73     itical.twilio_sm
 80a2ca0:	5f73 7263 7469 6369 6c61 5300 6e65 6964     s_critical.Sendi
 80a2cb0:	676e 4320 6972 6974 6163 206c 654d 7373     ng Critical Mess
 80a2cc0:	6761 0065 6f59 7275 6320 6968 646c 6920     age.Your child i
 80a2cd0:	2073 6e69 7420 6568 6320 7261 5900 756f     s in the car.You
 80a2ce0:	2072 6863 6c69 2064 7369 6920 206e 6874     r child is in th
 80a2cf0:	2065 6163 2072 6e61 2064 7469 6920 2073     e car and it is 
 80a2d00:	6f74 206f 6f68 2174 4320 6c61 206c 3139     too hot! Call 91
 80a2d10:	2031 6669 6e20 6365 7365 6173 7972 202e     1 if necessary. 
 80a2d20:	6c50 6165 6573 7320 6e65 2064 6572 7073     Please send resp
 80a2d30:	6e6f 2073 656d 7373 6761 2065 666f 6120     ons message of a
 80a2d40:	796e 6874 6e69 2067 6e61 2064 6f67 6720     nything and go g
 80a2d50:	7465 7420 6568 006d                         et them.

080a2d58 <_ZTV8SPIClass>:
	...
 80a2d60:	078d 080a 078f 080a 616e 006e 766f 0066     ........nan.ovf.
 80a2d70:	002e 6e69 0066 6162 6475 5300 7265 6169     ..inf.baud.Seria
 80a2d80:	006c 5355 5342 7265 6169 316c 7400 7079     l.USBSerial1.typ
 80a2d90:	0065 6170 6172 006d 6d63 0064 6469 6800     e.param.cmd.id.h
 80a2da0:	646e 7300 7274 006d 6966 746c 6c00 6c76     nd.strm.filt.lvl
 80a2db0:	6100 6464 6148 646e 656c 0072 6572 6f6d     .addHandler.remo
 80a2dc0:	6576 6148 646e 656c 0072 6e65 6d75 6148     veHandler.enumHa
 80a2dd0:	646e 656c 7372 4a00 4f53 534e 7274 6165     ndlers.JSONStrea
 80a2de0:	4c6d 676f 6148 646e 656c 0072 7061 0070     mLogHandler.app.
 80a2df0:	3025 3031 2075 5d00 0020 6425 2c00 0020     %010u .] .%d., .
 80a2e00:	2928 203a 2000 005b 6f63 6564 3d20 0020     (): . [.code = .
 80a2e10:	6925 6400 7465 6961 736c 3d20 0020 0a0d     %i.details = ...
 80a2e20:	6c00 006e 6e66 6300 646f 0065 6564 6174     .ln.fn.code.deta
 80a2e30:	6c69 6e00 6e6f 0065 7274 6361 0065 6e69     il.none.trace.in
 80a2e40:	6f66 7700 7261 006e 7265 6f72 0072 6170     fo.warn.error.pa
 80a2e50:	696e 0063 6c61 006c 005a 2b25 3330 3a64     nic.all.Z.%+03d:
 80a2e60:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a2e70:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a2e80:	0000 0000                                   ....

080a2e84 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a2e8c:	0d21 080a 0d27 080a 0d6b 080a 0d35 080a     !...'...k...5...
 80a2e9c:	0d23 080a                                   #...

080a2ea0 <_ZTV9IPAddress>:
	...
 80a2ea8:	12b9 080a 12a9 080a 12ab 080a               ............

080a2eb4 <_ZTV9USBSerial>:
	...
 80a2ebc:	1375 080a 13c5 080a 13d3 080a 0891 080a     u...............
 80a2ecc:	13b1 080a 1377 080a 138d 080a 13bf 080a     ....w...........
 80a2edc:	13a3 080a 1371 080a                         ....q...

080a2ee4 <_ZTV11USARTSerial>:
	...
 80a2eec:	150d 080a 155d 080a 156b 080a 0891 080a     ....]...k.......
 80a2efc:	1521 080a 1543 080a 152f 080a 1557 080a     !...C.../...W...
 80a2f0c:	150f 080a 1513 080a                         ........

080a2f14 <_ZTVN5spark9WiFiClassE>:
	...
 80a2f1c:	16c7 080a 16bd 080a 16b3 080a 1631 080a     ............1...
 80a2f2c:	0b4b 080a 16a7 080a 169b 080a 1693 080a     K...............
 80a2f3c:	1689 080a 167f 080a 163b 080a               ........;...

080a2f48 <_ZTVN5spark12NetworkClassE>:
	...
 80a2f50:	16e5 080a 16ef 080a 16f9 080a 1703 080a     ................
 80a2f60:	170d 080a 1719 080a 1725 080a 1731 080a     ........%...1...
 80a2f70:	1739 080a 1743 080a 174d 080a               9...C...M...

080a2f7c <__sf_fake_stdin>:
	...

080a2f9c <__sf_fake_stdout>:
	...

080a2fbc <__sf_fake_stderr>:
	...
 80a2fdc:	0043                                        C.

080a2fde <link_const_variable_data_end>:
	...

080a2fe0 <link_constructors_location>:
 80a2fe0:	080a047d 	.word	0x080a047d
 80a2fe4:	080a07c5 	.word	0x080a07c5
 80a2fe8:	080a0b65 	.word	0x080a0b65
 80a2fec:	080a0b75 	.word	0x080a0b75
 80a2ff0:	080a0bcd 	.word	0x080a0bcd
 80a2ff4:	080a16d1 	.word	0x080a16d1
 80a2ff8:	080a179d 	.word	0x080a179d
 80a2ffc:	080a17b1 	.word	0x080a17b1
 80a3000:	080a17f5 	.word	0x080a17f5
 80a3004:	080a1839 	.word	0x080a1839
 80a3008:	080a18bd 	.word	0x080a18bd
 80a300c:	080a1981 	.word	0x080a1981
 80a3010:	080a1a45 	.word	0x080a1a45

080a3014 <link_constructors_end>:
	...
