
c:/Users/BryceBurnette/Documents/ParticleProjects/babysaver/target/1.4.4/boron/babysaver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002134  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  00016214  2**0
                  CONTENTS
  4 .data         00000098  2003e2d0  000d6150  0000e2d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000488  2003e368  2003e368  0001e368  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d61e8  000d61e8  000161e8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6210  000d6210  00016210  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000d5065  00000000  00000000  00016214  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00010dc7  00000000  00000000  000eb279  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001e819  00000000  00000000  000fc040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002500  00000000  00000000  0011a859  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000046e0  00000000  00000000  0011cd59  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00034a06  00000000  00000000  00121439  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00028fff  00000000  00000000  00155e3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001013be  00000000  00000000  0017ee3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000ce60  00000000  00000000  002801fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fdc1 	bl	d5bb4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fdc6 	bl	d5bca <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e2d0 	.word	0x2003e2d0
   d4048:	000d6150 	.word	0x000d6150
   d404c:	2003e368 	.word	0x2003e368
   d4050:	2003e368 	.word	0x2003e368
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f000 fd79 	bl	d4b50 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d6148 	.word	0x000d6148
   d4080:	000d610c 	.word	0x000d610c

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b825 	b.w	d40d2 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f853 	bl	d4134 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f000 bd2b 	b.w	d4aec <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bb17 	b.w	d46c8 <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 bb1d 	b.w	d46d8 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bb1b 	b.w	d46d8 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.1.constprop.7>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d40b2:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d40b4:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d40b6:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d40b8:	689b      	ldr	r3, [r3, #8]
   d40ba:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d40bc:	68a3      	ldr	r3, [r4, #8]
   d40be:	3b01      	subs	r3, #1
   d40c0:	60a3      	str	r3, [r4, #8]
   d40c2:	b92b      	cbnz	r3, d40d0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.1.constprop.7+0x1e>
            _M_destroy();
   d40c4:	6823      	ldr	r3, [r4, #0]
   d40c6:	4620      	mov	r0, r4
   d40c8:	68db      	ldr	r3, [r3, #12]
        }
    }
   d40ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d40ce:	4718      	bx	r3
   d40d0:	bd10      	pop	{r4, pc}

000d40d2 <setup>:
//works
*/

// setup() runs once, when the device is first turned on.
void setup() 
{
   d40d2:	b508      	push	{r3, lr}
  //initialize all the arrays to be filled with zero
  //instead, we should initialize the array to be filled with the first measured value
  // that way we dont mess up anything with the zeros (other than usb)

  Serial.begin(9600);
   d40d4:	f001 f8ee 	bl	d52b4 <_Z16_fetch_usbserialv>
   d40d8:	f44f 5116 	mov.w	r1, #9600	; 0x2580

  // for (int thisReading = 0; thisReading < tempReadings; thisReading++) 
  // {
  //   temp[thisReading] = randomNumber(80, 150);
  // }
}
   d40dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  //initialize all the arrays to be filled with zero
  //instead, we should initialize the array to be filled with the first measured value
  // that way we dont mess up anything with the zeros (other than usb)

  Serial.begin(9600);
   d40e0:	f001 b8dc 	b.w	d529c <_ZN9USBSerial5beginEl>

000d40e4 <_Z11sendMessageRK6String>:
{
  return rand() % (maxVal-minVal+1) + minVal;
}

void sendMessage(const String& body)            //function that triggers twilio webhook
{
   d40e4:	b530      	push	{r4, r5, lr}
   d40e6:	b085      	sub	sp, #20
   d40e8:	4605      	mov	r5, r0

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d40ea:	f000 f961 	bl	d43b0 <HAL_Timer_Get_Micro_Seconds>
   d40ee:	4b0f      	ldr	r3, [pc, #60]	; (d412c <_Z11sendMessageRK6String+0x48>)
   d40f0:	682a      	ldr	r2, [r5, #0]
   d40f2:	781b      	ldrb	r3, [r3, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40f4:	f88d 3000 	strb.w	r3, [sp]
   d40f8:	4604      	mov	r4, r0
   d40fa:	233c      	movs	r3, #60	; 0x3c
   d40fc:	a802      	add	r0, sp, #8
   d40fe:	490c      	ldr	r1, [pc, #48]	; (d4130 <_Z11sendMessageRK6String+0x4c>)
   d4100:	f000 fe82 	bl	d4e08 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4104:	9803      	ldr	r0, [sp, #12]
   d4106:	b128      	cbz	r0, d4114 <_Z11sendMessageRK6String+0x30>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4108:	6843      	ldr	r3, [r0, #4]
   d410a:	3b01      	subs	r3, #1
   d410c:	6043      	str	r3, [r0, #4]
   d410e:	b90b      	cbnz	r3, d4114 <_Z11sendMessageRK6String+0x30>
   d4110:	f7ff ffcf 	bl	d40b2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.1.constprop.7>
   d4114:	f000 f94c 	bl	d43b0 <HAL_Timer_Get_Micro_Seconds>
   d4118:	4605      	mov	r5, r0
  int sendMessageStart = micros();
  Particle.publish("twilio_sms", body, PRIVATE);
  //Serial.print("SendingMessage");
  int sendMessageFinish = micros();
  // Serial.print("Send Message Time: "); 
  Serial.println(sendMessageFinish - sendMessageStart);
   d411a:	f001 f8cb 	bl	d52b4 <_Z16_fetch_usbserialv>
   d411e:	220a      	movs	r2, #10
   d4120:	1b29      	subs	r1, r5, r4
   d4122:	f000 fc79 	bl	d4a18 <_ZN5Print7printlnEii>
}
   d4126:	b005      	add	sp, #20
   d4128:	bd30      	pop	{r4, r5, pc}
   d412a:	bf00      	nop
   d412c:	2003e374 	.word	0x2003e374
   d4130:	000d5c88 	.word	0x000d5c88

000d4134 <loop>:
  // }
}

// loop() runs over and over again, as quickly as it can execute.
void loop() 
{
   d4134:	b510      	push	{r4, lr}
   d4136:	4b57      	ldr	r3, [pc, #348]	; (d4294 <loop+0x160>)
   d4138:	ed9f 7a57 	vldr	s14, [pc, #348]	; d4298 <loop+0x164>
   d413c:	ed2d 8b02 	vpush	{d8}
   d4140:	f103 0214 	add.w	r2, r3, #20
  // collect();

  childTotal = 0;
  for (int thisReading = 0; thisReading <= childReadings - 1; thisReading++) 
  {
    childTotal = childTotal + child[thisReading];
   d4144:	ecf3 7a01 	vldmia	r3!, {s15}
  // int loopStart = micros();
  // digitalWrite(DONEPIN, HIGH);
  // collect();

  childTotal = 0;
  for (int thisReading = 0; thisReading <= childReadings - 1; thisReading++) 
   d4148:	4293      	cmp	r3, r2
  {
    childTotal = childTotal + child[thisReading];
   d414a:	ee37 7a27 	vadd.f32	s14, s14, s15
  // int loopStart = micros();
  // digitalWrite(DONEPIN, HIGH);
  // collect();

  childTotal = 0;
  for (int thisReading = 0; thisReading <= childReadings - 1; thisReading++) 
   d414e:	d1f9      	bne.n	d4144 <loop+0x10>
  {
    childTotal = childTotal + child[thisReading];
  }
  childAverage = childTotal / childReadings;    //running average
   d4150:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
   d4154:	eec7 6a27 	vdiv.f32	s13, s14, s15
   d4158:	4b50      	ldr	r3, [pc, #320]	; (d429c <loop+0x168>)
   d415a:	ed83 7a00 	vstr	s14, [r3]

  // Serial.print("The child average is:  ");
  // Serial.println(childAverage);

  if (childAverage < 3)                         //if the child is in the seat
   d415e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
  childTotal = 0;
  for (int thisReading = 0; thisReading <= childReadings - 1; thisReading++) 
  {
    childTotal = childTotal + child[thisReading];
  }
  childAverage = childTotal / childReadings;    //running average
   d4162:	4b4f      	ldr	r3, [pc, #316]	; (d42a0 <loop+0x16c>)

  // Serial.print("The child average is:  ");
  // Serial.println(childAverage);

  if (childAverage < 3)                         //if the child is in the seat
   d4164:	eef4 6ac7 	vcmpe.f32	s13, s14
   d4168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  childTotal = 0;
  for (int thisReading = 0; thisReading <= childReadings - 1; thisReading++) 
  {
    childTotal = childTotal + child[thisReading];
  }
  childAverage = childTotal / childReadings;    //running average
   d416c:	edc3 6a00 	vstr	s13, [r3]
   d4170:	eeb0 8a67 	vmov.f32	s16, s15

  // Serial.print("The child average is:  ");
  // Serial.println(childAverage);

  if (childAverage < 3)                         //if the child is in the seat
   d4174:	f140 8082 	bpl.w	d427c <loop+0x148>
  {
    Serial.println("child in car");
   d4178:	f001 f89c 	bl	d52b4 <_Z16_fetch_usbserialv>
   d417c:	4949      	ldr	r1, [pc, #292]	; (d42a4 <loop+0x170>)
   d417e:	f000 fbf0 	bl	d4962 <_ZN5Print7printlnEPKc>

    // Serial.print("the usb array is:  ");
    // Serial.print(usb[0]);
    // Serial.println(usb[1]);

    if (usb[0] == 1 && usb[1] == 0)   //check to see if the car went from on to off
   d4182:	4b49      	ldr	r3, [pc, #292]	; (d42a8 <loop+0x174>)
   d4184:	ed93 7a00 	vldr	s14, [r3]
   d4188:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   d418c:	eeb4 7a67 	vcmp.f32	s14, s15
   d4190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4194:	d10e      	bne.n	d41b4 <loop+0x80>
   d4196:	edd3 7a01 	vldr	s15, [r3, #4]
   d419a:	eef5 7a40 	vcmp.f32	s15, #0.0
   d419e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d41a2:	d107      	bne.n	d41b4 <loop+0x80>
    {
      sendMessage(body);
   d41a4:	4841      	ldr	r0, [pc, #260]	; (d42ac <loop+0x178>)
   d41a6:	f7ff ff9d 	bl	d40e4 <_Z11sendMessageRK6String>
      Serial.println("Sending message because car turned off and child is in the car");
   d41aa:	f001 f883 	bl	d52b4 <_Z16_fetch_usbserialv>
   d41ae:	4940      	ldr	r1, [pc, #256]	; (d42b0 <loop+0x17c>)
   d41b0:	f000 fbd7 	bl	d4962 <_ZN5Print7printlnEPKc>
    }

    //check if the temperature is too hot or rising too fast

    if (temp[tempReadings - 1] - temp[0] >= 10)     //if temperature is rising too fast
   d41b4:	4b3f      	ldr	r3, [pc, #252]	; (d42b4 <loop+0x180>)
   d41b6:	ed93 7a00 	vldr	s14, [r3]
   d41ba:	edd3 7a04 	vldr	s15, [r3, #16]
   d41be:	ee77 7ac7 	vsub.f32	s15, s15, s14
   d41c2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d41c6:	eef4 7ac7 	vcmpe.f32	s15, s14
   d41ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d41ce:	db07      	blt.n	d41e0 <loop+0xac>
    {
      sendMessage(body);
   d41d0:	4836      	ldr	r0, [pc, #216]	; (d42ac <loop+0x178>)
   d41d2:	f7ff ff87 	bl	d40e4 <_Z11sendMessageRK6String>
      Serial.println("The temperature is rising too fast");
   d41d6:	f001 f86d 	bl	d52b4 <_Z16_fetch_usbserialv>
   d41da:	4937      	ldr	r1, [pc, #220]	; (d42b8 <loop+0x184>)
   d41dc:	f000 fbc1 	bl	d4962 <_ZN5Print7printlnEPKc>
   d41e0:	4b34      	ldr	r3, [pc, #208]	; (d42b4 <loop+0x180>)
  // }
}

// loop() runs over and over again, as quickly as it can execute.
void loop() 
{
   d41e2:	eddf 7a2d 	vldr	s15, [pc, #180]	; d4298 <loop+0x164>
   d41e6:	f103 0214 	add.w	r2, r3, #20

    //average for tester examples
    tempTotal = 0;
    for (int thisReading = 0; thisReading <= tempReadings - 1; thisReading++) 
    {
      tempTotal = tempTotal + temp[thisReading];
   d41ea:	ecb3 7a01 	vldmia	r3!, {s14}
      Serial.println("The temperature is rising too fast");
    }

    //average for tester examples
    tempTotal = 0;
    for (int thisReading = 0; thisReading <= tempReadings - 1; thisReading++) 
   d41ee:	429a      	cmp	r2, r3
    {
      tempTotal = tempTotal + temp[thisReading];
   d41f0:	ee77 7a87 	vadd.f32	s15, s15, s14
      Serial.println("The temperature is rising too fast");
    }

    //average for tester examples
    tempTotal = 0;
    for (int thisReading = 0; thisReading <= tempReadings - 1; thisReading++) 
   d41f4:	d1f9      	bne.n	d41ea <loop+0xb6>
    {
      tempTotal = tempTotal + temp[thisReading];
    }
    tempAverage = tempTotal / tempReadings;       //calculate running average
   d41f6:	ee87 7a88 	vdiv.f32	s14, s15, s16
   d41fa:	4b30      	ldr	r3, [pc, #192]	; (d42bc <loop+0x188>)
   d41fc:	4c30      	ldr	r4, [pc, #192]	; (d42c0 <loop+0x18c>)
   d41fe:	edc3 7a00 	vstr	s15, [r3]
    
    // Serial.print("The temp average is:  ");
    // Serial.println(tempAverage);

    if (tempAverage >= 80 && tempAverage < 90)  //if the temp is too hot
   d4202:	eddf 7a30 	vldr	s15, [pc, #192]	; d42c4 <loop+0x190>
    tempTotal = 0;
    for (int thisReading = 0; thisReading <= tempReadings - 1; thisReading++) 
    {
      tempTotal = tempTotal + temp[thisReading];
    }
    tempAverage = tempTotal / tempReadings;       //calculate running average
   d4206:	ed84 7a00 	vstr	s14, [r4]
    
    // Serial.print("The temp average is:  ");
    // Serial.println(tempAverage);

    if (tempAverage >= 80 && tempAverage < 90)  //if the temp is too hot
   d420a:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d420e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4212:	ed9f 8a2d 	vldr	s16, [pc, #180]	; d42c8 <loop+0x194>
   d4216:	db0c      	blt.n	d4232 <loop+0xfe>
   d4218:	eeb4 7ac8 	vcmpe.f32	s14, s16
   d421c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4220:	d507      	bpl.n	d4232 <loop+0xfe>
    {
      sendMessage(body);
   d4222:	4822      	ldr	r0, [pc, #136]	; (d42ac <loop+0x178>)
   d4224:	f7ff ff5e 	bl	d40e4 <_Z11sendMessageRK6String>
      Serial.println("Sending message because temperature is too hot");
   d4228:	f001 f844 	bl	d52b4 <_Z16_fetch_usbserialv>
   d422c:	4927      	ldr	r1, [pc, #156]	; (d42cc <loop+0x198>)
   d422e:	f000 fb98 	bl	d4962 <_ZN5Print7printlnEPKc>
    }

    if (tempAverage >= 90 && tempAverage < 100) //if the temp is way too hot
   d4232:	edd4 7a00 	vldr	s15, [r4]
   d4236:	eef4 7ac8 	vcmpe.f32	s15, s16
   d423a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d423e:	ed9f 8a24 	vldr	s16, [pc, #144]	; d42d0 <loop+0x19c>
   d4242:	db0c      	blt.n	d425e <loop+0x12a>
   d4244:	eef4 7ac8 	vcmpe.f32	s15, s16
   d4248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d424c:	d507      	bpl.n	d425e <loop+0x12a>
    {
      sendMessage(body);
   d424e:	4817      	ldr	r0, [pc, #92]	; (d42ac <loop+0x178>)
   d4250:	f7ff ff48 	bl	d40e4 <_Z11sendMessageRK6String>
      Serial.println("Sending message because temp is critical");
   d4254:	f001 f82e 	bl	d52b4 <_Z16_fetch_usbserialv>
   d4258:	491e      	ldr	r1, [pc, #120]	; (d42d4 <loop+0x1a0>)
   d425a:	f000 fb82 	bl	d4962 <_ZN5Print7printlnEPKc>
    }

    if (tempAverage >= 100)
   d425e:	edd4 7a00 	vldr	s15, [r4]
   d4262:	eef4 7ac8 	vcmpe.f32	s15, s16
   d4266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d426a:	db07      	blt.n	d427c <loop+0x148>
    {
      sendMessage(body);
   d426c:	480f      	ldr	r0, [pc, #60]	; (d42ac <loop+0x178>)
   d426e:	f7ff ff39 	bl	d40e4 <_Z11sendMessageRK6String>
      Serial.println("Sending message because temp is critical");
   d4272:	f001 f81f 	bl	d52b4 <_Z16_fetch_usbserialv>
   d4276:	4917      	ldr	r1, [pc, #92]	; (d42d4 <loop+0x1a0>)
   d4278:	f000 fb73 	bl	d4962 <_ZN5Print7printlnEPKc>
    }
  }
  //int loopFinish = micros();
  //Serial.print("Loop Time: ");
  //Serial.println(loopFinish - loopStart);
  digitalWrite(DONEPIN, LOW);              //toggle the done pin to let tpl know to sleep
   d427c:	2007      	movs	r0, #7
   d427e:	2100      	movs	r1, #0
   d4280:	f001 fadc 	bl	d583c <digitalWrite>
  delay(2000);
}
   d4284:	ecbd 8b02 	vpop	{d8}
  }
  //int loopFinish = micros();
  //Serial.print("Loop Time: ");
  //Serial.println(loopFinish - loopStart);
  digitalWrite(DONEPIN, LOW);              //toggle the done pin to let tpl know to sleep
  delay(2000);
   d4288:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
}
   d428c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  }
  //int loopFinish = micros();
  //Serial.print("Loop Time: ");
  //Serial.println(loopFinish - loopStart);
  digitalWrite(DONEPIN, LOW);              //toggle the done pin to let tpl know to sleep
  delay(2000);
   d4290:	f000 bbde 	b.w	d4a50 <delay>
   d4294:	2003e2d8 	.word	0x2003e2d8
   d4298:	00000000 	.word	0x00000000
   d429c:	2003e39c 	.word	0x2003e39c
   d42a0:	2003e36c 	.word	0x2003e36c
   d42a4:	000d5c93 	.word	0x000d5c93
   d42a8:	2003e2d0 	.word	0x2003e2d0
   d42ac:	2003e37c 	.word	0x2003e37c
   d42b0:	000d5ca0 	.word	0x000d5ca0
   d42b4:	2003e2ec 	.word	0x2003e2ec
   d42b8:	000d5cdf 	.word	0x000d5cdf
   d42bc:	2003e370 	.word	0x2003e370
   d42c0:	2003e378 	.word	0x2003e378
   d42c4:	42a00000 	.word	0x42a00000
   d42c8:	42b40000 	.word	0x42b40000
   d42cc:	000d5d02 	.word	0x000d5d02
   d42d0:	42c80000 	.word	0x42c80000
   d42d4:	000d5d31 	.word	0x000d5d31

000d42d8 <_GLOBAL__sub_I_body>:

void sendMessageCritical(const String& bodyCritical)  //function that sends triggers a critical twilio webhook
{
  Particle.publish("twilio_sms_critical", bodyCritical, PRIVATE);
  //Serial.println("Sending Critical Message");
   d42d8:	b570      	push	{r4, r5, r6, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d42da:	4b0e      	ldr	r3, [pc, #56]	; (d4314 <_GLOBAL__sub_I_body+0x3c>)
// elapsedMillis timeElapsed;

#define DONEPIN 7
#define VELOSTATPIN 8

String body = "Your child is in the car";  //body of SMS message to send
   d42dc:	4c0e      	ldr	r4, [pc, #56]	; (d4318 <_GLOBAL__sub_I_body+0x40>)
   d42de:	4e0f      	ldr	r6, [pc, #60]	; (d431c <_GLOBAL__sub_I_body+0x44>)
   d42e0:	4d0f      	ldr	r5, [pc, #60]	; (d4320 <_GLOBAL__sub_I_body+0x48>)
   d42e2:	2201      	movs	r2, #1
   d42e4:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d42e6:	f000 f833 	bl	d4350 <HAL_Pin_Map>
   d42ea:	490e      	ldr	r1, [pc, #56]	; (d4324 <_GLOBAL__sub_I_body+0x4c>)
   d42ec:	4620      	mov	r0, r4
   d42ee:	f000 fac4 	bl	d487a <_ZN6StringC1EPK19__FlashStringHelper>
   d42f2:	4620      	mov	r0, r4
String bodyCritical = "Your child is in the car and it is too hot! Call 911 if necessary. Please send respons message of anything and go get them"; //body of critical sms prompting response
   d42f4:	4c0c      	ldr	r4, [pc, #48]	; (d4328 <_GLOBAL__sub_I_body+0x50>)
// elapsedMillis timeElapsed;

#define DONEPIN 7
#define VELOSTATPIN 8

String body = "Your child is in the car";  //body of SMS message to send
   d42f6:	4632      	mov	r2, r6
   d42f8:	4629      	mov	r1, r5
   d42fa:	f001 fafb 	bl	d58f4 <__aeabi_atexit>
String bodyCritical = "Your child is in the car and it is too hot! Call 911 if necessary. Please send respons message of anything and go get them"; //body of critical sms prompting response
   d42fe:	490b      	ldr	r1, [pc, #44]	; (d432c <_GLOBAL__sub_I_body+0x54>)
   d4300:	4620      	mov	r0, r4
   d4302:	f000 faba 	bl	d487a <_ZN6StringC1EPK19__FlashStringHelper>
   d4306:	4632      	mov	r2, r6
   d4308:	4629      	mov	r1, r5
   d430a:	4620      	mov	r0, r4

void sendMessageCritical(const String& bodyCritical)  //function that sends triggers a critical twilio webhook
{
  Particle.publish("twilio_sms_critical", bodyCritical, PRIVATE);
  //Serial.println("Sending Critical Message");
   d430c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

#define DONEPIN 7
#define VELOSTATPIN 8

String body = "Your child is in the car";  //body of SMS message to send
String bodyCritical = "Your child is in the car and it is too hot! Call 911 if necessary. Please send respons message of anything and go get them"; //body of critical sms prompting response
   d4310:	f001 baf0 	b.w	d58f4 <__aeabi_atexit>
   d4314:	2003e374 	.word	0x2003e374
   d4318:	2003e37c 	.word	0x2003e37c
   d431c:	2003e368 	.word	0x2003e368
   d4320:	000d47ed 	.word	0x000d47ed
   d4324:	000d5d6e 	.word	0x000d5d6e
   d4328:	2003e38c 	.word	0x2003e38c
   d432c:	000d5d87 	.word	0x000d5d87

000d4330 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4330:	b508      	push	{r3, lr}
   d4332:	4b02      	ldr	r3, [pc, #8]	; (d433c <netdb_freeaddrinfo+0xc>)
   d4334:	681b      	ldr	r3, [r3, #0]
   d4336:	689b      	ldr	r3, [r3, #8]
   d4338:	9301      	str	r3, [sp, #4]
   d433a:	bd08      	pop	{r3, pc}
   d433c:	00030268 	.word	0x00030268

000d4340 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4340:	b508      	push	{r3, lr}
   d4342:	4b02      	ldr	r3, [pc, #8]	; (d434c <netdb_getaddrinfo+0xc>)
   d4344:	681b      	ldr	r3, [r3, #0]
   d4346:	68db      	ldr	r3, [r3, #12]
   d4348:	9301      	str	r3, [sp, #4]
   d434a:	bd08      	pop	{r3, pc}
   d434c:	00030268 	.word	0x00030268

000d4350 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4350:	b508      	push	{r3, lr}
   d4352:	4b02      	ldr	r3, [pc, #8]	; (d435c <HAL_Pin_Map+0xc>)
   d4354:	681b      	ldr	r3, [r3, #0]
   d4356:	681b      	ldr	r3, [r3, #0]
   d4358:	9301      	str	r3, [sp, #4]
   d435a:	bd08      	pop	{r3, pc}
   d435c:	0003022c 	.word	0x0003022c

000d4360 <HAL_Get_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4360:	b508      	push	{r3, lr}
   d4362:	4b02      	ldr	r3, [pc, #8]	; (d436c <HAL_Get_Pin_Mode+0xc>)
   d4364:	681b      	ldr	r3, [r3, #0]
   d4366:	68db      	ldr	r3, [r3, #12]
   d4368:	9301      	str	r3, [sp, #4]
   d436a:	bd08      	pop	{r3, pc}
   d436c:	0003022c 	.word	0x0003022c

000d4370 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4370:	b508      	push	{r3, lr}
   d4372:	4b02      	ldr	r3, [pc, #8]	; (d437c <HAL_GPIO_Write+0xc>)
   d4374:	681b      	ldr	r3, [r3, #0]
   d4376:	691b      	ldr	r3, [r3, #16]
   d4378:	9301      	str	r3, [sp, #4]
   d437a:	bd08      	pop	{r3, pc}
   d437c:	0003022c 	.word	0x0003022c

000d4380 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4380:	b508      	push	{r3, lr}
   d4382:	4b02      	ldr	r3, [pc, #8]	; (d438c <HAL_SPI_Init+0xc>)
   d4384:	681b      	ldr	r3, [r3, #0]
   d4386:	69db      	ldr	r3, [r3, #28]
   d4388:	9301      	str	r3, [sp, #4]
   d438a:	bd08      	pop	{r3, pc}
   d438c:	00030230 	.word	0x00030230

000d4390 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4390:	b508      	push	{r3, lr}
   d4392:	4b02      	ldr	r3, [pc, #8]	; (d439c <HAL_SPI_Is_Enabled+0xc>)
   d4394:	681b      	ldr	r3, [r3, #0]
   d4396:	6a1b      	ldr	r3, [r3, #32]
   d4398:	9301      	str	r3, [sp, #4]
   d439a:	bd08      	pop	{r3, pc}
   d439c:	00030230 	.word	0x00030230

000d43a0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d43a0:	b508      	push	{r3, lr}
   d43a2:	4b02      	ldr	r3, [pc, #8]	; (d43ac <HAL_RNG_GetRandomNumber+0xc>)
   d43a4:	681b      	ldr	r3, [r3, #0]
   d43a6:	685b      	ldr	r3, [r3, #4]
   d43a8:	9301      	str	r3, [sp, #4]
   d43aa:	bd08      	pop	{r3, pc}
   d43ac:	00030218 	.word	0x00030218

000d43b0 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d43b0:	b508      	push	{r3, lr}
   d43b2:	4b02      	ldr	r3, [pc, #8]	; (d43bc <HAL_Timer_Get_Micro_Seconds+0xc>)
   d43b4:	681b      	ldr	r3, [r3, #0]
   d43b6:	691b      	ldr	r3, [r3, #16]
   d43b8:	9301      	str	r3, [sp, #4]
   d43ba:	bd08      	pop	{r3, pc}
   d43bc:	00030218 	.word	0x00030218

000d43c0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d43c0:	b508      	push	{r3, lr}
   d43c2:	4b02      	ldr	r3, [pc, #8]	; (d43cc <HAL_Timer_Get_Milli_Seconds+0xc>)
   d43c4:	681b      	ldr	r3, [r3, #0]
   d43c6:	695b      	ldr	r3, [r3, #20]
   d43c8:	9301      	str	r3, [sp, #4]
   d43ca:	bd08      	pop	{r3, pc}
   d43cc:	00030218 	.word	0x00030218

000d43d0 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d43d0:	b508      	push	{r3, lr}
   d43d2:	4b02      	ldr	r3, [pc, #8]	; (d43dc <os_thread_is_current+0xc>)
   d43d4:	681b      	ldr	r3, [r3, #0]
   d43d6:	689b      	ldr	r3, [r3, #8]
   d43d8:	9301      	str	r3, [sp, #4]
   d43da:	bd08      	pop	{r3, pc}
   d43dc:	00030248 	.word	0x00030248

000d43e0 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d43e0:	b508      	push	{r3, lr}
   d43e2:	4b02      	ldr	r3, [pc, #8]	; (d43ec <os_thread_join+0xc>)
   d43e4:	681b      	ldr	r3, [r3, #0]
   d43e6:	691b      	ldr	r3, [r3, #16]
   d43e8:	9301      	str	r3, [sp, #4]
   d43ea:	bd08      	pop	{r3, pc}
   d43ec:	00030248 	.word	0x00030248

000d43f0 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d43f0:	b508      	push	{r3, lr}
   d43f2:	4b02      	ldr	r3, [pc, #8]	; (d43fc <os_thread_cleanup+0xc>)
   d43f4:	681b      	ldr	r3, [r3, #0]
   d43f6:	695b      	ldr	r3, [r3, #20]
   d43f8:	9301      	str	r3, [sp, #4]
   d43fa:	bd08      	pop	{r3, pc}
   d43fc:	00030248 	.word	0x00030248

000d4400 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4400:	b508      	push	{r3, lr}
   d4402:	4b02      	ldr	r3, [pc, #8]	; (d440c <os_mutex_create+0xc>)
   d4404:	681b      	ldr	r3, [r3, #0]
   d4406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4408:	9301      	str	r3, [sp, #4]
   d440a:	bd08      	pop	{r3, pc}
   d440c:	00030248 	.word	0x00030248

000d4410 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4410:	b508      	push	{r3, lr}
   d4412:	4b02      	ldr	r3, [pc, #8]	; (d441c <os_mutex_recursive_create+0xc>)
   d4414:	681b      	ldr	r3, [r3, #0]
   d4416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4418:	9301      	str	r3, [sp, #4]
   d441a:	bd08      	pop	{r3, pc}
   d441c:	00030248 	.word	0x00030248

000d4420 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4420:	b508      	push	{r3, lr}
   d4422:	4b02      	ldr	r3, [pc, #8]	; (d442c <inet_inet_ntop+0xc>)
   d4424:	681b      	ldr	r3, [r3, #0]
   d4426:	695b      	ldr	r3, [r3, #20]
   d4428:	9301      	str	r3, [sp, #4]
   d442a:	bd08      	pop	{r3, pc}
   d442c:	00030264 	.word	0x00030264

000d4430 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4430:	b508      	push	{r3, lr}
   d4432:	4b02      	ldr	r3, [pc, #8]	; (d443c <HAL_USART_Init+0xc>)
   d4434:	681b      	ldr	r3, [r3, #0]
   d4436:	681b      	ldr	r3, [r3, #0]
   d4438:	9301      	str	r3, [sp, #4]
   d443a:	bd08      	pop	{r3, pc}
   d443c:	0003023c 	.word	0x0003023c

000d4440 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4440:	b508      	push	{r3, lr}
   d4442:	4b02      	ldr	r3, [pc, #8]	; (d444c <HAL_USART_Write_Data+0xc>)
   d4444:	681b      	ldr	r3, [r3, #0]
   d4446:	68db      	ldr	r3, [r3, #12]
   d4448:	9301      	str	r3, [sp, #4]
   d444a:	bd08      	pop	{r3, pc}
   d444c:	0003023c 	.word	0x0003023c

000d4450 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4450:	b508      	push	{r3, lr}
   d4452:	4b02      	ldr	r3, [pc, #8]	; (d445c <HAL_USART_Available_Data+0xc>)
   d4454:	681b      	ldr	r3, [r3, #0]
   d4456:	691b      	ldr	r3, [r3, #16]
   d4458:	9301      	str	r3, [sp, #4]
   d445a:	bd08      	pop	{r3, pc}
   d445c:	0003023c 	.word	0x0003023c

000d4460 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4460:	b508      	push	{r3, lr}
   d4462:	4b02      	ldr	r3, [pc, #8]	; (d446c <HAL_USART_Read_Data+0xc>)
   d4464:	681b      	ldr	r3, [r3, #0]
   d4466:	695b      	ldr	r3, [r3, #20]
   d4468:	9301      	str	r3, [sp, #4]
   d446a:	bd08      	pop	{r3, pc}
   d446c:	0003023c 	.word	0x0003023c

000d4470 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4470:	b508      	push	{r3, lr}
   d4472:	4b02      	ldr	r3, [pc, #8]	; (d447c <HAL_USART_Peek_Data+0xc>)
   d4474:	681b      	ldr	r3, [r3, #0]
   d4476:	699b      	ldr	r3, [r3, #24]
   d4478:	9301      	str	r3, [sp, #4]
   d447a:	bd08      	pop	{r3, pc}
   d447c:	0003023c 	.word	0x0003023c

000d4480 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4480:	b508      	push	{r3, lr}
   d4482:	4b02      	ldr	r3, [pc, #8]	; (d448c <HAL_USART_Flush_Data+0xc>)
   d4484:	681b      	ldr	r3, [r3, #0]
   d4486:	69db      	ldr	r3, [r3, #28]
   d4488:	9301      	str	r3, [sp, #4]
   d448a:	bd08      	pop	{r3, pc}
   d448c:	0003023c 	.word	0x0003023c

000d4490 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4490:	b508      	push	{r3, lr}
   d4492:	4b02      	ldr	r3, [pc, #8]	; (d449c <HAL_USART_Is_Enabled+0xc>)
   d4494:	681b      	ldr	r3, [r3, #0]
   d4496:	6a1b      	ldr	r3, [r3, #32]
   d4498:	9301      	str	r3, [sp, #4]
   d449a:	bd08      	pop	{r3, pc}
   d449c:	0003023c 	.word	0x0003023c

000d44a0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d44a0:	b508      	push	{r3, lr}
   d44a2:	4b02      	ldr	r3, [pc, #8]	; (d44ac <HAL_USART_Available_Data_For_Write+0xc>)
   d44a4:	681b      	ldr	r3, [r3, #0]
   d44a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d44a8:	9301      	str	r3, [sp, #4]
   d44aa:	bd08      	pop	{r3, pc}
   d44ac:	0003023c 	.word	0x0003023c

000d44b0 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d44b0:	b508      	push	{r3, lr}
   d44b2:	4b02      	ldr	r3, [pc, #8]	; (d44bc <HAL_I2C_Write_Data+0xc>)
   d44b4:	681b      	ldr	r3, [r3, #0]
   d44b6:	6a1b      	ldr	r3, [r3, #32]
   d44b8:	9301      	str	r3, [sp, #4]
   d44ba:	bd08      	pop	{r3, pc}
   d44bc:	00030228 	.word	0x00030228

000d44c0 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d44c0:	b508      	push	{r3, lr}
   d44c2:	4b02      	ldr	r3, [pc, #8]	; (d44cc <HAL_I2C_Available_Data+0xc>)
   d44c4:	681b      	ldr	r3, [r3, #0]
   d44c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d44c8:	9301      	str	r3, [sp, #4]
   d44ca:	bd08      	pop	{r3, pc}
   d44cc:	00030228 	.word	0x00030228

000d44d0 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d44d0:	b508      	push	{r3, lr}
   d44d2:	4b02      	ldr	r3, [pc, #8]	; (d44dc <HAL_I2C_Read_Data+0xc>)
   d44d4:	681b      	ldr	r3, [r3, #0]
   d44d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d44d8:	9301      	str	r3, [sp, #4]
   d44da:	bd08      	pop	{r3, pc}
   d44dc:	00030228 	.word	0x00030228

000d44e0 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d44e0:	b508      	push	{r3, lr}
   d44e2:	4b02      	ldr	r3, [pc, #8]	; (d44ec <HAL_I2C_Peek_Data+0xc>)
   d44e4:	681b      	ldr	r3, [r3, #0]
   d44e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d44e8:	9301      	str	r3, [sp, #4]
   d44ea:	bd08      	pop	{r3, pc}
   d44ec:	00030228 	.word	0x00030228

000d44f0 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d44f0:	b508      	push	{r3, lr}
   d44f2:	4b02      	ldr	r3, [pc, #8]	; (d44fc <HAL_I2C_Flush_Data+0xc>)
   d44f4:	681b      	ldr	r3, [r3, #0]
   d44f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d44f8:	9301      	str	r3, [sp, #4]
   d44fa:	bd08      	pop	{r3, pc}
   d44fc:	00030228 	.word	0x00030228

000d4500 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4500:	b508      	push	{r3, lr}
   d4502:	4b02      	ldr	r3, [pc, #8]	; (d450c <HAL_I2C_Is_Enabled+0xc>)
   d4504:	681b      	ldr	r3, [r3, #0]
   d4506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4508:	9301      	str	r3, [sp, #4]
   d450a:	bd08      	pop	{r3, pc}
   d450c:	00030228 	.word	0x00030228

000d4510 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d4510:	b508      	push	{r3, lr}
   d4512:	4b02      	ldr	r3, [pc, #8]	; (d451c <HAL_I2C_Init+0xc>)
   d4514:	681b      	ldr	r3, [r3, #0]
   d4516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4518:	9301      	str	r3, [sp, #4]
   d451a:	bd08      	pop	{r3, pc}
   d451c:	00030228 	.word	0x00030228

000d4520 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4520:	b508      	push	{r3, lr}
   d4522:	4b02      	ldr	r3, [pc, #8]	; (d452c <HAL_USB_USART_Init+0xc>)
   d4524:	681b      	ldr	r3, [r3, #0]
   d4526:	681b      	ldr	r3, [r3, #0]
   d4528:	9301      	str	r3, [sp, #4]
   d452a:	bd08      	pop	{r3, pc}
   d452c:	0003024c 	.word	0x0003024c

000d4530 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4530:	b508      	push	{r3, lr}
   d4532:	4b02      	ldr	r3, [pc, #8]	; (d453c <HAL_USB_USART_Begin+0xc>)
   d4534:	681b      	ldr	r3, [r3, #0]
   d4536:	685b      	ldr	r3, [r3, #4]
   d4538:	9301      	str	r3, [sp, #4]
   d453a:	bd08      	pop	{r3, pc}
   d453c:	0003024c 	.word	0x0003024c

000d4540 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4540:	b508      	push	{r3, lr}
   d4542:	4b02      	ldr	r3, [pc, #8]	; (d454c <HAL_USB_USART_Available_Data+0xc>)
   d4544:	681b      	ldr	r3, [r3, #0]
   d4546:	691b      	ldr	r3, [r3, #16]
   d4548:	9301      	str	r3, [sp, #4]
   d454a:	bd08      	pop	{r3, pc}
   d454c:	0003024c 	.word	0x0003024c

000d4550 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4550:	b508      	push	{r3, lr}
   d4552:	4b02      	ldr	r3, [pc, #8]	; (d455c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4554:	681b      	ldr	r3, [r3, #0]
   d4556:	695b      	ldr	r3, [r3, #20]
   d4558:	9301      	str	r3, [sp, #4]
   d455a:	bd08      	pop	{r3, pc}
   d455c:	0003024c 	.word	0x0003024c

000d4560 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4560:	b508      	push	{r3, lr}
   d4562:	4b02      	ldr	r3, [pc, #8]	; (d456c <HAL_USB_USART_Receive_Data+0xc>)
   d4564:	681b      	ldr	r3, [r3, #0]
   d4566:	699b      	ldr	r3, [r3, #24]
   d4568:	9301      	str	r3, [sp, #4]
   d456a:	bd08      	pop	{r3, pc}
   d456c:	0003024c 	.word	0x0003024c

000d4570 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4570:	b508      	push	{r3, lr}
   d4572:	4b02      	ldr	r3, [pc, #8]	; (d457c <HAL_USB_USART_Send_Data+0xc>)
   d4574:	681b      	ldr	r3, [r3, #0]
   d4576:	69db      	ldr	r3, [r3, #28]
   d4578:	9301      	str	r3, [sp, #4]
   d457a:	bd08      	pop	{r3, pc}
   d457c:	0003024c 	.word	0x0003024c

000d4580 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4580:	b508      	push	{r3, lr}
   d4582:	4b02      	ldr	r3, [pc, #8]	; (d458c <HAL_USB_USART_Flush_Data+0xc>)
   d4584:	681b      	ldr	r3, [r3, #0]
   d4586:	6a1b      	ldr	r3, [r3, #32]
   d4588:	9301      	str	r3, [sp, #4]
   d458a:	bd08      	pop	{r3, pc}
   d458c:	0003024c 	.word	0x0003024c

000d4590 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4590:	b508      	push	{r3, lr}
   d4592:	4b02      	ldr	r3, [pc, #8]	; (d459c <set_system_mode+0xc>)
   d4594:	681b      	ldr	r3, [r3, #0]
   d4596:	685b      	ldr	r3, [r3, #4]
   d4598:	9301      	str	r3, [sp, #4]
   d459a:	bd08      	pop	{r3, pc}
   d459c:	00030220 	.word	0x00030220

000d45a0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d45a0:	b508      	push	{r3, lr}
   d45a2:	4b02      	ldr	r3, [pc, #8]	; (d45ac <system_delay_ms+0xc>)
   d45a4:	681b      	ldr	r3, [r3, #0]
   d45a6:	695b      	ldr	r3, [r3, #20]
   d45a8:	9301      	str	r3, [sp, #4]
   d45aa:	bd08      	pop	{r3, pc}
   d45ac:	00030220 	.word	0x00030220

000d45b0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d45b0:	b508      	push	{r3, lr}
   d45b2:	4b02      	ldr	r3, [pc, #8]	; (d45bc <application_thread_current+0xc>)
   d45b4:	681b      	ldr	r3, [r3, #0]
   d45b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d45b8:	9301      	str	r3, [sp, #4]
   d45ba:	bd08      	pop	{r3, pc}
   d45bc:	00030220 	.word	0x00030220

000d45c0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d45c0:	b508      	push	{r3, lr}
   d45c2:	4b02      	ldr	r3, [pc, #8]	; (d45cc <application_thread_invoke+0xc>)
   d45c4:	681b      	ldr	r3, [r3, #0]
   d45c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d45c8:	9301      	str	r3, [sp, #4]
   d45ca:	bd08      	pop	{r3, pc}
   d45cc:	00030220 	.word	0x00030220

000d45d0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d45d0:	b508      	push	{r3, lr}
   d45d2:	4b03      	ldr	r3, [pc, #12]	; (d45e0 <system_ctrl_set_app_request_handler+0x10>)
   d45d4:	681b      	ldr	r3, [r3, #0]
   d45d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d45da:	9301      	str	r3, [sp, #4]
   d45dc:	bd08      	pop	{r3, pc}
   d45de:	0000      	.short	0x0000
   d45e0:	00030220 	.word	0x00030220

000d45e4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d45e4:	b508      	push	{r3, lr}
   d45e6:	4b03      	ldr	r3, [pc, #12]	; (d45f4 <system_ctrl_set_result+0x10>)
   d45e8:	681b      	ldr	r3, [r3, #0]
   d45ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d45ee:	9301      	str	r3, [sp, #4]
   d45f0:	bd08      	pop	{r3, pc}
   d45f2:	0000      	.short	0x0000
   d45f4:	00030220 	.word	0x00030220

000d45f8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d45f8:	b508      	push	{r3, lr}
   d45fa:	4b02      	ldr	r3, [pc, #8]	; (d4604 <network_connect+0xc>)
   d45fc:	681b      	ldr	r3, [r3, #0]
   d45fe:	685b      	ldr	r3, [r3, #4]
   d4600:	9301      	str	r3, [sp, #4]
   d4602:	bd08      	pop	{r3, pc}
   d4604:	00030240 	.word	0x00030240

000d4608 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4608:	b508      	push	{r3, lr}
   d460a:	4b02      	ldr	r3, [pc, #8]	; (d4614 <network_connecting+0xc>)
   d460c:	681b      	ldr	r3, [r3, #0]
   d460e:	689b      	ldr	r3, [r3, #8]
   d4610:	9301      	str	r3, [sp, #4]
   d4612:	bd08      	pop	{r3, pc}
   d4614:	00030240 	.word	0x00030240

000d4618 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4618:	b508      	push	{r3, lr}
   d461a:	4b02      	ldr	r3, [pc, #8]	; (d4624 <network_disconnect+0xc>)
   d461c:	681b      	ldr	r3, [r3, #0]
   d461e:	68db      	ldr	r3, [r3, #12]
   d4620:	9301      	str	r3, [sp, #4]
   d4622:	bd08      	pop	{r3, pc}
   d4624:	00030240 	.word	0x00030240

000d4628 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4628:	b508      	push	{r3, lr}
   d462a:	4b02      	ldr	r3, [pc, #8]	; (d4634 <network_ready+0xc>)
   d462c:	681b      	ldr	r3, [r3, #0]
   d462e:	691b      	ldr	r3, [r3, #16]
   d4630:	9301      	str	r3, [sp, #4]
   d4632:	bd08      	pop	{r3, pc}
   d4634:	00030240 	.word	0x00030240

000d4638 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4638:	b508      	push	{r3, lr}
   d463a:	4b02      	ldr	r3, [pc, #8]	; (d4644 <network_on+0xc>)
   d463c:	681b      	ldr	r3, [r3, #0]
   d463e:	695b      	ldr	r3, [r3, #20]
   d4640:	9301      	str	r3, [sp, #4]
   d4642:	bd08      	pop	{r3, pc}
   d4644:	00030240 	.word	0x00030240

000d4648 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4648:	b508      	push	{r3, lr}
   d464a:	4b02      	ldr	r3, [pc, #8]	; (d4654 <network_off+0xc>)
   d464c:	681b      	ldr	r3, [r3, #0]
   d464e:	699b      	ldr	r3, [r3, #24]
   d4650:	9301      	str	r3, [sp, #4]
   d4652:	bd08      	pop	{r3, pc}
   d4654:	00030240 	.word	0x00030240

000d4658 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4658:	b508      	push	{r3, lr}
   d465a:	4b02      	ldr	r3, [pc, #8]	; (d4664 <network_listen+0xc>)
   d465c:	681b      	ldr	r3, [r3, #0]
   d465e:	69db      	ldr	r3, [r3, #28]
   d4660:	9301      	str	r3, [sp, #4]
   d4662:	bd08      	pop	{r3, pc}
   d4664:	00030240 	.word	0x00030240

000d4668 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4668:	b508      	push	{r3, lr}
   d466a:	4b02      	ldr	r3, [pc, #8]	; (d4674 <network_listening+0xc>)
   d466c:	681b      	ldr	r3, [r3, #0]
   d466e:	6a1b      	ldr	r3, [r3, #32]
   d4670:	9301      	str	r3, [sp, #4]
   d4672:	bd08      	pop	{r3, pc}
   d4674:	00030240 	.word	0x00030240

000d4678 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4678:	b508      	push	{r3, lr}
   d467a:	4b02      	ldr	r3, [pc, #8]	; (d4684 <network_set_listen_timeout+0xc>)
   d467c:	681b      	ldr	r3, [r3, #0]
   d467e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4680:	9301      	str	r3, [sp, #4]
   d4682:	bd08      	pop	{r3, pc}
   d4684:	00030240 	.word	0x00030240

000d4688 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4688:	b508      	push	{r3, lr}
   d468a:	4b02      	ldr	r3, [pc, #8]	; (d4694 <network_get_listen_timeout+0xc>)
   d468c:	681b      	ldr	r3, [r3, #0]
   d468e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4690:	9301      	str	r3, [sp, #4]
   d4692:	bd08      	pop	{r3, pc}
   d4694:	00030240 	.word	0x00030240

000d4698 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4698:	b508      	push	{r3, lr}
   d469a:	4b02      	ldr	r3, [pc, #8]	; (d46a4 <spark_cloud_flag_connected+0xc>)
   d469c:	681b      	ldr	r3, [r3, #0]
   d469e:	695b      	ldr	r3, [r3, #20]
   d46a0:	9301      	str	r3, [sp, #4]
   d46a2:	bd08      	pop	{r3, pc}
   d46a4:	00030244 	.word	0x00030244

000d46a8 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d46a8:	b508      	push	{r3, lr}
   d46aa:	4b02      	ldr	r3, [pc, #8]	; (d46b4 <spark_send_event+0xc>)
   d46ac:	681b      	ldr	r3, [r3, #0]
   d46ae:	6a1b      	ldr	r3, [r3, #32]
   d46b0:	9301      	str	r3, [sp, #4]
   d46b2:	bd08      	pop	{r3, pc}
   d46b4:	00030244 	.word	0x00030244

000d46b8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d46b8:	b508      	push	{r3, lr}
   d46ba:	4b02      	ldr	r3, [pc, #8]	; (d46c4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d46bc:	681b      	ldr	r3, [r3, #0]
   d46be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d46c0:	9301      	str	r3, [sp, #4]
   d46c2:	bd08      	pop	{r3, pc}
   d46c4:	00030244 	.word	0x00030244

000d46c8 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d46c8:	b508      	push	{r3, lr}
   d46ca:	4b02      	ldr	r3, [pc, #8]	; (d46d4 <malloc+0xc>)
   d46cc:	681b      	ldr	r3, [r3, #0]
   d46ce:	681b      	ldr	r3, [r3, #0]
   d46d0:	9301      	str	r3, [sp, #4]
   d46d2:	bd08      	pop	{r3, pc}
   d46d4:	0003021c 	.word	0x0003021c

000d46d8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d46d8:	b508      	push	{r3, lr}
   d46da:	4b02      	ldr	r3, [pc, #8]	; (d46e4 <free+0xc>)
   d46dc:	681b      	ldr	r3, [r3, #0]
   d46de:	685b      	ldr	r3, [r3, #4]
   d46e0:	9301      	str	r3, [sp, #4]
   d46e2:	bd08      	pop	{r3, pc}
   d46e4:	0003021c 	.word	0x0003021c

000d46e8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d46e8:	b508      	push	{r3, lr}
   d46ea:	4b02      	ldr	r3, [pc, #8]	; (d46f4 <realloc+0xc>)
   d46ec:	681b      	ldr	r3, [r3, #0]
   d46ee:	689b      	ldr	r3, [r3, #8]
   d46f0:	9301      	str	r3, [sp, #4]
   d46f2:	bd08      	pop	{r3, pc}
   d46f4:	0003021c 	.word	0x0003021c

000d46f8 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d46f8:	b508      	push	{r3, lr}
   d46fa:	4b02      	ldr	r3, [pc, #8]	; (d4704 <abort+0xc>)
   d46fc:	681b      	ldr	r3, [r3, #0]
   d46fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4700:	9301      	str	r3, [sp, #4]
   d4702:	bd08      	pop	{r3, pc}
   d4704:	0003021c 	.word	0x0003021c

000d4708 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4708:	b508      	push	{r3, lr}
   d470a:	4b02      	ldr	r3, [pc, #8]	; (d4714 <_malloc_r+0xc>)
   d470c:	681b      	ldr	r3, [r3, #0]
   d470e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4710:	9301      	str	r3, [sp, #4]
   d4712:	bd08      	pop	{r3, pc}
   d4714:	0003021c 	.word	0x0003021c

000d4718 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4718:	2200      	movs	r2, #0
   d471a:	4611      	mov	r1, r2
   d471c:	6840      	ldr	r0, [r0, #4]
   d471e:	f7ff bfa3 	b.w	d4668 <network_listening>

000d4722 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4722:	2200      	movs	r2, #0
   d4724:	4611      	mov	r1, r2
   d4726:	6840      	ldr	r0, [r0, #4]
   d4728:	f7ff bfae 	b.w	d4688 <network_get_listen_timeout>

000d472c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d472c:	2200      	movs	r2, #0
   d472e:	6840      	ldr	r0, [r0, #4]
   d4730:	f7ff bfa2 	b.w	d4678 <network_set_listen_timeout>

000d4734 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4734:	2200      	movs	r2, #0
   d4736:	f081 0101 	eor.w	r1, r1, #1
   d473a:	6840      	ldr	r0, [r0, #4]
   d473c:	f7ff bf8c 	b.w	d4658 <network_listen>

000d4740 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4740:	2300      	movs	r3, #0
   d4742:	461a      	mov	r2, r3
   d4744:	4619      	mov	r1, r3
   d4746:	6840      	ldr	r0, [r0, #4]
   d4748:	f7ff bf7e 	b.w	d4648 <network_off>

000d474c <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d474c:	2300      	movs	r3, #0
   d474e:	461a      	mov	r2, r3
   d4750:	4619      	mov	r1, r3
   d4752:	6840      	ldr	r0, [r0, #4]
   d4754:	f7ff bf70 	b.w	d4638 <network_on>

000d4758 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4758:	2200      	movs	r2, #0
   d475a:	4611      	mov	r1, r2
   d475c:	6840      	ldr	r0, [r0, #4]
   d475e:	f7ff bf63 	b.w	d4628 <network_ready>

000d4762 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4762:	2200      	movs	r2, #0
   d4764:	4611      	mov	r1, r2
   d4766:	6840      	ldr	r0, [r0, #4]
   d4768:	f7ff bf4e 	b.w	d4608 <network_connecting>

000d476c <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d476c:	2200      	movs	r2, #0
   d476e:	2102      	movs	r1, #2
   d4770:	6840      	ldr	r0, [r0, #4]
   d4772:	f7ff bf51 	b.w	d4618 <network_disconnect>

000d4776 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4776:	2300      	movs	r3, #0
   d4778:	461a      	mov	r2, r3
   d477a:	6840      	ldr	r0, [r0, #4]
   d477c:	f7ff bf3c 	b.w	d45f8 <network_connect>

000d4780 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4780:	4b02      	ldr	r3, [pc, #8]	; (d478c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4782:	2203      	movs	r2, #3
   d4784:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4786:	4a02      	ldr	r2, [pc, #8]	; (d4790 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4788:	601a      	str	r2, [r3, #0]
   d478a:	4770      	bx	lr
   d478c:	2003e3a0 	.word	0x2003e3a0
   d4790:	000d5e0c 	.word	0x000d5e0c

000d4794 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d4794:	4770      	bx	lr

000d4796 <_ZN8SPIClassD0Ev>:
   d4796:	b510      	push	{r4, lr}
   d4798:	2110      	movs	r1, #16
   d479a:	4604      	mov	r4, r0
   d479c:	f001 f8af 	bl	d58fe <_ZdlPvj>
   d47a0:	4620      	mov	r0, r4
   d47a2:	bd10      	pop	{r4, pc}

000d47a4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d47a4:	b570      	push	{r4, r5, r6, lr}
   d47a6:	4b08      	ldr	r3, [pc, #32]	; (d47c8 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d47a8:	6003      	str	r3, [r0, #0]
   d47aa:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d47ac:	2500      	movs	r5, #0
   d47ae:	460e      	mov	r6, r1
   d47b0:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d47b4:	f7ff fe24 	bl	d4400 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d47b8:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d47ba:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d47bc:	f7ff fde0 	bl	d4380 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d47c0:	60a5      	str	r5, [r4, #8]
}
   d47c2:	4620      	mov	r0, r4
   d47c4:	bd70      	pop	{r4, r5, r6, pc}
   d47c6:	bf00      	nop
   d47c8:	000d5e40 	.word	0x000d5e40

000d47cc <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d47cc:	7900      	ldrb	r0, [r0, #4]
   d47ce:	f7ff bddf 	b.w	d4390 <HAL_SPI_Is_Enabled>
	...

000d47d4 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d47d4:	4b04      	ldr	r3, [pc, #16]	; (d47e8 <_GLOBAL__sub_I_System+0x14>)
   d47d6:	2000      	movs	r0, #0
   d47d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d47dc:	7018      	strb	r0, [r3, #0]
   d47de:	8058      	strh	r0, [r3, #2]
   d47e0:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d47e2:	f7ff bed5 	b.w	d4590 <set_system_mode>
   d47e6:	bf00      	nop
   d47e8:	2003e3a8 	.word	0x2003e3a8

000d47ec <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d47ec:	b510      	push	{r4, lr}
   d47ee:	4604      	mov	r4, r0
{
	free(buffer);
   d47f0:	6800      	ldr	r0, [r0, #0]
   d47f2:	f7ff ff71 	bl	d46d8 <free>
}
   d47f6:	4620      	mov	r0, r4
   d47f8:	bd10      	pop	{r4, pc}

000d47fa <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d47fa:	b510      	push	{r4, lr}
   d47fc:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d47fe:	6800      	ldr	r0, [r0, #0]
   d4800:	b108      	cbz	r0, d4806 <_ZN6String10invalidateEv+0xc>
   d4802:	f7ff ff69 	bl	d46d8 <free>
	buffer = NULL;
   d4806:	2300      	movs	r3, #0
   d4808:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d480a:	60a3      	str	r3, [r4, #8]
   d480c:	6063      	str	r3, [r4, #4]
   d480e:	bd10      	pop	{r4, pc}

000d4810 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4810:	b538      	push	{r3, r4, r5, lr}
   d4812:	4604      	mov	r4, r0
   d4814:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4816:	6800      	ldr	r0, [r0, #0]
   d4818:	3101      	adds	r1, #1
   d481a:	f7ff ff65 	bl	d46e8 <realloc>
	if (newbuffer) {
   d481e:	b110      	cbz	r0, d4826 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4820:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d4824:	2001      	movs	r0, #1
	}
	return 0;
}
   d4826:	bd38      	pop	{r3, r4, r5, pc}

000d4828 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4828:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d482a:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d482c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d482e:	b113      	cbz	r3, d4836 <_ZN6String7reserveEj+0xe>
   d4830:	6843      	ldr	r3, [r0, #4]
   d4832:	428b      	cmp	r3, r1
   d4834:	d207      	bcs.n	d4846 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d4836:	4620      	mov	r0, r4
   d4838:	f7ff ffea 	bl	d4810 <_ZN6String12changeBufferEj>
   d483c:	b120      	cbz	r0, d4848 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d483e:	68a3      	ldr	r3, [r4, #8]
   d4840:	b90b      	cbnz	r3, d4846 <_ZN6String7reserveEj+0x1e>
   d4842:	6822      	ldr	r2, [r4, #0]
   d4844:	7013      	strb	r3, [r2, #0]
   d4846:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d4848:	bd10      	pop	{r4, pc}

000d484a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d484a:	b570      	push	{r4, r5, r6, lr}
   d484c:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d484e:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4850:	4604      	mov	r4, r0
   d4852:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d4854:	f7ff ffe8 	bl	d4828 <_ZN6String7reserveEj>
   d4858:	b918      	cbnz	r0, d4862 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d485a:	4620      	mov	r0, r4
   d485c:	f7ff ffcd 	bl	d47fa <_ZN6String10invalidateEv>
		return *this;
   d4860:	e009      	b.n	d4876 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d4862:	462a      	mov	r2, r5
   d4864:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d4866:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d4868:	6820      	ldr	r0, [r4, #0]
   d486a:	f001 f9a3 	bl	d5bb4 <memcpy>
	buffer[len] = 0;
   d486e:	6822      	ldr	r2, [r4, #0]
   d4870:	68a3      	ldr	r3, [r4, #8]
   d4872:	2100      	movs	r1, #0
   d4874:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d4876:	4620      	mov	r0, r4
   d4878:	bd70      	pop	{r4, r5, r6, pc}

000d487a <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d487a:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d487c:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d487e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4880:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4882:	6043      	str	r3, [r0, #4]
	len = 0;
   d4884:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4886:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d4888:	460d      	mov	r5, r1
   d488a:	b139      	cbz	r1, d489c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d488c:	4608      	mov	r0, r1
   d488e:	f001 f9e8 	bl	d5c62 <strlen>
   d4892:	4629      	mov	r1, r5
   d4894:	4602      	mov	r2, r0
   d4896:	4620      	mov	r0, r4
   d4898:	f7ff ffd7 	bl	d484a <_ZN6String4copyEPKcj>
}
   d489c:	4620      	mov	r0, r4
   d489e:	bd38      	pop	{r3, r4, r5, pc}

000d48a0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d48a0:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d48a2:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d48a4:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d48a6:	689b      	ldr	r3, [r3, #8]
   d48a8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d48aa:	68a3      	ldr	r3, [r4, #8]
   d48ac:	3b01      	subs	r3, #1
   d48ae:	60a3      	str	r3, [r4, #8]
   d48b0:	b92b      	cbnz	r3, d48be <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110+0x1e>
            _M_destroy();
   d48b2:	6823      	ldr	r3, [r4, #0]
   d48b4:	4620      	mov	r0, r4
   d48b6:	68db      	ldr	r3, [r3, #12]
        }
    }
   d48b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d48bc:	4718      	bx	r3
   d48be:	bd10      	pop	{r4, pc}

000d48c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d48c0:	680b      	ldr	r3, [r1, #0]
   d48c2:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d48c4:	b113      	cbz	r3, d48cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d48c6:	685a      	ldr	r2, [r3, #4]
   d48c8:	3201      	adds	r2, #1
   d48ca:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d48cc:	4770      	bx	lr

000d48ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d48ce:	b510      	push	{r4, lr}
   d48d0:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d48d2:	6800      	ldr	r0, [r0, #0]
   d48d4:	b128      	cbz	r0, d48e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d48d6:	6843      	ldr	r3, [r0, #4]
   d48d8:	3b01      	subs	r3, #1
   d48da:	6043      	str	r3, [r0, #4]
   d48dc:	b90b      	cbnz	r3, d48e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d48de:	f7ff ffdf 	bl	d48a0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d48e2:	4620      	mov	r0, r4
   d48e4:	bd10      	pop	{r4, pc}
	...

000d48e8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d48e8:	4802      	ldr	r0, [pc, #8]	; (d48f4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d48ea:	2300      	movs	r3, #0
   d48ec:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d48ee:	f7ff bd8f 	b.w	d4410 <os_mutex_recursive_create>
   d48f2:	bf00      	nop
   d48f4:	2003e3b0 	.word	0x2003e3b0

000d48f8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d48f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d48fa:	4606      	mov	r6, r0
   d48fc:	460d      	mov	r5, r1
   d48fe:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4900:	2400      	movs	r4, #0
  while (size--) {
   d4902:	42bd      	cmp	r5, r7
   d4904:	d00c      	beq.n	d4920 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4906:	6833      	ldr	r3, [r6, #0]
   d4908:	f815 1b01 	ldrb.w	r1, [r5], #1
   d490c:	689b      	ldr	r3, [r3, #8]
   d490e:	4630      	mov	r0, r6
   d4910:	4798      	blx	r3
     if (chunk>=0)
   d4912:	2800      	cmp	r0, #0
   d4914:	db01      	blt.n	d491a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4916:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4918:	e7f3      	b.n	d4902 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d491a:	2c00      	cmp	r4, #0
   d491c:	bf08      	it	eq
   d491e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4920:	4620      	mov	r0, r4
   d4922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4924 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4924:	b570      	push	{r4, r5, r6, lr}
   d4926:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4928:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d492a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d492c:	b149      	cbz	r1, d4942 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d492e:	f001 f998 	bl	d5c62 <strlen>
   d4932:	682b      	ldr	r3, [r5, #0]
   d4934:	4602      	mov	r2, r0
   d4936:	4621      	mov	r1, r4
   d4938:	4628      	mov	r0, r5
   d493a:	68db      	ldr	r3, [r3, #12]
    }
   d493c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4940:	4718      	bx	r3
    }
   d4942:	bd70      	pop	{r4, r5, r6, pc}

000d4944 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4944:	6803      	ldr	r3, [r0, #0]
   d4946:	689b      	ldr	r3, [r3, #8]
   d4948:	4718      	bx	r3

000d494a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d494a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d494c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d494e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4950:	f7ff fff8 	bl	d4944 <_ZN5Print5printEc>
  n += print('\n');
   d4954:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d4956:	4604      	mov	r4, r0
  n += print('\n');
   d4958:	4628      	mov	r0, r5
   d495a:	f7ff fff3 	bl	d4944 <_ZN5Print5printEc>
  return n;
}
   d495e:	4420      	add	r0, r4
   d4960:	bd38      	pop	{r3, r4, r5, pc}

000d4962 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d4962:	b538      	push	{r3, r4, r5, lr}
   d4964:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4966:	f7ff ffdd 	bl	d4924 <_ZN5Print5writeEPKc>
   d496a:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d496c:	4628      	mov	r0, r5
   d496e:	f7ff ffec 	bl	d494a <_ZN5Print7printlnEv>
  return n;
}
   d4972:	4420      	add	r0, r4
   d4974:	bd38      	pop	{r3, r4, r5, pc}

000d4976 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4976:	b530      	push	{r4, r5, lr}
   d4978:	b08b      	sub	sp, #44	; 0x2c
   d497a:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d497c:	2100      	movs	r1, #0
   d497e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4982:	2a01      	cmp	r2, #1
   d4984:	bf98      	it	ls
   d4986:	220a      	movls	r2, #10
   d4988:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d498c:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d4990:	fb05 3312 	mls	r3, r5, r2, r3
   d4994:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4998:	2b09      	cmp	r3, #9
   d499a:	bf94      	ite	ls
   d499c:	3330      	addls	r3, #48	; 0x30
   d499e:	3337      	addhi	r3, #55	; 0x37
   d49a0:	b2db      	uxtb	r3, r3
   d49a2:	4621      	mov	r1, r4
   d49a4:	f804 3901 	strb.w	r3, [r4], #-1
   d49a8:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d49aa:	2d00      	cmp	r5, #0
   d49ac:	d1ee      	bne.n	d498c <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d49ae:	f7ff ffb9 	bl	d4924 <_ZN5Print5writeEPKc>
}
   d49b2:	b00b      	add	sp, #44	; 0x2c
   d49b4:	bd30      	pop	{r4, r5, pc}

000d49b6 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d49b6:	b410      	push	{r4}
  if (base == 0) return write(n);
   d49b8:	b92a      	cbnz	r2, d49c6 <_ZN5Print5printEmi+0x10>
   d49ba:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d49bc:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d49c0:	689b      	ldr	r3, [r3, #8]
   d49c2:	b2c9      	uxtb	r1, r1
   d49c4:	4718      	bx	r3
  else return printNumber(n, base);
   d49c6:	b2d2      	uxtb	r2, r2
}
   d49c8:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d49cc:	f7ff bfd3 	b.w	d4976 <_ZN5Print11printNumberEmh>

000d49d0 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d49d0:	f7ff bff1 	b.w	d49b6 <_ZN5Print5printEmi>

000d49d4 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d49d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d49d8:	4607      	mov	r7, r0
   d49da:	460e      	mov	r6, r1
  if (base == 0) {
   d49dc:	4615      	mov	r5, r2
   d49de:	b92a      	cbnz	r2, d49ec <_ZN5Print5printEli+0x18>
    return write(n);
   d49e0:	6803      	ldr	r3, [r0, #0]
   d49e2:	b2c9      	uxtb	r1, r1
   d49e4:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d49e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d49ea:	4718      	bx	r3
  } else if (base == 10) {
   d49ec:	2a0a      	cmp	r2, #10
   d49ee:	d102      	bne.n	d49f6 <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d49f0:	2900      	cmp	r1, #0
   d49f2:	da01      	bge.n	d49f8 <_ZN5Print5printEli+0x24>
   d49f4:	e004      	b.n	d4a00 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d49f6:	b2d2      	uxtb	r2, r2
  }
}
   d49f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d49fc:	f7ff bfbb 	b.w	d4976 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d4a00:	212d      	movs	r1, #45	; 0x2d
   d4a02:	f7ff ff9f 	bl	d4944 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d4a06:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d4a08:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d4a0a:	4271      	negs	r1, r6
   d4a0c:	4638      	mov	r0, r7
   d4a0e:	f7ff ffb2 	bl	d4976 <_ZN5Print11printNumberEmh>
   d4a12:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d4a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4a18 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
   d4a18:	b538      	push	{r3, r4, r5, lr}
   d4a1a:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d4a1c:	f7ff ffda 	bl	d49d4 <_ZN5Print5printEli>
   d4a20:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
   d4a22:	4628      	mov	r0, r5
   d4a24:	f7ff ff91 	bl	d494a <_ZN5Print7printlnEv>
  return n;
}
   d4a28:	4420      	add	r0, r4
   d4a2a:	bd38      	pop	{r3, r4, r5, pc}

000d4a2c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4a2c:	4b01      	ldr	r3, [pc, #4]	; (d4a34 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4a2e:	4a02      	ldr	r2, [pc, #8]	; (d4a38 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4a30:	601a      	str	r2, [r3, #0]
   d4a32:	4770      	bx	lr
   d4a34:	2003e3b4 	.word	0x2003e3b4
   d4a38:	000d5ebb 	.word	0x000d5ebb

000d4a3c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4a3c:	4b02      	ldr	r3, [pc, #8]	; (d4a48 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4a3e:	681a      	ldr	r2, [r3, #0]
   d4a40:	4b02      	ldr	r3, [pc, #8]	; (d4a4c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4a42:	601a      	str	r2, [r3, #0]
   d4a44:	4770      	bx	lr
   d4a46:	bf00      	nop
   d4a48:	2003e300 	.word	0x2003e300
   d4a4c:	2003e3b8 	.word	0x2003e3b8

000d4a50 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4a50:	2100      	movs	r1, #0
   d4a52:	f7ff bda5 	b.w	d45a0 <system_delay_ms>

000d4a56 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4a56:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4a58:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4a5a:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4a5c:	b113      	cbz	r3, d4a64 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4a5e:	2203      	movs	r2, #3
   d4a60:	4601      	mov	r1, r0
   d4a62:	4798      	blx	r3
    }
   d4a64:	4620      	mov	r0, r4
   d4a66:	bd10      	pop	{r4, pc}

000d4a68 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4a68:	b510      	push	{r4, lr}
   d4a6a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4a6c:	f7ff fff3 	bl	d4a56 <_ZNSt14_Function_baseD1Ev>
   d4a70:	4620      	mov	r0, r4
   d4a72:	bd10      	pop	{r4, pc}

000d4a74 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d4a74:	b513      	push	{r0, r1, r4, lr}
   d4a76:	460b      	mov	r3, r1
   d4a78:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4a7a:	c803      	ldmia	r0, {r0, r1}
   d4a7c:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4a80:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4a84:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4a88:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d4a8c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4a90:	b002      	add	sp, #8
   d4a92:	bd10      	pop	{r4, pc}

000d4a94 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4a94:	4803      	ldr	r0, [pc, #12]	; (d4aa4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4a96:	4a04      	ldr	r2, [pc, #16]	; (d4aa8 <_GLOBAL__sub_I_RGB+0x14>)
   d4a98:	4904      	ldr	r1, [pc, #16]	; (d4aac <_GLOBAL__sub_I_RGB+0x18>)
   d4a9a:	2300      	movs	r3, #0
   d4a9c:	6083      	str	r3, [r0, #8]
   d4a9e:	f000 bf29 	b.w	d58f4 <__aeabi_atexit>
   d4aa2:	bf00      	nop
   d4aa4:	2003e3bc 	.word	0x2003e3bc
   d4aa8:	2003e368 	.word	0x2003e368
   d4aac:	000d4a69 	.word	0x000d4a69

000d4ab0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d4ab0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4ab2:	4b0c      	ldr	r3, [pc, #48]	; (d4ae4 <serialEventRun+0x34>)
   d4ab4:	b133      	cbz	r3, d4ac4 <serialEventRun+0x14>
   d4ab6:	f000 fbfd 	bl	d52b4 <_Z16_fetch_usbserialv>
   d4aba:	6803      	ldr	r3, [r0, #0]
   d4abc:	691b      	ldr	r3, [r3, #16]
   d4abe:	4798      	blx	r3
   d4ac0:	2800      	cmp	r0, #0
   d4ac2:	dc09      	bgt.n	d4ad8 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d4ac4:	4b08      	ldr	r3, [pc, #32]	; (d4ae8 <serialEventRun+0x38>)
   d4ac6:	b163      	cbz	r3, d4ae2 <serialEventRun+0x32>
   d4ac8:	f000 fcc2 	bl	d5450 <_Z22__fetch_global_Serial1v>
   d4acc:	6803      	ldr	r3, [r0, #0]
   d4ace:	691b      	ldr	r3, [r3, #16]
   d4ad0:	4798      	blx	r3
   d4ad2:	2800      	cmp	r0, #0
   d4ad4:	dc03      	bgt.n	d4ade <serialEventRun+0x2e>
   d4ad6:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d4ad8:	f3af 8000 	nop.w
   d4adc:	e7f2      	b.n	d4ac4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d4ade:	f3af 8000 	nop.w
   d4ae2:	bd08      	pop	{r3, pc}
	...

000d4aec <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d4aec:	b508      	push	{r3, lr}
	serialEventRun();
   d4aee:	f7ff ffdf 	bl	d4ab0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4af2:	f7ff fc65 	bl	d43c0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4af6:	4b01      	ldr	r3, [pc, #4]	; (d4afc <_post_loop+0x10>)
   d4af8:	6018      	str	r0, [r3, #0]
   d4afa:	bd08      	pop	{r3, pc}
   d4afc:	2003e734 	.word	0x2003e734

000d4b00 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4b00:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4b02:	2300      	movs	r3, #0
   d4b04:	9300      	str	r3, [sp, #0]
   d4b06:	461a      	mov	r2, r3
   d4b08:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4b0c:	f7ff fd6a 	bl	d45e4 <system_ctrl_set_result>
}
   d4b10:	b003      	add	sp, #12
   d4b12:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4b18 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d4b18:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4b1a:	8843      	ldrh	r3, [r0, #2]
   d4b1c:	2b0a      	cmp	r3, #10
   d4b1e:	d008      	beq.n	d4b32 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4b20:	2b50      	cmp	r3, #80	; 0x50
   d4b22:	d109      	bne.n	d4b38 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d4b24:	4b09      	ldr	r3, [pc, #36]	; (d4b4c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4b26:	681b      	ldr	r3, [r3, #0]
   d4b28:	b13b      	cbz	r3, d4b3a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d4b2a:	b003      	add	sp, #12
   d4b2c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d4b30:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d4b32:	f7ff ffe5 	bl	d4b00 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d4b36:	e006      	b.n	d4b46 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4b38:	2300      	movs	r3, #0
   d4b3a:	9300      	str	r3, [sp, #0]
   d4b3c:	461a      	mov	r2, r3
   d4b3e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4b42:	f7ff fd4f 	bl	d45e4 <system_ctrl_set_result>
        break;
    }
}
   d4b46:	b003      	add	sp, #12
   d4b48:	f85d fb04 	ldr.w	pc, [sp], #4
   d4b4c:	2003e3cc 	.word	0x2003e3cc

000d4b50 <module_user_init_hook>:

void module_user_init_hook()
{
   d4b50:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4b52:	f7ff fc25 	bl	d43a0 <HAL_RNG_GetRandomNumber>
   d4b56:	4604      	mov	r4, r0
    srand(seed);
   d4b58:	f001 f840 	bl	d5bdc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4b5c:	4b07      	ldr	r3, [pc, #28]	; (d4b7c <module_user_init_hook+0x2c>)
   d4b5e:	b113      	cbz	r3, d4b66 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d4b60:	4620      	mov	r0, r4
   d4b62:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4b66:	2100      	movs	r1, #0
   d4b68:	4804      	ldr	r0, [pc, #16]	; (d4b7c <module_user_init_hook+0x2c>)
   d4b6a:	f7ff fda5 	bl	d46b8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4b6e:	2100      	movs	r1, #0
   d4b70:	4803      	ldr	r0, [pc, #12]	; (d4b80 <module_user_init_hook+0x30>)
}
   d4b72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4b76:	f7ff bd2b 	b.w	d45d0 <system_ctrl_set_app_request_handler>
   d4b7a:	bf00      	nop
   d4b7c:	00000000 	.word	0x00000000
   d4b80:	000d4b19 	.word	0x000d4b19

000d4b84 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4b84:	4770      	bx	lr

000d4b86 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d4b86:	2000      	movs	r0, #0
   d4b88:	4770      	bx	lr

000d4b8a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4b8a:	b510      	push	{r4, lr}
   d4b8c:	2110      	movs	r1, #16
   d4b8e:	4604      	mov	r4, r0
   d4b90:	f000 feb5 	bl	d58fe <_ZdlPvj>
   d4b94:	4620      	mov	r0, r4
   d4b96:	bd10      	pop	{r4, pc}

000d4b98 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d4b98:	b508      	push	{r3, lr}
      { delete this; }
   d4b9a:	b108      	cbz	r0, d4ba0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d4b9c:	f7ff fff5 	bl	d4b8a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4ba0:	bd08      	pop	{r3, pc}

000d4ba2 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4ba2:	2200      	movs	r2, #0
   d4ba4:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d4ba6:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4ba8:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d4bac:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4bae:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d4bb2:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d4bb4:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4bb6:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4bb8:	680c      	ldr	r4, [r1, #0]
   d4bba:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d4bbc:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d4bbe:	bd10      	pop	{r4, pc}

000d4bc0 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d4bc0:	b510      	push	{r4, lr}
   d4bc2:	4604      	mov	r4, r0
    free((void*)msg_);
   d4bc4:	6800      	ldr	r0, [r0, #0]
   d4bc6:	f7ff fd87 	bl	d46d8 <free>
}
   d4bca:	4620      	mov	r0, r4
   d4bcc:	bd10      	pop	{r4, pc}

000d4bce <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d4bce:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4bd0:	68c4      	ldr	r4, [r0, #12]
   d4bd2:	b1f4      	cbz	r4, d4c12 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d4bd4:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4bd6:	2b02      	cmp	r3, #2
   d4bd8:	d103      	bne.n	d4be2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d4bda:	f104 000c 	add.w	r0, r4, #12
   d4bde:	f7ff ffef 	bl	d4bc0 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d4be2:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d4be4:	b135      	cbz	r5, d4bf4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4be6:	4628      	mov	r0, r5
   d4be8:	f7ff ff35 	bl	d4a56 <_ZNSt14_Function_baseD1Ev>
   d4bec:	2110      	movs	r1, #16
   d4bee:	4628      	mov	r0, r5
   d4bf0:	f000 fe85 	bl	d58fe <_ZdlPvj>
   d4bf4:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d4bf6:	b135      	cbz	r5, d4c06 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d4bf8:	4628      	mov	r0, r5
   d4bfa:	f7ff ff2c 	bl	d4a56 <_ZNSt14_Function_baseD1Ev>
   d4bfe:	2110      	movs	r1, #16
   d4c00:	4628      	mov	r0, r5
   d4c02:	f000 fe7c 	bl	d58fe <_ZdlPvj>
   d4c06:	4620      	mov	r0, r4
   d4c08:	2114      	movs	r1, #20
   d4c0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4c0e:	f000 be76 	b.w	d58fe <_ZdlPvj>
   d4c12:	bd38      	pop	{r3, r4, r5, pc}

000d4c14 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d4c14:	b513      	push	{r0, r1, r4, lr}
   d4c16:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4c18:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d4c1c:	2300      	movs	r3, #0
   d4c1e:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4c20:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4c22:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d4c24:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4c26:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d4c28:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4c2a:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4c2c:	f7ff fe4f 	bl	d48ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4c30:	4620      	mov	r0, r4
   d4c32:	b002      	add	sp, #8
   d4c34:	bd10      	pop	{r4, pc}

000d4c36 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d4c36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4c38:	460c      	mov	r4, r1
   d4c3a:	ad02      	add	r5, sp, #8
   d4c3c:	f854 3b04 	ldr.w	r3, [r4], #4
   d4c40:	f845 3d08 	str.w	r3, [r5, #-8]!
   d4c44:	4606      	mov	r6, r0
   d4c46:	460f      	mov	r7, r1
   d4c48:	a801      	add	r0, sp, #4
   d4c4a:	4621      	mov	r1, r4
   d4c4c:	f7ff fe38 	bl	d48c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d4c50:	4629      	mov	r1, r5
   d4c52:	4630      	mov	r0, r6
   d4c54:	f7ff ffde 	bl	d4c14 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4c58:	a801      	add	r0, sp, #4
   d4c5a:	f7ff fe38 	bl	d48ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4c5e:	4620      	mov	r0, r4
   d4c60:	f7ff fe35 	bl	d48ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d4c64:	4638      	mov	r0, r7
   d4c66:	2108      	movs	r1, #8
   d4c68:	f000 fe49 	bl	d58fe <_ZdlPvj>
        return p;
    }
   d4c6c:	4630      	mov	r0, r6
   d4c6e:	b003      	add	sp, #12
   d4c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d4c74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4c74:	b538      	push	{r3, r4, r5, lr}
   d4c76:	2300      	movs	r3, #0
   d4c78:	4604      	mov	r4, r0
   d4c7a:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4c7c:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4c7e:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4c80:	f7ff fa09 	bl	d4096 <_Znwj>
   d4c84:	b128      	cbz	r0, d4c92 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d4c86:	2301      	movs	r3, #1
   d4c88:	6043      	str	r3, [r0, #4]
   d4c8a:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d4c8c:	4b02      	ldr	r3, [pc, #8]	; (d4c98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d4c8e:	6003      	str	r3, [r0, #0]
   d4c90:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4c92:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d4c94:	4620      	mov	r0, r4
   d4c96:	bd38      	pop	{r3, r4, r5, pc}
   d4c98:	000d5f5c 	.word	0x000d5f5c

000d4c9c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4c9c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4c9e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4ca0:	b90a      	cbnz	r2, d4ca6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d4ca2:	f000 fe2e 	bl	d5902 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4ca6:	68c3      	ldr	r3, [r0, #12]
    }
   d4ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4cac:	4718      	bx	r3

000d4cae <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4cae:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4cb0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4cb2:	f100 0110 	add.w	r1, r0, #16
   d4cb6:	f7ff fff1 	bl	d4c9c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4cba:	bd08      	pop	{r3, pc}

000d4cbc <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4cbc:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4cbe:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4cc0:	b90a      	cbnz	r2, d4cc6 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d4cc2:	f000 fe1e 	bl	d5902 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4cc6:	68c3      	ldr	r3, [r0, #12]
    }
   d4cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4ccc:	4718      	bx	r3

000d4cce <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4cce:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4cd0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4cd2:	f100 0110 	add.w	r1, r0, #16
   d4cd6:	f7ff fff1 	bl	d4cbc <_ZNKSt8functionIFvRKbEEclES1_>
   d4cda:	bd08      	pop	{r3, pc}

000d4cdc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4cdc:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4cde:	2300      	movs	r3, #0
   d4ce0:	6083      	str	r3, [r0, #8]
   d4ce2:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4ce4:	4604      	mov	r4, r0
   d4ce6:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4ce8:	b12b      	cbz	r3, d4cf6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4cea:	2202      	movs	r2, #2
   d4cec:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4cee:	68eb      	ldr	r3, [r5, #12]
   d4cf0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4cf2:	68ab      	ldr	r3, [r5, #8]
   d4cf4:	60a3      	str	r3, [r4, #8]
	}
    }
   d4cf6:	4620      	mov	r0, r4
   d4cf8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4cfc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d4cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4cfe:	b089      	sub	sp, #36	; 0x24
   d4d00:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d4d02:	4668      	mov	r0, sp
   d4d04:	f7ff ff4d 	bl	d4ba2 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d4d08:	2300      	movs	r3, #0
   d4d0a:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d4d0e:	f04f 0202 	mov.w	r2, #2
   d4d12:	e8d4 3f4f 	ldrexb	r3, [r4]
   d4d16:	2b00      	cmp	r3, #0
   d4d18:	d103      	bne.n	d4d22 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d4d1a:	e8c4 2f41 	strexb	r1, r2, [r4]
   d4d1e:	2900      	cmp	r1, #0
   d4d20:	d1f7      	bne.n	d4d12 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d4d22:	d002      	beq.n	d4d2a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d4d24:	f88d 3008 	strb.w	r3, [sp, #8]
   d4d28:	e063      	b.n	d4df2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d4d2a:	f114 050c 	adds.w	r5, r4, #12
   d4d2e:	d003      	beq.n	d4d38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d4d30:	4669      	mov	r1, sp
   d4d32:	4628      	mov	r0, r5
   d4d34:	f7ff ff35 	bl	d4ba2 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4d38:	f3bf 8f5f 	dmb	sy
   d4d3c:	2301      	movs	r3, #1
   d4d3e:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4d40:	2000      	movs	r0, #0
   d4d42:	f104 0308 	add.w	r3, r4, #8
   d4d46:	f3bf 8f5f 	dmb	sy
   d4d4a:	e853 6f00 	ldrex	r6, [r3]
   d4d4e:	e843 0200 	strex	r2, r0, [r3]
   d4d52:	2a00      	cmp	r2, #0
   d4d54:	d1f9      	bne.n	d4d4a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d4d56:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d4d5a:	2e00      	cmp	r6, #0
   d4d5c:	d049      	beq.n	d4df2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4d5e:	f7ff fc27 	bl	d45b0 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d4d62:	b120      	cbz	r0, d4d6e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4d64:	4629      	mov	r1, r5
   d4d66:	4630      	mov	r0, r6
   d4d68:	f7ff ff98 	bl	d4c9c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4d6c:	e03a      	b.n	d4de4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4d6e:	4631      	mov	r1, r6
   d4d70:	a802      	add	r0, sp, #8
   d4d72:	f7ff ffb3 	bl	d4cdc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4d76:	68e0      	ldr	r0, [r4, #12]
   d4d78:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4d7c:	b108      	cbz	r0, d4d82 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d4d7e:	f000 ff55 	bl	d5c2c <strdup>
   d4d82:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4d84:	2010      	movs	r0, #16
   d4d86:	f8ad 501c 	strh.w	r5, [sp, #28]
   d4d8a:	f7ff f984 	bl	d4096 <_Znwj>
   d4d8e:	4605      	mov	r5, r0
   d4d90:	b1e8      	cbz	r0, d4dce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4d92:	2700      	movs	r7, #0
   d4d94:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4d96:	2018      	movs	r0, #24
   d4d98:	f7ff f97d 	bl	d4096 <_Znwj>
   d4d9c:	4604      	mov	r4, r0
   d4d9e:	b188      	cbz	r0, d4dc4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4da0:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4da2:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4da4:	a802      	add	r0, sp, #8
   d4da6:	f7ff fe65 	bl	d4a74 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4daa:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d4dac:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4dae:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4db0:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d4db2:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4db4:	a906      	add	r1, sp, #24
   d4db6:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4db8:	60e3      	str	r3, [r4, #12]
   d4dba:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4dbe:	9205      	str	r2, [sp, #20]
   d4dc0:	f7ff feef 	bl	d4ba2 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4dc4:	4b0d      	ldr	r3, [pc, #52]	; (d4dfc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d4dc6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4dc8:	4b0d      	ldr	r3, [pc, #52]	; (d4e00 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4dca:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4dcc:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d4dce:	a806      	add	r0, sp, #24
   d4dd0:	f7ff fef6 	bl	d4bc0 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4dd4:	a802      	add	r0, sp, #8
   d4dd6:	f7ff fe3e 	bl	d4a56 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4dda:	2200      	movs	r2, #0
   d4ddc:	4629      	mov	r1, r5
   d4dde:	4809      	ldr	r0, [pc, #36]	; (d4e04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d4de0:	f7ff fbee 	bl	d45c0 <application_thread_invoke>
   d4de4:	4630      	mov	r0, r6
   d4de6:	f7ff fe36 	bl	d4a56 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d4dea:	2110      	movs	r1, #16
   d4dec:	4630      	mov	r0, r6
   d4dee:	f000 fd86 	bl	d58fe <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d4df2:	4668      	mov	r0, sp
   d4df4:	f7ff fee4 	bl	d4bc0 <_ZN8particle5ErrorD1Ev>
    }
   d4df8:	b009      	add	sp, #36	; 0x24
   d4dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4dfc:	000d4caf 	.word	0x000d4caf
   d4e00:	000d4f25 	.word	0x000d4f25
   d4e04:	000d549d 	.word	0x000d549d

000d4e08 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4e0c:	b08b      	sub	sp, #44	; 0x2c
   d4e0e:	4606      	mov	r6, r0
   d4e10:	460f      	mov	r7, r1
   d4e12:	4690      	mov	r8, r2
   d4e14:	4699      	mov	r9, r3
   d4e16:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4e1a:	f7ff fc3d 	bl	d4698 <spark_cloud_flag_connected>
   d4e1e:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
   d4e20:	4683      	mov	fp, r0
   d4e22:	bb30      	cbnz	r0, d4e72 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4e24:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d4e28:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4e2a:	a905      	add	r1, sp, #20
   d4e2c:	4628      	mov	r0, r5
   d4e2e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4e32:	f7ff feb6 	bl	d4ba2 <_ZN8particle5ErrorC1EOS0_>
   d4e36:	2014      	movs	r0, #20
   d4e38:	f7ff f92d 	bl	d4096 <_Znwj>
   d4e3c:	4604      	mov	r4, r0
   d4e3e:	b158      	cbz	r0, d4e58 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d4e40:	2302      	movs	r3, #2
   d4e42:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4e44:	2301      	movs	r3, #1
   d4e46:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4e48:	f8c0 b004 	str.w	fp, [r0, #4]
   d4e4c:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d4e50:	4629      	mov	r1, r5
   d4e52:	300c      	adds	r0, #12
   d4e54:	f7ff fea5 	bl	d4ba2 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d4e58:	4630      	mov	r0, r6
   d4e5a:	4621      	mov	r1, r4
   d4e5c:	f840 4b04 	str.w	r4, [r0], #4
   d4e60:	f7ff ff08 	bl	d4c74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4e64:	4628      	mov	r0, r5
   d4e66:	f7ff feab 	bl	d4bc0 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d4e6a:	a805      	add	r0, sp, #20
   d4e6c:	f7ff fea8 	bl	d4bc0 <_ZN8particle5ErrorD1Ev>
   d4e70:	e052      	b.n	d4f18 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4e72:	2400      	movs	r4, #0
   d4e74:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d4e76:	2014      	movs	r0, #20
   d4e78:	606c      	str	r4, [r5, #4]
   d4e7a:	60ac      	str	r4, [r5, #8]
   d4e7c:	9307      	str	r3, [sp, #28]
   d4e7e:	f7ff f90a 	bl	d4096 <_Znwj>
   d4e82:	4601      	mov	r1, r0
   d4e84:	b118      	cbz	r0, d4e8e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d4e86:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4e88:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4e8a:	6044      	str	r4, [r0, #4]
   d4e8c:	6084      	str	r4, [r0, #8]
   d4e8e:	a804      	add	r0, sp, #16
   d4e90:	9103      	str	r1, [sp, #12]
   d4e92:	f7ff feef 	bl	d4c74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d4e96:	4b22      	ldr	r3, [pc, #136]	; (d4f20 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d4e98:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d4e9a:	2008      	movs	r0, #8
   d4e9c:	f7ff f8fb 	bl	d4096 <_Znwj>
   d4ea0:	4604      	mov	r4, r0
   d4ea2:	b128      	cbz	r0, d4eb0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4ea4:	9b03      	ldr	r3, [sp, #12]
   d4ea6:	f840 3b04 	str.w	r3, [r0], #4
   d4eaa:	a904      	add	r1, sp, #16
   d4eac:	f7ff fd08 	bl	d48c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4eb0:	9500      	str	r5, [sp, #0]
   d4eb2:	fa5f f38a 	uxtb.w	r3, sl
   d4eb6:	464a      	mov	r2, r9
   d4eb8:	4641      	mov	r1, r8
   d4eba:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d4ebc:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4ebe:	f7ff fbf3 	bl	d46a8 <spark_send_event>
   d4ec2:	b920      	cbnz	r0, d4ece <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d4ec4:	9b03      	ldr	r3, [sp, #12]
   d4ec6:	785b      	ldrb	r3, [r3, #1]
   d4ec8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d4ecc:	b183      	cbz	r3, d4ef0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d4ece:	9b03      	ldr	r3, [sp, #12]
   d4ed0:	9305      	str	r3, [sp, #20]
   d4ed2:	a904      	add	r1, sp, #16
   d4ed4:	a806      	add	r0, sp, #24
   d4ed6:	f7ff fcf3 	bl	d48c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d4eda:	a905      	add	r1, sp, #20
   d4edc:	4630      	mov	r0, r6
   d4ede:	f7ff fe99 	bl	d4c14 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4ee2:	a806      	add	r0, sp, #24
   d4ee4:	f7ff fcf3 	bl	d48ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4ee8:	a804      	add	r0, sp, #16
   d4eea:	f7ff fcf0 	bl	d48ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4eee:	e013      	b.n	d4f18 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d4ef0:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d4ef4:	a905      	add	r1, sp, #20
   d4ef6:	a803      	add	r0, sp, #12
   d4ef8:	9205      	str	r2, [sp, #20]
   d4efa:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4efe:	f7ff fefd 	bl	d4cfc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d4f02:	a805      	add	r0, sp, #20
   d4f04:	f7ff fe5c 	bl	d4bc0 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d4f08:	a805      	add	r0, sp, #20
   d4f0a:	9909      	ldr	r1, [sp, #36]	; 0x24
   d4f0c:	f7ff fe93 	bl	d4c36 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d4f10:	a806      	add	r0, sp, #24
   d4f12:	f7ff fcdc 	bl	d48ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4f16:	e7da      	b.n	d4ece <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d4f18:	4630      	mov	r0, r6
   d4f1a:	b00b      	add	sp, #44	; 0x2c
   d4f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4f20:	000d5095 	.word	0x000d5095

000d4f24 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4f24:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4f26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4f28:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4f2a:	d006      	beq.n	d4f3a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d4f2c:	2a03      	cmp	r2, #3
   d4f2e:	d017      	beq.n	d4f60 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d4f30:	2a01      	cmp	r2, #1
   d4f32:	d122      	bne.n	d4f7a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4f34:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4f36:	6003      	str	r3, [r0, #0]
	      break;
   d4f38:	e01f      	b.n	d4f7a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4f3a:	2018      	movs	r0, #24
   d4f3c:	680e      	ldr	r6, [r1, #0]
   d4f3e:	f7ff f8aa 	bl	d4096 <_Znwj>
   d4f42:	4605      	mov	r5, r0
   d4f44:	b150      	cbz	r0, d4f5c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d4f46:	4631      	mov	r1, r6
   d4f48:	f7ff fec8 	bl	d4cdc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4f4c:	6930      	ldr	r0, [r6, #16]
   d4f4e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4f52:	b108      	cbz	r0, d4f58 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d4f54:	f000 fe6a 	bl	d5c2c <strdup>
   d4f58:	6128      	str	r0, [r5, #16]
   d4f5a:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4f5c:	6025      	str	r5, [r4, #0]
   d4f5e:	e00c      	b.n	d4f7a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4f60:	6804      	ldr	r4, [r0, #0]
   d4f62:	b154      	cbz	r4, d4f7a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d4f64:	f104 0010 	add.w	r0, r4, #16
   d4f68:	f7ff fe2a 	bl	d4bc0 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4f6c:	4620      	mov	r0, r4
   d4f6e:	f7ff fd72 	bl	d4a56 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4f72:	2118      	movs	r1, #24
   d4f74:	4620      	mov	r0, r4
   d4f76:	f000 fcc2 	bl	d58fe <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4f7a:	2000      	movs	r0, #0
   d4f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4f7e <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4f7e:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4f80:	2300      	movs	r3, #0
   d4f82:	6083      	str	r3, [r0, #8]
   d4f84:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4f86:	4604      	mov	r4, r0
   d4f88:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4f8a:	b12b      	cbz	r3, d4f98 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4f8c:	2202      	movs	r2, #2
   d4f8e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4f90:	68eb      	ldr	r3, [r5, #12]
   d4f92:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4f94:	68ab      	ldr	r3, [r5, #8]
   d4f96:	60a3      	str	r3, [r4, #8]
	}
    }
   d4f98:	4620      	mov	r0, r4
   d4f9a:	bd38      	pop	{r3, r4, r5, pc}

000d4f9c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4f9c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4f9e:	b570      	push	{r4, r5, r6, lr}
   d4fa0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4fa2:	d006      	beq.n	d4fb2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d4fa4:	2a03      	cmp	r2, #3
   d4fa6:	d011      	beq.n	d4fcc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d4fa8:	2a01      	cmp	r2, #1
   d4faa:	d118      	bne.n	d4fde <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4fac:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4fae:	6003      	str	r3, [r0, #0]
	      break;
   d4fb0:	e015      	b.n	d4fde <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4fb2:	2014      	movs	r0, #20
   d4fb4:	680e      	ldr	r6, [r1, #0]
   d4fb6:	f7ff f86e 	bl	d4096 <_Znwj>
   d4fba:	4605      	mov	r5, r0
   d4fbc:	b120      	cbz	r0, d4fc8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d4fbe:	4631      	mov	r1, r6
   d4fc0:	f7ff ffdd 	bl	d4f7e <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d4fc4:	7c33      	ldrb	r3, [r6, #16]
   d4fc6:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4fc8:	6025      	str	r5, [r4, #0]
   d4fca:	e008      	b.n	d4fde <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4fcc:	6804      	ldr	r4, [r0, #0]
   d4fce:	b134      	cbz	r4, d4fde <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4fd0:	4620      	mov	r0, r4
   d4fd2:	f7ff fd40 	bl	d4a56 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4fd6:	2114      	movs	r1, #20
   d4fd8:	4620      	mov	r0, r4
   d4fda:	f000 fc90 	bl	d58fe <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4fde:	2000      	movs	r0, #0
   d4fe0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4fe4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d4fe4:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4fe6:	2300      	movs	r3, #0
   d4fe8:	b087      	sub	sp, #28
   d4fea:	460c      	mov	r4, r1
   d4fec:	f3bf 8f5f 	dmb	sy
   d4ff0:	e850 6f00 	ldrex	r6, [r0]
   d4ff4:	e840 3200 	strex	r2, r3, [r0]
   d4ff8:	2a00      	cmp	r2, #0
   d4ffa:	d1f9      	bne.n	d4ff0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d4ffc:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5000:	2e00      	cmp	r6, #0
   d5002:	d03f      	beq.n	d5084 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5004:	4618      	mov	r0, r3
   d5006:	f7ff fad3 	bl	d45b0 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d500a:	4607      	mov	r7, r0
   d500c:	b120      	cbz	r0, d5018 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d500e:	4621      	mov	r1, r4
   d5010:	4630      	mov	r0, r6
   d5012:	f7ff fe53 	bl	d4cbc <_ZNKSt8functionIFvRKbEEclES1_>
   d5016:	e02e      	b.n	d5076 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5018:	4631      	mov	r1, r6
   d501a:	a801      	add	r0, sp, #4
   d501c:	f7ff ffaf 	bl	d4f7e <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5020:	7823      	ldrb	r3, [r4, #0]
   d5022:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5026:	2010      	movs	r0, #16
   d5028:	f7ff f835 	bl	d4096 <_Znwj>
   d502c:	4605      	mov	r5, r0
   d502e:	b1d0      	cbz	r0, d5066 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5030:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5032:	2014      	movs	r0, #20
   d5034:	f7ff f82f 	bl	d4096 <_Znwj>
   d5038:	4604      	mov	r4, r0
   d503a:	b178      	cbz	r0, d505c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d503c:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d503e:	4601      	mov	r1, r0
   d5040:	a801      	add	r0, sp, #4
   d5042:	f7ff fd17 	bl	d4a74 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5046:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5048:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d504a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d504c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d504e:	9203      	str	r2, [sp, #12]
   d5050:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5052:	60e3      	str	r3, [r4, #12]
   d5054:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5058:	9204      	str	r2, [sp, #16]
   d505a:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d505c:	4b0a      	ldr	r3, [pc, #40]	; (d5088 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d505e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5060:	4b0a      	ldr	r3, [pc, #40]	; (d508c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5062:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5064:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5066:	a801      	add	r0, sp, #4
   d5068:	f7ff fcf5 	bl	d4a56 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d506c:	2200      	movs	r2, #0
   d506e:	4629      	mov	r1, r5
   d5070:	4807      	ldr	r0, [pc, #28]	; (d5090 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d5072:	f7ff faa5 	bl	d45c0 <application_thread_invoke>
   d5076:	4630      	mov	r0, r6
   d5078:	f7ff fced 	bl	d4a56 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d507c:	2110      	movs	r1, #16
   d507e:	4630      	mov	r0, r6
   d5080:	f000 fc3d 	bl	d58fe <_ZdlPvj>
        }
    }
   d5084:	b007      	add	sp, #28
   d5086:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5088:	000d4ccf 	.word	0x000d4ccf
   d508c:	000d4f9d 	.word	0x000d4f9d
   d5090:	000d549d 	.word	0x000d549d

000d5094 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5094:	b530      	push	{r4, r5, lr}
   d5096:	b085      	sub	sp, #20
   d5098:	4604      	mov	r4, r0
   d509a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d509c:	4668      	mov	r0, sp
   d509e:	4611      	mov	r1, r2
   d50a0:	f7ff fdc9 	bl	d4c36 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d50a4:	b17c      	cbz	r4, d50c6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d50a6:	b224      	sxth	r4, r4
   d50a8:	4628      	mov	r0, r5
   d50aa:	b10d      	cbz	r5, d50b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d50ac:	f000 fdbe 	bl	d5c2c <strdup>
   d50b0:	9002      	str	r0, [sp, #8]
   d50b2:	a902      	add	r1, sp, #8
   d50b4:	4668      	mov	r0, sp
   d50b6:	f8ad 400c 	strh.w	r4, [sp, #12]
   d50ba:	f7ff fe1f 	bl	d4cfc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d50be:	a802      	add	r0, sp, #8
   d50c0:	f7ff fd7e 	bl	d4bc0 <_ZN8particle5ErrorD1Ev>
   d50c4:	e01d      	b.n	d5102 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d50c6:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d50c8:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d50cc:	f04f 0201 	mov.w	r2, #1
   d50d0:	e8d0 3f4f 	ldrexb	r3, [r0]
   d50d4:	42a3      	cmp	r3, r4
   d50d6:	d103      	bne.n	d50e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d50d8:	e8c0 2f41 	strexb	r1, r2, [r0]
   d50dc:	2900      	cmp	r1, #0
   d50de:	d1f7      	bne.n	d50d0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d50e0:	d002      	beq.n	d50e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d50e2:	f88d 3008 	strb.w	r3, [sp, #8]
   d50e6:	e00c      	b.n	d5102 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d50e8:	f110 010c 	adds.w	r1, r0, #12
   d50ec:	f04f 0301 	mov.w	r3, #1
   d50f0:	bf18      	it	ne
   d50f2:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d50f4:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d50f8:	3004      	adds	r0, #4
   d50fa:	f800 3c03 	strb.w	r3, [r0, #-3]
   d50fe:	f7ff ff71 	bl	d4fe4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d5102:	a801      	add	r0, sp, #4
   d5104:	f7ff fbe3 	bl	d48ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d5108:	b005      	add	sp, #20
   d510a:	bd30      	pop	{r4, r5, pc}

000d510c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d510c:	4770      	bx	lr

000d510e <_ZN9IPAddressD0Ev>:
   d510e:	b510      	push	{r4, lr}
   d5110:	2118      	movs	r1, #24
   d5112:	4604      	mov	r4, r0
   d5114:	f000 fbf3 	bl	d58fe <_ZdlPvj>
   d5118:	4620      	mov	r0, r4
   d511a:	bd10      	pop	{r4, pc}

000d511c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d511c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d511e:	7d03      	ldrb	r3, [r0, #20]
   d5120:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5122:	b08d      	sub	sp, #52	; 0x34
   d5124:	460e      	mov	r6, r1
   d5126:	f100 0704 	add.w	r7, r0, #4
   d512a:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d512e:	d002      	beq.n	d5136 <_ZNK9IPAddress7printToER5Print+0x1a>
   d5130:	f100 0508 	add.w	r5, r0, #8
   d5134:	e018      	b.n	d5168 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5136:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5138:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d513a:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d513e:	232f      	movs	r3, #47	; 0x2f
   d5140:	462a      	mov	r2, r5
   d5142:	200a      	movs	r0, #10
   d5144:	f7ff f96c 	bl	d4420 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5148:	4628      	mov	r0, r5
   d514a:	f000 fd8a 	bl	d5c62 <strlen>
   d514e:	6833      	ldr	r3, [r6, #0]
   d5150:	4602      	mov	r2, r0
   d5152:	68db      	ldr	r3, [r3, #12]
   d5154:	4629      	mov	r1, r5
   d5156:	4630      	mov	r0, r6
   d5158:	4798      	blx	r3
   d515a:	e00f      	b.n	d517c <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d515c:	b124      	cbz	r4, d5168 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d515e:	212e      	movs	r1, #46	; 0x2e
   d5160:	4630      	mov	r0, r6
   d5162:	f7ff fbef 	bl	d4944 <_ZN5Print5printEc>
   d5166:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d5168:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d516c:	220a      	movs	r2, #10
   d516e:	4630      	mov	r0, r6
   d5170:	f7ff fc2e 	bl	d49d0 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5174:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5176:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5178:	d1f0      	bne.n	d515c <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d517a:	4620      	mov	r0, r4
    }
    return n;
}
   d517c:	b00d      	add	sp, #52	; 0x34
   d517e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5180 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5180:	b510      	push	{r4, lr}
   d5182:	4b05      	ldr	r3, [pc, #20]	; (d5198 <_ZN9IPAddressC1Ev+0x18>)
   d5184:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5186:	2211      	movs	r2, #17
   d5188:	f840 3b04 	str.w	r3, [r0], #4
   d518c:	2100      	movs	r1, #0
   d518e:	f000 fd1c 	bl	d5bca <memset>
{
    clear();
}
   d5192:	4620      	mov	r0, r4
   d5194:	bd10      	pop	{r4, pc}
   d5196:	bf00      	nop
   d5198:	000d5f78 	.word	0x000d5f78

000d519c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d519c:	4603      	mov	r3, r0
   d519e:	4a07      	ldr	r2, [pc, #28]	; (d51bc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d51a0:	b510      	push	{r4, lr}
   d51a2:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d51a6:	f101 0210 	add.w	r2, r1, #16
   d51aa:	f851 4b04 	ldr.w	r4, [r1], #4
   d51ae:	f843 4b04 	str.w	r4, [r3], #4
   d51b2:	4291      	cmp	r1, r2
   d51b4:	d1f9      	bne.n	d51aa <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d51b6:	780a      	ldrb	r2, [r1, #0]
   d51b8:	701a      	strb	r2, [r3, #0]
}
   d51ba:	bd10      	pop	{r4, pc}
   d51bc:	000d5f78 	.word	0x000d5f78

000d51c0 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d51c0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d51c2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d51c6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d51ca:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d51ce:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d51d2:	2304      	movs	r3, #4
   d51d4:	6041      	str	r1, [r0, #4]
   d51d6:	7503      	strb	r3, [r0, #20]
   d51d8:	bd10      	pop	{r4, pc}

000d51da <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d51da:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d51dc:	780d      	ldrb	r5, [r1, #0]
   d51de:	788b      	ldrb	r3, [r1, #2]
   d51e0:	784a      	ldrb	r2, [r1, #1]
   d51e2:	78c9      	ldrb	r1, [r1, #3]
   d51e4:	9100      	str	r1, [sp, #0]
   d51e6:	4629      	mov	r1, r5
   d51e8:	f7ff ffea 	bl	d51c0 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d51ec:	b003      	add	sp, #12
   d51ee:	bd30      	pop	{r4, r5, pc}

000d51f0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d51f0:	7441      	strb	r1, [r0, #17]
   d51f2:	4770      	bx	lr

000d51f4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d51f4:	4770      	bx	lr

000d51f6 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d51f6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d51f8:	2100      	movs	r1, #0
   d51fa:	7c00      	ldrb	r0, [r0, #16]
   d51fc:	f7ff f9b0 	bl	d4560 <HAL_USB_USART_Receive_Data>
}
   d5200:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5204:	bf28      	it	cs
   d5206:	f04f 30ff 	movcs.w	r0, #4294967295
   d520a:	bd08      	pop	{r3, pc}

000d520c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d520c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d520e:	2101      	movs	r1, #1
   d5210:	7c00      	ldrb	r0, [r0, #16]
   d5212:	f7ff f9a5 	bl	d4560 <HAL_USB_USART_Receive_Data>
}
   d5216:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d521a:	bf28      	it	cs
   d521c:	f04f 30ff 	movcs.w	r0, #4294967295
   d5220:	bd08      	pop	{r3, pc}

000d5222 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5222:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5224:	7c00      	ldrb	r0, [r0, #16]
   d5226:	f7ff f993 	bl	d4550 <HAL_USB_USART_Available_Data_For_Write>
}
   d522a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d522e:	bd08      	pop	{r3, pc}

000d5230 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5230:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5232:	7c00      	ldrb	r0, [r0, #16]
   d5234:	f7ff f984 	bl	d4540 <HAL_USB_USART_Available_Data>
}
   d5238:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d523c:	bd08      	pop	{r3, pc}

000d523e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d523e:	7c00      	ldrb	r0, [r0, #16]
   d5240:	f7ff b99e 	b.w	d4580 <HAL_USB_USART_Flush_Data>

000d5244 <_ZN9USBSerialD0Ev>:
   d5244:	b510      	push	{r4, lr}
   d5246:	2114      	movs	r1, #20
   d5248:	4604      	mov	r4, r0
   d524a:	f000 fb58 	bl	d58fe <_ZdlPvj>
   d524e:	4620      	mov	r0, r4
   d5250:	bd10      	pop	{r4, pc}

000d5252 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5252:	b538      	push	{r3, r4, r5, lr}
   d5254:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5256:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5258:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d525a:	f7ff f979 	bl	d4550 <HAL_USB_USART_Available_Data_For_Write>
   d525e:	2800      	cmp	r0, #0
   d5260:	dc01      	bgt.n	d5266 <_ZN9USBSerial5writeEh+0x14>
   d5262:	7c60      	ldrb	r0, [r4, #17]
   d5264:	b128      	cbz	r0, d5272 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5266:	4629      	mov	r1, r5
   d5268:	7c20      	ldrb	r0, [r4, #16]
   d526a:	f7ff f981 	bl	d4570 <HAL_USB_USART_Send_Data>
   d526e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5272:	bd38      	pop	{r3, r4, r5, pc}

000d5274 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5274:	b510      	push	{r4, lr}
   d5276:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5278:	2300      	movs	r3, #0
   d527a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d527c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5280:	60a3      	str	r3, [r4, #8]
   d5282:	4b05      	ldr	r3, [pc, #20]	; (d5298 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5284:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5286:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5288:	4608      	mov	r0, r1
{
  _serial = serial;
   d528a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d528c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d528e:	4611      	mov	r1, r2
   d5290:	f7ff f946 	bl	d4520 <HAL_USB_USART_Init>
}
   d5294:	4620      	mov	r0, r4
   d5296:	bd10      	pop	{r4, pc}
   d5298:	000d5f8c 	.word	0x000d5f8c

000d529c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d529c:	2200      	movs	r2, #0
   d529e:	7c00      	ldrb	r0, [r0, #16]
   d52a0:	f7ff b946 	b.w	d4530 <HAL_USB_USART_Begin>

000d52a4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d52a4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d52a6:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d52a8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d52aa:	2100      	movs	r1, #0
   d52ac:	f000 fc8d 	bl	d5bca <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d52b0:	4620      	mov	r0, r4
   d52b2:	bd10      	pop	{r4, pc}

000d52b4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d52b4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d52b6:	4d0e      	ldr	r5, [pc, #56]	; (d52f0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d52b8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d52ba:	a801      	add	r0, sp, #4
   d52bc:	f7ff fff2 	bl	d52a4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d52c0:	6829      	ldr	r1, [r5, #0]
   d52c2:	f011 0401 	ands.w	r4, r1, #1
   d52c6:	d110      	bne.n	d52ea <_Z16_fetch_usbserialv+0x36>
   d52c8:	4628      	mov	r0, r5
   d52ca:	f7fe feea 	bl	d40a2 <__cxa_guard_acquire>
   d52ce:	b160      	cbz	r0, d52ea <_Z16_fetch_usbserialv+0x36>
   d52d0:	aa01      	add	r2, sp, #4
   d52d2:	4621      	mov	r1, r4
   d52d4:	4807      	ldr	r0, [pc, #28]	; (d52f4 <_Z16_fetch_usbserialv+0x40>)
   d52d6:	f7ff ffcd 	bl	d5274 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d52da:	4628      	mov	r0, r5
   d52dc:	f7fe fee6 	bl	d40ac <__cxa_guard_release>
   d52e0:	4a05      	ldr	r2, [pc, #20]	; (d52f8 <_Z16_fetch_usbserialv+0x44>)
   d52e2:	4906      	ldr	r1, [pc, #24]	; (d52fc <_Z16_fetch_usbserialv+0x48>)
   d52e4:	4803      	ldr	r0, [pc, #12]	; (d52f4 <_Z16_fetch_usbserialv+0x40>)
   d52e6:	f000 fb05 	bl	d58f4 <__aeabi_atexit>
	return _usbserial;
}
   d52ea:	4802      	ldr	r0, [pc, #8]	; (d52f4 <_Z16_fetch_usbserialv+0x40>)
   d52ec:	b007      	add	sp, #28
   d52ee:	bd30      	pop	{r4, r5, pc}
   d52f0:	2003e3d0 	.word	0x2003e3d0
   d52f4:	2003e3d4 	.word	0x2003e3d4
   d52f8:	2003e368 	.word	0x2003e368
   d52fc:	000d51f5 	.word	0x000d51f5

000d5300 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d5300:	2200      	movs	r2, #0
   d5302:	4611      	mov	r1, r2
   d5304:	6840      	ldr	r0, [r0, #4]
   d5306:	f7ff b98f 	b.w	d4628 <network_ready>

000d530a <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d530a:	2200      	movs	r2, #0
   d530c:	4611      	mov	r1, r2
   d530e:	6840      	ldr	r0, [r0, #4]
   d5310:	f7ff b9aa 	b.w	d4668 <network_listening>

000d5314 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5314:	2200      	movs	r2, #0
   d5316:	4611      	mov	r1, r2
   d5318:	6840      	ldr	r0, [r0, #4]
   d531a:	f7ff b9b5 	b.w	d4688 <network_get_listen_timeout>

000d531e <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d531e:	2200      	movs	r2, #0
   d5320:	6840      	ldr	r0, [r0, #4]
   d5322:	f7ff b9a9 	b.w	d4678 <network_set_listen_timeout>

000d5326 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5326:	2200      	movs	r2, #0
   d5328:	f081 0101 	eor.w	r1, r1, #1
   d532c:	6840      	ldr	r0, [r0, #4]
   d532e:	f7ff b993 	b.w	d4658 <network_listen>

000d5332 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d5332:	2300      	movs	r3, #0
   d5334:	461a      	mov	r2, r3
   d5336:	4619      	mov	r1, r3
   d5338:	6840      	ldr	r0, [r0, #4]
   d533a:	f7ff b985 	b.w	d4648 <network_off>

000d533e <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d533e:	2300      	movs	r3, #0
   d5340:	461a      	mov	r2, r3
   d5342:	4619      	mov	r1, r3
   d5344:	6840      	ldr	r0, [r0, #4]
   d5346:	f7ff b977 	b.w	d4638 <network_on>

000d534a <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d534a:	2200      	movs	r2, #0
   d534c:	4611      	mov	r1, r2
   d534e:	6840      	ldr	r0, [r0, #4]
   d5350:	f7ff b95a 	b.w	d4608 <network_connecting>

000d5354 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5354:	2200      	movs	r2, #0
   d5356:	2102      	movs	r1, #2
   d5358:	6840      	ldr	r0, [r0, #4]
   d535a:	f7ff b95d 	b.w	d4618 <network_disconnect>

000d535e <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d535e:	2300      	movs	r3, #0
   d5360:	461a      	mov	r2, r3
   d5362:	6840      	ldr	r0, [r0, #4]
   d5364:	f7ff b948 	b.w	d45f8 <network_connect>

000d5368 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d5368:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d536a:	4c08      	ldr	r4, [pc, #32]	; (d538c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d536c:	2528      	movs	r5, #40	; 0x28
   d536e:	462a      	mov	r2, r5
   d5370:	2100      	movs	r1, #0
   d5372:	4620      	mov	r0, r4
   d5374:	f000 fc29 	bl	d5bca <memset>
        cid = -1;
   d5378:	f04f 33ff 	mov.w	r3, #4294967295
   d537c:	6063      	str	r3, [r4, #4]
   d537e:	4b04      	ldr	r3, [pc, #16]	; (d5390 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d5380:	8025      	strh	r5, [r4, #0]
   d5382:	2204      	movs	r2, #4
   d5384:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d5386:	4a03      	ldr	r2, [pc, #12]	; (d5394 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d5388:	601a      	str	r2, [r3, #0]
   d538a:	bd38      	pop	{r3, r4, r5, pc}
   d538c:	2003e3f0 	.word	0x2003e3f0
   d5390:	2003e3e8 	.word	0x2003e3e8
   d5394:	000d5fbc 	.word	0x000d5fbc

000d5398 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5398:	4770      	bx	lr

000d539a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d539a:	7441      	strb	r1, [r0, #17]
   d539c:	4770      	bx	lr

000d539e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d539e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d53a0:	7c00      	ldrb	r0, [r0, #16]
   d53a2:	f7ff f87d 	bl	d44a0 <HAL_USART_Available_Data_For_Write>
}
   d53a6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d53aa:	bd08      	pop	{r3, pc}

000d53ac <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d53ac:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d53ae:	7c00      	ldrb	r0, [r0, #16]
   d53b0:	f7ff f84e 	bl	d4450 <HAL_USART_Available_Data>
}
   d53b4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d53b8:	bd08      	pop	{r3, pc}

000d53ba <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d53ba:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d53bc:	7c00      	ldrb	r0, [r0, #16]
   d53be:	f7ff f857 	bl	d4470 <HAL_USART_Peek_Data>
}
   d53c2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d53c6:	bf28      	it	cs
   d53c8:	f04f 30ff 	movcs.w	r0, #4294967295
   d53cc:	bd08      	pop	{r3, pc}

000d53ce <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d53ce:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d53d0:	7c00      	ldrb	r0, [r0, #16]
   d53d2:	f7ff f845 	bl	d4460 <HAL_USART_Read_Data>
}
   d53d6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d53da:	bf28      	it	cs
   d53dc:	f04f 30ff 	movcs.w	r0, #4294967295
   d53e0:	bd08      	pop	{r3, pc}

000d53e2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d53e2:	7c00      	ldrb	r0, [r0, #16]
   d53e4:	f7ff b84c 	b.w	d4480 <HAL_USART_Flush_Data>

000d53e8 <_ZN11USARTSerialD0Ev>:
   d53e8:	b510      	push	{r4, lr}
   d53ea:	2114      	movs	r1, #20
   d53ec:	4604      	mov	r4, r0
   d53ee:	f000 fa86 	bl	d58fe <_ZdlPvj>
   d53f2:	4620      	mov	r0, r4
   d53f4:	bd10      	pop	{r4, pc}

000d53f6 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d53f6:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d53f8:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d53fa:	4604      	mov	r4, r0
   d53fc:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d53fe:	b925      	cbnz	r5, d540a <_ZN11USARTSerial5writeEh+0x14>
   d5400:	7c00      	ldrb	r0, [r0, #16]
   d5402:	f7ff f84d 	bl	d44a0 <HAL_USART_Available_Data_For_Write>
   d5406:	2800      	cmp	r0, #0
   d5408:	dd05      	ble.n	d5416 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d540a:	4631      	mov	r1, r6
   d540c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d540e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5412:	f7ff b815 	b.w	d4440 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5416:	4628      	mov	r0, r5
   d5418:	bd70      	pop	{r4, r5, r6, pc}
	...

000d541c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d541c:	b510      	push	{r4, lr}
   d541e:	4604      	mov	r4, r0
   d5420:	4608      	mov	r0, r1
   d5422:	4611      	mov	r1, r2
   d5424:	2200      	movs	r2, #0
   d5426:	6062      	str	r2, [r4, #4]
   d5428:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d542c:	60a2      	str	r2, [r4, #8]
   d542e:	4a05      	ldr	r2, [pc, #20]	; (d5444 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5430:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5432:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5434:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5436:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5438:	461a      	mov	r2, r3
   d543a:	f7fe fff9 	bl	d4430 <HAL_USART_Init>
}
   d543e:	4620      	mov	r0, r4
   d5440:	bd10      	pop	{r4, pc}
   d5442:	bf00      	nop
   d5444:	000d5ff0 	.word	0x000d5ff0

000d5448 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5448:	7c00      	ldrb	r0, [r0, #16]
   d544a:	f7ff b821 	b.w	d4490 <HAL_USART_Is_Enabled>
	...

000d5450 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5450:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5452:	4d0c      	ldr	r5, [pc, #48]	; (d5484 <_Z22__fetch_global_Serial1v+0x34>)
   d5454:	6829      	ldr	r1, [r5, #0]
   d5456:	f011 0401 	ands.w	r4, r1, #1
   d545a:	d111      	bne.n	d5480 <_Z22__fetch_global_Serial1v+0x30>
   d545c:	4628      	mov	r0, r5
   d545e:	f7fe fe20 	bl	d40a2 <__cxa_guard_acquire>
   d5462:	b168      	cbz	r0, d5480 <_Z22__fetch_global_Serial1v+0x30>
   d5464:	4a08      	ldr	r2, [pc, #32]	; (d5488 <_Z22__fetch_global_Serial1v+0x38>)
   d5466:	4b09      	ldr	r3, [pc, #36]	; (d548c <_Z22__fetch_global_Serial1v+0x3c>)
   d5468:	4809      	ldr	r0, [pc, #36]	; (d5490 <_Z22__fetch_global_Serial1v+0x40>)
   d546a:	4621      	mov	r1, r4
   d546c:	f7ff ffd6 	bl	d541c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5470:	4628      	mov	r0, r5
   d5472:	f7fe fe1b 	bl	d40ac <__cxa_guard_release>
   d5476:	4a07      	ldr	r2, [pc, #28]	; (d5494 <_Z22__fetch_global_Serial1v+0x44>)
   d5478:	4907      	ldr	r1, [pc, #28]	; (d5498 <_Z22__fetch_global_Serial1v+0x48>)
   d547a:	4805      	ldr	r0, [pc, #20]	; (d5490 <_Z22__fetch_global_Serial1v+0x40>)
   d547c:	f000 fa3a 	bl	d58f4 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5480:	4803      	ldr	r0, [pc, #12]	; (d5490 <_Z22__fetch_global_Serial1v+0x40>)
   d5482:	bd38      	pop	{r3, r4, r5, pc}
   d5484:	2003e4b0 	.word	0x2003e4b0
   d5488:	2003e4b4 	.word	0x2003e4b4
   d548c:	2003e42c 	.word	0x2003e42c
   d5490:	2003e418 	.word	0x2003e418
   d5494:	2003e368 	.word	0x2003e368
   d5498:	000d5399 	.word	0x000d5399

000d549c <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d549c:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d549e:	6883      	ldr	r3, [r0, #8]
   d54a0:	4604      	mov	r4, r0
   d54a2:	b90b      	cbnz	r3, d54a8 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d54a4:	f000 fa2d 	bl	d5902 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d54a8:	68c3      	ldr	r3, [r0, #12]
   d54aa:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d54ac:	68a3      	ldr	r3, [r4, #8]
   d54ae:	b11b      	cbz	r3, d54b8 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d54b0:	2203      	movs	r2, #3
   d54b2:	4621      	mov	r1, r4
   d54b4:	4620      	mov	r0, r4
   d54b6:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d54b8:	4620      	mov	r0, r4
   d54ba:	2110      	movs	r1, #16
}
   d54bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d54c0:	f000 ba1d 	b.w	d58fe <_ZdlPvj>

000d54c4 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d54c4:	4770      	bx	lr

000d54c6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d54c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d54c8:	4606      	mov	r6, r0
   d54ca:	4615      	mov	r5, r2
   d54cc:	460c      	mov	r4, r1
   d54ce:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d54d0:	42bc      	cmp	r4, r7
   d54d2:	d006      	beq.n	d54e2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d54d4:	6833      	ldr	r3, [r6, #0]
   d54d6:	f814 1b01 	ldrb.w	r1, [r4], #1
   d54da:	689b      	ldr	r3, [r3, #8]
   d54dc:	4630      	mov	r0, r6
   d54de:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d54e0:	e7f6      	b.n	d54d0 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d54e2:	4628      	mov	r0, r5
   d54e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d54e6 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d54e6:	2200      	movs	r2, #0
   d54e8:	7c00      	ldrb	r0, [r0, #16]
   d54ea:	f7fe bfe1 	b.w	d44b0 <HAL_I2C_Write_Data>

000d54ee <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d54ee:	2100      	movs	r1, #0
   d54f0:	7c00      	ldrb	r0, [r0, #16]
   d54f2:	f7fe bfe5 	b.w	d44c0 <HAL_I2C_Available_Data>

000d54f6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d54f6:	2100      	movs	r1, #0
   d54f8:	7c00      	ldrb	r0, [r0, #16]
   d54fa:	f7fe bfe9 	b.w	d44d0 <HAL_I2C_Read_Data>

000d54fe <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d54fe:	2100      	movs	r1, #0
   d5500:	7c00      	ldrb	r0, [r0, #16]
   d5502:	f7fe bfed 	b.w	d44e0 <HAL_I2C_Peek_Data>

000d5506 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5506:	2100      	movs	r1, #0
   d5508:	7c00      	ldrb	r0, [r0, #16]
   d550a:	f7fe bff1 	b.w	d44f0 <HAL_I2C_Flush_Data>

000d550e <_ZN7TwoWireD0Ev>:
   d550e:	b510      	push	{r4, lr}
   d5510:	2114      	movs	r1, #20
   d5512:	4604      	mov	r4, r0
   d5514:	f000 f9f3 	bl	d58fe <_ZdlPvj>
   d5518:	4620      	mov	r0, r4
   d551a:	bd10      	pop	{r4, pc}

000d551c <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d551c:	b510      	push	{r4, lr}
   d551e:	4604      	mov	r4, r0
   d5520:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5524:	4608      	mov	r0, r1
   d5526:	60a3      	str	r3, [r4, #8]
   d5528:	2100      	movs	r1, #0
   d552a:	4b04      	ldr	r3, [pc, #16]	; (d553c <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d552c:	7420      	strb	r0, [r4, #16]
   d552e:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5530:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d5532:	f7fe ffed 	bl	d4510 <HAL_I2C_Init>

}
   d5536:	4620      	mov	r0, r4
   d5538:	bd10      	pop	{r4, pc}
   d553a:	bf00      	nop
   d553c:	000d6020 	.word	0x000d6020

000d5540 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5540:	2100      	movs	r1, #0
   d5542:	7c00      	ldrb	r0, [r0, #16]
   d5544:	f7fe bfdc 	b.w	d4500 <HAL_I2C_Is_Enabled>

000d5548 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5548:	2200      	movs	r2, #0
   d554a:	4611      	mov	r1, r2
   d554c:	6840      	ldr	r0, [r0, #4]
   d554e:	f7ff b88b 	b.w	d4668 <network_listening>

000d5552 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5552:	2200      	movs	r2, #0
   d5554:	4611      	mov	r1, r2
   d5556:	6840      	ldr	r0, [r0, #4]
   d5558:	f7ff b896 	b.w	d4688 <network_get_listen_timeout>

000d555c <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d555c:	2200      	movs	r2, #0
   d555e:	6840      	ldr	r0, [r0, #4]
   d5560:	f7ff b88a 	b.w	d4678 <network_set_listen_timeout>

000d5564 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5564:	2200      	movs	r2, #0
   d5566:	f081 0101 	eor.w	r1, r1, #1
   d556a:	6840      	ldr	r0, [r0, #4]
   d556c:	f7ff b874 	b.w	d4658 <network_listen>

000d5570 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5570:	2300      	movs	r3, #0
   d5572:	461a      	mov	r2, r3
   d5574:	2101      	movs	r1, #1
   d5576:	6840      	ldr	r0, [r0, #4]
   d5578:	f7ff b866 	b.w	d4648 <network_off>

000d557c <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d557c:	2300      	movs	r3, #0
   d557e:	461a      	mov	r2, r3
   d5580:	4619      	mov	r1, r3
   d5582:	6840      	ldr	r0, [r0, #4]
   d5584:	f7ff b858 	b.w	d4638 <network_on>

000d5588 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5588:	2200      	movs	r2, #0
   d558a:	4611      	mov	r1, r2
   d558c:	6840      	ldr	r0, [r0, #4]
   d558e:	f7ff b84b 	b.w	d4628 <network_ready>

000d5592 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5592:	2200      	movs	r2, #0
   d5594:	4611      	mov	r1, r2
   d5596:	6840      	ldr	r0, [r0, #4]
   d5598:	f7ff b836 	b.w	d4608 <network_connecting>

000d559c <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d559c:	2200      	movs	r2, #0
   d559e:	2102      	movs	r1, #2
   d55a0:	6840      	ldr	r0, [r0, #4]
   d55a2:	f7ff b839 	b.w	d4618 <network_disconnect>

000d55a6 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d55a6:	2300      	movs	r3, #0
   d55a8:	461a      	mov	r2, r3
   d55aa:	6840      	ldr	r0, [r0, #4]
   d55ac:	f7ff b824 	b.w	d45f8 <network_connect>

000d55b0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d55b0:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d55b2:	4605      	mov	r5, r0
   d55b4:	b188      	cbz	r0, d55da <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d55b6:	6804      	ldr	r4, [r0, #0]
   d55b8:	b14c      	cbz	r4, d55ce <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d55ba:	68a3      	ldr	r3, [r4, #8]
   d55bc:	b11b      	cbz	r3, d55c6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d55be:	2203      	movs	r2, #3
   d55c0:	4621      	mov	r1, r4
   d55c2:	4620      	mov	r0, r4
   d55c4:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d55c6:	2110      	movs	r1, #16
   d55c8:	4620      	mov	r0, r4
   d55ca:	f000 f998 	bl	d58fe <_ZdlPvj>
   d55ce:	4628      	mov	r0, r5
   d55d0:	2114      	movs	r1, #20
      }
   d55d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d55d6:	f000 b992 	b.w	d58fe <_ZdlPvj>
   d55da:	bd38      	pop	{r3, r4, r5, pc}

000d55dc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d55dc:	b110      	cbz	r0, d55e4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d55de:	6803      	ldr	r3, [r0, #0]
   d55e0:	685b      	ldr	r3, [r3, #4]
   d55e2:	4718      	bx	r3
   d55e4:	4770      	bx	lr

000d55e6 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d55e6:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d55e8:	6803      	ldr	r3, [r0, #0]
   d55ea:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d55ec:	b1bb      	cbz	r3, d561e <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d55ee:	6858      	ldr	r0, [r3, #4]
   d55f0:	f7fe feee 	bl	d43d0 <os_thread_is_current>
   d55f4:	b978      	cbnz	r0, d5616 <_ZN6ThreadD1Ev+0x30>
   d55f6:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d55f8:	7c5a      	ldrb	r2, [r3, #17]
   d55fa:	b912      	cbnz	r2, d5602 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d55fc:	6858      	ldr	r0, [r3, #4]
   d55fe:	f7fe feef 	bl	d43e0 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5602:	6823      	ldr	r3, [r4, #0]
   d5604:	6858      	ldr	r0, [r3, #4]
   d5606:	f7fe fef3 	bl	d43f0 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d560a:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d560c:	2300      	movs	r3, #0
   d560e:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5610:	b128      	cbz	r0, d561e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5612:	f7ff ffcd 	bl	d55b0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5616:	6820      	ldr	r0, [r4, #0]
   d5618:	b108      	cbz	r0, d561e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d561a:	f7ff ffc9 	bl	d55b0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d561e:	4620      	mov	r0, r4
   d5620:	bd10      	pop	{r4, pc}
	...

000d5624 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5624:	b538      	push	{r3, r4, r5, lr}
   d5626:	4b0c      	ldr	r3, [pc, #48]	; (d5658 <_ZN5spark9MeshClassD1Ev+0x34>)
   d5628:	6003      	str	r3, [r0, #0]
   d562a:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d562c:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d5630:	b108      	cbz	r0, d5636 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5632:	f7fe fd34 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5636:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d563a:	b135      	cbz	r5, d564a <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d563c:	4628      	mov	r0, r5
   d563e:	f7ff ffd2 	bl	d55e6 <_ZN6ThreadD1Ev>
   d5642:	2104      	movs	r1, #4
   d5644:	4628      	mov	r0, r5
   d5646:	f000 f95a 	bl	d58fe <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d564a:	68a0      	ldr	r0, [r4, #8]
   d564c:	b108      	cbz	r0, d5652 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d564e:	f7ff ffc5 	bl	d55dc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d5652:	4620      	mov	r0, r4
   d5654:	bd38      	pop	{r3, r4, r5, pc}
   d5656:	bf00      	nop
   d5658:	000d6048 	.word	0x000d6048

000d565c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d565c:	b538      	push	{r3, r4, r5, lr}
   d565e:	4c0e      	ldr	r4, [pc, #56]	; (d5698 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5660:	4b0e      	ldr	r3, [pc, #56]	; (d569c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d5662:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5664:	2500      	movs	r5, #0
   d5666:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5668:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d566c:	6063      	str	r3, [r4, #4]
   d566e:	60a5      	str	r5, [r4, #8]
   d5670:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5674:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5678:	f7fe feca 	bl	d4410 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d567c:	4b08      	ldr	r3, [pc, #32]	; (d56a0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d567e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5682:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d5686:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5688:	4620      	mov	r0, r4
   d568a:	4a06      	ldr	r2, [pc, #24]	; (d56a4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d568c:	4906      	ldr	r1, [pc, #24]	; (d56a8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d568e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5692:	f000 b92f 	b.w	d58f4 <__aeabi_atexit>
   d5696:	bf00      	nop
   d5698:	2003e538 	.word	0x2003e538
   d569c:	000d607c 	.word	0x000d607c
   d56a0:	000d6048 	.word	0x000d6048
   d56a4:	2003e368 	.word	0x2003e368
   d56a8:	000d5625 	.word	0x000d5625

000d56ac <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d56ac:	2300      	movs	r3, #0
   d56ae:	461a      	mov	r2, r3
   d56b0:	6840      	ldr	r0, [r0, #4]
   d56b2:	f7fe bfa1 	b.w	d45f8 <network_connect>

000d56b6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d56b6:	2200      	movs	r2, #0
   d56b8:	2102      	movs	r1, #2
   d56ba:	6840      	ldr	r0, [r0, #4]
   d56bc:	f7fe bfac 	b.w	d4618 <network_disconnect>

000d56c0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d56c0:	2200      	movs	r2, #0
   d56c2:	4611      	mov	r1, r2
   d56c4:	6840      	ldr	r0, [r0, #4]
   d56c6:	f7fe bf9f 	b.w	d4608 <network_connecting>

000d56ca <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d56ca:	2200      	movs	r2, #0
   d56cc:	4611      	mov	r1, r2
   d56ce:	6840      	ldr	r0, [r0, #4]
   d56d0:	f7fe bfaa 	b.w	d4628 <network_ready>

000d56d4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d56d4:	2300      	movs	r3, #0
   d56d6:	461a      	mov	r2, r3
   d56d8:	4619      	mov	r1, r3
   d56da:	6840      	ldr	r0, [r0, #4]
   d56dc:	f7fe bfac 	b.w	d4638 <network_on>

000d56e0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d56e0:	2300      	movs	r3, #0
   d56e2:	461a      	mov	r2, r3
   d56e4:	4619      	mov	r1, r3
   d56e6:	6840      	ldr	r0, [r0, #4]
   d56e8:	f7fe bfae 	b.w	d4648 <network_off>

000d56ec <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d56ec:	2200      	movs	r2, #0
   d56ee:	f081 0101 	eor.w	r1, r1, #1
   d56f2:	6840      	ldr	r0, [r0, #4]
   d56f4:	f7fe bfb0 	b.w	d4658 <network_listen>

000d56f8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d56f8:	2200      	movs	r2, #0
   d56fa:	6840      	ldr	r0, [r0, #4]
   d56fc:	f7fe bfbc 	b.w	d4678 <network_set_listen_timeout>

000d5700 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5700:	2200      	movs	r2, #0
   d5702:	4611      	mov	r1, r2
   d5704:	6840      	ldr	r0, [r0, #4]
   d5706:	f7fe bfbf 	b.w	d4688 <network_get_listen_timeout>

000d570a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d570a:	2200      	movs	r2, #0
   d570c:	4611      	mov	r1, r2
   d570e:	6840      	ldr	r0, [r0, #4]
   d5710:	f7fe bfaa 	b.w	d4668 <network_listening>

000d5714 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5714:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5718:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d571a:	b095      	sub	sp, #84	; 0x54
   d571c:	4616      	mov	r6, r2
   d571e:	460d      	mov	r5, r1
   d5720:	4607      	mov	r7, r0
    IPAddress addr;
   d5722:	f7ff fd2d 	bl	d5180 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5726:	4621      	mov	r1, r4
   d5728:	2220      	movs	r2, #32
   d572a:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d572c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d572e:	f000 fa4c 	bl	d5bca <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5732:	2340      	movs	r3, #64	; 0x40
   d5734:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5736:	4621      	mov	r1, r4
   d5738:	466b      	mov	r3, sp
   d573a:	aa0c      	add	r2, sp, #48	; 0x30
   d573c:	4630      	mov	r0, r6
   d573e:	f7fe fdff 	bl	d4340 <netdb_getaddrinfo>
    if (!r) {
   d5742:	4604      	mov	r4, r0
   d5744:	2800      	cmp	r0, #0
   d5746:	d144      	bne.n	d57d2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5748:	4602      	mov	r2, r0
   d574a:	2101      	movs	r1, #1
   d574c:	6868      	ldr	r0, [r5, #4]
   d574e:	f7fe ff6b 	bl	d4628 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5752:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5754:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5756:	4622      	mov	r2, r4
   d5758:	6868      	ldr	r0, [r5, #4]
   d575a:	f7fe ff65 	bl	d4628 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d575e:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5760:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5762:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5764:	2e00      	cmp	r6, #0
   d5766:	d034      	beq.n	d57d2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5768:	2900      	cmp	r1, #0
   d576a:	d132      	bne.n	d57d2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d576c:	6873      	ldr	r3, [r6, #4]
   d576e:	2b02      	cmp	r3, #2
   d5770:	d002      	beq.n	d5778 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5772:	2b0a      	cmp	r3, #10
   d5774:	d009      	beq.n	d578a <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5776:	e02a      	b.n	d57ce <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5778:	f1b8 0f00 	cmp.w	r8, #0
   d577c:	d027      	beq.n	d57ce <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d577e:	6971      	ldr	r1, [r6, #20]
   d5780:	4638      	mov	r0, r7
   d5782:	3104      	adds	r1, #4
   d5784:	f7ff fd29 	bl	d51da <_ZN9IPAddressaSEPKh>
   d5788:	e020      	b.n	d57cc <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d578a:	f1b9 0f00 	cmp.w	r9, #0
   d578e:	d01e      	beq.n	d57ce <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5790:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5792:	2211      	movs	r2, #17
   d5794:	a801      	add	r0, sp, #4
   d5796:	f000 fa18 	bl	d5bca <memset>
                    a.v = 6;
   d579a:	2306      	movs	r3, #6
   d579c:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d57a0:	ad01      	add	r5, sp, #4
   d57a2:	f104 0308 	add.w	r3, r4, #8
   d57a6:	3418      	adds	r4, #24
   d57a8:	6818      	ldr	r0, [r3, #0]
   d57aa:	6859      	ldr	r1, [r3, #4]
   d57ac:	462a      	mov	r2, r5
   d57ae:	c203      	stmia	r2!, {r0, r1}
   d57b0:	3308      	adds	r3, #8
   d57b2:	42a3      	cmp	r3, r4
   d57b4:	4615      	mov	r5, r2
   d57b6:	d1f7      	bne.n	d57a8 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d57b8:	a901      	add	r1, sp, #4
   d57ba:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d57bc:	ad07      	add	r5, sp, #28
   d57be:	f7ff fced 	bl	d519c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d57c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d57c4:	1d3c      	adds	r4, r7, #4
   d57c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d57c8:	682b      	ldr	r3, [r5, #0]
   d57ca:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d57cc:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d57ce:	69f6      	ldr	r6, [r6, #28]
   d57d0:	e7c8      	b.n	d5764 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d57d2:	9800      	ldr	r0, [sp, #0]
   d57d4:	f7fe fdac 	bl	d4330 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d57d8:	4638      	mov	r0, r7
   d57da:	b015      	add	sp, #84	; 0x54
   d57dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d57e0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d57e0:	4b02      	ldr	r3, [pc, #8]	; (d57ec <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d57e2:	4a03      	ldr	r2, [pc, #12]	; (d57f0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d57e4:	601a      	str	r2, [r3, #0]
   d57e6:	2200      	movs	r2, #0
   d57e8:	605a      	str	r2, [r3, #4]
   d57ea:	4770      	bx	lr
   d57ec:	2003e70c 	.word	0x2003e70c
   d57f0:	000d607c 	.word	0x000d607c

000d57f4 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d57f4:	b510      	push	{r4, lr}
   d57f6:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d57f8:	480f      	ldr	r0, [pc, #60]	; (d5838 <pinAvailable+0x44>)
   d57fa:	f7fe ffe7 	bl	d47cc <_ZN8SPIClass9isEnabledEv>
   d57fe:	b128      	cbz	r0, d580c <pinAvailable+0x18>
   d5800:	f1a4 030b 	sub.w	r3, r4, #11
   d5804:	2b02      	cmp	r3, #2
   d5806:	d801      	bhi.n	d580c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d5808:	2000      	movs	r0, #0
   d580a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d580c:	f000 f852 	bl	d58b4 <_Z19__fetch_global_Wirev>
   d5810:	f7ff fe96 	bl	d5540 <_ZN7TwoWire9isEnabledEv>
   d5814:	b108      	cbz	r0, d581a <pinAvailable+0x26>
   d5816:	2c01      	cmp	r4, #1
   d5818:	d9f6      	bls.n	d5808 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d581a:	f7ff fe19 	bl	d5450 <_Z22__fetch_global_Serial1v>
   d581e:	f7ff fe13 	bl	d5448 <_ZN11USARTSerial9isEnabledEv>
   d5822:	b118      	cbz	r0, d582c <pinAvailable+0x38>
   d5824:	f1a4 0309 	sub.w	r3, r4, #9
   d5828:	2b01      	cmp	r3, #1
   d582a:	d9ed      	bls.n	d5808 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d582c:	2c23      	cmp	r4, #35	; 0x23
   d582e:	bf8c      	ite	hi
   d5830:	2000      	movhi	r0, #0
   d5832:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d5834:	bd10      	pop	{r4, pc}
   d5836:	bf00      	nop
   d5838:	2003e714 	.word	0x2003e714

000d583c <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d583c:	b538      	push	{r3, r4, r5, lr}
   d583e:	4604      	mov	r4, r0
   d5840:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5842:	f7fe fd8d 	bl	d4360 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5846:	28ff      	cmp	r0, #255	; 0xff
   d5848:	d010      	beq.n	d586c <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d584a:	2806      	cmp	r0, #6
   d584c:	d804      	bhi.n	d5858 <digitalWrite+0x1c>
   d584e:	234d      	movs	r3, #77	; 0x4d
   d5850:	fa23 f000 	lsr.w	r0, r3, r0
   d5854:	07c3      	lsls	r3, r0, #31
   d5856:	d409      	bmi.n	d586c <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d5858:	4620      	mov	r0, r4
   d585a:	f7ff ffcb 	bl	d57f4 <pinAvailable>
   d585e:	b128      	cbz	r0, d586c <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5860:	4629      	mov	r1, r5
   d5862:	4620      	mov	r0, r4
}
   d5864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5868:	f7fe bd82 	b.w	d4370 <HAL_GPIO_Write>
   d586c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5870 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5870:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5872:	4c0c      	ldr	r4, [pc, #48]	; (d58a4 <_GLOBAL__sub_I_SPI+0x34>)
   d5874:	4e0c      	ldr	r6, [pc, #48]	; (d58a8 <_GLOBAL__sub_I_SPI+0x38>)
   d5876:	4d0d      	ldr	r5, [pc, #52]	; (d58ac <_GLOBAL__sub_I_SPI+0x3c>)
   d5878:	2100      	movs	r1, #0
   d587a:	4620      	mov	r0, r4
   d587c:	f7fe ff92 	bl	d47a4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5880:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5882:	4c0b      	ldr	r4, [pc, #44]	; (d58b0 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5884:	4632      	mov	r2, r6
   d5886:	4629      	mov	r1, r5
   d5888:	f000 f834 	bl	d58f4 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d588c:	2101      	movs	r1, #1
   d588e:	4620      	mov	r0, r4
   d5890:	f7fe ff88 	bl	d47a4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5894:	4632      	mov	r2, r6
   d5896:	4629      	mov	r1, r5
   d5898:	4620      	mov	r0, r4
   d589a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d589e:	f000 b829 	b.w	d58f4 <__aeabi_atexit>
   d58a2:	bf00      	nop
   d58a4:	2003e714 	.word	0x2003e714
   d58a8:	2003e368 	.word	0x2003e368
   d58ac:	000d4795 	.word	0x000d4795
   d58b0:	2003e724 	.word	0x2003e724

000d58b4 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d58b4:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d58b6:	4d0b      	ldr	r5, [pc, #44]	; (d58e4 <_Z19__fetch_global_Wirev+0x30>)
   d58b8:	6829      	ldr	r1, [r5, #0]
   d58ba:	f011 0401 	ands.w	r4, r1, #1
   d58be:	d10f      	bne.n	d58e0 <_Z19__fetch_global_Wirev+0x2c>
   d58c0:	4628      	mov	r0, r5
   d58c2:	f7fe fbee 	bl	d40a2 <__cxa_guard_acquire>
   d58c6:	b158      	cbz	r0, d58e0 <_Z19__fetch_global_Wirev+0x2c>
   d58c8:	4621      	mov	r1, r4
   d58ca:	4807      	ldr	r0, [pc, #28]	; (d58e8 <_Z19__fetch_global_Wirev+0x34>)
   d58cc:	f7ff fe26 	bl	d551c <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d58d0:	4628      	mov	r0, r5
   d58d2:	f7fe fbeb 	bl	d40ac <__cxa_guard_release>
   d58d6:	4a05      	ldr	r2, [pc, #20]	; (d58ec <_Z19__fetch_global_Wirev+0x38>)
   d58d8:	4905      	ldr	r1, [pc, #20]	; (d58f0 <_Z19__fetch_global_Wirev+0x3c>)
   d58da:	4803      	ldr	r0, [pc, #12]	; (d58e8 <_Z19__fetch_global_Wirev+0x34>)
   d58dc:	f000 f80a 	bl	d58f4 <__aeabi_atexit>
	return wire;
}
   d58e0:	4801      	ldr	r0, [pc, #4]	; (d58e8 <_Z19__fetch_global_Wirev+0x34>)
   d58e2:	bd38      	pop	{r3, r4, r5, pc}
   d58e4:	2003e738 	.word	0x2003e738
   d58e8:	2003e73c 	.word	0x2003e73c
   d58ec:	2003e368 	.word	0x2003e368
   d58f0:	000d54c5 	.word	0x000d54c5

000d58f4 <__aeabi_atexit>:
   d58f4:	460b      	mov	r3, r1
   d58f6:	4601      	mov	r1, r0
   d58f8:	4618      	mov	r0, r3
   d58fa:	f000 b94d 	b.w	d5b98 <__cxa_atexit>

000d58fe <_ZdlPvj>:
   d58fe:	f7fe bbcc 	b.w	d409a <_ZdlPv>

000d5902 <_ZSt25__throw_bad_function_callv>:
   d5902:	b508      	push	{r3, lr}
   d5904:	f7fe fef8 	bl	d46f8 <abort>

000d5908 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5908:	4b18      	ldr	r3, [pc, #96]	; (d596c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d590a:	681a      	ldr	r2, [r3, #0]
   d590c:	07d1      	lsls	r1, r2, #31
   d590e:	bf5c      	itt	pl
   d5910:	2201      	movpl	r2, #1
   d5912:	601a      	strpl	r2, [r3, #0]
   d5914:	4b16      	ldr	r3, [pc, #88]	; (d5970 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5916:	681a      	ldr	r2, [r3, #0]
   d5918:	07d2      	lsls	r2, r2, #31
   d591a:	bf5c      	itt	pl
   d591c:	2201      	movpl	r2, #1
   d591e:	601a      	strpl	r2, [r3, #0]
   d5920:	4b14      	ldr	r3, [pc, #80]	; (d5974 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5922:	681a      	ldr	r2, [r3, #0]
   d5924:	07d0      	lsls	r0, r2, #31
   d5926:	bf5c      	itt	pl
   d5928:	2201      	movpl	r2, #1
   d592a:	601a      	strpl	r2, [r3, #0]
   d592c:	4b12      	ldr	r3, [pc, #72]	; (d5978 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d592e:	681a      	ldr	r2, [r3, #0]
   d5930:	07d1      	lsls	r1, r2, #31
   d5932:	bf5c      	itt	pl
   d5934:	2201      	movpl	r2, #1
   d5936:	601a      	strpl	r2, [r3, #0]
   d5938:	4b10      	ldr	r3, [pc, #64]	; (d597c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d593a:	681a      	ldr	r2, [r3, #0]
   d593c:	07d2      	lsls	r2, r2, #31
   d593e:	bf5c      	itt	pl
   d5940:	2201      	movpl	r2, #1
   d5942:	601a      	strpl	r2, [r3, #0]
   d5944:	4b0e      	ldr	r3, [pc, #56]	; (d5980 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5946:	681a      	ldr	r2, [r3, #0]
   d5948:	07d0      	lsls	r0, r2, #31
   d594a:	bf5c      	itt	pl
   d594c:	2201      	movpl	r2, #1
   d594e:	601a      	strpl	r2, [r3, #0]
   d5950:	4b0c      	ldr	r3, [pc, #48]	; (d5984 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5952:	681a      	ldr	r2, [r3, #0]
   d5954:	07d1      	lsls	r1, r2, #31
   d5956:	bf5c      	itt	pl
   d5958:	2201      	movpl	r2, #1
   d595a:	601a      	strpl	r2, [r3, #0]
   d595c:	4b0a      	ldr	r3, [pc, #40]	; (d5988 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d595e:	681a      	ldr	r2, [r3, #0]
   d5960:	07d2      	lsls	r2, r2, #31
   d5962:	bf5c      	itt	pl
   d5964:	2201      	movpl	r2, #1
   d5966:	601a      	strpl	r2, [r3, #0]
   d5968:	4770      	bx	lr
   d596a:	bf00      	nop
   d596c:	2003e76c 	.word	0x2003e76c
   d5970:	2003e768 	.word	0x2003e768
   d5974:	2003e764 	.word	0x2003e764
   d5978:	2003e760 	.word	0x2003e760
   d597c:	2003e75c 	.word	0x2003e75c
   d5980:	2003e758 	.word	0x2003e758
   d5984:	2003e754 	.word	0x2003e754
   d5988:	2003e750 	.word	0x2003e750

000d598c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d598c:	4b24      	ldr	r3, [pc, #144]	; (d5a20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d598e:	681a      	ldr	r2, [r3, #0]
   d5990:	07d0      	lsls	r0, r2, #31
   d5992:	bf5c      	itt	pl
   d5994:	2201      	movpl	r2, #1
   d5996:	601a      	strpl	r2, [r3, #0]
   d5998:	4b22      	ldr	r3, [pc, #136]	; (d5a24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d599a:	681a      	ldr	r2, [r3, #0]
   d599c:	07d1      	lsls	r1, r2, #31
   d599e:	bf5c      	itt	pl
   d59a0:	2201      	movpl	r2, #1
   d59a2:	601a      	strpl	r2, [r3, #0]
   d59a4:	4b20      	ldr	r3, [pc, #128]	; (d5a28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d59a6:	681a      	ldr	r2, [r3, #0]
   d59a8:	07d2      	lsls	r2, r2, #31
   d59aa:	bf5c      	itt	pl
   d59ac:	2201      	movpl	r2, #1
   d59ae:	601a      	strpl	r2, [r3, #0]
   d59b0:	4b1e      	ldr	r3, [pc, #120]	; (d5a2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d59b2:	681a      	ldr	r2, [r3, #0]
   d59b4:	07d0      	lsls	r0, r2, #31
   d59b6:	bf5c      	itt	pl
   d59b8:	2201      	movpl	r2, #1
   d59ba:	601a      	strpl	r2, [r3, #0]
   d59bc:	4b1c      	ldr	r3, [pc, #112]	; (d5a30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d59be:	681a      	ldr	r2, [r3, #0]
   d59c0:	07d1      	lsls	r1, r2, #31
   d59c2:	bf5c      	itt	pl
   d59c4:	2201      	movpl	r2, #1
   d59c6:	601a      	strpl	r2, [r3, #0]
   d59c8:	4b1a      	ldr	r3, [pc, #104]	; (d5a34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d59ca:	681a      	ldr	r2, [r3, #0]
   d59cc:	07d2      	lsls	r2, r2, #31
   d59ce:	bf5c      	itt	pl
   d59d0:	2201      	movpl	r2, #1
   d59d2:	601a      	strpl	r2, [r3, #0]
   d59d4:	4b18      	ldr	r3, [pc, #96]	; (d5a38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d59d6:	681a      	ldr	r2, [r3, #0]
   d59d8:	07d0      	lsls	r0, r2, #31
   d59da:	bf5c      	itt	pl
   d59dc:	2201      	movpl	r2, #1
   d59de:	601a      	strpl	r2, [r3, #0]
   d59e0:	4b16      	ldr	r3, [pc, #88]	; (d5a3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d59e2:	681a      	ldr	r2, [r3, #0]
   d59e4:	07d1      	lsls	r1, r2, #31
   d59e6:	bf5c      	itt	pl
   d59e8:	2201      	movpl	r2, #1
   d59ea:	601a      	strpl	r2, [r3, #0]
   d59ec:	4b14      	ldr	r3, [pc, #80]	; (d5a40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d59ee:	681a      	ldr	r2, [r3, #0]
   d59f0:	07d2      	lsls	r2, r2, #31
   d59f2:	bf5c      	itt	pl
   d59f4:	2201      	movpl	r2, #1
   d59f6:	601a      	strpl	r2, [r3, #0]
   d59f8:	4b12      	ldr	r3, [pc, #72]	; (d5a44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d59fa:	681a      	ldr	r2, [r3, #0]
   d59fc:	07d0      	lsls	r0, r2, #31
   d59fe:	bf5c      	itt	pl
   d5a00:	2201      	movpl	r2, #1
   d5a02:	601a      	strpl	r2, [r3, #0]
   d5a04:	4b10      	ldr	r3, [pc, #64]	; (d5a48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5a06:	681a      	ldr	r2, [r3, #0]
   d5a08:	07d1      	lsls	r1, r2, #31
   d5a0a:	bf5c      	itt	pl
   d5a0c:	2201      	movpl	r2, #1
   d5a0e:	601a      	strpl	r2, [r3, #0]
   d5a10:	4b0e      	ldr	r3, [pc, #56]	; (d5a4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5a12:	681a      	ldr	r2, [r3, #0]
   d5a14:	07d2      	lsls	r2, r2, #31
   d5a16:	bf5c      	itt	pl
   d5a18:	2201      	movpl	r2, #1
   d5a1a:	601a      	strpl	r2, [r3, #0]
   d5a1c:	4770      	bx	lr
   d5a1e:	bf00      	nop
   d5a20:	2003e79c 	.word	0x2003e79c
   d5a24:	2003e798 	.word	0x2003e798
   d5a28:	2003e794 	.word	0x2003e794
   d5a2c:	2003e790 	.word	0x2003e790
   d5a30:	2003e78c 	.word	0x2003e78c
   d5a34:	2003e788 	.word	0x2003e788
   d5a38:	2003e784 	.word	0x2003e784
   d5a3c:	2003e780 	.word	0x2003e780
   d5a40:	2003e77c 	.word	0x2003e77c
   d5a44:	2003e778 	.word	0x2003e778
   d5a48:	2003e774 	.word	0x2003e774
   d5a4c:	2003e770 	.word	0x2003e770

000d5a50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5a50:	4b24      	ldr	r3, [pc, #144]	; (d5ae4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5a52:	681a      	ldr	r2, [r3, #0]
   d5a54:	07d0      	lsls	r0, r2, #31
   d5a56:	bf5c      	itt	pl
   d5a58:	2201      	movpl	r2, #1
   d5a5a:	601a      	strpl	r2, [r3, #0]
   d5a5c:	4b22      	ldr	r3, [pc, #136]	; (d5ae8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5a5e:	681a      	ldr	r2, [r3, #0]
   d5a60:	07d1      	lsls	r1, r2, #31
   d5a62:	bf5c      	itt	pl
   d5a64:	2201      	movpl	r2, #1
   d5a66:	601a      	strpl	r2, [r3, #0]
   d5a68:	4b20      	ldr	r3, [pc, #128]	; (d5aec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5a6a:	681a      	ldr	r2, [r3, #0]
   d5a6c:	07d2      	lsls	r2, r2, #31
   d5a6e:	bf5c      	itt	pl
   d5a70:	2201      	movpl	r2, #1
   d5a72:	601a      	strpl	r2, [r3, #0]
   d5a74:	4b1e      	ldr	r3, [pc, #120]	; (d5af0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5a76:	681a      	ldr	r2, [r3, #0]
   d5a78:	07d0      	lsls	r0, r2, #31
   d5a7a:	bf5c      	itt	pl
   d5a7c:	2201      	movpl	r2, #1
   d5a7e:	601a      	strpl	r2, [r3, #0]
   d5a80:	4b1c      	ldr	r3, [pc, #112]	; (d5af4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5a82:	681a      	ldr	r2, [r3, #0]
   d5a84:	07d1      	lsls	r1, r2, #31
   d5a86:	bf5c      	itt	pl
   d5a88:	2201      	movpl	r2, #1
   d5a8a:	601a      	strpl	r2, [r3, #0]
   d5a8c:	4b1a      	ldr	r3, [pc, #104]	; (d5af8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5a8e:	681a      	ldr	r2, [r3, #0]
   d5a90:	07d2      	lsls	r2, r2, #31
   d5a92:	bf5c      	itt	pl
   d5a94:	2201      	movpl	r2, #1
   d5a96:	601a      	strpl	r2, [r3, #0]
   d5a98:	4b18      	ldr	r3, [pc, #96]	; (d5afc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5a9a:	681a      	ldr	r2, [r3, #0]
   d5a9c:	07d0      	lsls	r0, r2, #31
   d5a9e:	bf5c      	itt	pl
   d5aa0:	2201      	movpl	r2, #1
   d5aa2:	601a      	strpl	r2, [r3, #0]
   d5aa4:	4b16      	ldr	r3, [pc, #88]	; (d5b00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5aa6:	681a      	ldr	r2, [r3, #0]
   d5aa8:	07d1      	lsls	r1, r2, #31
   d5aaa:	bf5c      	itt	pl
   d5aac:	2201      	movpl	r2, #1
   d5aae:	601a      	strpl	r2, [r3, #0]
   d5ab0:	4b14      	ldr	r3, [pc, #80]	; (d5b04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5ab2:	681a      	ldr	r2, [r3, #0]
   d5ab4:	07d2      	lsls	r2, r2, #31
   d5ab6:	bf5c      	itt	pl
   d5ab8:	2201      	movpl	r2, #1
   d5aba:	601a      	strpl	r2, [r3, #0]
   d5abc:	4b12      	ldr	r3, [pc, #72]	; (d5b08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5abe:	681a      	ldr	r2, [r3, #0]
   d5ac0:	07d0      	lsls	r0, r2, #31
   d5ac2:	bf5c      	itt	pl
   d5ac4:	2201      	movpl	r2, #1
   d5ac6:	601a      	strpl	r2, [r3, #0]
   d5ac8:	4b10      	ldr	r3, [pc, #64]	; (d5b0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5aca:	681a      	ldr	r2, [r3, #0]
   d5acc:	07d1      	lsls	r1, r2, #31
   d5ace:	bf5c      	itt	pl
   d5ad0:	2201      	movpl	r2, #1
   d5ad2:	601a      	strpl	r2, [r3, #0]
   d5ad4:	4b0e      	ldr	r3, [pc, #56]	; (d5b10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5ad6:	681a      	ldr	r2, [r3, #0]
   d5ad8:	07d2      	lsls	r2, r2, #31
   d5ada:	bf5c      	itt	pl
   d5adc:	2201      	movpl	r2, #1
   d5ade:	601a      	strpl	r2, [r3, #0]
   d5ae0:	4770      	bx	lr
   d5ae2:	bf00      	nop
   d5ae4:	2003e7cc 	.word	0x2003e7cc
   d5ae8:	2003e7c8 	.word	0x2003e7c8
   d5aec:	2003e7c4 	.word	0x2003e7c4
   d5af0:	2003e7c0 	.word	0x2003e7c0
   d5af4:	2003e7bc 	.word	0x2003e7bc
   d5af8:	2003e7b8 	.word	0x2003e7b8
   d5afc:	2003e7b4 	.word	0x2003e7b4
   d5b00:	2003e7b0 	.word	0x2003e7b0
   d5b04:	2003e7ac 	.word	0x2003e7ac
   d5b08:	2003e7a8 	.word	0x2003e7a8
   d5b0c:	2003e7a4 	.word	0x2003e7a4
   d5b10:	2003e7a0 	.word	0x2003e7a0

000d5b14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5b14:	4b18      	ldr	r3, [pc, #96]	; (d5b78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5b16:	681a      	ldr	r2, [r3, #0]
   d5b18:	07d1      	lsls	r1, r2, #31
   d5b1a:	bf5c      	itt	pl
   d5b1c:	2201      	movpl	r2, #1
   d5b1e:	601a      	strpl	r2, [r3, #0]
   d5b20:	4b16      	ldr	r3, [pc, #88]	; (d5b7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5b22:	681a      	ldr	r2, [r3, #0]
   d5b24:	07d2      	lsls	r2, r2, #31
   d5b26:	bf5c      	itt	pl
   d5b28:	2201      	movpl	r2, #1
   d5b2a:	601a      	strpl	r2, [r3, #0]
   d5b2c:	4b14      	ldr	r3, [pc, #80]	; (d5b80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5b2e:	681a      	ldr	r2, [r3, #0]
   d5b30:	07d0      	lsls	r0, r2, #31
   d5b32:	bf5c      	itt	pl
   d5b34:	2201      	movpl	r2, #1
   d5b36:	601a      	strpl	r2, [r3, #0]
   d5b38:	4b12      	ldr	r3, [pc, #72]	; (d5b84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5b3a:	681a      	ldr	r2, [r3, #0]
   d5b3c:	07d1      	lsls	r1, r2, #31
   d5b3e:	bf5c      	itt	pl
   d5b40:	2201      	movpl	r2, #1
   d5b42:	601a      	strpl	r2, [r3, #0]
   d5b44:	4b10      	ldr	r3, [pc, #64]	; (d5b88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5b46:	681a      	ldr	r2, [r3, #0]
   d5b48:	07d2      	lsls	r2, r2, #31
   d5b4a:	bf5c      	itt	pl
   d5b4c:	2201      	movpl	r2, #1
   d5b4e:	601a      	strpl	r2, [r3, #0]
   d5b50:	4b0e      	ldr	r3, [pc, #56]	; (d5b8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5b52:	681a      	ldr	r2, [r3, #0]
   d5b54:	07d0      	lsls	r0, r2, #31
   d5b56:	bf5c      	itt	pl
   d5b58:	2201      	movpl	r2, #1
   d5b5a:	601a      	strpl	r2, [r3, #0]
   d5b5c:	4b0c      	ldr	r3, [pc, #48]	; (d5b90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5b5e:	681a      	ldr	r2, [r3, #0]
   d5b60:	07d1      	lsls	r1, r2, #31
   d5b62:	bf5c      	itt	pl
   d5b64:	2201      	movpl	r2, #1
   d5b66:	601a      	strpl	r2, [r3, #0]
   d5b68:	4b0a      	ldr	r3, [pc, #40]	; (d5b94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5b6a:	681a      	ldr	r2, [r3, #0]
   d5b6c:	07d2      	lsls	r2, r2, #31
   d5b6e:	bf5c      	itt	pl
   d5b70:	2201      	movpl	r2, #1
   d5b72:	601a      	strpl	r2, [r3, #0]
   d5b74:	4770      	bx	lr
   d5b76:	bf00      	nop
   d5b78:	2003e7ec 	.word	0x2003e7ec
   d5b7c:	2003e7e8 	.word	0x2003e7e8
   d5b80:	2003e7e4 	.word	0x2003e7e4
   d5b84:	2003e7e0 	.word	0x2003e7e0
   d5b88:	2003e7dc 	.word	0x2003e7dc
   d5b8c:	2003e7d8 	.word	0x2003e7d8
   d5b90:	2003e7d4 	.word	0x2003e7d4
   d5b94:	2003e7d0 	.word	0x2003e7d0

000d5b98 <__cxa_atexit>:
   d5b98:	b510      	push	{r4, lr}
   d5b9a:	4c05      	ldr	r4, [pc, #20]	; (d5bb0 <__cxa_atexit+0x18>)
   d5b9c:	4613      	mov	r3, r2
   d5b9e:	b12c      	cbz	r4, d5bac <__cxa_atexit+0x14>
   d5ba0:	460a      	mov	r2, r1
   d5ba2:	4601      	mov	r1, r0
   d5ba4:	2002      	movs	r0, #2
   d5ba6:	f3af 8000 	nop.w
   d5baa:	bd10      	pop	{r4, pc}
   d5bac:	4620      	mov	r0, r4
   d5bae:	bd10      	pop	{r4, pc}
   d5bb0:	00000000 	.word	0x00000000

000d5bb4 <memcpy>:
   d5bb4:	b510      	push	{r4, lr}
   d5bb6:	1e43      	subs	r3, r0, #1
   d5bb8:	440a      	add	r2, r1
   d5bba:	4291      	cmp	r1, r2
   d5bbc:	d004      	beq.n	d5bc8 <memcpy+0x14>
   d5bbe:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5bc2:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5bc6:	e7f8      	b.n	d5bba <memcpy+0x6>
   d5bc8:	bd10      	pop	{r4, pc}

000d5bca <memset>:
   d5bca:	4402      	add	r2, r0
   d5bcc:	4603      	mov	r3, r0
   d5bce:	4293      	cmp	r3, r2
   d5bd0:	d002      	beq.n	d5bd8 <memset+0xe>
   d5bd2:	f803 1b01 	strb.w	r1, [r3], #1
   d5bd6:	e7fa      	b.n	d5bce <memset+0x4>
   d5bd8:	4770      	bx	lr
	...

000d5bdc <srand>:
   d5bdc:	b538      	push	{r3, r4, r5, lr}
   d5bde:	4b12      	ldr	r3, [pc, #72]	; (d5c28 <srand+0x4c>)
   d5be0:	681c      	ldr	r4, [r3, #0]
   d5be2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5be4:	4605      	mov	r5, r0
   d5be6:	b9d3      	cbnz	r3, d5c1e <srand+0x42>
   d5be8:	2018      	movs	r0, #24
   d5bea:	f7fe fd6d 	bl	d46c8 <malloc>
   d5bee:	f243 330e 	movw	r3, #13070	; 0x330e
   d5bf2:	63a0      	str	r0, [r4, #56]	; 0x38
   d5bf4:	8003      	strh	r3, [r0, #0]
   d5bf6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d5bfa:	8043      	strh	r3, [r0, #2]
   d5bfc:	f241 2334 	movw	r3, #4660	; 0x1234
   d5c00:	8083      	strh	r3, [r0, #4]
   d5c02:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d5c06:	80c3      	strh	r3, [r0, #6]
   d5c08:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d5c0c:	8103      	strh	r3, [r0, #8]
   d5c0e:	2305      	movs	r3, #5
   d5c10:	8143      	strh	r3, [r0, #10]
   d5c12:	230b      	movs	r3, #11
   d5c14:	8183      	strh	r3, [r0, #12]
   d5c16:	2201      	movs	r2, #1
   d5c18:	2300      	movs	r3, #0
   d5c1a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5c1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5c20:	2200      	movs	r2, #0
   d5c22:	611d      	str	r5, [r3, #16]
   d5c24:	615a      	str	r2, [r3, #20]
   d5c26:	bd38      	pop	{r3, r4, r5, pc}
   d5c28:	2003e364 	.word	0x2003e364

000d5c2c <strdup>:
   d5c2c:	4b02      	ldr	r3, [pc, #8]	; (d5c38 <strdup+0xc>)
   d5c2e:	4601      	mov	r1, r0
   d5c30:	6818      	ldr	r0, [r3, #0]
   d5c32:	f000 b803 	b.w	d5c3c <_strdup_r>
   d5c36:	bf00      	nop
   d5c38:	2003e364 	.word	0x2003e364

000d5c3c <_strdup_r>:
   d5c3c:	b570      	push	{r4, r5, r6, lr}
   d5c3e:	4606      	mov	r6, r0
   d5c40:	4608      	mov	r0, r1
   d5c42:	460c      	mov	r4, r1
   d5c44:	f000 f80d 	bl	d5c62 <strlen>
   d5c48:	1c45      	adds	r5, r0, #1
   d5c4a:	4629      	mov	r1, r5
   d5c4c:	4630      	mov	r0, r6
   d5c4e:	f7fe fd5b 	bl	d4708 <_malloc_r>
   d5c52:	4606      	mov	r6, r0
   d5c54:	b118      	cbz	r0, d5c5e <_strdup_r+0x22>
   d5c56:	462a      	mov	r2, r5
   d5c58:	4621      	mov	r1, r4
   d5c5a:	f7ff ffab 	bl	d5bb4 <memcpy>
   d5c5e:	4630      	mov	r0, r6
   d5c60:	bd70      	pop	{r4, r5, r6, pc}

000d5c62 <strlen>:
   d5c62:	4603      	mov	r3, r0
   d5c64:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5c68:	2a00      	cmp	r2, #0
   d5c6a:	d1fb      	bne.n	d5c64 <strlen+0x2>
   d5c6c:	1a18      	subs	r0, r3, r0
   d5c6e:	3801      	subs	r0, #1
   d5c70:	4770      	bx	lr

000d5c72 <link_code_end>:
	...

000d5c74 <dynalib_user>:
   d5c74:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d5c84:	0000 0000 7774 6c69 6f69 735f 736d 6300     ....twilio_sms.c
   d5c94:	6968 646c 6920 206e 6163 0072 6553 646e     hild in car.Send
   d5ca4:	6e69 2067 656d 7373 6761 2065 6562 6163     ing message beca
   d5cb4:	7375 2065 6163 2072 7574 6e72 6465 6f20     use car turned o
   d5cc4:	6666 6120 646e 6320 6968 646c 6920 2073     ff and child is 
   d5cd4:	6e69 7420 6568 6320 7261 5400 6568 7420     in the car.The t
   d5ce4:	6d65 6570 6172 7574 6572 6920 2073 6972     emperature is ri
   d5cf4:	6973 676e 7420 6f6f 6620 7361 0074 6553     sing too fast.Se
   d5d04:	646e 6e69 2067 656d 7373 6761 2065 6562     nding message be
   d5d14:	6163 7375 2065 6574 706d 7265 7461 7275     cause temperatur
   d5d24:	2065 7369 7420 6f6f 6820 746f 5300 6e65     e is too hot.Sen
   d5d34:	6964 676e 6d20 7365 6173 6567 6220 6365     ding message bec
   d5d44:	7561 6573 7420 6d65 2070 7369 6320 6972     ause temp is cri
   d5d54:	6974 6163 006c 7774 6c69 6f69 735f 736d     tical.twilio_sms
   d5d64:	635f 6972 6974 6163 006c 6f59 7275 6320     _critical.Your c
   d5d74:	6968 646c 6920 2073 6e69 7420 6568 6320     hild is in the c
   d5d84:	7261 5900 756f 2072 6863 6c69 2064 7369     ar.Your child is
   d5d94:	6920 206e 6874 2065 6163 2072 6e61 2064      in the car and 
   d5da4:	7469 6920 2073 6f74 206f 6f68 2174 4320     it is too hot! C
   d5db4:	6c61 206c 3139 2031 6669 6e20 6365 7365     all 911 if neces
   d5dc4:	6173 7972 202e 6c50 6165 6573 7320 6e65     sary. Please sen
   d5dd4:	2064 6572 7073 6e6f 2073 656d 7373 6761     d respons messag
   d5de4:	2065 666f 6120 796e 6874 6e69 2067 6e61     e of anything an
   d5df4:	2064 6f67 6720 7465 7420 6568 006d 0000     d go get them...

000d5e04 <_ZTVN5spark13EthernetClassE>:
	...
   d5e0c:	4777 000d 476d 000d 4763 000d 4759 000d     wG..mG..cG..YG..
   d5e1c:	474d 000d 4741 000d 4735 000d 472d 000d     MG..AG..5G..-G..
   d5e2c:	4723 000d 4719 000d 5715 000d               #G...G...W..

000d5e38 <_ZTV8SPIClass>:
	...
   d5e40:	4795 000d 4797 000d 6162 6475 5300 7265     .G...G..baud.Ser
   d5e50:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   d5e60:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   d5e70:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   d5e80:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   d5e90:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   d5ea0:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   d5eb0:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   d5ec0:	3130 7530 0020 205d 2500 0064 202c 2800     010u .] .%d., .(
   d5ed0:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   d5ee0:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   d5ef0:	0066 6e6c 6600 006e 6f63 6564 6400 7465     f.ln.fn.code.det
   d5f00:	6961 006c 6f6e 656e 7400 6172 6563 6900     ail.none.trace.i
   d5f10:	666e 006f 6177 6e72 6500 7272 726f 7000     nfo.warn.error.p
   d5f20:	6e61 6369 6100 6c6c 5a00 2500 302b 6433     anic.all.Z.%+03d
   d5f30:	253a 3230 0075 5925 252d 2d6d 6425 2554     :%02u.%Y-%m-%dT%
   d5f40:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   d5f50:	0065 0000                                   e...

000d5f54 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d5f5c:	4b85 000d 4b8b 000d 4bcf 000d 4b99 000d     .K...K...K...K..
   d5f6c:	4b87 000d                                   .K..

000d5f70 <_ZTV9IPAddress>:
	...
   d5f78:	511d 000d 510d 000d 510f 000d               .Q...Q...Q..

000d5f84 <_ZTV9USBSerial>:
	...
   d5f8c:	51f5 000d 5245 000d 5253 000d 48f9 000d     .Q..ER..SR...H..
   d5f9c:	5231 000d 51f7 000d 520d 000d 523f 000d     1R...Q...R..?R..
   d5fac:	5223 000d 51f1 000d                         #R...Q..

000d5fb4 <_ZTVN5spark13CellularClassE>:
	...
   d5fbc:	535f 000d 5355 000d 534b 000d 5301 000d     _S..US..KS...S..
   d5fcc:	533f 000d 5333 000d 5327 000d 531f 000d     ?S..3S..'S...S..
   d5fdc:	5315 000d 530b 000d 5715 000d               .S...S...W..

000d5fe8 <_ZTV11USARTSerial>:
	...
   d5ff0:	5399 000d 53e9 000d 53f7 000d 48f9 000d     .S...S...S...H..
   d6000:	53ad 000d 53cf 000d 53bb 000d 53e3 000d     .S...S...S...S..
   d6010:	539b 000d 539f 000d                         .S...S..

000d6018 <_ZTV7TwoWire>:
	...
   d6020:	54c5 000d 550f 000d 54e7 000d 54c7 000d     .T...U...T...T..
   d6030:	54ef 000d 54f7 000d 54ff 000d 5507 000d     .T...T...T...U..

000d6040 <_ZTVN5spark9MeshClassE>:
	...
   d6048:	55a7 000d 559d 000d 5593 000d 5589 000d     .U...U...U...U..
   d6058:	557d 000d 5571 000d 5565 000d 555d 000d     }U..qU..eU..]U..
   d6068:	5553 000d 5549 000d 5715 000d               SU..IU...W..

000d6074 <_ZTVN5spark12NetworkClassE>:
	...
   d607c:	56ad 000d 56b7 000d 56c1 000d 56cb 000d     .V...V...V...V..
   d608c:	56d5 000d 56e1 000d 56ed 000d 56f9 000d     .V...V...V...V..
   d609c:	5701 000d 570b 000d 5715 000d               .W...W...W..

000d60a8 <__sf_fake_stdin>:
	...

000d60c8 <__sf_fake_stdout>:
	...

000d60e8 <__sf_fake_stderr>:
	...
   d6108:	0043                                        C.

000d610a <link_const_variable_data_end>:
	...

000d610c <link_constructors_location>:
   d610c:	000d42d9 	.word	0x000d42d9
   d6110:	000d4781 	.word	0x000d4781
   d6114:	000d47d5 	.word	0x000d47d5
   d6118:	000d48e9 	.word	0x000d48e9
   d611c:	000d4a2d 	.word	0x000d4a2d
   d6120:	000d4a3d 	.word	0x000d4a3d
   d6124:	000d4a95 	.word	0x000d4a95
   d6128:	000d5369 	.word	0x000d5369
   d612c:	000d565d 	.word	0x000d565d
   d6130:	000d57e1 	.word	0x000d57e1
   d6134:	000d5871 	.word	0x000d5871
   d6138:	000d5909 	.word	0x000d5909
   d613c:	000d598d 	.word	0x000d598d
   d6140:	000d5a51 	.word	0x000d5a51
   d6144:	000d5b15 	.word	0x000d5b15

000d6148 <link_constructors_end>:
	...
